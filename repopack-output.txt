================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-04T16:41:28.596Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  components/
    Menu.tsx
backend/
  .git/
    hooks/
      applypatch-msg.sample
      commit-msg.sample
      fsmonitor-watchman.sample
      post-update.sample
      pre-applypatch.sample
      pre-commit.sample
      pre-merge-commit.sample
      pre-push.sample
      pre-rebase.sample
      pre-receive.sample
      prepare-commit-msg.sample
      push-to-checkout.sample
      update.sample
    info/
      exclude
      refs
    logs/
      refs/
        heads/
          master
        remotes/
          origin/
            master
      HEAD
    objects/
      info/
        packs
    refs/
      remotes/
        origin/
          master
    COMMIT_EDITMSG
    config
    description
    HEAD
    packed-refs
  .github/
    workflows/
      security.yml
  config/
    config.json
    database.js
  migrations/
    helpers/
      migrationHelpers.js
    .eslintrc.js
    01_create_all_tables.js
    20240818161348-add-location-menu-override.js
    20240818161349-add-location-tax-config.js
    20240818161350-add-loyalty-challenge.js
    20240818161351-add-loyalty-config.js
    20240818161352-add-loyalty-integration.js
    20240828024349-update-role-and-template-associations.js
  scripts/
    create-client.js
    docker-compose.yml
  seeders/
    .eslintrc.js
    02-create-clients.js
    03-create-roles.js
    04-create-super-admin.js
    05-create-demo-enterprise.js
    20230101000000-demo-data.js
  src/
    adapters/
      pos/
        RevelPOSAdapter.js
        ToastPOSAdapter.js
    config/
      config.json
      database.js
      redis.js
    controllers/
      abTestController.js
      abTestController.ts
      abTestResultController.js
      adminController.js
      analyticsController.js
      analyticsController.ts
      assetController.js
      auditLogController.js
      authController.js
      brandingController.js
      brandingProfileController.js
      campaignResultController.js
      campaignStepController.js
      categoryController.js
      cateringAdminController.js
      cateringController.js
      cateringMenuController.js
      cateringMenuItemController.js
      cateringOrderAssignmentsController.js
      cateringOrderController.js
      cateringOrderCustomizationController.js
      cateringOrderFeesController.js
      cateringOrderItemController.js
      cateringOrderLocationController.js
      cateringOrderModifierController.js
      cateringSettingsController.js
      checkoutController.js
      clientBrandingController.js
      clientController.js
      clientLocationsController.js
      clientPreferencesController.js
      clientProfileController.js
      clientSettingsController.js
      commissaryKitchenController.js
      commissaryLocationController.js
      corePosProfileController.js
      coreposProfilesController.js
      dashboardController.js
      dataWallController.js
      deliveryDriverController.js
      discountController.js
      discountItemController.js
      discountsController.js
      driverLocationsController.js
      dropoffScheduleController.js
      dropOffSpotController.js
      featureManagementController.js
      globalMenuController.js
      globalSettingController.js
      guestController.js
      guestDiscountsController.js
      guestLoyaltyProgramController.js
      guestProfileController.js
      guestRewardsController.js
      houseAccountController.js
      houseAccountLocationsController.js
      houseAccountUserController.js
      inventoryController.js
      invoiceController.js
      itemModifierController.js
      itemReviewController.js
      locationCard.js
      locationController.js
      locationController.ts
      locationMenuGroupController.js
      locationPosProfileController.js
      locationService.js
      locationTaxConfigController.js
      loyaltyChallengeController.js
      loyaltyController.js
      loyaltyWalletController.js
      marketingController.js
      menuController.js
      menuItemController.js
      menuService.js
      notificationController.js
      orderController.js
      orderHistoryController.js
      orderProviderController.js
      paymentController.js
      permissionController.js
      posAlertController.js
      posController.js
      PosController.js
      posIntegrationController.js
      posIntegrationErrorLogController.js
      posIntegrationMappingController.js
      posIntegrationSettingsController.js
      posProfileController.js
      posSettingsController.js
      posSyncController.js
      posSyncService.js
      providerController.js
      qrCodeController.js
      refundController.js
      reportController.js
      reviewController.js
      rewardController.js
      roleController.js
      roleTemplateAssignmentsController.js
      roleTemplateController.js
      serviceFeeController.js
      superAdminController.js
      tabletController.js
      taxController.js
      tipController.js
      trackingPixelController.js
      translatorController.js
      twoFactorController.js
      userController.js
      walletController.js
    cron/
      subscriptionCron.js
    middleware/
      auditLogger.js
      auth.js
      authorize.js
      brandingValidationMiddleware.js
      cache.js
      errorHandler.js
      logger.js
      permissionsMiddleware.js
      pixelMiddleware.js
      posProfileMiddleware.js
      rateLimiter.js
      sanitizeMiddleware.js
      security.js
      subdomainMiddleware.js
      subdomainRouter.js
      validate.js
    migrations/
      01_create_all_tables.js
      20240818161348-add-location-menu-override.js
      20240818161349-add-location-tax-config.js
      20240818161350-add-loyalty-challenge.js
      20240818161351-add-loyalty-config.js
      20240818161352-add-loyalty-integration.js
      20240821000100-add-cooldown-fields.js
      20240821000100-seed-sample-loyalty-and-discounts.js
      20240828024349-update-role-and-template-associations.js
      20240829024230-create-campaign.js
      YYYYMMDDHHMMSS-add-default-prep-time-to-locations.js
      YYYYMMDDHHMMSS-add-doordash-marketplace-fields.js
      YYYYMMDDHHMMSS-add-inventory-settings-to-locations.js
      YYYYMMDDHHMMSS-add-prep-time-and-inventory-offset-to-menu-items.js
      YYYYMMDDHHMMSS-add-scheduled-order-fields.js
      YYYYMMDDHHMMSS-create-client-branding.js
      YYYYMMDDHHMMSS-create-client-features.js
      YYYYMMDDHHMMSS-create-location-profile.js
      YYYYMMDDHHMMSS-create-location.js
      YYYYMMDDHHMMSS-create-order-provider.js
      YYYYMMDDHHMMSS-create-review.js
      YYYYMMDDHHMMSS-create-scheduled-order.js
      YYYYMMDDHHMMSS-create-user.js
      YYYYMMDDHHMMSS-update-pos-settings.js
    models/
      ABTest.js
      ABTestMetric.js
      ABTestResult.js
      ABTestVariant.js
      Analytics.js
      Asset.js
      AuditLog.js
      BaseModel.js
      Branding.js
      BrandingProfile.js
      Campaign.js
      CampaignResult.js
      CampaignStep.js
      Catering.js
      CateringAdmin.js
      CateringMenu.js
      CateringMenuItem.js
      CateringOrder.js
      CateringOrderAssignments.js
      CateringOrderCustomization.js
      CateringOrderFees.js
      CateringOrderItem.js
      CateringOrderLocation.js
      CateringOrderModifier.js
      CateringSettings.js
      Challenge.js
      checkModelExports.js
      checkModels.js
      Client.js
      ClientBranding.js
      ClientFeatures.js
      ClientPreferences.js
      ClientProfile.js
      ClientSettings.js
      CommissaryKitchen.js
      CommissaryLocation.js
      CorePOSProfile.js
      DataWall.js
      DeliveryDriver.js
      Discount.js
      DiscountItem.js
      DriverLocations.js
      DropOffSchedule.js
      DropOffSpot.js
      FeatureManagement.js
      GlobalMenu.js
      GlobalSetting.js
      Guest.js
      GuestDiscounts.js
      GuestLoyaltyProgram.js
      GuestProfile.js
      GuestRewards.js
      HouseAccount.js
      HouseAccountLocations.js
      HouseAccountUser.js
      index.js
      Inventory.js
      Invoice.js
      Item.js
      ItemModifier.js
      ItemReview.js
      Location.js
      LocationHours.js
      LocationMenu.js
      LocationMenuGroup.js
      LocationMenuOverride.js
      LocationPOSProfile.js
      LocationProfile.js
      LocationTaxConfig.js
      Logger.js
      Logger.js.save
      Loyalty.js
      LoyaltyAnalytics.js
      LoyaltyChallenge.js
      LoyaltyChallengeProgress.js
      LoyaltyChallengeRewards.js
      LoyaltyConfig.js
      LoyaltyIntegration.js
      LoyaltyProgram.js
      LoyaltyReward.js
      LoyaltySubscription.js
      LoyaltyTier.js
      LoyaltyTransaction.js
      MarketingCampaign.js
      MarketingPerformance.js
      MarketingReport.js
      Menu.js
      MenuAnalytics.js
      MenuBuilderSettings.js
      MenuGroup.js
      MenuItem.js
      MenuItemAnalytics.js
      MenuItemModifier.js
      MenuItemSizeModifier.js
      MenuSyncHistory.js
      MiniSite.js
      MiniSiteAnalytics.js
      ModelName.js
      Modifier.js
      Order.js
      OrderHistory.js
      OrderItem.js
      OrderProvider.js
      PaymentProfile.js
      Permission.js
      PosIntegration.js
      PosIntegrationErrorLog.js
      PosIntegrationMapping.js
      PosIntegrationSettings.js
      PosProfile.js
      PosProfileConfig.js
      PosSettings.js
      PricingOverride.js
      PricingUplift.js
      Product.js
      Provider.js
      ProviderIntegration.js
      ProviderPricing.js
      ProviderProfile.js
      Refund.js
      Report.js
      Review.js
      Reward.js
      RewardSchedule.js
      Role.js
      RolePermission.js
      RolePermissions.js
      RoleTemplate.js
      RoleTemplateAssignments.js
      SalesAnalytics.js
      SalesReport.js
      ScheduledOrder.js
      ServiceFee.js
      SizeModifier.js
      Staff.js
      StaffRole.js
      StaffSchedule.js
      Subscription.js
      SubscriptionPlan.js
      Tag.js
      Tax.js
      TaxRate.js
      Tenant.js
      TimeSlot.js
      Tip.js
      TipConfiguration.js
      TrackingPixel.js
      Transaction.js
      User.js
      UserRole.js
      Wallet.js
      WalletDrop.js
    posConnector/
      posConfigs.js
      posConnector.js
      posConnectorService.js
      posProfiles.js
    routes/
      abTestResultRoutes.js
      abTestRoutes.js
      adminRoutes.js
      analytics.js
      analyticsRoutes.js
      assetRoutes.js
      auth.js
      authRoutes.js
      brandingProfileRoutes.js
      brandingRoutes.js
      campaignResultRoutes.js
      campaignStepRoutes.js
      categoryRoutes.js
      cateringAdminRoutes.js
      cateringMenuItemRoutes.js
      cateringMenuRoutes.js
      cateringOrderAssignmentsRoutes.js
      cateringOrderCustomizationRoutes.js
      cateringOrderFeesRoutes.js
      cateringOrderItemRoutes.js
      cateringOrderLocationRoutes.js
      cateringOrderModifierRoutes.js
      cateringOrderRoutes.js
      cateringRoutes.js
      cateringSettingsRoutes.js
      checkoutRoutes.js
      clientLocationsRoutes.js
      clientRoutes.js
      clientSettingsRoutes.js
      commissaryKitchenRoutes.js
      commissaryLocationRoutes.js
      corePosProfileRoutes.js
      dashboardRoutes.js
      dataWallRoutes.js
      deliveryDriverRoutes.js
      discountItemRoutes.js
      discountRoutes.js
      discountsRoutes.js
      driverLocationsRoutes.js
      dropoffScheduleRoutes.js
      featureManagementRoutes.js
      globalMenuRoutes.js
      globalSettingRoutes.js
      guestDiscountsRoutes.js
      guestLoyaltyProgramRoutes.js
      guestProfileRoutes.js
      guestRewardsRoutes.js
      guestRoutes.js
      health.js
      houseAccountLocationsRoutes.js
      houseAccountRoutes.js
      houseAccountUserRoutes.js
      imageUploadRoutes.js
      index.js
      inventoryRoutes.js
      invoiceRoutes.js
      itemModifierRoutes.js
      itemReviewRoutes.js
      itemRoutes.js
      LocationCard.js
      locationHoursRoutes.js
      locationMenuGroupRoutes.js
      locationMenuOverrideRoutes.js
      locationPosProfileRoutes.js
      locationRoutes.js
      locations.js
      LocationSelectionPage.js
      locationTaxConfigRoutes.js
      loyaltyRoutes.js
      loyaltyWalletRoutes.js
      menuGroupRoutes.js
      menuItemRoutes.js
      menuRoutes.js
      modifierRoutes.js
      orderHistoryRoutes.js
      orderRoutes.js
      orders.js
      paymentRoutes.js
      posIntegrationMappingRoutes.js
      posIntegrationRoutes.js
      posIntegrationSettingsRoutes.js
      posRoutes.js
      posSyncRoutes.js
      pricingUtils.js
      providerIntegrationRoutes.js
      ProviderPricing.js
      providerPricingRoutes.js
      providerRoutes.js
      refundRoutes.js
      reportRoutes.js
      reviewRoutes.js
      rewardRoutes.js
      roleRoutes.js
      roleTemplateAssignmentsRoutes.js
      secureRoutes.js
      serviceFeeRoutes.js
      tabletRoutes.js
      tailwind.css
      taxRoutes.js
      throttleSettingsRoutes.js
      tipRoutes.js
      toastRoutes.js
      trackingPixelRoutes.js
      translatorRoutes.js
      twoFactorRoutes.js
      userRoutes.js
      walletRoutes.js
    seeders/
      enterpriseClientSeeder.js
      YYYYMMDDHHMMSS-seed-enterprise-client.js
    services/
      integrations/
        basePosService.js
        brinkService.js
        revelService.js
        squareService.js
        toastService.js
      abTestMetricsService.js
      abTestService.js
      adminService.js
      analyticsService.js
      analyticsService.Js
      auditLogService.js
      authService.js
      brandingService.js
      campaignResultService.js
      cartService.js
      categoryService.js
      cateringOrderService.js
      cateringService.js
      checkoutService.js
      clientBrandingService.js
      clientService.js
      commissaryKitchenService.js
      corePosProfileService.js
      currencyService.js
      dashboardService.js
      deliveryDriverService.js
      discountService.js
      DiscountService.js
      featureManagementService.js
      GlobalSettingsService.js
      guestService.js
      houseAccountService.js
      imageService.js
      integrationService.js
      inventoryService.js
      inventorySyncService.js
      invoiceService.js
      InvoiceService.js
      locationService.js
      logger.js
      loyaltyService.js
      menuItemService.js
      menuService.js
      menuSyncEnhancements.js
      notificationService.js
      orderPrepService.js
      orderProviderService.js
      orderService.js
      orderThrottleService.js
      paymentService.js
      permissionService.js
      posAlertService.js
      posIntegrationService.js
      posProfileService.js
      posService.js
      posSettingsService.js
      posSyncService.js
      pricingUtils.js
      providerIntegrationService.js
      providerService.js
      reportingService.js
      reportService.js
      reviewService.js
      roleService.js
      s3Service.js
      scheduledOrderService.js
      schedulingService.js
      serviceFeeService.js
      subscriptionService.js
      syncEngine.js
      syncService.js
      tabletService.js
      taxService.js
      toastService.js
      trackingPixelService.js
      translatorService.js
      twoFactorService.js
      userService.js
      walletDropService.js
      walletService.js
    ssl/
      server.cert
    tests/
      location.test.js
    translator/
      providerConfigs.js
      translatorService.js
    types/
      dto/
        user.js
      enums.js
    utils/
      cache.js
      dateUtils.js
      discountUtils.js
      emojiUtils.js
      errorHandler.js
      errors.js
      exportUtils.js
      invoiceUtils.js
      locationUtils.js
      logger.js
      loyaltyUtils.js
      menuSyncScheduler.js
      notificationService.js
      orderProviderIntegration.js
      orderScheduler.js
      pricingUtils.js
      readyTimeUtils.js
      scheduledOrderCron.js
      timezoneUtils.js
      translationEngine.js
    validators/
      clientValidator.js
    .env
    app.js
    cronJobs.js
    HouseAccountUser.js
    logger.js
    OrderThrottleService.js
    seedDatabase.js
    seedGuests.js
    seedRoles.js
    server.js
    socket.js
    websocket.js
  ssl/
    server.cert
  .babelrc
  .dockerignore
  .env
  .eslintrc.js
  .sequelizerc
  checkMigrations.js
  collect-seed-errors.js
  config.json
  convert_to_js.sh
  correctmodel1.js
  correctmodelname.js
  docker-compose.yml
  docker-entrypoint.sh
  Dockerfile
  Dockerfile.migrate
  drop_all_tables.sql
  eslint.config.mjs
  jsconfig.json
  package-lock.json
  package.json
  removeExtraBaseModels.js
  route-check.js
  search_role_template_assignments.sh
  seed-errors.json
  ts_to_js_converter.py
  updateModels.js
frontend/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    api/
      abTestApi.ts
      apiClient.ts
      authApi.ts
      axios.ts
      axiosInstance.ts
      brandingApi.ts
      cateringOrderApi.ts
      challengeApi.ts
      clientApi.ts
      dashboardApi.ts
      discountApi.ts
      guestApi.ts
      inventoryApi.ts
      locationApi.ts
      loyaltyApi.ts
      loyaltyChallengeApi.ts
      menuApi.ts
      metricsApi.ts
      orderApi.ts
      posIntegrationApi.ts
      posSettingsApi.ts
      revenueApi.ts
      reviewApi.ts
      serviceFeeApi.ts
      settingsApi.ts
      walletApi.ts
      walletDropApi.ts
    components/
      admin/
        AdminPanel.tsx
        BrandingManagement.css
        ClientBrandingManager.tsx
        ClientBuilderWizard.tsx
        DoordashMarketplaceSettings.tsx
        DoordashSSIOSettings.tsx
        ExecutiveDashboard.tsx
        ItemBuilder.css
        LocationBuilder.tsx
        LocationExceptions.tsx
        LocationManager.tsx
        LocationSettings.tsx
        MenuBuilder.tsx
        MenuManager.tsx
        OrderManager.tsx
        OrderProvider.tsx
        POSSettingsForm.tsx
        ReviewManager.tsx
        RoleManagement.tsx
        SettingsManager.tsx
        UserManager.tsx
      guest/
        Checkout.js
        ItemBuilder.css
        ItemReviews.tsx
        Menu.tsx
        MenuItem.tsx
        PaymentForm.js
        SubmitReview.tsx
      layout/
        Footer.tsx
        Navbar.tsx
      tablet/
        TabletOrderManager.tsx
      ABTestManager.tsx
      AnalyticsOverview.tsx
      AuditLogViewer.tsx
      BrandingSettings.tsx
      ChallengeManager.tsx
      ClientAdminHub.tsx
      ClientBrandingProvider.tsx
      CorePOSProfileManager.tsx
      CustomerMetricsDisplay.tsx
      DatePickerComponent.tsx
      DetailedInventoryView.tsx
      DetailedLocationView.tsx
      DiscountApplier.tsx
      DiscountBuilder.tsx
      DiscountManager.tsx
      DiscountSelector.tsx
      DropOffLocationManager.tsx
      ErrorBoundary.tsx
      errorHandler.ts
      ExecutiveDashboard.tsx
      ExportData.tsx
      GuestProfile.tsx
      Home.tsx
      InventoryAlerts.tsx
      Layout.tsx
      LazyBarChart.tsx
      LazyLineChart.tsx
      LazyLocationComparisonChart.tsx
      LoadingSpinner.tsx
      LocationBuilder.tsx
      LocationCard.tsx
      LocationList.tsx
      LocationManager.tsx
      LocationMap.tsx
      LocationSelector.tsx
      Login.tsx
      LoginForm.tsx
      LoginModal.tsx
      LoyaltyChallengeManager.tsx
      LoyaltyChallengeProgress.tsx
      LoyaltyRewards.tsx
      LoyaltyRewardSelector.tsx
      LoyaltyTiers.tsx
      MarketingCampaigns.tsx
      MarketingDashboard.tsx
      MenuBuilder.tsx
      MenuGroupComponent.tsx
      MenuItemCard.tsx
      MenuItemComponent.tsx
      MenuItemDisplay.tsx
      MenuItemModal.tsx
      MultiLocationMenuManager.tsx
      OrderDashboard.tsx
      OrderManagement.tsx
      Orders.tsx
      POSAlerts.tsx
      POSDiscountSync.tsx
      POSIntegrationSelector.tsx
      PrivateRoute.tsx
      ProtectedRoute.tsx
      ProviderList.tsx
      RealtimeMetricsTicker.tsx
      RevenueChart.tsx
      RoleManagement.tsx
      SalesByCategoryChart.tsx
      ServiceFeeBuilder.tsx
      ServiceFeeManager.tsx
      StaffScheduler.tsx
      ThemeProvider.tsx
      TopSellingItemsChart.tsx
      WalletDrop.tsx
    context/
      AuthContext.tsx
      CartContext.tsx
      ClientContext.tsx
      SocketContext.tsx
    features/
      menuSlice.ts
      ordersSlice.ts
      rolesSlice.ts
    hooks/
      useAuth.ts
      useClientBranding.ts
      useLazyImage.ts
      useQuery.ts
      useQueryWithCache.ts
      useSelectedLocation.ts
    pages/
      ABTestManagement.tsx
      AdminDashboard.tsx
      AdminDiscounts.tsx
      AdminLocationManagement.tsx
      AdminLoyaltyManagement.tsx
      AdminLoyaltyRewards.tsx
      AdminMenuManagement.tsx
      AdminPanel.tsx
      AdminWalletManagement.tsx
      BrandingManagement.tsx
      BrandingSettings.tsx
      BusinessAdminDashboard.tsx
      CateringMenuItems.tsx
      CateringMenus.tsx
      CateringOrderAssignments.tsx
      CateringOrders.tsx
      CateringOrdersAdmin.tsx
      CheckoutPage.tsx
      ClientLocationsPage.tsx
      ClientSettings.tsx
      Dashboard.tsx
      GlobalAdminDashboard.tsx
      GlobalAdminPanel.tsx
      GuestLandingPage.tsx
      GuestMenuPage.tsx
      GuestProfile.tsx
      GuestProfilePage.tsx
      HomePage.tsx
      Inventory.tsx
      InventoryManagement.tsx
      LocationManagement.tsx
      Login.tsx
      LoyaltyAdminPage.tsx
      LoyaltyManagement.tsx
      Menu.tsx
      MenuBuilder.tsx
      MenuManagementAdmin.tsx
      MenuPage.tsx
      OrderConfirmation.tsx
      OrderPage.tsx
      OrderScheduling.tsx
      PosProfilePage.tsx
      PosSettingsPage.tsx
      ProfilePage.tsx
      Register.tsx
      ReportingDashboard.tsx
      UserManagement.tsx
      Wallet.tsx
    redux/
      slices/
        abTestSlice.ts
        auditLogSlice.ts
        authSlice.ts
        brandingSlice.ts
        cartSlice.ts
        cateringOrderSlice.ts
        challengeSlice.ts
        clientBrandingSlice.ts
        clientConfigSlice.ts
        clientSlice.ts
        dashboardSlice.ts
        discountSlice.ts
        guestSlice.ts
        inventorySlice.ts
        LocationCard.tsx
        LocationSelectionPage.tsx
        locationSlice.ts
        loyaltySlice.ts
        menuItemsSlice.ts
        menuSlice.ts
        orderSlice.ts
        posIntegrationSlice.ts
        posProfileSlice.ts
        posSettingsSlice.ts
        providerSlice.ts
        realtimeMetricsSlice.ts
        revenueSlice.ts
        reviewSlice.ts
        roleSlice.ts
        rootReducer.ts
        salesReportSlice.ts
        serviceFeeSlice.ts
        sessionSlice.ts
        settingsSlice.ts
        tailwind.css
        types.ts
        userSlice.ts
        walletSlice.ts
      rootReducer.ts
      store.ts
    services/
      abTestService.ts
      analyticsService.ts
      api.ts
      brandingService.ts
      cateringOrderService.ts
      cateringService.ts
      clientBrandingService.ts
      clientConfigService.ts
      clientService.ts
      corePOSProfileService.ts
      dashboardService.ts
      guestService.ts
      inventoryService.ts
      locationService.ts
      loyaltyService.ts
      menuItemService.ts
      menuService.ts
      posIntegrationService.ts
      posProfileService.ts
      posSettingService.ts
      providerService.ts
      reviewService.ts
      userService.ts
      walletService.ts
    store/
      clientSlice.ts
      discountSlice.ts
      index.ts
      locationSlice.ts
      menuSlice.ts
    styles/
      tailwind.css
    types/
      abTestTypes.ts
      analyticsTypes.ts
      authTypes.ts
      cateringOrderTypes.ts
      cateringTypes.ts
      challengeTypes.ts
      clientTypes.ts
      dashboardTypes.ts
      dateTypes.ts
      discountTypes.ts
      guestTypes.ts
      index.ts
      inventoryTypes.ts
      locationTypes.ts
      loyaltyTypes.ts
      menuTypes.ts
      orderTypes.ts
      paginationTypes.ts
      posIntegrationTypes.ts
      posSettingsTypes.ts
      posTypes.ts
      providerTypes.ts
      revenueTypes.ts
      reviewTypes.ts
      roleTypes.ts
      serviceFeeTypes.ts
      settingsTypes.ts
      tenantTypes.ts
      userTypes.ts
      walletTypes.ts
    utils/
      abTestUtils.ts
      auth.ts
      errorHandler.js
      errorHandler.ts
      exportUtils.ts
      logger.ts
      socket.ts
      subdomain.ts
      themeUtils.ts
    App.css
    App.js
    App.tsx
    ClientContext.tsx
    component-types.txt
    defined-types.txt
    env.d.ts
    index.css
    index.tsx
    logo.svg
    missing-types.txt
    reducers.ts
    reportWebVitals.ts
    routes.tsx
    serviceWorker.ts
    serviceWorkerRegistration.ts
    setupProxy.js
    theme.ts
    types.ts
  ssl/
    server.cert
  .dockerignore
  .env
  .eslintignore
  .eslintrc.js
  .gitignore
  .prettierrc
  Dockerfile
  nginx.conf
  package-lock.json
  package.json
  postcss.config.js
  README.md
  scan-types.ts
  tailwind.config.js
  tsconfig.json
  type-references.txt
tablet-app/
  src/
    components/
      TabletOrderManager.tsx
    screens/
      LoginScreen.tsx
    services/
      authService.ts
    utils/
      errorHandler.ts
      socket.ts
  App.tsx
.dockerignore
.gitignore
docker-compose.yml
Dockerfile
nginx.conf
package.json
schema.sql
seedData.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/components/Menu.tsx
================


================
File: backend/.git/hooks/applypatch-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================
File: backend/.git/hooks/commit-msg.sample
================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================
File: backend/.git/hooks/fsmonitor-watchman.sample
================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================
File: backend/.git/hooks/post-update.sample
================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================
File: backend/.git/hooks/pre-applypatch.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================
File: backend/.git/hooks/pre-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================
File: backend/.git/hooks/pre-merge-commit.sample
================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================
File: backend/.git/hooks/pre-push.sample
================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================
File: backend/.git/hooks/pre-rebase.sample
================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================
File: backend/.git/hooks/pre-receive.sample
================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================
File: backend/.git/hooks/prepare-commit-msg.sample
================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================
File: backend/.git/hooks/push-to-checkout.sample
================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================
File: backend/.git/hooks/update.sample
================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================
File: backend/.git/info/exclude
================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================
File: backend/.git/info/refs
================
d57e7cbd06a26614618d178afb79accaaf19bffd	refs/heads/master

================
File: backend/.git/logs/refs/heads/master
================
0000000000000000000000000000000000000000 d57e7cbd06a26614618d178afb79accaaf19bffd bma342 <bryce.aspinwall@gmail.com> 1723925787 +0000	commit (initial): Initial commit with backend setup, services, and cron jobs

================
File: backend/.git/logs/refs/remotes/origin/master
================
0000000000000000000000000000000000000000 d57e7cbd06a26614618d178afb79accaaf19bffd bma342 <bryce.aspinwall@gmail.com> 1723925901 +0000	update by push

================
File: backend/.git/logs/HEAD
================
0000000000000000000000000000000000000000 d57e7cbd06a26614618d178afb79accaaf19bffd bma342 <bryce.aspinwall@gmail.com> 1723925787 +0000	commit (initial): Initial commit with backend setup, services, and cron jobs

================
File: backend/.git/objects/info/packs
================
P pack-fab9dc6b6a8d72563c77c80153605fc8c6b54bf4.pack

================
File: backend/.git/refs/remotes/origin/master
================
d57e7cbd06a26614618d178afb79accaaf19bffd

================
File: backend/.git/COMMIT_EDITMSG
================
Initial commit with backend setup, services, and cron jobs

================
File: backend/.git/config
================
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = git@github.com:bma342/pos-system.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master

================
File: backend/.git/description
================
Unnamed repository; edit this file 'description' to name the repository.

================
File: backend/.git/HEAD
================
ref: refs/heads/master

================
File: backend/.git/packed-refs
================
# pack-refs with: peeled fully-peeled sorted 
d57e7cbd06a26614618d178afb79accaaf19bffd refs/heads/master

================
File: backend/.github/workflows/security.yml
================
name: Security Scanning

on:
  push:
    branches:
      - main
      - develop

jobs:
  owasp-zap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run OWASP ZAP Baseline Scan
        run: docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://localhost:5000 -r zap-report.html

================
File: backend/config/config.json
================
{
  "development": {
    "username": "bryce",
    "password": "1234",
    "database": "pos",
    "host": "db",
    "dialect": "postgres"
  },
  "test": {
    "username": "bryce",
    "password": "1234",
    "database": "pos_test",
    "host": "db",
    "dialect": "postgres"
  },
  "production": {
    "use_env_variable": "DATABASE_URL",
    "dialect": "postgres",
    "dialectOptions": {
      "ssl": {
        "require": true,
        "rejectUnauthorized": false
      }
    }
  }
}

================
File: backend/config/database.js
================
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize(
  process.env.DB_NAME || 'pos',
  process.env.DB_USER || 'bryce',
  process.env.DB_PASSWORD || '1234',
  {
    host: process.env.DB_HOST || 'db',
    dialect: 'postgres',
  }
);

module.exports = sequelize;

================
File: backend/migrations/helpers/migrationHelpers.js
================
const { QueryTypes } = require('sequelize');

/**
 * Check if a table exists.
 * @param {object} queryInterface - The Sequelize queryInterface object.
 * @param {string} tableName - The name of the table.
 * @returns {Promise<boolean>} - True if the table exists, false otherwise.
 */
async function tableExists(queryInterface, tableName) {
  try {
    const tables = await queryInterface.sequelize.query(
      `SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';`,
      { type: QueryTypes.SELECT }
    );
    return tables.some(table => table.table_name === tableName);
  } catch (error) {
    console.error(`Error checking if table ${tableName} exists:`, error);
    return false;
  }
}

/**
 * Check if a column exists in a table.
 * @param {object} queryInterface - The Sequelize queryInterface object.
 * @param {string} tableName - The name of the table.
 * @param {string} columnName - The name of the column.
 * @returns {Promise<boolean>} - True if the column exists, false otherwise.
 */
async function columnExists(queryInterface, tableName, columnName) {
  try {
    const tableDescription = await queryInterface.describeTable(tableName);
    return !!tableDescription[columnName];
  } catch (error) {
    console.error(`Error checking if column ${columnName} exists in table ${tableName}:`, error);
    return false;
  }
}

/**
 * Check if an index exists in a table.
 * @param {object} queryInterface - The Sequelize queryInterface object.
 * @param {string} tableName - The name of the table.
 * @param {string} indexName - The name of the index.
 * @returns {Promise<boolean>} - True if the index exists, false otherwise.
 */
async function indexExists(queryInterface, tableName, indexName) {
  try {
    const indexes = await queryInterface.showIndex(tableName);
    return indexes.some(index => index.name === indexName);
  } catch (error) {
    console.error(`Error checking if index ${indexName} exists in table ${tableName}:`, error);
    return false;
  }
}

module.exports = {
  tableExists,
  columnExists,
  indexExists
};

================
File: backend/migrations/.eslintrc.js
================
module.exports = {
  rules: {
    'no-unused-vars': ['error', { argsIgnorePattern: '^(queryInterface|Sequelize)$' }],
  },
};

================
File: backend/migrations/01_create_all_tables.js
================
'use strict';

const { tableExists } = require('./helpers/migrationHelpers');

module.exports = {
  up: async (queryInterface, Sequelize) => {
    // Clients table
    if (!(await tableExists(queryInterface, 'Clients'))) {
      await queryInterface.createTable('Clients', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        subdomain: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        features: {
          type: Sequelize.JSON,
          allowNull: true,
        },
        active: {
          type: Sequelize.BOOLEAN,
          defaultValue: true,
        },
        settings: {
          type: Sequelize.JSON,
          defaultValue: {},
        },
        brandingOptions: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        clientSettings: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        email: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Clients table created');
    } else {
      console.log('Clients table already exists');
    }

    // Locations table
    if (!(await tableExists(queryInterface, 'Locations'))) {
      await queryInterface.createTable('Locations', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        address: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        city: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        state: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        zipCode: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        country: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        isOpen: {
          type: Sequelize.BOOLEAN,
          defaultValue: true,
        },
        diningOptions: {
          type: Sequelize.ARRAY(Sequelize.STRING),
          allowNull: true,
        },
        latitude: {
          type: Sequelize.FLOAT,
          allowNull: true,
        },
        longitude: {
          type: Sequelize.FLOAT,
          allowNull: true,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Locations table created');
    } else {
      console.log('Locations table already exists');
    }
    // Roles table
    if (!(await tableExists(queryInterface, 'Roles'))) {
      await queryInterface.createTable('Roles', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        level: {
          type: Sequelize.INTEGER,
          allowNull: false,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: true,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Roles table created');
    } else {
      console.log('Roles table already exists');
    }

    // Users table
    if (!(await tableExists(queryInterface, 'Users'))) {
      await queryInterface.createTable('Users', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        username: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        email: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        password: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        roleId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Roles',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        firstName: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        lastName: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        active: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Users table created');
    } else {
      console.log('Users table already exists');
    }

    // PosProfiles table
    if (!(await tableExists(queryInterface, 'PosProfiles'))) {
      await queryInterface.createTable('PosProfiles', {
        id: {
          type: Sequelize.INTEGER,
          autoIncrement: true,
          primaryKey: true,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        provider: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        posApiKey: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        apiBaseUrl: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        clientSecret: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        contentType: {
          type: Sequelize.STRING,
          allowNull: true,
          defaultValue: 'application/json',
        },
        roundingOption: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        testProfile: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        lastSyncedAt: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        syncFrequency: {
          type: Sequelize.INTEGER,
          allowNull: true,
          defaultValue: 24,
        },
        createdAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('PosProfiles table created');
    } else {
      console.log('PosProfiles table already exists');
    }
    // Menus table
    if (!(await tableExists(queryInterface, 'Menus'))) {
      await queryInterface.createTable('Menus', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        locationId: {
          type: Sequelize.INTEGER,
          allowNull: true,
          references: {
            model: 'Locations',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        startDate: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        endDate: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        menuType: {
          type: Sequelize.STRING,
          allowNull: false,
          defaultValue: 'regular',
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Menus table created');
    } else {
      console.log('Menus table already exists');
    }

    // MenuGroups table
    if (!(await tableExists(queryInterface, 'MenuGroups'))) {
      await queryInterface.createTable('MenuGroups', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        menuId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Menus',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        displayOrder: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        startTime: {
          type: Sequelize.TIME,
          allowNull: true,
        },
        endTime: {
          type: Sequelize.TIME,
          allowNull: true,
        },
        daysAvailable: {
          type: Sequelize.ARRAY(Sequelize.STRING),
          allowNull: true,
        },
        image: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('MenuGroups table created');
    } else {
      console.log('MenuGroups table already exists');
    }

    // MenuItems table
    if (!(await tableExists(queryInterface, 'MenuItems'))) {
      await queryInterface.createTable('MenuItems', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        menuGroupId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'MenuGroups',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        basePrice: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        pointsPrice: {
          type: Sequelize.INTEGER,
          allowNull: true,
        },
        posItemId: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        imageUrl: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        displayOrder: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        calories: {
          type: Sequelize.INTEGER,
          allowNull: true,
        },
        allergens: {
          type: Sequelize.ARRAY(Sequelize.STRING),
          allowNull: true,
        },
        dietaryRestrictions: {
          type: Sequelize.ARRAY(Sequelize.STRING),
          allowNull: true,
        },
        customizations: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('MenuItems table created');
    } else {
      console.log('MenuItems table already exists');
    }

    // Modifiers table
    if (!(await tableExists(queryInterface, 'Modifiers'))) {
      await queryInterface.createTable('Modifiers', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        price: {
          type: Sequelize.FLOAT,
          allowNull: true,
        },
        posModifierId: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        modifierType: {
          type: Sequelize.ENUM('add-on', 'removal', 'substitution'),
          allowNull: false,
          defaultValue: 'add-on',
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        calories: {
          type: Sequelize.INTEGER,
          allowNull: true,
        },
        allergens: {
          type: Sequelize.ARRAY(Sequelize.STRING),
          allowNull: true,
        },
        displayOrder: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        imageUrl: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Modifiers table created');
    } else {
      console.log('Modifiers table already exists');
    }

    // MenuItemModifiers table
    if (!(await tableExists(queryInterface, 'MenuItemModifiers'))) {
      await queryInterface.createTable('MenuItemModifiers', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        menuItemId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'MenuItems',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        modifierId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Modifiers',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        isDefault: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        isRequired: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: false,
        },
        minQuantity: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        maxQuantity: {
          type: Sequelize.INTEGER,
          allowNull: true,
        },
        displayOrder: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        priceOverride: {
          type: Sequelize.FLOAT,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('MenuItemModifiers table created');
    } else {
      console.log('MenuItemModifiers table already exists');
    }

    // Guests table
    if (!(await tableExists(queryInterface, 'Guests'))) {
      await queryInterface.createTable('Guests', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        firstName: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        lastName: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        email: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        phoneNumber: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Guests table created');
    } else {
      console.log('Guests table already exists');
    }
    // Orders table
    if (!(await tableExists(queryInterface, 'Orders'))) {
      await queryInterface.createTable('Orders', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        guestId: {
          type: Sequelize.INTEGER,
          allowNull: true,
          references: {
            model: 'Guests',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        locationId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Locations',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        orderDate: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        status: {
          type: Sequelize.ENUM('pending', 'completed', 'canceled'),
          allowNull: false,
          defaultValue: 'pending',
        },
        totalAmount: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        subtotal: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        tax: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        tip: {
          type: Sequelize.FLOAT,
          allowNull: true,
        },
        discount: {
          type: Sequelize.FLOAT,
          allowNull: false,
          defaultValue: 0,
        },
        paymentMethod: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        loyaltyPointsEarned: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        loyaltyPointsRedeemed: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 0,
        },
        orderType: {
          type: Sequelize.ENUM('pickup', 'delivery', 'dine-in'),
          allowNull: false,
        },
        specialInstructions: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        estimatedPickupTime: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        actualPickupTime: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Orders table created');
    } else {
      console.log('Orders table already exists');
    }

    // OrderItems table
    if (!(await tableExists(queryInterface, 'OrderItems'))) {
      await queryInterface.createTable('OrderItems', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        orderId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Orders',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        itemId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'MenuItems',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        itemName: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        itemPrice: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        quantity: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 1,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('OrderItems table created');
    } else {
      console.log('OrderItems table already exists');
    }

    // OrderModifiers table
    if (!(await tableExists(queryInterface, 'OrderModifiers'))) {
      await queryInterface.createTable('OrderModifiers', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        orderItemId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'OrderItems',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        modifierId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Modifiers',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        modifierName: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        modifierPrice: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        quantity: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 1,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('OrderModifiers table created');
    } else {
      console.log('OrderModifiers table already exists');
    }

    // Wallets table
    if (!(await tableExists(queryInterface, 'Wallets'))) {
      await queryInterface.createTable('Wallets', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        guestId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Guests',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        balance: {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: false,
          defaultValue: 0.00,
        },
        currency: {
          type: Sequelize.STRING,
          allowNull: false,
          defaultValue: 'USD',
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        lastTransactionDate: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Wallets table created');
    } else {
      console.log('Wallets table already exists');
    }

    // Discounts table
    if (!(await tableExists(queryInterface, 'Discounts'))) {
      await queryInterface.createTable('Discounts', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        type: {
          type: Sequelize.ENUM('percentage', 'fixed'),
          allowNull: false,
        },
        value: {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: false,
        },
        validFrom: {
          type: Sequelize.DATE,
          allowNull: false,
        },
        validTo: {
          type: Sequelize.DATE,
          allowNull: false,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.fn('NOW'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.fn('NOW'),
        },
      });
      console.log('Discounts table created');
    } else {
      console.log('Discounts table already exists');
    }

    // LoyaltyPrograms table
    if (!(await tableExists(queryInterface, 'LoyaltyPrograms'))) {
      await queryInterface.createTable('LoyaltyPrograms', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        pointsPerDollar: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 1,
        },
        redemptionRate: {
          type: Sequelize.FLOAT,
          allowNull: false,
          defaultValue: 0.01,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('LoyaltyPrograms table created');
    } else {
      console.log('LoyaltyPrograms table already exists');
    }
    // Rewards table
    if (!(await tableExists(queryInterface, 'Rewards'))) {
      await queryInterface.createTable('Rewards', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        loyaltyProgramId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'LoyaltyPrograms',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        name: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        pointsRequired: {
          type: Sequelize.INTEGER,
          allowNull: false,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Rewards table created');
    } else {
      console.log('Rewards table already exists');
    }

    // Coupons table
    if (!(await tableExists(queryInterface, 'Coupons'))) {
      await queryInterface.createTable('Coupons', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        code: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        discountType: {
          type: Sequelize.ENUM('percentage', 'fixed'),
          allowNull: false,
        },
        discountValue: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        startDate: {
          type: Sequelize.DATE,
          allowNull: false,
        },
        endDate: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        usageLimit: {
          type: Sequelize.INTEGER,
          allowNull: true,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Coupons table created');
    } else {
      console.log('Coupons table already exists');
    }

    // Brandings table
    if (!(await tableExists(queryInterface, 'Brandings'))) {
      await queryInterface.createTable('Brandings', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        primaryColor: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        secondaryColor: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        tertiaryColor: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        fontColor: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        secondaryFontColor: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        fontFamily: {
          type: Sequelize.STRING,
          allowNull: true,
          defaultValue: 'Arial',
        },
        logoUrl: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        backgroundUrl: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        faviconUrl: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        customCss: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        buttonStyle: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        headerStyle: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        footerStyle: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Brandings table created');
    } else {
      console.log('Brandings table already exists');
    }

    // GuestPreferences table
    if (!(await tableExists(queryInterface, 'GuestPreferences'))) {
      await queryInterface.createTable('GuestPreferences', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        guestId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Guests',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        preferenceType: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        preferenceValue: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('GuestPreferences table created');
    } else {
      console.log('GuestPreferences table already exists');
    }

    // Reports table
    if (!(await tableExists(queryInterface, 'Reports'))) {
      await queryInterface.createTable('Reports', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        reportType: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        reportData: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Reports table created');
    } else {
      console.log('Reports table already exists');
    }

    // CateringOrders table
    if (!(await tableExists(queryInterface, 'CateringOrders'))) {
      await queryInterface.createTable('CateringOrders', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        guestId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Guests',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        locationId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Locations',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        eventDate: {
          type: Sequelize.DATE,
          allowNull: false,
        },
        totalCost: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        notes: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        status: {
          type: Sequelize.ENUM('pending', 'confirmed', 'completed', 'cancelled'),
          allowNull: false,
          defaultValue: 'pending',
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('CateringOrders table created');
    } else {
      console.log('CateringOrders table already exists');
    }

    // ABTests table
    if (!(await tableExists(queryInterface, 'ABTests'))) {
      await queryInterface.createTable('ABTests', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        testName: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        menuItemId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'MenuItems',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        testVariant: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        variantDescription: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        testType: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        upliftSettings: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        startDate: {
          type: Sequelize.DATE,
          allowNull: false,
        },
        endDate: {
          type: Sequelize.DATE,
          allowNull: true,
        },
        status: {
          type: Sequelize.STRING,
          defaultValue: 'active',
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('ABTests table created');
    } else {
      console.log('ABTests table already exists');
    }

    // AuditLogs table
    if (!(await tableExists(queryInterface, 'AuditLogs'))) {
      await queryInterface.createTable('AuditLogs', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        userId: {
          type: Sequelize.INTEGER,
          allowNull: true,
          references: {
            model: 'Users',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        action: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        entityType: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        entityId: {
          type: Sequelize.INTEGER,
          allowNull: true,
        },
        details: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        ipAddress: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        userAgent: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        timestamp: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('AuditLogs table created');
    } else {
      console.log('AuditLogs table already exists');
    }

    // HouseAccounts table
    if (!(await tableExists(queryInterface, 'HouseAccounts'))) {
      await queryInterface.createTable('HouseAccounts', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        accountName: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        billingAddress: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        contactEmail: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        creditLimit: {
          type: Sequelize.FLOAT,
          allowNull: false,
          defaultValue: 0,
        },
        createdAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('HouseAccounts table created');
    } else {
      console.log('HouseAccounts table already exists');
    }

    // Analytics table
    if (!(await tableExists(queryInterface, 'Analytics'))) {
      await queryInterface.createTable('Analytics', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true,
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE',
        },
        locationId: {
          type: Sequelize.INTEGER,
          allowNull: true,
          references: {
            model: 'Locations',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        date: {
          type: Sequelize.DATEONLY,
          allowNull: false,
        },
        metricType: {
          type: Sequelize.STRING,
          allowNull: false,
        },
        metricValue: {
          type: Sequelize.FLOAT,
          allowNull: false,
        },
        dimension1: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        dimension2: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        dimension3: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        additionalData: {
          type: Sequelize.JSONB,
          allowNull: true,
        },
        createdAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('Analytics table created');
    } else {
      console.log('Analytics table already exists');
    }

    // GlobalSettings table
    if (!(await tableExists(queryInterface, 'GlobalSettings'))) {
      await queryInterface.createTable('GlobalSettings', {
        id: {
          type: Sequelize.INTEGER,
          primaryKey: true,
          autoIncrement: true,
        },
        key: {
          type: Sequelize.STRING,
          allowNull: false,
          unique: true,
        },
        value: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        dataType: {
          type: Sequelize.ENUM('string', 'number', 'boolean', 'json'),
          allowNull: false,
          defaultValue: 'string',
        },
        description: {
          type: Sequelize.TEXT,
          allowNull: true,
        },
        category: {
          type: Sequelize.STRING,
          allowNull: true,
        },
        isEditable: {
          type: Sequelize.BOOLEAN,
          allowNull: false,
          defaultValue: true,
        },
        lastModifiedBy: {
          type: Sequelize.INTEGER,
          allowNull: true,
          references: {
            model: 'Users',
            key: 'id',
          },
          onUpdate: 'CASCADE',
          onDelete: 'SET NULL',
        },
        createdAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
        updatedAt: {
          type: Sequelize.DATE,
          allowNull: false,
          defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
        },
      });
      console.log('GlobalSettings table created');
    } else {
      console.log('GlobalSettings table already exists');
    }

    console.log('All tables created or verified successfully');
  },

  down: async (queryInterface, Sequelize) => {
    // Drop all tables in reverse order
    await queryInterface.dropTable('GlobalSettings');
    await queryInterface.dropTable('Analytics');
    await queryInterface.dropTable('HouseAccounts');
    await queryInterface.dropTable('AuditLogs');
    await queryInterface.dropTable('ABTests');
    await queryInterface.dropTable('CateringOrders');
    await queryInterface.dropTable('Reports');
    await queryInterface.dropTable('GuestPreferences');
    await queryInterface.dropTable('Brandings');
    await queryInterface.dropTable('Coupons');
    await queryInterface.dropTable('Rewards');
    await queryInterface.dropTable('LoyaltyPrograms');
    await queryInterface.dropTable('Discounts');
    await queryInterface.dropTable('Wallets');
    await queryInterface.dropTable('OrderModifiers');
    await queryInterface.dropTable('OrderItems');
    await queryInterface.dropTable('Orders');
    await queryInterface.dropTable('Guests');
    await queryInterface.dropTable('MenuItemModifiers');
    await queryInterface.dropTable('Modifiers');
    await queryInterface.dropTable('MenuItems');
    await queryInterface.dropTable('MenuGroups');
    await queryInterface.dropTable('Menus');
    await queryInterface.dropTable('CorePOSProfiles');
    await queryInterface.dropTable('PosIntegrationSettings');
    await queryInterface.dropTable('PosProfiles');
    await queryInterface.dropTable('Users');
    await queryInterface.dropTable('Roles');
    await queryInterface.dropTable('Locations');
    await queryInterface.dropTable('Clients');
    // Add any additional table drops here...

    console.log('All tables dropped successfully');
  }
};

================
File: backend/migrations/20240818161348-add-location-menu-override.js
================
'use strict';

module.exports = {
  async up (queryInterface, Sequelize) {
    // Check if the table already exists
    const tableExists = await queryInterface.showAllTables().then(tables => tables.includes('LocationMenuOverrides'));
    
    if (!tableExists) {
      await queryInterface.createTable('LocationMenuOverrides', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER
        },
        locationId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Locations',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        menuItemId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'MenuItems',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        price: {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: true
        },
        isAvailable: {
          type: Sequelize.BOOLEAN,
          defaultValue: true
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE
        }
      });
    } else {
      // If table exists, check for and add missing columns
      const columns = await queryInterface.describeTable('LocationMenuOverrides');
      
      if (!columns.price) {
        await queryInterface.addColumn('LocationMenuOverrides', 'price', {
          type: Sequelize.DECIMAL(10, 2),
          allowNull: true
        });
      }
      
      if (!columns.isAvailable) {
        await queryInterface.addColumn('LocationMenuOverrides', 'isAvailable', {
          type: Sequelize.BOOLEAN,
          defaultValue: true
        });
      }
    }
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.dropTable('LocationMenuOverrides');
  }
};

================
File: backend/migrations/20240818161349-add-location-tax-config.js
================
'use strict';

module.exports = {
  async up (queryInterface, Sequelize) {
    const tableExists = await queryInterface.showAllTables().then(tables => tables.includes('LocationTaxConfigs'));
    
    if (!tableExists) {
      await queryInterface.createTable('LocationTaxConfigs', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER
        },
        locationId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Locations',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        taxRate: {
          type: Sequelize.DECIMAL(5, 2),
          allowNull: false
        },
        taxType: {
          type: Sequelize.ENUM('Sales', 'VAT', 'GST'),
          allowNull: false
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE
        }
      });
    } else {
      const columns = await queryInterface.describeTable('LocationTaxConfigs');
      
      if (!columns.taxRate) {
        await queryInterface.addColumn('LocationTaxConfigs', 'taxRate', {
          type: Sequelize.DECIMAL(5, 2),
          allowNull: false
        });
      }
      
      if (!columns.taxType) {
        await queryInterface.addColumn('LocationTaxConfigs', 'taxType', {
          type: Sequelize.ENUM('Sales', 'VAT', 'GST'),
          allowNull: false
        });
      }
    }
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.dropTable('LocationTaxConfigs');
  }
};

================
File: backend/migrations/20240818161350-add-loyalty-challenge.js
================
'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    /**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */
  },

  async down (queryInterface, Sequelize) {
    /**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable('users');
     */
  }
};

================
File: backend/migrations/20240818161351-add-loyalty-config.js
================
'use strict';

module.exports = {
  async up (queryInterface, Sequelize) {
    const tableExists = await queryInterface.showAllTables().then(tables => tables.includes('LoyaltyConfigs'));
    
    if (!tableExists) {
      await queryInterface.createTable('LoyaltyConfigs', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        pointsPerDollar: {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 1
        },
        expirationPeriod: {
          type: Sequelize.INTEGER,
          allowNull: true,
          comment: 'Number of days before points expire'
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE
        }
      });
    } else {
      const columns = await queryInterface.describeTable('LoyaltyConfigs');
      
      if (!columns.expirationPeriod) {
        await queryInterface.addColumn('LoyaltyConfigs', 'expirationPeriod', {
          type: Sequelize.INTEGER,
          allowNull: true,
          comment: 'Number of days before points expire'
        });
      }
    }
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.dropTable('LoyaltyConfigs');
  }
};

================
File: backend/migrations/20240818161352-add-loyalty-integration.js
================
'use strict';

module.exports = {
  async up (queryInterface, Sequelize) {
    const tableExists = await queryInterface.showAllTables().then(tables => tables.includes('LoyaltyIntegrations'));
    
    if (!tableExists) {
      await queryInterface.createTable('LoyaltyIntegrations', {
        id: {
          allowNull: false,
          autoIncrement: true,
          primaryKey: true,
          type: Sequelize.INTEGER
        },
        clientId: {
          type: Sequelize.INTEGER,
          allowNull: false,
          references: {
            model: 'Clients',
            key: 'id'
          },
          onUpdate: 'CASCADE',
          onDelete: 'CASCADE'
        },
        integrationType: {
          type: Sequelize.ENUM('POS', 'CRM', 'Custom'),
          allowNull: false
        },
        integrationDetails: {
          type: Sequelize.JSON,
          allowNull: false
        },
        isActive: {
          type: Sequelize.BOOLEAN,
          defaultValue: true
        },
        createdAt: {
          allowNull: false,
          type: Sequelize.DATE
        },
        updatedAt: {
          allowNull: false,
          type: Sequelize.DATE
        }
      });
    } else {
      const columns = await queryInterface.describeTable('LoyaltyIntegrations');
      
      if (!columns.isActive) {
        await queryInterface.addColumn('LoyaltyIntegrations', 'isActive', {
          type: Sequelize.BOOLEAN,
          defaultValue: true
        });
      }
    }
  },

  async down (queryInterface, Sequelize) {
    await queryInterface.dropTable('LoyaltyIntegrations');
  }
};

================
File: backend/migrations/20240828024349-update-role-and-template-associations.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      // Helper function to check if a table exists
      const tableExists = async (tableName) => {
        try {
          await queryInterface.describeTable(tableName);
          return true;
        } catch (error) {
          return false;
        }
      };

      // Helper function to add a column if it doesn't exist
      const addColumnIfNotExists = async (tableName, columnName, columnDefinition) => {
        const table = await queryInterface.describeTable(tableName);
        if (!table[columnName]) {
          await queryInterface.addColumn(tableName, columnName, columnDefinition, { transaction });
        }
      };

      // Create or update RoleTemplates table
      if (!(await tableExists('RoleTemplates'))) {
        await queryInterface.createTable('RoleTemplates', {
          id: {
            allowNull: false,
            autoIncrement: true,
            primaryKey: true,
            type: Sequelize.INTEGER
          },
          name: {
            type: Sequelize.STRING,
            allowNull: false,
            unique: true,
          },
          description: {
            type: Sequelize.STRING,
            allowNull: true,
          },
          isEditable: {
            type: Sequelize.BOOLEAN,
            defaultValue: true,
          },
          isPredefined: {
            type: Sequelize.BOOLEAN,
            defaultValue: false,
          },
          createdAt: {
            allowNull: false,
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
          },
          updatedAt: {
            allowNull: false,
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
          }
        }, { transaction });
      } else {
        // Add columns if they don't exist
        await addColumnIfNotExists('RoleTemplates', 'isEditable', {
          type: Sequelize.BOOLEAN,
          defaultValue: true,
        });
        await addColumnIfNotExists('RoleTemplates', 'isPredefined', {
          type: Sequelize.BOOLEAN,
          defaultValue: false,
        });
      }

      // Create or update Roles table
      if (!(await tableExists('Roles'))) {
        await queryInterface.createTable('Roles', {
          id: {
            allowNull: false,
            autoIncrement: true,
            primaryKey: true,
            type: Sequelize.INTEGER
          },
          name: {
            type: Sequelize.STRING,
            allowNull: false,
          },
          level: {
            type: Sequelize.INTEGER,
            allowNull: false,
            defaultValue: 1,
          },
          description: {
            type: Sequelize.TEXT,
            allowNull: true,
          },
          isPredefined: {
            type: Sequelize.BOOLEAN,
            defaultValue: false,
          },
          isEditable: {
            type: Sequelize.BOOLEAN,
            defaultValue: true,
          },
          isAssignable: {
            type: Sequelize.BOOLEAN,
            defaultValue: true,
          },
          clientId: {
            type: Sequelize.INTEGER,
            allowNull: false,
            references: {
              model: 'Clients',
              key: 'id',
            },
            onDelete: 'CASCADE',
          },
          createdAt: {
            allowNull: false,
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
          },
          updatedAt: {
            allowNull: false,
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
          }
        }, { transaction });
      } else {
        // Add columns if they don't exist
        await addColumnIfNotExists('Roles', 'level', {
          type: Sequelize.INTEGER,
          allowNull: false,
          defaultValue: 1,
        });
        await addColumnIfNotExists('Roles', 'isPredefined', {
          type: Sequelize.BOOLEAN,
          defaultValue: false,
        });
        await addColumnIfNotExists('Roles', 'isEditable', {
          type: Sequelize.BOOLEAN,
          defaultValue: true,
        });
        await addColumnIfNotExists('Roles', 'isAssignable', {
          type: Sequelize.BOOLEAN,
          defaultValue: true,
        });
      }

      // Create RoleTemplateAssignments table if it doesn't exist
      if (!(await tableExists('RoleTemplateAssignments'))) {
        await queryInterface.createTable('RoleTemplateAssignments', {
          id: {
            allowNull: false,
            autoIncrement: true,
            primaryKey: true,
            type: Sequelize.INTEGER
          },
          roleId: {
            type: Sequelize.INTEGER,
            references: {
              model: 'Roles',
              key: 'id',
            },
            onDelete: 'CASCADE',
            allowNull: false,
          },
          roleTemplateId: {
            type: Sequelize.INTEGER,
            references: {
              model: 'RoleTemplates',
              key: 'id',
            },
            onDelete: 'CASCADE',
            allowNull: false,
          },
          clientId: {
            type: Sequelize.INTEGER,
            references: {
              model: 'Clients',
              key: 'id',
            },
            onDelete: 'CASCADE',
            allowNull: false,
          },
          createdAt: {
            allowNull: false,
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
          },
          updatedAt: {
            allowNull: false,
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
          }
        }, { transaction });

        // Add index only if the table was just created
        await queryInterface.addIndex('RoleTemplateAssignments', ['roleId', 'roleTemplateId', 'clientId'], {
          unique: true,
          name: 'unique_role_template_assignment',
          transaction
        });
      }

      await transaction.commit();
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      // Remove index if it exists
      await queryInterface.removeIndex('RoleTemplateAssignments', 'unique_role_template_assignment', { transaction }).catch(() => {});

      // Drop tables if they exist
      await queryInterface.dropTable('RoleTemplateAssignments', { transaction }).catch(() => {});
      
      // Remove added columns from Roles if they exist
      await queryInterface.removeColumn('Roles', 'level', { transaction }).catch(() => {});
      await queryInterface.removeColumn('Roles', 'isPredefined', { transaction }).catch(() => {});
      await queryInterface.removeColumn('Roles', 'isEditable', { transaction }).catch(() => {});
      await queryInterface.removeColumn('Roles', 'isAssignable', { transaction }).catch(() => {});

      // Remove added columns from RoleTemplates if they exist
      await queryInterface.removeColumn('RoleTemplates', 'isEditable', { transaction }).catch(() => {});
      await queryInterface.removeColumn('RoleTemplates', 'isPredefined', { transaction }).catch(() => {});

      await transaction.commit();
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
  }
};

================
File: backend/scripts/create-client.js
================
const { Client } = require('../src/models');
const crypto = require('crypto');

async function createClient(name) {
  const subdomain = name.toLowerCase().replace(/[^a-z0-9]/g, '');
  const existingClient = await Client.findOne({ where: { subdomain } });

  if (existingClient) {
    console.log(`Client with subdomain '${subdomain}' already exists.`);
    return;
  }

  const clientId = crypto.randomBytes(16).toString('hex'); // Generate a secure client ID

  const client = await Client.create({
    id: clientId,
    name,
    subdomain,
    settings: {
      theme: 'default',
      features: ['online_ordering', 'reservations'],
    },
  });

  console.log(`Created client: ${client.name} with subdomain: ${client.subdomain}`);
}

const clientName = process.argv[2];
if (!clientName) {
  console.error('Please provide a client name');
  process.exit(1);
}

createClient(clientName).catch((error) => {
  console.error('Error creating client:', error);
  process.exit(1);
});

================
File: backend/scripts/docker-compose.yml
================
version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - /etc/ssl/private/nginx-selfsigned.key:/etc/nginx/ssl/nginx-selfsigned.key
      - /etc/ssl/certs/nginx-selfsigned.crt:/etc/nginx/ssl/nginx-selfsigned.crt
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

================
File: backend/seeders/.eslintrc.js
================
module.exports = {
  rules: {
    'no-unused-vars': ['error', { argsIgnorePattern: '^(queryInterface|Sequelize)$' }],
  },
};

================
File: backend/seeders/02-create-clients.js
================
'use strict';

module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/seeders/03-create-roles.js
================
'use strict';

module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/seeders/04-create-super-admin.js
================
'use strict';

const bcrypt = require('bcrypt');

module.exports = {
  up: async (queryInterface) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      // Check if Super Admin role exists
      let superAdminRole = await queryInterface.sequelize.query(
        `SELECT id FROM "Roles" WHERE name = 'Super Admin' LIMIT 1`,
        { type: queryInterface.sequelize.QueryTypes.SELECT, transaction }
      );

      let superAdminRoleId;

      if (superAdminRole.length === 0) {
        // Create Super Admin role if it doesn't exist
        [superAdminRole] = await queryInterface.bulkInsert('Roles', [{
          name: 'Super Admin',
          level: 5,
          createdAt: new Date(),
          updatedAt: new Date()
        }], { returning: true, transaction });
        superAdminRoleId = superAdminRole.id;
      } else {
        superAdminRoleId = superAdminRole[0].id;
      }

      // Check if Super Admin user exists
      const existingSuperAdmin = await queryInterface.sequelize.query(
        `SELECT id FROM "Users" WHERE username = 'superadmin' LIMIT 1`,
        { type: queryInterface.sequelize.QueryTypes.SELECT, transaction }
      );

      if (existingSuperAdmin.length === 0) {
        // Create Super Admin user if it doesn't exist
        const hashedPassword = await bcrypt.hash('Brycer23@$', 10);

        await queryInterface.bulkInsert('Users', [{
          username: 'superadmin',
          email: 'superadmin@yourdomain.com',
          password: hashedPassword,
          roleId: superAdminRoleId,
          firstName: 'Super',
          lastName: 'Admin',
          active: true,
          createdAt: new Date(),
          updatedAt: new Date()
        }], { transaction });

        console.log('Super Admin user created successfully');
      } else {
        console.log('Super Admin user already exists');
      }

      await transaction.commit();
    } catch (error) {
      await transaction.rollback();
      console.error('Error in Super Admin creation:', error);
      throw error;
    }
  },

  down: async (queryInterface) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      // Remove Super Admin user
      await queryInterface.bulkDelete('Users', { username: 'superadmin' }, { transaction });

      // Remove Super Admin role
      await queryInterface.bulkDelete('Roles', { name: 'Super Admin' }, { transaction });

      await transaction.commit();
      console.log('Super Admin user and role removed successfully');
    } catch (error) {
      await transaction.rollback();
      console.error('Error removing Super Admin user and role:', error);
      throw error;
    }
  }
};

================
File: backend/seeders/05-create-demo-enterprise.js
================
'use strict';

const faker = require('faker');

module.exports = {
  up: async (queryInterface) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      // Check if Demo Enterprise client already exists
      let [enterpriseClient] = await queryInterface.sequelize.query(
        `SELECT id FROM "Clients" WHERE subdomain = 'demo-enterprise' LIMIT 1`,
        { type: queryInterface.sequelize.QueryTypes.SELECT, transaction }
      );

      let clientId;

      if (!enterpriseClient) {
        // Create demo enterprise client if it doesn't exist
        [enterpriseClient] = await queryInterface.bulkInsert('Clients', [{
          name: 'Demo Enterprise',
          subdomain: 'demo-enterprise',
          email: 'admin@demo-enterprise.com',
          features: JSON.stringify({ feature1: true, feature2: true, feature3: true }),
          active: true,
          settings: JSON.stringify({
            timezone: 'America/Los_Angeles',
            currency: 'USD',
          }),
          brandingOptions: JSON.stringify({
            primaryColor: '#4a90e2',
            secondaryColor: '#50e3c2',
            logo: 'demo_enterprise_logo.png',
          }),
          clientSettings: JSON.stringify({
            allowNotifications: true,
            defaultLanguage: 'en',
          }),
          createdAt: new Date(),
          updatedAt: new Date()
        }], { returning: true, transaction });

        clientId = enterpriseClient.id;
      } else {
        clientId = enterpriseClient.id;
      }

      // Create roles if they don't exist
      const roles = ['Enterprise Admin', 'Location Manager', 'Staff'];
      for (const role of roles) {
        await queryInterface.bulkInsert('Roles', [{
          name: role,
          clientId,
          createdAt: new Date(),
          updatedAt: new Date()
        }], { ignoreDuplicates: true, transaction });
      }

      // Create 10 locations in Las Vegas if they don't exist
      const lasVegasZipCodes = ['89101', '89102', '89103', '89104', '89105', '89106', '89107', '89108', '89109', '89110'];
      for (let i = 0; i < 10; i++) {
        await queryInterface.bulkInsert('Locations', [{
          clientId,
          name: `Las Vegas Location ${i + 1}`,
          address: faker.address.streetAddress(),
          city: 'Las Vegas',
          state: 'NV',
          zipCode: lasVegasZipCodes[i],
          phone: faker.phone.phoneNumber(),
          email: `lasvegas${i + 1}@demo-enterprise.com`,
          createdAt: new Date(),
          updatedAt: new Date()
        }], { ignoreDuplicates: true, transaction });
      }

      // Create PosIntegrationSettings for FAKE Toast POS if it doesn't exist
      let [posIntegrationSettings] = await queryInterface.sequelize.query(
        `SELECT id FROM "PosIntegrationSettings" WHERE name = 'FAKE Toast POS Settings' LIMIT 1`,
        { type: queryInterface.sequelize.QueryTypes.SELECT, transaction }
      );

      if (!posIntegrationSettings) {
        [posIntegrationSettings] = await queryInterface.bulkInsert('PosIntegrationSettings', [{
          name: 'FAKE Toast POS Settings',
          type: 'TOAST',
          settings: JSON.stringify({
            apiKey: faker.datatype.uuid(),
            apiSecret: faker.datatype.uuid(),
            restaurantGuid: faker.datatype.uuid(),
            baseUrl: 'https://api.toasttab.com/v1'
          }),
          createdAt: new Date(),
          updatedAt: new Date()
        }], { returning: true, transaction });
      }

      // Create Fake Toast POS profile as a CorePOSProfile if it doesn't exist
      await queryInterface.bulkInsert('CorePOSProfiles', [{
        profileName: 'FAKE Toast POS',
        integrationSettingsId: posIntegrationSettings.id,
        defaultAPISettings: JSON.stringify({
          baseUrl: 'https://api.toasttab.com/v1',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ${apiKey}'
          }
        }),
        translationMapping: JSON.stringify({
          orderId: 'externalOrderId',
          items: 'orderItems',
          total: 'totalAmount',
        }),
        hardcodedSettings: JSON.stringify({
          posProvider: 'Toast',
          version: '1.0'
        }),
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      }], { ignoreDuplicates: true, transaction });

      // Create loyalty program if it doesn't exist
      await queryInterface.bulkInsert('LoyaltyPrograms', [{
        clientId,
        name: 'Demo Loyalty Program',
        pointsPerDollar: 10,
        createdAt: new Date(),
        updatedAt: new Date()
      }], { ignoreDuplicates: true, transaction });

      // Create sample guests and their profiles
      for (let i = 0; i < 100; i++) {
        const guestId = faker.datatype.uuid();
        await queryInterface.bulkInsert('Guests', [{
          id: guestId,
          clientId,
          firstName: faker.name.firstName(),
          lastName: faker.name.lastName(),
          email: faker.internet.email(),
          phone: faker.phone.phoneNumber(),
          createdAt: new Date(),
          updatedAt: new Date()
        }], { ignoreDuplicates: true, transaction });

        await queryInterface.bulkInsert('GuestProfiles', [{
          guestId,
          loyaltyPoints: faker.datatype.number({ min: 0, max: 1000 }),
          totalSpent: faker.datatype.float({ min: 0, max: 1000, precision: 0.01 }),
          lastVisit: faker.date.past(),
          createdAt: new Date(),
          updatedAt: new Date()
        }], { ignoreDuplicates: true, transaction });
      }

      // Create sample orders
      const locations = await queryInterface.sequelize.query(
        `SELECT id FROM "Locations" WHERE "clientId" = :clientId`,
        { 
          replacements: { clientId },
          type: queryInterface.sequelize.QueryTypes.SELECT,
          transaction
        }
      );

      const guests = await queryInterface.sequelize.query(
        `SELECT id FROM "Guests" WHERE "clientId" = :clientId LIMIT 100`,
        { 
          replacements: { clientId },
          type: queryInterface.sequelize.QueryTypes.SELECT,
          transaction
        }
      );

      for (let i = 0; i < 500; i++) {
        const orderId = faker.datatype.uuid();
        const locationId = locations[faker.datatype.number({ min: 0, max: locations.length - 1 })].id;
        const guestId = guests[faker.datatype.number({ min: 0, max: guests.length - 1 })].id;
        const orderTotal = faker.datatype.float({ min: 10, max: 200, precision: 0.01 });

        await queryInterface.bulkInsert('Orders', [{
          id: orderId,
          clientId,
          locationId,
          guestId,
          orderNumber: faker.random.alphaNumeric(8).toUpperCase(),
          status: faker.random.arrayElement(['pending', 'completed', 'cancelled']),
          total: orderTotal,
          createdAt: faker.date.past(),
          updatedAt: new Date()
        }], { ignoreDuplicates: true, transaction });

        // Create 1-5 order items for each order
        const itemCount = faker.datatype.number({ min: 1, max: 5 });
        for (let j = 0; j < itemCount; j++) {
          await queryInterface.bulkInsert('OrderItems', [{
            orderId,
            name: faker.commerce.productName(),
            price: faker.datatype.float({ min: 5, max: 50, precision: 0.01 }),
            quantity: faker.datatype.number({ min: 1, max: 5 }),
            createdAt: new Date(),
            updatedAt: new Date()
          }], { ignoreDuplicates: true, transaction });
        }

        // Simulate POS integration by creating an audit log entry
        const posData = {
          orderId,
          total: orderTotal,
          guestId,
          locationId
        };

        await queryInterface.bulkInsert('AuditLogs', [{
          action: 'POS_ORDER_SENT',
          details: JSON.stringify(posData),
          userId: null, // Since this is a system action
          clientId,
          createdAt: new Date(),
          updatedAt: new Date()
        }], { ignoreDuplicates: true, transaction });
      }

      await transaction.commit();
      console.log('Demo Enterprise data created successfully');
    } catch (error) {
      await transaction.rollback();
      console.error('Error creating Demo Enterprise data:', error);
      throw error;
    }
  },

  down: async (queryInterface) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      const [enterpriseClient] = await queryInterface.sequelize.query(
        `SELECT id FROM "Clients" WHERE subdomain = 'demo-enterprise' LIMIT 1`,
        { type: queryInterface.sequelize.QueryTypes.SELECT, transaction }
      );

      if (enterpriseClient) {
        const clientId = enterpriseClient.id;

        // Remove all data related to Demo Enterprise
        await queryInterface.bulkDelete('AuditLogs', { clientId }, { transaction });
        await queryInterface.bulkDelete('OrderItems', { orderId: Sequelize.literal(`(SELECT id FROM "Orders" WHERE "clientId" = ${clientId})`) }, { transaction });
        await queryInterface.bulkDelete('Orders', { clientId }, { transaction });
        await queryInterface.bulkDelete('GuestProfiles', { guestId: Sequelize.literal(`(SELECT id FROM "Guests" WHERE "clientId" = ${clientId})`) }, { transaction });
        await queryInterface.bulkDelete('Guests', { clientId }, { transaction });
        await queryInterface.bulkDelete('LoyaltyPrograms', { clientId }, { transaction });
        await queryInterface.bulkDelete('Locations', { clientId }, { transaction });
        await queryInterface.bulkDelete('Roles', { clientId }, { transaction });
        await queryInterface.bulkDelete('Clients', { id: clientId }, { transaction });
      }

      // Remove POS related data
      await queryInterface.bulkDelete('CorePOSProfiles', { profileName: 'FAKE Toast POS' }, { transaction });
      await queryInterface.bulkDelete('PosIntegrationSettings', { name: 'FAKE Toast POS Settings' }, { transaction });

      await transaction.commit();
      console.log('Demo Enterprise data removed successfully');
    } catch (error) {
      await transaction.rollback();
      console.error('Error removing Demo Enterprise data:', error);
      throw error;
    }
  }
};

================
File: backend/seeders/20230101000000-demo-data.js
================
'use strict';
const bcrypt = require('bcrypt');

module.exports = {
  up: async (queryInterface, Sequelize) => {
    const hashedPassword = await bcrypt.hash('password123', 10);

    // Insert Client
    const [client] = await queryInterface.bulkInsert('Clients', [{
      name: 'Demo Client',
      createdAt: new Date(),
      updatedAt: new Date()
    }], { returning: true });

    // Insert ClientSettings
    await queryInterface.bulkInsert('ClientSettings', [{
      clientId: client.id,
      twoFactorRequired: false,
      defaultPaymentGateways: JSON.stringify(['stripe', 'paypal']),
      createdAt: new Date(),
      updatedAt: new Date()
    }]);

    // Insert Users
    await queryInterface.bulkInsert('Users', [
      {
        name: 'Admin User',
        email: 'admin@example.com',
        password: hashedPassword,
        role: 'clientAdmin',
        clientId: client.id,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Manager User',
        email: 'manager@example.com',
        password: hashedPassword,
        role: 'manager',
        clientId: client.id,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);

    // Insert Locations
    await queryInterface.bulkInsert('Locations', [
      {
        name: 'Main Store',
        address: '123 Main St, City, State 12345',
        clientId: client.id,
        twoFactorException: false,
        paymentGatewayExceptions: null,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Branch Store',
        address: '456 Branch St, City, State 12345',
        clientId: client.id,
        twoFactorException: true,
        paymentGatewayExceptions: JSON.stringify(['stripe']),
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);

    // Add more seed data for other models as needed...
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.bulkDelete('Users', null, {});
    await queryInterface.bulkDelete('ClientSettings', null, {});
    await queryInterface.bulkDelete('Locations', null, {});
    await queryInterface.bulkDelete('Clients', null, {});
    // Remove seed data for other models...
  }
};

================
File: backend/src/adapters/pos/RevelPOSAdapter.js
================
export class RevelPOSAdapter {
  constructor(private apiKey) {}

  async getDiscounts() {
    // Implement Revel-specific API call to get discounts
    // Return discounts in a standardized format
  }
}

================
File: backend/src/adapters/pos/ToastPOSAdapter.js
================
export class ToastPOSAdapter {
  constructor(private apiKey) {}

  async getDiscounts() {
    // Implement Toast-specific API call to get discounts
    // Return discounts in a standardized format
  }
}

================
File: backend/src/config/config.json
================
{
  "development": {
    "username": "bryce",
    "password": "1234",
    "database": "pos",
    "host": "db",
    "dialect": "postgres"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "postgres"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "postgres"
  }
}

================
File: backend/src/config/database.js
================
const { Sequelize } = require('sequelize');
require('dotenv').config();

const env = process.env.NODE_ENV || 'development';
const config = {
  development: {
    username: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    host: process.env.DB_HOST,
    dialect: 'postgres',
    logging: console.log,
  },
  test: {
    // ... (keep existing test configuration)
  },
  production: {
    // ... (keep existing production configuration)
  }
};

const sequelize = new Sequelize(config[env].database, config[env].username, config[env].password, config[env]);

module.exports = sequelize;

================
File: backend/src/config/redis.js
================
const Redis = require('ioredis');

const redisClient = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: process.env.REDIS_PORT || 6379,
  // Add any other configuration options here
});

module.exports = redisClient;

================
File: backend/src/controllers/abTestController.js
================
const { validationResult } = require('express-validator');
const abTestService = require('../services/abTestService');
const logger = require('../utils/logger');
const { AppError } = require('../utils/errorHandler');

const validateRequest = (req) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    throw new AppError('Validation failed', 400, errors.array());
  }
};

const createABTest = async (req, res, next) => {
  try {
    validateRequest(req);
    const abTest = await abTestService.createABTest(req.body);
    logger.info(`A/B Test created with ID: ${abTest.id}`);
    res.status(201).json(abTest);
  } catch (error) {
    logger.error('Error creating A/B Test:', error);
    next(error);
  }
};

const getABTest = async (req, res, next) => {
  try {
    const abTest = await abTestService.getABTest(req.params.id);
    if (!abTest) {
      throw new AppError('A/B Test not found', 404);
    }
    res.json(abTest);
  } catch (error) {
    logger.error(`Error fetching A/B Test with ID ${req.params.id}:`, error);
    next(error);
  }
};

const updateABTest = async (req, res, next) => {
  try {
    validateRequest(req);
    const updatedABTest = await abTestService.updateABTest(req.params.id, req.body);
    logger.info(`A/B Test updated with ID: ${req.params.id}`);
    res.json(updatedABTest);
  } catch (error) {
    logger.error(`Error updating A/B Test with ID ${req.params.id}:`, error);
    next(error);
  }
};

const deleteABTest = async (req, res, next) => {
  try {
    await abTestService.deleteABTest(req.params.id);
    logger.info(`A/B Test deleted with ID: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting A/B Test with ID ${req.params.id}:`, error);
    next(error);
  }
};

const getABTestResults = async (req, res, next) => {
  try {
    const results = await abTestService.getABTestResults(req.params.id);
    res.json(results);
  } catch (error) {
    logger.error(`Error fetching A/B Test results for ID ${req.params.id}:`, error);
    next(error);
  }
};

const startABTest = async (req, res, next) => {
  try {
    const startedTest = await abTestService.startABTest(req.params.id);
    logger.info(`A/B Test started with ID: ${req.params.id}`);
    res.json(startedTest);
  } catch (error) {
    logger.error(`Error starting A/B Test with ID ${req.params.id}:`, error);
    next(error);
  }
};

const stopABTest = async (req, res, next) => {
  try {
    const stoppedTest = await abTestService.stopABTest(req.params.id);
    logger.info(`A/B Test stopped with ID: ${req.params.id}`);
    res.json(stoppedTest);
  } catch (error) {
    logger.error(`Error stopping A/B Test with ID ${req.params.id}:`, error);
    next(error);
  }
};

module.exports = {
  createABTest,
  getABTest,
  updateABTest,
  deleteABTest,
  getABTestResults,
  startABTest,
  stopABTest
};

================
File: backend/src/controllers/abTestController.ts
================
import { Request, Response } from 'express';
import { createABTest, getABTests, updateABTest, deleteABTest, checkAndUpdateABTests } from '../services/abTestService';
import { AppError } from '../utils/errorHandler';
import { trackABTestMetric, getABTestMetrics } from '../services/abTestMetricsService';

export const createTest = async (req: Request, res: Response) => {
  try {
    const test = await createABTest(req.body);
    res.status(201).json(test);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error creating A/B test' });
    }
  }
};

export const getTests = async (req: Request, res: Response) => {
  try {
    const tests = await getABTests();
    res.status(200).json(tests);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching A/B tests' });
  }
};

export const updateTest = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const test = await updateABTest(id, req.body);
    res.status(200).json(test);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error updating A/B test' });
    }
  }
};

export const deleteTest = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    await deleteABTest(id);
    res.status(204).send();
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error deleting A/B test' });
    }
  }
};

export const checkAndUpdateTests = async (req: Request, res: Response) => {
  try {
    const updatedTests = await checkAndUpdateABTests();
    res.status(200).json(updatedTests);
  } catch (error) {
    res.status(500).json({ message: 'Error checking and updating A/B tests' });
  }
};

export const trackMetric = async (req: Request, res: Response) => {
  try {
    const { testId, variant, metricType, value } = req.body;
    const metric = await trackABTestMetric(testId, variant, metricType, value);
    res.status(201).json(metric);
  } catch (error) {
    res.status(500).json({ message: 'Error tracking A/B test metric' });
  }
};

export const getMetrics = async (req: Request, res: Response) => {
  try {
    const { testId } = req.params;
    const metrics = await getABTestMetrics(testId);
    res.status(200).json(metrics);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching A/B test metrics' });
  }
};

================
File: backend/src/controllers/abTestResultController.js
================
const { ABTestResult, Modifier, MenuItem } = require('../models');

exports.getAllABTestResults = async (req, res) => {
  try {
    const abTestResults = await ABTestResult.findAll({
      include: [{ model: Modifier }, { model: MenuItem }]
    });
    res.json(abTestResults);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching AB test results', error: error.message });
  }
};

exports.createABTestResult = async (req, res) => {
  try {
    const newABTestResult = await ABTestResult.create(req.body);
    res.status(201).json(newABTestResult);
  } catch (error) {
    res.status(400).json({ message: 'Error creating AB test result', error: error.message });
  }
};

exports.getABTestResult = async (req, res) => {
  try {
    const abTestResult = await ABTestResult.findByPk(req.params.id, {
      include: [{ model: Modifier }, { model: MenuItem }]
    });
    if (abTestResult) {
      res.json(abTestResult);
    } else {
      res.status(404).json({ message: 'AB test result not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching AB test result', error: error.message });
  }
};

exports.updateABTestResult = async (req, res) => {
  try {
    const [updated] = await ABTestResult.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedABTestResult = await ABTestResult.findByPk(req.params.id, {
        include: [{ model: Modifier }, { model: MenuItem }]
      });
      res.json(updatedABTestResult);
    } else {
      res.status(404).json({ message: 'AB test result not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating AB test result', error: error.message });
  }
};

exports.deleteABTestResult = async (req, res) => {
  try {
    const deleted = await ABTestResult.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'AB test result not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting AB test result', error: error.message });
  }
};

================
File: backend/src/controllers/adminController.js
================
const { validationResult } = require('express-validator');
const adminService = require('../services/adminService');
const dashboardService = require('../services/dashboardService');
const logger = require('../utils/logger');
const { AppError } = require('../utils/errorHandler');

const validateRequest = (req) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    throw new AppError('Validation failed', 400, errors.array());
  }
};

const getDashboardData = async (req, res, next) => {
  try {
    const dashboardData = await dashboardService.getDashboardData();
    res.status(200).json(dashboardData);
  } catch (error) {
    logger.error('Error fetching dashboard data:', error);
    next(new AppError('Error fetching dashboard data', 500));
  }
};

const getUsers = async (req, res, next) => {
  try {
    const users = await adminService.getUsers(req.query);
    res.status(200).json(users);
  } catch (error) {
    logger.error('Error fetching users:', error);
    next(new AppError('Error fetching users', 500));
  }
};

const createUser = async (req, res, next) => {
  try {
    validateRequest(req);
    const newUser = await adminService.createUser(req.body);
    logger.info(`New user created: ${newUser.id}`);
    res.status(201).json(newUser);
  } catch (error) {
    logger.error('Error creating user:', error);
    next(error);
  }
};

const updateUser = async (req, res, next) => {
  try {
    validateRequest(req);
    const updatedUser = await adminService.updateUser(req.params.id, req.body);
    logger.info(`User updated: ${req.params.id}`);
    res.status(200).json(updatedUser);
  } catch (error) {
    logger.error(`Error updating user ${req.params.id}:`, error);
    next(error);
  }
};

const deleteUser = async (req, res, next) => {
  try {
    await adminService.deleteUser(req.params.id);
    logger.info(`User deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting user ${req.params.id}:`, error);
    next(error);
  }
};

const getSystemLogs = async (req, res, next) => {
  try {
    const logs = await adminService.getSystemLogs(req.query);
    res.status(200).json(logs);
  } catch (error) {
    logger.error('Error fetching system logs:', error);
    next(new AppError('Error fetching system logs', 500));
  }
};

const getSystemHealth = async (req, res, next) => {
  try {
    const healthData = await adminService.getSystemHealth();
    res.status(200).json(healthData);
  } catch (error) {
    logger.error('Error fetching system health:', error);
    next(new AppError('Error fetching system health', 500));
  }
};

const backupDatabase = async (req, res, next) => {
  try {
    const backupResult = await adminService.backupDatabase();
    logger.info('Database backup initiated');
    res.status(200).json(backupResult);
  } catch (error) {
    logger.error('Error initiating database backup:', error);
    next(new AppError('Error initiating database backup', 500));
  }
};

const restoreDatabase = async (req, res, next) => {
  try {
    validateRequest(req);
    const restoreResult = await adminService.restoreDatabase(req.body.backupId);
    logger.info(`Database restore initiated from backup: ${req.body.backupId}`);
    res.status(200).json(restoreResult);
  } catch (error) {
    logger.error('Error initiating database restore:', error);
    next(new AppError('Error initiating database restore', 500));
  }
};

module.exports = {
  getDashboardData,
  getUsers,
  createUser,
  updateUser,
  deleteUser,
  getSystemLogs,
  getSystemHealth,
  backupDatabase,
  restoreDatabase
};

================
File: backend/src/controllers/analyticsController.js
================
const { Request, Response } = require('express');
const { getRevenueData, getCustomerMetrics, getRealtimeMetrics } = require('../services/analyticsService');
const { AppError } = require('../utils/errorHandler');
const cacheMiddleware = require('../middleware/cache'); // Changed this line
const { Order, Guest } = require('../models');

const getOrderAnalytics = async (req, res) => {
  try {
    const startDate = new Date(req.query.start);
    const endDate = new Date(req.query.end);

    const orders = await Order.find({
      createdAt: { $gte: startDate, $lte: endDate }
    });

    // Process orders data for Grafana
    const processedData = orders.map(order => ({
      timestamp: order.createdAt,
      total: order.total,
      // Add other relevant fields
    }));

    res.json(processedData);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching order analytics' });
  }
};

const getGuestAnalytics = async (req, res) => {
  try {
    const guests = await Guest.find();

    // Process guest data for Grafana
    const processedData = guests.map(guest => ({
      id: guest.id,
      loyaltyPoints: guest.loyaltyPoints,
      totalOrders: guest.orders.length,
      // Add other relevant fields
    }));

    res.json(processedData);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching guest analytics' });
  }
};

const getRevenue = async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    if (!startDate || !endDate) {
      throw new AppError('Start date and end date are required', 400);
    }
    const revenue = await getRevenueData(new Date(startDate), new Date(endDate));
    res.json(revenue);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error fetching revenue data' });
    }
  }
};

const getCustomers = async (req, res) => {
  try {
    const metrics = await getCustomerMetrics();
    res.json(metrics);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching customer metrics' });
  }
};

const getRealtimeMetricsController = [
  cacheMiddleware(60), // Cache for 1 minute
  async (req, res) => {
    try {
      const metrics = await getRealtimeMetrics();
      res.json(metrics);
    } catch (error) {
      res.status(500).json({ message: 'Error fetching realtime metrics' });
    }
  }
];

module.exports = {
  getOrderAnalytics,
  getGuestAnalytics,
  getRevenue,
  getCustomers,
  getRealtimeMetricsController
};

================
File: backend/src/controllers/analyticsController.ts
================
import express from 'express';
import { getRevenueData, getCustomerMetrics, getRealtimeMetricsData } from '../services/analyticsService';
import { AppError } from '../utils/errorHandler';
import { cacheMiddleware } from '../middleware/cache';
import OrderModel from '../models/Order';
import GuestModel from '../models/Guest';

export const getOrderAnalytics = async (req: express.Request, res: express.Response) => {
  try {
    const startDate = new Date(req.query.start as string);
    const endDate = new Date(req.query.end as string);

    const orders = await OrderModel.find({
      createdAt: { $gte: startDate, $lte: endDate }
    });

    // Process orders data as needed for Grafana
    const processedData = orders.map(order => ({
      timestamp: order.createdAt,
      total: order.total,
      // Add other relevant fields
    }));

    res.json(processedData);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching order analytics' });
  }
};

export const getGuestAnalytics = async (req: express.Request, res: express.Response) => {
  try {
    const guests = await GuestModel.find();

    // Process guest data as needed for Grafana
    const processedData = guests.map(guest => ({
      id: guest.id,
      loyaltyPoints: guest.loyaltyPoints,
      totalOrders: guest.orders.length,
      // Add other relevant fields
    }));

    res.json(processedData);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching guest analytics' });
  }
};

export const getRevenue = async (req: express.Request, res: express.Response) => {
  try {
    const { startDate, endDate } = req.query;
    if (!startDate || !endDate) {
      throw new AppError('Start date and end date are required', 400);
    }
    const revenue = await getRevenueData(new Date(startDate as string), new Date(endDate as string));
    res.json(revenue);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error fetching revenue data' });
    }
  }
};

export const getCustomers = async (req: express.Request, res: express.Response) => {
  try {
    const metrics = await getCustomerMetrics();
    res.json(metrics);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching customer metrics' });
  }
};

export const getRealtimeMetricsHandler = [
  cacheMiddleware(60), // Cache for 1 minute
  async (req: express.Request, res: express.Response, next: express.NextFunction) => {
    try {
      const metrics = await getRealtimeMetricsData();
      res.json(metrics);
    } catch (error) {
      next(error);
    }
  }
];

================
File: backend/src/controllers/assetController.js
================
const path = require('path');
const fs = require('fs').promises;
const { v4: uuidv4 } = require('uuid');
const { Asset } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');
const { optimizeImage } = require('../services/imageService');

const UPLOAD_DIR = path.join(__dirname, '..', '..', 'uploads');

const ensureUploadDir = async () => {
  try {
    await fs.access(UPLOAD_DIR);
  } catch {
    await fs.mkdir(UPLOAD_DIR, { recursive: true });
  }
};

const getAllAssets = async (req, res, next) => {
  try {
    const assets = await Asset.findAll({ where: { tenantId: req.user.tenantId } });
    res.status(200).json(assets);
  } catch (error) {
    logger.error('Error fetching assets:', error);
    next(new AppError('Error fetching assets', 500));
  }
};

const getAsset = async (req, res, next) => {
  try {
    const asset = await Asset.findOne({ 
      where: { id: req.params.id, tenantId: req.user.tenantId } 
    });
    if (!asset) {
      return next(new AppError('Asset not found', 404));
    }
    res.status(200).json(asset);
  } catch (error) {
    logger.error(`Error fetching asset ${req.params.id}:`, error);
    next(new AppError('Error fetching asset', 500));
  }
};

const uploadAsset = async (req, res, next) => {
  try {
    if (!req.file) {
      return next(new AppError('No file uploaded', 400));
    }

    await ensureUploadDir();

    const optimizedBuffer = await optimizeImage(req.file.buffer);
    const filename = `${uuidv4()}-${req.file.originalname}`;
    const filePath = path.join(UPLOAD_DIR, filename);

    await fs.writeFile(filePath, optimizedBuffer);

    const asset = await Asset.create({
      name: req.file.originalname,
      type: req.file.mimetype,
      url: `/uploads/${filename}`,
      size: optimizedBuffer.length,
      tenantId: req.user.tenantId
    });

    logger.info(`Asset uploaded: ${asset.id}`);
    res.status(201).json(asset);
  } catch (error) {
    logger.error('Error uploading asset:', error);
    next(new AppError('Error uploading asset', 500));
  }
};

const updateAsset = async (req, res, next) => {
  try {
    const asset = await Asset.findOne({ 
      where: { id: req.params.id, tenantId: req.user.tenantId } 
    });
    if (!asset) {
      return next(new AppError('Asset not found', 404));
    }

    const updatedAsset = await asset.update(req.body);
    logger.info(`Asset updated: ${updatedAsset.id}`);
    res.status(200).json(updatedAsset);
  } catch (error) {
    logger.error(`Error updating asset ${req.params.id}:`, error);
    next(new AppError('Error updating asset', 500));
  }
};

const deleteAsset = async (req, res, next) => {
  try {
    const asset = await Asset.findOne({ 
      where: { id: req.params.id, tenantId: req.user.tenantId } 
    });
    if (!asset) {
      return next(new AppError('Asset not found', 404));
    }

    const filePath = path.join(UPLOAD_DIR, path.basename(asset.url));
    await fs.unlink(filePath);
    await asset.destroy();

    logger.info(`Asset deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting asset ${req.params.id}:`, error);
    next(new AppError('Error deleting asset', 500));
  }
};

module.exports = {
  getAllAssets,
  getAsset,
  uploadAsset,
  updateAsset,
  deleteAsset
};

================
File: backend/src/controllers/auditLogController.js
================
const { Request, Response } = require 'express';
const { AuditLog } = require '../models';

const getAuditLogs = async (req, res) => {
  try {
    const { page = 1, limit = 20, startDate, endDate, userId, action } = req.query;
    const options = {
      order: [['createdAt', 'DESC']],
      limit(limit ),
      offset: (parseInt(page ) - 1) * parseInt(limit ),
    };

    if (startDate && endDate) {
      options.where = {
        ...options.where,
        createdAt: {
          [Op.between]: [new Date(startDate ), new Date(endDate )],
        },
      };
    }

    if (userId) {
      options.where = {
        ...options.where,
        userId,
      };
    }

    if (action) {
      options.where = {
        ...options.where,
        action,
      };
    }

    const logs = await AuditLog.findAndCountAll(options);

    res.json({
      logs.rows,
      totalPages.ceil(logs.count / parseInt(limit )),
      currentPage(page ),
    });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching audit logs', error });
  }
};

================
File: backend/src/controllers/authController.js
================
const { validationResult } = require('express-validator');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const { User } = require('../models');
const userService = require('../services/userService');
const { UnauthorizedError } = require('../utils/errors');
const Client = require('../models/Client'); // Assuming Client model is defined

const login = async (req, res) => {
  const { email, password } = req.body;
  const { subdomain } = req.params; // Assuming subdomain is passed as a route parameter

  try {
    const client = await Client.findOne({ subdomain });
    if (!client) {
      return res.status(404).json({ message: 'Client not found' });
    }

    const user = await User.findOne({ email, clientId: client._id });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    const token = user.generateAuthToken();
    res.json({ user, token });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

const register = async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  const { username, email, password } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({
      username,
      email,
      password: hashedPassword
    });

    const token = jwt.sign(
      { userId: user.id, username: user.username, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.status(201).json({ token, user: { id: user.id, username: user.username, role: user.role } });
  } catch (error) {
    next(error);
  }
};

const logout = (req, res) => {
  // In a stateless JWT setup, we don't need to do anything server-side for logout
  res.json({ message: 'Logged out successfully' });
};

const getUser = async (req, res, next) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: { exclude: ['password'] }
    });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json(user);
  } catch (error) {
    next(error);
  }
};

const verifyPhone = async (req, res, next) => {
  // Implement phone verification logic
};

const requestLoginCode = async (req, res, next) => {
  // Implement login code request logic
};

const loginWithCode = async (req, res, next) => {
  // Implement login with code logic
};

module.exports = {
  login,
  register,
  logout,
  getUser,
  verifyPhone,
  requestLoginCode,
  loginWithCode,
};

================
File: backend/src/controllers/brandingController.js
================
const brandingService = require('../services/brandingService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getBrandingProfiles = async (req, res, next) => {
  try {
    const { clientId } = req.params;
    const profiles = await brandingService.getBrandingProfiles(clientId);
    res.status(200).json(profiles);
  } catch (error) {
    logger.error(`Error fetching branding profiles for client ${req.params.clientId}:`, error);
    next(new AppError('Error fetching branding profiles', 500));
  }
};

const getBrandingProfileById = async (req, res, next) => {
  try {
    const { id } = req.params;
    const profile = await brandingService.getBrandingProfileById(id);
    if (!profile) {
      return next(new AppError('Branding profile not found', 404));
    }
    res.status(200).json(profile);
  } catch (error) {
    logger.error(`Error fetching branding profile ${req.params.id}:`, error);
    next(new AppError('Error fetching branding profile', 500));
  }
};

const createBrandingProfile = async (req, res, next) => {
  try {
    const newProfile = await brandingService.createBrandingProfile(req.body);
    logger.info(`New branding profile created: ${newProfile.id}`);
    res.status(201).json(newProfile);
  } catch (error) {
    logger.error('Error creating branding profile:', error);
    next(new AppError('Error creating branding profile', 500));
  }
};

const updateBrandingProfile = async (req, res, next) => {
  try {
    const { id } = req.params;
    const updatedProfile = await brandingService.updateBrandingProfile(id, req.body);
    if (!updatedProfile) {
      return next(new AppError('Branding profile not found', 404));
    }
    logger.info(`Branding profile updated: ${id}`);
    res.status(200).json(updatedProfile);
  } catch (error) {
    logger.error(`Error updating branding profile ${req.params.id}:`, error);
    next(new AppError('Error updating branding profile', 500));
  }
};

const deleteBrandingProfile = async (req, res, next) => {
  try {
    const { id } = req.params;
    await brandingService.deleteBrandingProfile(id);
    logger.info(`Branding profile deleted: ${id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting branding profile ${req.params.id}:`, error);
    next(new AppError('Error deleting branding profile', 500));
  }
};

module.exports = {
  getBrandingProfiles,
  getBrandingProfileById,
  createBrandingProfile,
  updateBrandingProfile,
  deleteBrandingProfile
};

================
File: backend/src/controllers/brandingProfileController.js
================
const { BrandingProfile } = require('../models');

exports.getBrandingProfile = async (req, res) => {
  try {
    const brandingProfile = await BrandingProfile.findOne({ where: { clientId: req.user.clientId } });
    if (brandingProfile) {
      res.json(brandingProfile);
    } else {
      res.status(404).json({ message: 'Branding profile not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching branding profile', error: error.message });
  }
};

exports.createBrandingProfile = async (req, res) => {
  try {
    const newBrandingProfile = await BrandingProfile.create({ ...req.body, clientId: req.user.clientId });
    res.status(201).json(newBrandingProfile);
  } catch (error) {
    res.status(400).json({ message: 'Error creating branding profile', error: error.message });
  }
};

exports.updateBrandingProfile = async (req, res) => {
  try {
    const [updated] = await BrandingProfile.update(req.body, {
      where: { clientId: req.user.clientId }
    });
    if (updated) {
      const updatedBrandingProfile = await BrandingProfile.findOne({ where: { clientId: req.user.clientId } });
      res.json(updatedBrandingProfile);
    } else {
      res.status(404).json({ message: 'Branding profile not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating branding profile', error: error.message });
  }
};

exports.deleteBrandingProfile = async (req, res) => {
  try {
    const deleted = await BrandingProfile.destroy({
      where: { clientId: req.user.clientId }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Branding profile not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting branding profile', error: error.message });
  }
};

================
File: backend/src/controllers/campaignResultController.js
================
const campaignResultService = require('../services/campaignResultService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllCampaignResults = async (req, res, next) => {
  try {
    const results = await campaignResultService.getAllCampaignResults();
    res.status(200).json(results);
  } catch (error) {
    logger.error('Error fetching campaign results:', error);
    next(new AppError('Error fetching campaign results', 500));
  }
};

const getCampaignResultById = async (req, res, next) => {
  try {
    const result = await campaignResultService.getCampaignResultById(req.params.id);
    if (!result) {
      return next(new AppError('Campaign result not found', 404));
    }
    res.status(200).json(result);
  } catch (error) {
    logger.error(`Error fetching campaign result ${req.params.id}:`, error);
    next(new AppError('Error fetching campaign result', 500));
  }
};

const createCampaignResult = async (req, res, next) => {
  try {
    const newResult = await campaignResultService.createCampaignResult(req.body);
    res.status(201).json(newResult);
  } catch (error) {
    logger.error('Error creating campaign result:', error);
    next(new AppError('Error creating campaign result', 500));
  }
};

const updateCampaignResult = async (req, res, next) => {
  try {
    const updatedResult = await campaignResultService.updateCampaignResult(req.params.id, req.body);
    if (!updatedResult) {
      return next(new AppError('Campaign result not found', 404));
    }
    res.status(200).json(updatedResult);
  } catch (error) {
    logger.error(`Error updating campaign result ${req.params.id}:`, error);
    next(new AppError('Error updating campaign result', 500));
  }
};

const deleteCampaignResult = async (req, res, next) => {
  try {
    const deleted = await campaignResultService.deleteCampaignResult(req.params.id);
    if (!deleted) {
      return next(new AppError('Campaign result not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting campaign result ${req.params.id}:`, error);
    next(new AppError('Error deleting campaign result', 500));
  }
};

module.exports = {
  getAllCampaignResults,
  getCampaignResultById,
  createCampaignResult,
  updateCampaignResult,
  deleteCampaignResult
};

================
File: backend/src/controllers/campaignStepController.js
================
const { CampaignStep } = require('../models');

exports.getAllCampaignSteps = async (req, res) => {
  try {
    const campaignSteps = await CampaignStep.findAll();
    res.json(campaignSteps);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching campaign steps', error: error.message });
  }
};

exports.createCampaignStep = async (req, res) => {
  try {
    const newCampaignStep = await CampaignStep.create(req.body);
    res.status(201).json(newCampaignStep);
  } catch (error) {
    res.status(400).json({ message: 'Error creating campaign step', error: error.message });
  }
};

exports.getCampaignStep = async (req, res) => {
  try {
    const campaignStep = await CampaignStep.findByPk(req.params.id);
    if (campaignStep) {
      res.json(campaignStep);
    } else {
      res.status(404).json({ message: 'Campaign step not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching campaign step', error: error.message });
  }
};

exports.updateCampaignStep = async (req, res) => {
  try {
    const [updated] = await CampaignStep.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedCampaignStep = await CampaignStep.findByPk(req.params.id);
      res.json(updatedCampaignStep);
    } else {
      res.status(404).json({ message: 'Campaign step not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating campaign step', error: error.message });
  }
};

exports.deleteCampaignStep = async (req, res) => {
  try {
    const deleted = await CampaignStep.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Campaign step not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting campaign step', error: error.message });
  }
};

================
File: backend/src/controllers/categoryController.js
================
const categoryService = require('../services/categoryService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllCategories = async (req, res, next) => {
  try {
    const categories = await categoryService.getAllCategories(req.user.clientId);
    res.status(200).json(categories);
  } catch (error) {
    logger.error('Error fetching categories:', error);
    next(new AppError('Error fetching categories', 500));
  }
};

const getCategoryById = async (req, res, next) => {
  try {
    const category = await categoryService.getCategoryById(req.params.id, req.user.clientId);
    res.status(200).json(category);
  } catch (error) {
    logger.error(`Error fetching category ${req.params.id}:`, error);
    next(error);
  }
};

const createCategory = async (req, res, next) => {
  try {
    const newCategory = await categoryService.createCategory(req.body, req.user.clientId);
    res.status(201).json(newCategory);
  } catch (error) {
    logger.error('Error creating category:', error);
    next(error);
  }
};

const updateCategory = async (req, res, next) => {
  try {
    const updatedCategory = await categoryService.updateCategory(req.params.id, req.body, req.user.clientId);
    res.status(200).json(updatedCategory);
  } catch (error) {
    logger.error(`Error updating category ${req.params.id}:`, error);
    next(error);
  }
};

const deleteCategory = async (req, res, next) => {
  try {
    await categoryService.deleteCategory(req.params.id, req.user.clientId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting category ${req.params.id}:`, error);
    next(error);
  }
};

module.exports = {
  getAllCategories,
  getCategoryById,
  createCategory,
  updateCategory,
  deleteCategory
};

================
File: backend/src/controllers/cateringAdminController.js
================
const { CateringAdmin, User, Location } = require('../models');

exports.getAllCateringAdmins = async (req, res) => {
  try {
    const cateringAdmins = await CateringAdmin.findAll({
      include: [
        { model: User, attributes: ['id', 'name', 'email'] },
        { model: Location, attributes: ['id', 'name'] }
      ]
    });
    res.json(cateringAdmins);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering admins', error: error.message });
  }
};

exports.createCateringAdmin = async (req, res) => {
  try {
    const newCateringAdmin = await CateringAdmin.create(req.body);
    res.status(201).json(newCateringAdmin);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering admin', error: error.message });
  }
};

exports.getCateringAdmin = async (req, res) => {
  try {
    const cateringAdmin = await CateringAdmin.findByPk(req.params.id, {
      include: [
        { model: User, attributes: ['id', 'name', 'email'] },
        { model: Location, attributes: ['id', 'name'] }
      ]
    });
    if (cateringAdmin) {
      res.json(cateringAdmin);
    } else {
      res.status(404).json({ message: 'Catering admin not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering admin', error: error.message });
  }
};

exports.updateCateringAdmin = async (req, res) => {
  try {
    const [updated] = await CateringAdmin.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedCateringAdmin = await CateringAdmin.findByPk(req.params.id, {
        include: [
          { model: User, attributes: ['id', 'name', 'email'] },
          { model: Location, attributes: ['id', 'name'] }
        ]
      });
      res.json(updatedCateringAdmin);
    } else {
      res.status(404).json({ message: 'Catering admin not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering admin', error: error.message });
  }
};

exports.deleteCateringAdmin = async (req, res) => {
  try {
    const deleted = await CateringAdmin.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering admin not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering admin', error: error.message });
  }
};

================
File: backend/src/controllers/cateringController.js
================
const cateringService = require('../services/cateringService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getCateringMenu = async (req, res, next) => {
  try {
    const { locationId } = req.params;
    const menu = await cateringService.getCateringMenu(locationId, req.user.clientId);
    res.status(200).json(menu);
  } catch (error) {
    logger.error(`Error fetching catering menu for location ${req.params.locationId}:`, error);
    next(new AppError('Error fetching catering menu', 500));
  }
};

const createCateringOrder = async (req, res, next) => {
  try {
    const order = await cateringService.createCateringOrder(req.body, req.user.clientId);
    res.status(201).json(order);
  } catch (error) {
    logger.error('Error creating catering order:', error);
    next(new AppError('Error creating catering order', 500));
  }
};

const getCateringOrderDetails = async (req, res, next) => {
  try {
    const { orderId } = req.params;
    const order = await cateringService.getCateringOrderDetails(orderId, req.user.clientId);
    res.status(200).json(order);
  } catch (error) {
    logger.error(`Error fetching catering order details for order ${req.params.orderId}:`, error);
    next(new AppError('Error fetching catering order details', 500));
  }
};

const updateCateringOrderStatus = async (req, res, next) => {
  try {
    const { orderId } = req.params;
    const { status } = req.body;
    const updatedOrder = await cateringService.updateCateringOrderStatus(orderId, status, req.user.clientId);
    res.status(200).json(updatedOrder);
  } catch (error) {
    logger.error(`Error updating catering order status for order ${req.params.orderId}:`, error);
    next(new AppError('Error updating catering order status', 500));
  }
};

const getAllCateringOrders = async (req, res, next) => {
  try {
    const orders = await cateringService.getAllCateringOrders(req.user.clientId);
    res.status(200).json(orders);
  } catch (error) {
    logger.error('Error fetching all catering orders:', error);
    next(new AppError('Error fetching catering orders', 500));
  }
};

const upsertCateringMenuItem = async (req, res, next) => {
  try {
    const menuItem = await cateringService.upsertCateringMenuItem(req.body, req.user.clientId);
    res.status(201).json(menuItem);
  } catch (error) {
    logger.error('Error upserting catering menu item:', error);
    next(new AppError('Error upserting catering menu item', 500));
  }
};

const deleteCateringMenuItem = async (req, res, next) => {
  try {
    const { itemId } = req.params;
    await cateringService.deleteCateringMenuItem(itemId, req.user.clientId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting catering menu item ${req.params.itemId}:`, error);
    next(new AppError('Error deleting catering menu item', 500));
  }
};

module.exports = {
  getCateringMenu,
  createCateringOrder,
  getCateringOrderDetails,
  updateCateringOrderStatus,
  getAllCateringOrders,
  upsertCateringMenuItem,
  deleteCateringMenuItem
};

================
File: backend/src/controllers/cateringMenuController.js
================
const { CateringMenu } = require('../models');

exports.getAllCateringMenus = async (req, res) => {
  try {
    const menus = await CateringMenu.findAll({ where: { clientId: req.user.clientId } });
    res.json(menus);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering menus', error: error.message });
  }
};

exports.createCateringMenu = async (req, res) => {
  try {
    const newMenu = await CateringMenu.create({ ...req.body, clientId: req.user.clientId });
    res.status(201).json(newMenu);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering menu', error: error.message });
  }
};

exports.getCateringMenu = async (req, res) => {
  try {
    const menu = await CateringMenu.findOne({ 
      where: { id: req.params.id, clientId: req.user.clientId }
    });
    if (menu) {
      res.json(menu);
    } else {
      res.status(404).json({ message: 'Catering menu not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering menu', error: error.message });
  }
};

exports.updateCateringMenu = async (req, res) => {
  try {
    const [updated] = await CateringMenu.update(req.body, {
      where: { id: req.params.id, clientId: req.user.clientId }
    });
    if (updated) {
      const updatedMenu = await CateringMenu.findOne({ where: { id: req.params.id } });
      res.json(updatedMenu);
    } else {
      res.status(404).json({ message: 'Catering menu not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering menu', error: error.message });
  }
};

exports.deleteCateringMenu = async (req, res) => {
  try {
    const deleted = await CateringMenu.destroy({
      where: { id: req.params.id, clientId: req.user.clientId }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering menu not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering menu', error: error.message });
  }
};

================
File: backend/src/controllers/cateringMenuItemController.js
================
const { CateringMenuItem } = require('../models');

exports.getAllCateringMenuItems = async (req, res) => {
  try {
    const items = await CateringMenuItem.findAll({ where: { menuId: req.params.menuId } });
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering menu items', error: error.message });
  }
};

exports.createCateringMenuItem = async (req, res) => {
  try {
    const newItem = await CateringMenuItem.create({ ...req.body, menuId: req.params.menuId });
    res.status(201).json(newItem);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering menu item', error: error.message });
  }
};

exports.getCateringMenuItem = async (req, res) => {
  try {
    const item = await CateringMenuItem.findOne({ 
      where: { id: req.params.id, menuId: req.params.menuId }
    });
    if (item) {
      res.json(item);
    } else {
      res.status(404).json({ message: 'Catering menu item not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering menu item', error: error.message });
  }
};

exports.updateCateringMenuItem = async (req, res) => {
  try {
    const [updated] = await CateringMenuItem.update(req.body, {
      where: { id: req.params.id, menuId: req.params.menuId }
    });
    if (updated) {
      const updatedItem = await CateringMenuItem.findOne({ where: { id: req.params.id } });
      res.json(updatedItem);
    } else {
      res.status(404).json({ message: 'Catering menu item not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering menu item', error: error.message });
  }
};

exports.deleteCateringMenuItem = async (req, res) => {
  try {
    const deleted = await CateringMenuItem.destroy({
      where: { id: req.params.id, menuId: req.params.menuId }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering menu item not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering menu item', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderAssignmentsController.js
================
const { CateringOrderAssignment } = require('../models');

exports.getAllAssignments = async (req, res) => {
  try {
    const assignments = await CateringOrderAssignment.findAll({ where: { clientId: req.user.clientId } });
    res.json(assignments);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching assignments', error: error.message });
  }
};

exports.createAssignment = async (req, res) => {
  try {
    const newAssignment = await CateringOrderAssignment.create({ ...req.body, clientId: req.user.clientId });
    res.status(201).json(newAssignment);
  } catch (error) {
    res.status(400).json({ message: 'Error creating assignment', error: error.message });
  }
};

exports.getAssignment = async (req, res) => {
  try {
    const assignment = await CateringOrderAssignment.findOne({ 
      where: { id: req.params.id, clientId: req.user.clientId }
    });
    if (assignment) {
      res.json(assignment);
    } else {
      res.status(404).json({ message: 'Assignment not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching assignment', error: error.message });
  }
};

exports.updateAssignment = async (req, res) => {
  try {
    const [updated] = await CateringOrderAssignment.update(req.body, {
      where: { id: req.params.id, clientId: req.user.clientId }
    });
    if (updated) {
      const updatedAssignment = await CateringOrderAssignment.findOne({ where: { id: req.params.id } });
      res.json(updatedAssignment);
    } else {
      res.status(404).json({ message: 'Assignment not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating assignment', error: error.message });
  }
};

exports.deleteAssignment = async (req, res) => {
  try {
    const deleted = await CateringOrderAssignment.destroy({
      where: { id: req.params.id, clientId: req.user.clientId }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Assignment not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting assignment', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderController.js
================
const CateringOrderService = require('../services/cateringOrderService');
const logger = require('../services/logger');
const { check, validationResult } = require('express-validator');
const CateringOrder = require('../models/CateringOrder');
const CateringOrderItem = require('../models/CateringOrderItem');
const Modifier = require('../models/Modifier');

// Validation middleware for catering order creation
const validateCateringOrder = [
  check('guestId').isInt().withMessage('Valid guest ID is required'),
  check('locationId').isInt().withMessage('Valid location ID is required'),
  check('scheduledDate').isISO8601().withMessage('Valid scheduled date is required'),
  check('orderDetails').isArray().withMessage('Order details must be an array of items'),
  check('houseAccountId').optional().isInt().withMessage('Valid house account ID is required'),
  check('serviceFees').optional().isObject().withMessage('Service fees must be an object'),
  check('tips').optional().isObject().withMessage('Tips must be an object'),
];

// Create a new catering order
exports.createCateringOrder = [
  ...validateCateringOrder,
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const order = await CateringOrderService.createCateringOrder(req.body);
      res.status(201).json(order);
    } catch (error) {
      logger.error(`Error creating catering order: ${error.message}`);
      res.status(500).json({ message: 'Error creating catering order', error });
    }
  }
];

// Fetch catering orders by house account
exports.getCateringOrdersByHouseAccount = async (req, res) => {
  try {
    const orders = await CateringOrderService.getCateringOrdersByHouseAccount(req.params.houseAccountId);
    res.json(orders);
  } catch (error) {
    logger.error(`Error fetching catering orders by house account: ${error.message}`);
    res.status(500).json({ message: 'Error fetching catering orders', error });
  }
};

// Fetch catering orders by guest
exports.getCateringOrdersByGuest = async (req, res) => {
  try {
    const orders = await CateringOrderService.getCateringOrdersByGuest(req.params.guestId);
    res.json(orders);
  } catch (error) {
    logger.error(`Error fetching catering orders by guest: ${error.message}`);
    res.status(500).json({ message: 'Error fetching catering orders', error });
  }
};

// Handle catering invoicing
exports.handleCateringInvoicing = async (req, res) => {
  try {
    const result = await CateringOrderService.handleCateringInvoicing(req.params.orderId);
    res.json(result);
  } catch (error) {
    logger.error(`Error handling catering invoicing: ${error.message}`);
    res.status(500).json({ message: 'Error handling catering invoicing', error });
  }
};

// Get orders
exports.getOrders = async (req, res) => {
  try {
    const { clientId } = req.params;
    const { status } = req.query;
    let query = { clientId };
    if (status && status !== 'all') {
      query.status = status;
    }
    const orders = await CateringOrder.find(query);
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering orders', error: error.message });
  }
};

// Update order status
exports.updateOrderStatus = async (req, res) => {
  try {
    const { clientId, orderId } = req.params;
    const { status } = req.body;
    const updatedOrder = await CateringOrder.findOneAndUpdate(
      { _id: orderId, clientId },
      { status },
      { new: true }
    );
    if (!updatedOrder) {
      return res.status(404).json({ message: 'Order not found' });
    }
    res.json(updatedOrder);
  } catch (error) {
    res.status(500).json({ message: 'Error updating order status', error: error.message });
  }
};

// Delete order
exports.deleteOrder = async (req, res) => {
  try {
    const { clientId, orderId } = req.params;
    const deletedOrder = await CateringOrder.findOneAndDelete({ _id: orderId, clientId });
    if (!deletedOrder) {
      return res.status(404).json({ message: 'Order not found' });
    }
    res.json({ message: 'Order deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting order', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderCustomizationController.js
================
const CateringOrderCustomization = require('../models/CateringOrderCustomization');

exports.getAllCustomizations = async (req, res) => {
  try {
    const customizations = await CateringOrderCustomization.findAll();
    res.status(200).json(customizations);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching customizations', error: error.message });
  }
};

exports.getCustomizationById = async (req, res) => {
  try {
    const customization = await CateringOrderCustomization.findByPk(req.params.id);
    if (!customization) {
      return res.status(404).json({ message: 'Customization not found' });
    }
    res.status(200).json(customization);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching customization', error: error.message });
  }
};

exports.createCustomization = async (req, res) => {
  try {
    const newCustomization = await CateringOrderCustomization.create(req.body);
    res.status(201).json(newCustomization);
  } catch (error) {
    res.status(500).json({ message: 'Error creating customization', error: error.message });
  }
};

exports.updateCustomization = async (req, res) => {
  try {
    const [updated] = await CateringOrderCustomization.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedCustomization = await CateringOrderCustomization.findByPk(req.params.id);
      res.status(200).json(updatedCustomization);
    } else {
      res.status(404).json({ message: 'Customization not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error updating customization', error: error.message });
  }
};

exports.deleteCustomization = async (req, res) => {
  try {
    const deleted = await CateringOrderCustomization.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Customization not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting customization', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderFeesController.js
================
const { CateringOrderFees } = require('../models');

exports.getAllFees = async (req, res) => {
  try {
    const fees = await CateringOrderFees.findAll();
    res.json(fees);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order fees', error: error.message });
  }
};

exports.createFee = async (req, res) => {
  try {
    const newFee = await CateringOrderFees.create(req.body);
    res.status(201).json(newFee);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering order fee', error: error.message });
  }
};

exports.getFee = async (req, res) => {
  try {
    const fee = await CateringOrderFees.findByPk(req.params.id);
    if (fee) {
      res.json(fee);
    } else {
      res.status(404).json({ message: 'Catering order fee not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order fee', error: error.message });
  }
};

exports.updateFee = async (req, res) => {
  try {
    const [updated] = await CateringOrderFees.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedFee = await CateringOrderFees.findByPk(req.params.id);
      res.json(updatedFee);
    } else {
      res.status(404).json({ message: 'Catering order fee not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering order fee', error: error.message });
  }
};

exports.deleteFee = async (req, res) => {
  try {
    const deleted = await CateringOrderFees.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering order fee not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering order fee', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderItemController.js
================
const { CateringOrderItem } = require('../models');

exports.getAllItems = async (req, res) => {
  try {
    const items = await CateringOrderItem.findAll();
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order items', error: error.message });
  }
};

exports.createItem = async (req, res) => {
  try {
    const newItem = await CateringOrderItem.create(req.body);
    res.status(201).json(newItem);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering order item', error: error.message });
  }
};

exports.getItem = async (req, res) => {
  try {
    const item = await CateringOrderItem.findByPk(req.params.id);
    if (item) {
      res.json(item);
    } else {
      res.status(404).json({ message: 'Catering order item not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order item', error: error.message });
  }
};

exports.updateItem = async (req, res) => {
  try {
    const [updated] = await CateringOrderItem.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedItem = await CateringOrderItem.findByPk(req.params.id);
      res.json(updatedItem);
    } else {
      res.status(404).json({ message: 'Catering order item not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering order item', error: error.message });
  }
};

exports.deleteItem = async (req, res) => {
  try {
    const deleted = await CateringOrderItem.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering order item not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering order item', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderLocationController.js
================
const { CateringOrderLocation } = require('../models');

exports.getAllLocations = async (req, res) => {
  try {
    const locations = await CateringOrderLocation.findAll();
    res.json(locations);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order locations', error: error.message });
  }
};

exports.createLocation = async (req, res) => {
  try {
    const newLocation = await CateringOrderLocation.create(req.body);
    res.status(201).json(newLocation);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering order location', error: error.message });
  }
};

exports.getLocation = async (req, res) => {
  try {
    const location = await CateringOrderLocation.findByPk(req.params.id);
    if (location) {
      res.json(location);
    } else {
      res.status(404).json({ message: 'Catering order location not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order location', error: error.message });
  }
};

exports.updateLocation = async (req, res) => {
  try {
    const [updated] = await CateringOrderLocation.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedLocation = await CateringOrderLocation.findByPk(req.params.id);
      res.json(updatedLocation);
    } else {
      res.status(404).json({ message: 'Catering order location not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering order location', error: error.message });
  }
};

exports.deleteLocation = async (req, res) => {
  try {
    const deleted = await CateringOrderLocation.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering order location not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering order location', error: error.message });
  }
};

================
File: backend/src/controllers/cateringOrderModifierController.js
================
const { CateringOrderModifier } = require('../models');

exports.getAllModifiers = async (req, res) => {
  try {
    const modifiers = await CateringOrderModifier.findAll();
    res.json(modifiers);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order modifiers', error: error.message });
  }
};

exports.createModifier = async (req, res) => {
  try {
    const newModifier = await CateringOrderModifier.create(req.body);
    res.status(201).json(newModifier);
  } catch (error) {
    res.status(400).json({ message: 'Error creating catering order modifier', error: error.message });
  }
};

exports.getModifier = async (req, res) => {
  try {
    const modifier = await CateringOrderModifier.findByPk(req.params.id);
    if (modifier) {
      res.json(modifier);
    } else {
      res.status(404).json({ message: 'Catering order modifier not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering order modifier', error: error.message });
  }
};

exports.updateModifier = async (req, res) => {
  try {
    const [updated] = await CateringOrderModifier.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedModifier = await CateringOrderModifier.findByPk(req.params.id);
      res.json(updatedModifier);
    } else {
      res.status(404).json({ message: 'Catering order modifier not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering order modifier', error: error.message });
  }
};

exports.deleteModifier = async (req, res) => {
  try {
    const deleted = await CateringOrderModifier.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ message: 'Catering order modifier not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error deleting catering order modifier', error: error.message });
  }
};

================
File: backend/src/controllers/cateringSettingsController.js
================
const { CateringSettings } = require('../models');

exports.getSettings = async (req, res) => {
  try {
    const settings = await CateringSettings.findOne({ where: { locationId: req.user.locationId } });
    if (settings) {
      res.json(settings);
    } else {
      res.status(404).json({ message: 'Catering settings not found' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering settings', error: error.message });
  }
};

exports.updateSettings = async (req, res) => {
  try {
    const [updated] = await CateringSettings.update(req.body, {
      where: { locationId: req.user.locationId }
    });
    if (updated) {
      const updatedSettings = await CateringSettings.findOne({ where: { locationId: req.user.locationId } });
      res.json(updatedSettings);
    } else {
      res.status(404).json({ message: 'Catering settings not found' });
    }
  } catch (error) {
    res.status(400).json({ message: 'Error updating catering settings', error: error.message });
  }
};

================
File: backend/src/controllers/checkoutController.js
================
const OrderHistory = require('../models/OrderHistory');
const Order = require('../models/Order');
const axios = require('axios');
const Guest = require('../models/Guest');
const LocationMenuOverride = require('../models/LocationMenuOverride');
const { calculateServiceFees, calculateDiscounts } = require('../utils/pricingUtils');
const checkoutService = require('../services/checkoutService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const checkout = async (req, res) => {
  const { items, paymentMethod, guestId, locationId } = req.body;

  try {
    let totalCurrencyPrice = 0;
    let totalPointsPrice = 0;
    const orderDetails = [];

    for (const item of items) {
      const locationOverride = await LocationMenuOverride.findOne({
        where: { menuItemId: item.menuItemId, locationId },
      });

      if (!locationOverride) {
        return res.status(400).json({ message: `Item ${item.menuItemId} not available for this location.` });
      }

      let price = locationOverride.price;
      if (paymentMethod === 'currency') {
        const { finalPrice, serviceFees } = calculateServiceFees(price, locationOverride, locationId);
        price = finalPrice;
        totalCurrencyPrice += price * item.quantity;
        orderDetails.push({ ...item, price, serviceFees });
      } else if (paymentMethod === 'points') {
        totalPointsPrice += locationOverride.pointsPrice * item.quantity;
        orderDetails.push({ ...item, price: locationOverride.pointsPrice });
      }
    }

    const guest = await Guest.findByPk(guestId);
    const discount = calculateDiscounts(guest.loyaltyTier, totalCurrencyPrice);
    totalCurrencyPrice -= discount;

    const posOrderData = {
      guestId,
      locationId,
      items: orderDetails,
      paymentMethod,
      totalCurrencyPrice,
      totalPointsPrice,
    };

    const posResponse = await sendOrderToPOS(posOrderData);
    if (!posResponse.approved) {
      return res.status(400).json({ message: 'Order could not be approved by the POS system.' });
    }

    const order = await Order.create({
      guestId,
      locationId,
      paymentMethod,
      totalAmount: paymentMethod === 'currency' ? totalCurrencyPrice : totalPointsPrice,
    });

    await OrderHistory.create({
      orderId: order.id,
      guestId,
      locationId,
      paymentMethod,
      totalAmount: paymentMethod === 'currency' ? totalCurrencyPrice : totalPointsPrice,
      orderDetails,
      action: 'Order Placed',
    });

    res.json({
      totalCurrencyPrice,
      totalPointsPrice,
      message: 'Checkout and order processed successfully.',
    });
  } catch (error) {
    res.status(500).json({ message: 'Error during checkout', error });
  }
};

async function sendOrderToPOS(orderData) {
  try {
    const response = await axios.post('https://pos-system.com/api/orders', orderData);
    return response.data;
  } catch (error) {
    console.error('Error communicating with POS system:', error);
    return { approved: false };
  }
}

const initializeCheckout = async (req, res, next) => {
  try {
    const checkout = await checkoutService.initializeCheckout(req.body, req.user.clientId);
    res.status(200).json(checkout);
  } catch (error) {
    logger.error('Error initializing checkout:', error);
    next(new AppError('Error initializing checkout', 500));
  }
};

const processPayment = async (req, res, next) => {
  try {
    const result = await checkoutService.processPayment(req.body, req.user.clientId);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error processing payment:', error);
    next(new AppError('Error processing payment', 500));
  }
};

const confirmOrder = async (req, res, next) => {
  try {
    const order = await checkoutService.confirmOrder(req.body, req.user.clientId);
    res.status(200).json(order);
  } catch (error) {
    logger.error('Error confirming order:', error);
    next(new AppError('Error confirming order', 500));
  }
};

const getCheckoutStatus = async (req, res, next) => {
  try {
    const status = await checkoutService.getCheckoutStatus(req.params.checkoutId, req.user.clientId);
    res.status(200).json(status);
  } catch (error) {
    logger.error(`Error fetching checkout status for ${req.params.checkoutId}:`, error);
    next(new AppError('Error fetching checkout status', 500));
  }
};

const applyCoupon = async (req, res, next) => {
  try {
    const result = await checkoutService.applyCoupon(req.body.checkoutId, req.body.couponCode, req.user.clientId);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error applying coupon:', error);
    next(new AppError('Error applying coupon', 500));
  }
};

const removeCoupon = async (req, res, next) => {
  try {
    const result = await checkoutService.removeCoupon(req.body.checkoutId, req.user.clientId);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error removing coupon:', error);
    next(new AppError('Error removing coupon', 500));
  }
};

const updateShippingAddress = async (req, res, next) => {
  try {
    const result = await checkoutService.updateShippingAddress(req.body.checkoutId, req.body.address, req.user.clientId);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error updating shipping address:', error);
    next(new AppError('Error updating shipping address', 500));
  }
};

const getPaymentMethods = async (req, res, next) => {
  try {
    const methods = await checkoutService.getPaymentMethods(req.user.clientId);
    res.status(200).json(methods);
  } catch (error) {
    logger.error('Error fetching payment methods:', error);
    next(new AppError('Error fetching payment methods', 500));
  }
};

module.exports = {
  checkout,
  initializeCheckout,
  processPayment,
  confirmOrder,
  getCheckoutStatus,
  applyCoupon,
  removeCoupon,
  updateShippingAddress,
  getPaymentMethods
};

================
File: backend/src/controllers/clientBrandingController.js
================
const { Request, Response } = require 'express';
const { getClientBranding, updateClientBranding } = require '../services/clientBrandingService';
const { AppError } = require '../utils/errorHandler';

const getClientBrandingController = async (req, res) => {
  try {
    const clientId = req.user.clientId; // Assuming you have middleware that sets the user and clientId
    const branding = await getClientBranding(clientId);
    res.status(200).json(branding);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error fetching client branding' });
    }
  }
};

const updateClientBrandingController = async (req, res) => {
  try {
    const clientId = req.user.clientId;
    const updatedBranding = await updateClientBranding(clientId, req.body);
    res.status(200).json(updatedBranding);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error updating client branding' });
    }
  }
};

================
File: backend/src/controllers/clientController.js
================
const clientService = require('../services/clientService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllClients = async (req, res, next) => {
  try {
    const clients = await clientService.getAllClients();
    res.status(200).json(clients);
  } catch (error) {
    logger.error('Error fetching all clients:', error);
    next(new AppError('Error fetching clients', 500));
  }
};

const getClientById = async (req, res, next) => {
  try {
    const client = await clientService.getClientById(req.params.id);
    if (!client) {
      return next(new AppError('Client not found', 404));
    }
    res.status(200).json(client);
  } catch (error) {
    logger.error(`Error fetching client ${req.params.id}:`, error);
    next(new AppError('Error fetching client', 500));
  }
};

const createClient = async (req, res, next) => {
  try {
    const newClient = await clientService.createClient(req.body);
    logger.info(`New client created: ${newClient.id}`);
    res.status(201).json(newClient);
  } catch (error) {
    logger.error('Error creating client:', error);
    next(new AppError('Error creating client', 500));
  }
};

const updateClient = async (req, res, next) => {
  try {
    const updatedClient = await clientService.updateClient(req.params.id, req.body);
    if (!updatedClient) {
      return next(new AppError('Client not found', 404));
    }
    logger.info(`Client updated: ${req.params.id}`);
    res.status(200).json(updatedClient);
  } catch (error) {
    logger.error(`Error updating client ${req.params.id}:`, error);
    next(new AppError('Error updating client', 500));
  }
};

const deleteClient = async (req, res, next) => {
  try {
    const result = await clientService.deleteClient(req.params.id);
    if (!result) {
      return next(new AppError('Client not found', 404));
    }
    logger.info(`Client deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting client ${req.params.id}:`, error);
    next(new AppError('Error deleting client', 500));
  }
};

const getClientSettings = async (req, res, next) => {
  try {
    const settings = await clientService.getClientSettings(req.params.id);
    if (!settings) {
      return next(new AppError('Client settings not found', 404));
    }
    res.status(200).json(settings);
  } catch (error) {
    logger.error(`Error fetching settings for client ${req.params.id}:`, error);
    next(new AppError('Error fetching client settings', 500));
  }
};

const updateClientSettings = async (req, res, next) => {
  try {
    const updatedSettings = await clientService.updateClientSettings(req.params.id, req.body);
    if (!updatedSettings) {
      return next(new AppError('Client settings not found', 404));
    }
    logger.info(`Settings updated for client: ${req.params.id}`);
    res.status(200).json(updatedSettings);
  } catch (error) {
    logger.error(`Error updating settings for client ${req.params.id}:`, error);
    next(new AppError('Error updating client settings', 500));
  }
};

module.exports = {
  getAllClients,
  getClientById,
  createClient,
  updateClient,
  deleteClient,
  getClientSettings,
  updateClientSettings
};

================
File: backend/src/controllers/clientLocationsController.js
================
const { Client, Location } = require('../models');

exports.getClientLocations = async (req, res) => {
  try {
    const { clientId } = req.params;
    const client = await Client.findByPk(clientId, {
      include: [{
        model: Location,
        attributes: ['id', 'name', 'address', 'city', 'state', 'zipCode', 'phoneNumber', 'email', 'latitude', 'longitude']
      }]
    });

    if (!client) {
      return res.status(404).json({ message: 'Client not found' });
    }

    res.json(client.Locations);
  } catch (error) {
    console.error('Error fetching client locations:', error);
    res.status(500).json({ message: 'Error fetching client locations', error: error.message });
  }
};

================
File: backend/src/controllers/clientPreferencesController.js
================
const { ClientPreferences } = require('../models');
const logger = require('../services/logger');

exports.getAllClientPreferences = async (req, res) => {
  try {
    const preferences = await ClientPreferences.findAll();
    res.status(200).json(preferences);
  } catch (error) {
    logger.error(`Error fetching client preferences: ${error.message}`);
    res.status(500).json({ message: 'Error fetching client preferences', error });
  }
};

exports.getClientPreferenceById = async (req, res) => {
  try {
    const preference = await ClientPreferences.findByPk(req.params.id);
    if (!preference) return res.status(404).json({ message: 'Client preference not found' });
    res.status(200).json(preference);
  } catch (error) {
    logger.error(`Error fetching client preference by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching client preference', error });
  }
};

exports.createClientPreference = async (req, res) => {
  try {
    const newPreference = await ClientPreferences.create(req.body);
    logger.info(`Client preference created: ${newPreference.id}`);
    res.status(201).json(newPreference);
  } catch (error) {
    logger.error(`Error creating client preference: ${error.message}`);
    res.status(500).json({ message: 'Error creating client preference', error });
  }
};

exports.updateClientPreference = async (req, res) => {
  try {
    const [updated] = await ClientPreferences.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Client preference not found' });

    const updatedPreference = await ClientPreferences.findByPk(req.params.id);
    logger.info(`Client preference updated: ${req.params.id}`);
    res.status(200).json(updatedPreference);
  } catch (error) {
    logger.error(`Error updating client preference: ${error.message}`);
    res.status(500).json({ message: 'Error updating client preference', error });
  }
};

exports.deleteClientPreference = async (req, res) => {
  try {
    const deleted = await ClientPreferences.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Client preference not found' });

    logger.info(`Client preference deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting client preference: ${error.message}`);
    res.status(500).json({ message: 'Error deleting client preference', error });
  }
};

================
File: backend/src/controllers/clientProfileController.js
================
const db = require('../models');

// Fetch all client profiles
exports.getClientProfiles = async (req, res) => {
  try {
    const profiles = await db.ClientProfile.findAll();
    res.status(200).json(profiles);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching client profiles', error });
  }
};

// Create a new client profile
exports.createClientProfile = async (req, res) => {
  try {
    const profile = await db.ClientProfile.create(req.body);
    res.status(201).json(profile);
  } catch (error) {
    res.status(500).json({ message: 'Error creating client profile', error });
  }
};

// Update a client profile
exports.updateClientProfile = async (req, res) => {
  try {
    const profile = await db.ClientProfile.update(req.body, { where: { id: req.params.id } });
    res.status(200).json(profile);
  } catch (error) {
    res.status(500).json({ message: 'Error updating client profile', error });
  }
};

// Delete a client profile
exports.deleteClientProfile = async (req, res) => {
  try {
    await db.ClientProfile.destroy({ where: { id: req.params.id } });
    res.status(204).json();
  } catch (error) {
    res.status(500).json({ message: 'Error deleting client profile', error });
  }
};

================
File: backend/src/controllers/clientSettingsController.js
================
const { Request, Response } = require 'express';
const { ClientSettings, Location } = require '../models';

const updateGlobalTwoFactorSetting = async (req, res) => {
  try {
    const { twoFactorRequired } = req.body;
    const clientId = req.user.clientId;

    await ClientSettings.update({ twoFactorRequired }, { where: { clientId } });

    res.json({ message: 'Global 2FA setting updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating global 2FA setting' });
  }
};

const updateLocationTwoFactorException = async (req, res) => {
  try {
    const { locationId, twoFactorException } = req.body;
    const clientId = req.user.clientId;

    const location = await Location.findOne({ where: { id, clientId } });
    if (!location) {
      return res.status(404).json({ message: 'Location not found' });
    }

    await location.update({ twoFactorException });

    res.json({ message: 'Location 2FA exception updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating location 2FA exception' });
  }
};

const updateGlobalPaymentGateways = async (req, res) => {
  try {
    const { defaultPaymentGateways } = req.body;
    const clientId = req.user.clientId;

    await ClientSettings.update({ defaultPaymentGateways }, { where: { clientId } });

    res.json({ message: 'Global payment gateway settings updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating global payment gateway settings' });
  }
};

const updateLocationPaymentGatewayExceptions = async (req, res) => {
  try {
    const { locationId, paymentGatewayExceptions } = req.body;
    const clientId = req.user.clientId;

    const location = await Location.findOne({ where: { id, clientId } });
    if (!location) {
      return res.status(404).json({ message: 'Location not found' });
    }

    await location.update({ paymentGatewayExceptions });

    res.json({ message: 'Location payment gateway exceptions updated successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error updating location payment gateway exceptions' });
  }
};

================
File: backend/src/controllers/commissaryKitchenController.js
================
const commissaryKitchenService = require('../services/commissaryKitchenService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllCommissaryKitchens = async (req, res, next) => {
  try {
    const kitchens = await commissaryKitchenService.getAllCommissaryKitchens(req.user.clientId);
    res.status(200).json(kitchens);
  } catch (error) {
    logger.error('Error fetching commissary kitchens:', error);
    next(new AppError('Error fetching commissary kitchens', 500));
  }
};

const getCommissaryKitchenById = async (req, res, next) => {
  try {
    const kitchen = await commissaryKitchenService.getCommissaryKitchenById(req.params.id, req.user.clientId);
    if (!kitchen) {
      return next(new AppError('Commissary kitchen not found', 404));
    }
    res.status(200).json(kitchen);
  } catch (error) {
    logger.error(`Error fetching commissary kitchen ${req.params.id}:`, error);
    next(error);
  }
};

const createCommissaryKitchen = async (req, res, next) => {
  try {
    const newKitchen = await commissaryKitchenService.createCommissaryKitchen(req.body, req.user.clientId);
    res.status(201).json(newKitchen);
  } catch (error) {
    logger.error('Error creating commissary kitchen:', error);
    next(error);
  }
};

const updateCommissaryKitchen = async (req, res, next) => {
  try {
    const updatedKitchen = await commissaryKitchenService.updateCommissaryKitchen(req.params.id, req.body, req.user.clientId);
    if (!updatedKitchen) {
      return next(new AppError('Commissary kitchen not found', 404));
    }
    res.status(200).json(updatedKitchen);
  } catch (error) {
    logger.error(`Error updating commissary kitchen ${req.params.id}:`, error);
    next(error);
  }
};

const deleteCommissaryKitchen = async (req, res, next) => {
  try {
    const result = await commissaryKitchenService.deleteCommissaryKitchen(req.params.id, req.user.clientId);
    if (!result) {
      return next(new AppError('Commissary kitchen not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting commissary kitchen ${req.params.id}:`, error);
    next(error);
  }
};

const getCommissaryKitchenInventory = async (req, res, next) => {
  try {
    const inventory = await commissaryKitchenService.getCommissaryKitchenInventory(req.params.id, req.user.clientId);
    res.status(200).json(inventory);
  } catch (error) {
    logger.error(`Error fetching inventory for commissary kitchen ${req.params.id}:`, error);
    next(error);
  }
};

const updateCommissaryKitchenInventory = async (req, res, next) => {
  try {
    const updatedInventory = await commissaryKitchenService.updateCommissaryKitchenInventory(req.params.id, req.body, req.user.clientId);
    res.status(200).json(updatedInventory);
  } catch (error) {
    logger.error(`Error updating inventory for commissary kitchen ${req.params.id}:`, error);
    next(error);
  }
};

module.exports = {
  getAllCommissaryKitchens,
  getCommissaryKitchenById,
  createCommissaryKitchen,
  updateCommissaryKitchen,
  deleteCommissaryKitchen,
  getCommissaryKitchenInventory,
  updateCommissaryKitchenInventory
};

================
File: backend/src/controllers/commissaryLocationController.js
================
const { CommissaryLocation } = require('../models');
const logger = require('../services/logger');

exports.getAllCommissaryLocations = async (req, res) => {
  try {
    const locations = await CommissaryLocation.findAll();
    res.status(200).json(locations);
  } catch (error) {
    logger.error(`Error fetching commissary locations: ${error.message}`);
    res.status(500).json({ message: 'Error fetching commissary locations', error });
  }
};

exports.getCommissaryLocationById = async (req, res) => {
  try {
    const location = await CommissaryLocation.findByPk(req.params.id);
    if (!location) return res.status(404).json({ message: 'Commissary location not found' });
    res.status(200).json(location);
  } catch (error) {
    logger.error(`Error fetching commissary location by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching commissary location', error });
  }
};

exports.createCommissaryLocation = async (req, res) => {
  try {
    const newLocation = await CommissaryLocation.create(req.body);
    logger.info(`Commissary location created: ${newLocation.id}`);
    res.status(201).json(newLocation);
  } catch (error) {
    logger.error(`Error creating commissary location: ${error.message}`);
    res.status(500).json({ message: 'Error creating commissary location', error });
  }
};

exports.updateCommissaryLocation = async (req, res) => {
  try {
    const [updated] = await CommissaryLocation.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Commissary location not found' });

    const updatedLocation = await CommissaryLocation.findByPk(req.params.id);
    logger.info(`Commissary location updated: ${req.params.id}`);
    res.status(200).json(updatedLocation);
  } catch (error) {
    logger.error(`Error updating commissary location: ${error.message}`);
    res.status(500).json({ message: 'Error updating commissary location', error });
  }
};

exports.deleteCommissaryLocation = async (req, res) => {
  try {
    const deleted = await CommissaryLocation.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Commissary location not found' });

    logger.info(`Commissary location deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting commissary location: ${error.message}`);
    res.status(500).json({ message: 'Error deleting commissary location', error });
  }
};

================
File: backend/src/controllers/corePosProfileController.js
================
const corePosProfileService = require('../services/corePosProfileService');

class CorePosProfileController {
  async getAll(req, res) {
    try {
      const profiles = await corePosProfileService.getAll();
      res.json(profiles);
    } catch (error) {
      res.status(500).json({ message: 'Error fetching profiles', error });
    }
  }

  async getById(req, res) {
    try {
      const profile = await corePosProfileService.getById(req.params.id);
      if (profile) {
        res.json(profile);
      } else {
        res.status(404).json({ message: 'Profile not found' });
      }
    } catch (error) {
      res.status(500).json({ message: 'Error fetching profile', error });
    }
  }

  async create(req, res) {
    try {
      const profile = await corePosProfileService.create(req.body);
      res.status(201).json(profile);
    } catch (error) {
      res.status(400).json({ message: 'Error creating profile', error });
    }
  }

  async update(req, res) {
    try {
      const profile = await corePosProfileService.update(req.params.id, req.body);
      if (profile) {
        res.json(profile);
      } else {
        res.status(404).json({ message: 'Profile not found' });
      }
    } catch (error) {
      res.status(400).json({ message: 'Error updating profile', error });
    }
  }

  async delete(req, res) {
    try {
      await corePosProfileService.delete(req.params.id);
      res.status(204).send();
    } catch (error) {
      res.status(400).json({ message: 'Error deleting profile', error });
    }
  }

  async syncLocation(req, res) {
    try {
      await corePosProfileService.syncLocation(req.params.id);
      res.status(200).json({ message: 'Sync initiated successfully' });
    } catch (error) {
      res.status(400).json({ message: 'Error initiating sync', error });
    }
  }
}

module.exports = new CorePosProfileController();

================
File: backend/src/controllers/coreposProfilesController.js
================
const { CorePOSProfile } = require('../models');
const logger = require('../services/logger');

exports.getAllCorePOSProfiles = async (req, res) => {
  try {
    const profiles = await CorePOSProfile.findAll();
    res.status(200).json(profiles);
  } catch (error) {
    logger.error(`Error fetching CorePOS profiles: ${error.message}`);
    res.status(500).json({ message: 'Error fetching CorePOS profiles', error });
  }
};

exports.getCorePOSProfileById = async (req, res) => {
  try {
    const profile = await CorePOSProfile.findByPk(req.params.id);
    if (!profile) return res.status(404).json({ message: 'CorePOS profile not found' });
    res.status(200).json(profile);
  } catch (error) {
    logger.error(`Error fetching CorePOS profile by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching CorePOS profile', error });
  }
};

exports.createCorePOSProfile = async (req, res) => {
  try {
    const newProfile = await CorePOSProfile.create(req.body);
    logger.info(`CorePOS profile created: ${newProfile.id}`);
    res.status(201).json(newProfile);
  } catch (error) {
    logger.error(`Error creating CorePOS profile: ${error.message}`);
    res.status(500).json({ message: 'Error creating CorePOS profile', error });
  }
};

exports.updateCorePOSProfile = async (req, res) => {
  try {
    const [updated] = await CorePOSProfile.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'CorePOS profile not found' });

    const updatedProfile = await CorePOSProfile.findByPk(req.params.id);
    logger.info(`CorePOS profile updated: ${req.params.id}`);
    res.status(200).json(updatedProfile);
  } catch (error) {
    logger.error(`Error updating CorePOS profile: ${error.message}`);
    res.status(500).json({ message: 'Error updating CorePOS profile', error });
  }
};

exports.deleteCorePOSProfile = async (req, res) => {
  try {
    const deleted = await CorePOSProfile.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'CorePOS profile not found' });

    logger.info(`CorePOS profile deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting CorePOS profile: ${error.message}`);
    res.status(500).json({ message: 'Error deleting CorePOS profile', error });
  }
};

================
File: backend/src/controllers/dashboardController.js
================
const { Client, Order, MenuItem, User } = require('../models');
const { redisClient } = require('../config/redis');

exports.getDashboardData = async (req, res) => {
  const { clientId } = req.params;
  const { page = 1, limit = 10 } = req.query;
  const offset = (page - 1) * limit;

  try {
    const data = await DashboardData.findAndCountAll({
      where: { clientId },
      limit: parseInt(limit),
      offset: parseInt(offset),
    });

    res.json({
      data: data.rows,
      totalPages: Math.ceil(data.count / limit),
      currentPage: page,
    });
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    res.status(500).json({ message: 'Error fetching dashboard data' });
  }
};

exports.getGlobalDashboardData = async (req, res) => {
  try {
    const cacheKey = 'dashboard:global';
    
    const cachedData = await redisClient.get(cacheKey);
    if (cachedData) {
      return res.json(JSON.parse(cachedData));
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const [totalRevenue, totalOrders, activeUsers, newCustomers, topSellingItems, totalClients] = await Promise.all([
      Order.sum('total', { where: { createdAt: { [Op.gte]: today } } }),
      Order.count({ where: { createdAt: { [Op.gte]: today } } }),
      User.count({ where: { lastLoginDate: { [Op.gte]: today } } }),
      User.count({ where: { createdAt: { [Op.gte]: today } } }),
      MenuItem.findAll({
        attributes: ['name', [sequelize.fn('COUNT', sequelize.col('orderItems.id')), 'orderCount']],
        include: [{
          model: OrderItem,
          attributes: [],
          where: { createdAt: { [Op.gte]: today } }
        }],
        group: ['MenuItem.id'],
        order: [[sequelize.literal('orderCount'), 'DESC']],
        limit: 5
      }),
      Client.count()
    ]);

    const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;

    const dashboardData = {
      totalRevenue,
      totalOrders,
      averageOrderValue,
      activeUsers,
      newCustomers,
      topSellingItems: topSellingItems.map(item => item.name),
      totalClients
    };

    await redisClient.setex(cacheKey, 300, JSON.stringify(dashboardData)); // Cache for 5 minutes

    res.json(dashboardData);
  } catch (error) {
    console.error('Error fetching global dashboard data:', error);
    res.status(500).json({ message: 'Error fetching global dashboard data' });
  }
};

================
File: backend/src/controllers/dataWallController.js
================
const DataWall = require('../models/DataWall');

exports.createDataWall = async (req, res) => {
  const { name, accessLevel, locationId, reportId, permissions } = req.body;

  try {
    if (!req.user.locations.includes(locationId)) {
      return res.status(403).json({ message: 'Access denied to this location.' });
    }

    const dataWall = await DataWall.create({
      name,
      accessLevel,
      locationId,
      reportId,
      permissions,
    });

    res.status(201).json(dataWall);
  } catch (error) {
    res.status(500).json({ message: 'Error creating data wall', error });
  }
};

exports.getDataWallsByLocation = async (req, res) => {
  const { locationId } = req.params;

  try {
    if (!req.user.locations.includes(locationId)) {
      return res.status(403).json({ message: 'Access denied to this location.' });
    }

    const dataWalls = await DataWall.findAll({ where: { locationId } });
    res.json(dataWalls);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching data walls', error });
  }
};

================
File: backend/src/controllers/deliveryDriverController.js
================
const deliveryDriverService = require('../services/deliveryDriverService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllDeliveryDrivers = async (req, res, next) => {
  try {
    const drivers = await deliveryDriverService.getAllDeliveryDrivers(req.user.clientId);
    res.status(200).json(drivers);
  } catch (error) {
    logger.error('Error fetching delivery drivers:', error);
    next(new AppError('Error fetching delivery drivers', 500));
  }
};

const getDeliveryDriverById = async (req, res, next) => {
  try {
    const driver = await deliveryDriverService.getDeliveryDriverById(req.params.id, req.user.clientId);
    if (!driver) {
      return next(new AppError('Delivery driver not found', 404));
    }
    res.status(200).json(driver);
  } catch (error) {
    logger.error(`Error fetching delivery driver ${req.params.id}:`, error);
    next(error);
  }
};

const createDeliveryDriver = async (req, res, next) => {
  try {
    const newDriver = await deliveryDriverService.createDeliveryDriver(req.body, req.user.clientId);
    res.status(201).json(newDriver);
  } catch (error) {
    logger.error('Error creating delivery driver:', error);
    next(error);
  }
};

const updateDeliveryDriver = async (req, res, next) => {
  try {
    const updatedDriver = await deliveryDriverService.updateDeliveryDriver(req.params.id, req.body, req.user.clientId);
    if (!updatedDriver) {
      return next(new AppError('Delivery driver not found', 404));
    }
    res.status(200).json(updatedDriver);
  } catch (error) {
    logger.error(`Error updating delivery driver ${req.params.id}:`, error);
    next(error);
  }
};

const deleteDeliveryDriver = async (req, res, next) => {
  try {
    const result = await deliveryDriverService.deleteDeliveryDriver(req.params.id, req.user.clientId);
    if (!result) {
      return next(new AppError('Delivery driver not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting delivery driver ${req.params.id}:`, error);
    next(error);
  }
};

const getActiveDeliveries = async (req, res, next) => {
  try {
    const activeDeliveries = await deliveryDriverService.getActiveDeliveries(req.params.id, req.user.clientId);
    res.status(200).json(activeDeliveries);
  } catch (error) {
    logger.error(`Error fetching active deliveries for driver ${req.params.id}:`, error);
    next(error);
  }
};

const updateDeliveryStatus = async (req, res, next) => {
  try {
    const updatedDelivery = await deliveryDriverService.updateDeliveryStatus(req.params.id, req.params.deliveryId, req.body.status, req.user.clientId);
    if (!updatedDelivery) {
      return next(new AppError('Delivery not found', 404));
    }
    res.status(200).json(updatedDelivery);
  } catch (error) {
    logger.error(`Error updating delivery status for delivery ${req.params.deliveryId}:`, error);
    next(error);
  }
};

module.exports = {
  getAllDeliveryDrivers,
  getDeliveryDriverById,
  createDeliveryDriver,
  updateDeliveryDriver,
  deleteDeliveryDriver,
  getActiveDeliveries,
  updateDeliveryStatus
};

================
File: backend/src/controllers/discountController.js
================
const discountService = require('../services/discountService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllDiscounts = async (req, res, next) => {
  try {
    const discounts = await discountService.getAllDiscounts(req.user.clientId);
    res.status(200).json(discounts);
  } catch (error) {
    logger.error('Error fetching discounts:', error);
    next(new AppError('Error fetching discounts', 500));
  }
};

const getDiscountById = async (req, res, next) => {
  try {
    const discount = await discountService.getDiscountById(req.params.id, req.user.clientId);
    if (!discount) {
      return next(new AppError('Discount not found', 404));
    }
    res.status(200).json(discount);
  } catch (error) {
    logger.error(`Error fetching discount ${req.params.id}:`, error);
    next(error);
  }
};

const createDiscount = async (req, res, next) => {
  try {
    const { name, type, value, conditions, locationId, isGlobal, maxUsesPerGuest } = req.body;

    if (!name || !type || !value) {
      return next(new AppError('Name, type, and value are required fields.', 422));
    }

    const newDiscount = await discountService.createDiscount({
      name,
      type,
      value,
      conditions,
      locationId,
      isGlobal,
      maxUsesPerGuest,
      status: 'active',
      clientId: req.user.clientId
    });

    logger.info(`Discount ${newDiscount.name} created by User ${req.user.id} at IP ${req.ip}`);
    res.status(201).json(newDiscount);
  } catch (error) {
    logger.error(`Error creating discount: ${error.message}`, { userId: req.user.id, ip: req.ip });
    next(new AppError('Failed to create discount', 500));
  }
};

const updateDiscount = async (req, res, next) => {
  try {
    const updatedDiscount = await discountService.updateDiscount(req.params.id, req.body, req.user.clientId);
    if (!updatedDiscount) {
      return next(new AppError('Discount not found', 404));
    }
    res.status(200).json(updatedDiscount);
  } catch (error) {
    logger.error(`Error updating discount ${req.params.id}:`, error);
    next(error);
  }
};

const deleteDiscount = async (req, res, next) => {
  try {
    const result = await discountService.deleteDiscount(req.params.id, req.user.clientId);
    if (!result) {
      return next(new AppError('Discount not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting discount ${req.params.id}:`, error);
    next(error);
  }
};

const getDiscountsByLocation = async (req, res, next) => {
  try {
    const { locationId } = req.params;
    const discounts = await discountService.getDiscountsByLocation(locationId, req.user.clientId);
    logger.info(`Discounts retrieved by User ${req.user.id} for Location ${locationId}`);
    res.status(200).json(discounts);
  } catch (error) {
    logger.error(`Error retrieving discounts for Location ${req.params.locationId}: ${error.message}`, { userId: req.user.id, ip: req.ip });
    next(new AppError('Failed to retrieve discounts', 500));
  }
};

module.exports = {
  getAllDiscounts,
  getDiscountById,
  createDiscount,
  updateDiscount,
  deleteDiscount,
  getDiscountsByLocation
};

================
File: backend/src/controllers/discountItemController.js
================
const { DiscountItem } = require('../models');
const logger = require('../services/logger');

exports.getAllDiscountItems = async (req, res) => {
  try {
    const discountItems = await DiscountItem.findAll();
    res.status(200).json(discountItems);
  } catch (error) {
    logger.error(`Error fetching discount items: ${error.message}`);
    res.status(500).json({ message: 'Error fetching discount items', error });
  }
};

exports.getDiscountItemById = async (req, res) => {
  try {
    const discountItem = await DiscountItem.findByPk(req.params.id);
    if (!discountItem) return res.status(404).json({ message: 'Discount item not found' });
    res.status(200).json(discountItem);
  } catch (error) {
    logger.error(`Error fetching discount item by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching discount item', error });
  }
};

exports.createDiscountItem = async (req, res) => {
  try {
    const newDiscountItem = await DiscountItem.create(req.body);
    logger.info(`Discount item created: ${newDiscountItem.id}`);
    res.status(201).json(newDiscountItem);
  } catch (error) {
    logger.error(`Error creating discount item: ${error.message}`);
    res.status(500).json({ message: 'Error creating discount item', error });
  }
};

exports.updateDiscountItem = async (req, res) => {
  try {
    const [updated] = await DiscountItem.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Discount item not found' });

    const updatedDiscountItem = await DiscountItem.findByPk(req.params.id);
    logger.info(`Discount item updated: ${req.params.id}`);
    res.status(200).json(updatedDiscountItem);
  } catch (error) {
    logger.error(`Error updating discount item: ${error.message}`);
    res.status(500).json({ message: 'Error updating discount item', error });
  }
};

exports.deleteDiscountItem = async (req, res) => {
  try {
    const deleted = await DiscountItem.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Discount item not found' });

    logger.info(`Discount item deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting discount item: ${error.message}`);
    res.status(500).json({ message: 'Error deleting discount item', error });
  }
};

================
File: backend/src/controllers/discountsController.js
================
const Discount = require('../models/Discount');

exports.applyDiscount = async (req, res) => {
  const { discountCode } = req.body;

  try {
    const discount = await Discount.findOne({ where: { code: discountCode } });

    if (!discount || !discount.isActive) {
      return res.status(400).json({ message: 'Invalid or inactive discount code.' });
    }

    res.json({ message: 'Discount applied successfully.', discount });
  } catch (error) {
    res.status(500).json({ message: 'Error applying discount', error });
  }
};

================
File: backend/src/controllers/driverLocationsController.js
================
const { DriverLocation } = require('../models');
const logger = require('../services/logger');

exports.getAllDriverLocations = async (req, res) => {
  try {
    const locations = await DriverLocation.findAll();
    res.status(200).json(locations);
  } catch (error) {
    logger.error(`Error fetching driver locations: ${error.message}`);
    res.status(500).json({ message: 'Error fetching driver locations', error });
  }
};

exports.getDriverLocationById = async (req, res) => {
  try {
    const location = await DriverLocation.findByPk(req.params.id);
    if (!location) return res.status(404).json({ message: 'Driver location not found' });
    res.status(200).json(location);
  } catch (error) {
    logger.error(`Error fetching driver location by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching driver location', error });
  }
};

exports.createDriverLocation = async (req, res) => {
  try {
    const newLocation = await DriverLocation.create(req.body);
    logger.info(`Driver location created: ${newLocation.id}`);
    res.status(201).json(newLocation);
  } catch (error) {
    logger.error(`Error creating driver location: ${error.message}`);
    res.status(500).json({ message: 'Error creating driver location', error });
  }
};

exports.updateDriverLocation = async (req, res) => {
  try {
    const [updated] = await DriverLocation.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Driver location not found' });

    const updatedLocation = await DriverLocation.findByPk(req.params.id);
    logger.info(`Driver location updated: ${req.params.id}`);
    res.status(200).json(updatedLocation);
  } catch (error) {
    logger.error(`Error updating driver location: ${error.message}`);
    res.status(500).json({ message: 'Error updating driver location', error });
  }
};

exports.deleteDriverLocation = async (req, res) => {
  try {
    const deleted = await DriverLocation.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Driver location not found' });

    logger.info(`Driver location deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting driver location: ${error.message}`);
    res.status(500).json({ message: 'Error deleting driver location', error });
  }
};

================
File: backend/src/controllers/dropoffScheduleController.js
================
const { DropoffSchedule } = require('../models');
const logger = require('../services/logger');

exports.getAllDropoffSchedules = async (req, res) => {
  try {
    const schedules = await DropoffSchedule.findAll();
    res.status(200).json(schedules);
  } catch (error) {
    logger.error(`Error fetching drop-off schedules: ${error.message}`);
    res.status(500).json({ message: 'Error fetching drop-off schedules', error });
  }
};

exports.getDropoffScheduleById = async (req, res) => {
  try {
    const schedule = await DropoffSchedule.findByPk(req.params.id);
    if (!schedule) return res.status(404).json({ message: 'Drop-off schedule not found' });
    res.status(200).json(schedule);
  } catch (error) {
    logger.error(`Error fetching drop-off schedule by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching drop-off schedule', error });
  }
};

exports.createDropoffSchedule = async (req, res) => {
  try {
    const newSchedule = await DropoffSchedule.create(req.body);
    logger.info(`Drop-off schedule created: ${newSchedule.id}`);
    res.status(201).json(newSchedule);
  } catch (error) {
    logger.error(`Error creating drop-off schedule: ${error.message}`);
    res.status(500).json({ message: 'Error creating drop-off schedule', error });
  }
};

exports.updateDropoffSchedule = async (req, res) => {
  try {
    const [updated] = await DropoffSchedule.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Drop-off schedule not found' });

    const updatedSchedule = await DropoffSchedule.findByPk(req.params.id);
    logger.info(`Drop-off schedule updated: ${req.params.id}`);
    res.status(200).json(updatedSchedule);
  } catch (error) {
    logger.error(`Error updating drop-off schedule: ${error.message}`);
    res.status(500).json({ message: 'Error updating drop-off schedule', error });
  }
};

exports.deleteDropoffSchedule = async (req, res) => {
  try {
    const deleted = await DropoffSchedule.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Drop-off schedule not found' });

    logger.info(`Drop-off schedule deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting drop-off schedule: ${error.message}`);
    res.status(500).json({ message: 'Error deleting drop-off schedule', error });
  }
};

================
File: backend/src/controllers/dropOffSpotController.js
================
const db = require('../models');
const logger = require('../services/logger');

// Create a new drop-off spot
exports.createDropOffSpot = async (req, res) => {
  try {
    const { locationId } = req.params;
    const spotDetails = req.body;

    const location = await db.Location.findByPk(locationId);
    if (!location) {
      return res.status(404).json({ message: 'Location not found' });
    }

    const newDropOffSpot = await db.DropOffSpot.create({
      ...spotDetails,
      locationId,
    });

    logger.info(`Drop-off spot created for location ID ${locationId}`);
    res.status(201).json(newDropOffSpot);
  } catch (error) {
    logger.error(`Error creating drop-off spot: ${error.message}`);
    res.status(500).json({ message: 'Error creating drop-off spot', error });
  }
};

// Update an existing drop-off spot
exports.updateDropOffSpot = async (req, res) => {
  try {
    const { spotId } = req.params;
    const spotDetails = req.body;

    const dropOffSpot = await db.DropOffSpot.findByPk(spotId);
    if (!dropOffSpot) {
      return res.status(404).json({ message: 'Drop-off spot not found' });
    }

    await dropOffSpot.update(spotDetails);

    logger.info(`Drop-off spot updated: ID ${spotId}`);
    res.status(200).json(dropOffSpot);
  } catch (error) {
    logger.error(`Error updating drop-off spot: ${error.message}`);
    res.status(500).json({ message: 'Error updating drop-off spot', error });
  }
};

// Fetch all drop-off spots for a location
exports.getDropOffSpots = async (req, res) => {
  try {
    const { locationId } = req.params;

    const dropOffSpots = await db.DropOffSpot.findAll({ where: { locationId } });

    res.status(200).json(dropOffSpots);
  } catch (error) {
    logger.error(`Error fetching drop-off spots: ${error.message}`);
    res.status(500).json({ message: 'Error fetching drop-off spots', error });
  }
};

// Fetch a single drop-off spot by ID
exports.getDropOffSpotById = async (req, res) => {
  try {
    const { spotId } = req.params;

    const dropOffSpot = await db.DropOffSpot.findByPk(spotId);
    if (!dropOffSpot) {
      return res.status(404).json({ message: 'Drop-off spot not found' });
    }

    res.status(200).json(dropOffSpot);
  } catch (error) {
    logger.error(`Error fetching drop-off spot: ${error.message}`);
    res.status(500).json({ message: 'Error fetching drop-off spot', error });
  }
};

// Delete a drop-off spot
exports.deleteDropOffSpot = async (req, res) => {
  try {
    const { spotId } = req.params;

    const dropOffSpot = await db.DropOffSpot.findByPk(spotId);
    if (!dropOffSpot) {
      return res.status(404).json({ message: 'Drop-off spot not found' });
    }

    await dropOffSpot.destroy();

    logger.info(`Drop-off spot deleted: ID ${spotId}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting drop-off spot: ${error.message}`);
    res.status(500).json({ message: 'Error deleting drop-off spot', error });
  }
};

================
File: backend/src/controllers/featureManagementController.js
================
const featureManagementService = require('../services/featureManagementService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getClientFeatures = async (req, res, next) => {
  try {
    const features = await featureManagementService.getClientFeatures(req.params.clientId);
    res.status(200).json(features);
  } catch (error) {
    logger.error(`Error fetching features for client ${req.params.clientId}:`, error);
    next(new AppError('Error fetching client features', 500));
  }
};

const updateClientFeatures = async (req, res, next) => {
  try {
    const updatedFeatures = await featureManagementService.updateClientFeatures(req.params.clientId, req.body);
    res.status(200).json(updatedFeatures);
  } catch (error) {
    logger.error(`Error updating features for client ${req.params.clientId}:`, error);
    next(new AppError('Error updating client features', 500));
  }
};

const getAllAvailableFeatures = async (req, res, next) => {
  try {
    const features = await featureManagementService.getAllAvailableFeatures();
    res.status(200).json(features);
  } catch (error) {
    logger.error('Error fetching all available features:', error);
    next(new AppError('Error fetching available features', 500));
  }
};

const createFeature = async (req, res, next) => {
  try {
    const newFeature = await featureManagementService.createFeature(req.body);
    res.status(201).json(newFeature);
  } catch (error) {
    logger.error('Error creating new feature:', error);
    next(new AppError('Error creating feature', 500));
  }
};

const updateFeature = async (req, res, next) => {
  try {
    const updatedFeature = await featureManagementService.updateFeature(req.params.featureId, req.body);
    res.status(200).json(updatedFeature);
  } catch (error) {
    logger.error(`Error updating feature ${req.params.featureId}:`, error);
    next(new AppError('Error updating feature', 500));
  }
};

const deleteFeature = async (req, res, next) => {
  try {
    await featureManagementService.deleteFeature(req.params.featureId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting feature ${req.params.featureId}:`, error);
    next(new AppError('Error deleting feature', 500));
  }
};

module.exports = {
  getClientFeatures,
  updateClientFeatures,
  getAllAvailableFeatures,
  createFeature,
  updateFeature,
  deleteFeature
};

================
File: backend/src/controllers/globalMenuController.js
================
const { GlobalMenu } = require('../models');
const logger = require('../services/logger');

exports.getAllGlobalMenus = async (req, res) => {
  try {
    const menus = await GlobalMenu.findAll();
    res.status(200).json(menus);
  } catch (error) {
    logger.error(`Error fetching global menus: ${error.message}`);
    res.status(500).json({ message: 'Error fetching global menus', error });
  }
};

exports.getGlobalMenuById = async (req, res) => {
  try {
    const menu = await GlobalMenu.findByPk(req.params.id);
    if (!menu) return res.status(404).json({ message: 'Global menu not found' });
    res.status(200).json(menu);
  } catch (error) {
    logger.error(`Error fetching global menu by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching global menu', error });
  }
};

exports.createGlobalMenu = async (req, res) => {
  try {
    const newMenu = await GlobalMenu.create(req.body);
    logger.info(`Global menu created: ${newMenu.id}`);
    res.status(201).json(newMenu);
  } catch (error) {
    logger.error(`Error creating global menu: ${error.message}`);
    res.status(500).json({ message: 'Error creating global menu', error });
  }
};

exports.updateGlobalMenu = async (req, res) => {
  try {
    const [updated] = await GlobalMenu.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Global menu not found' });

    const updatedMenu = await GlobalMenu.findByPk(req.params.id);
    logger.info(`Global menu updated: ${req.params.id}`);
    res.status(200).json(updatedMenu);
  } catch (error) {
    logger.error(`Error updating global menu: ${error.message}`);
    res.status(500).json({ message: 'Error updating global menu', error });
  }
};

exports.deleteGlobalMenu = async (req, res) => {
  try {
    const deleted = await GlobalMenu.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Global menu not found' });

    logger.info(`Global menu deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting global menu: ${error.message}`);
    res.status(500).json({ message: 'Error deleting global menu', error });
  }
};

================
File: backend/src/controllers/globalSettingController.js
================
const { GlobalSetting } = require('../models');
const logger = require('../services/logger');

exports.getAllGlobalSettings = async (req, res) => {
  try {
    const settings = await GlobalSetting.findAll();
    res.status(200).json(settings);
  } catch (error) {
    logger.error(`Error fetching global settings: ${error.message}`);
    res.status(500).json({ message: 'Error fetching global settings', error });
  }
};

exports.getGlobalSettingById = async (req, res) => {
  try {
    const setting = await GlobalSetting.findByPk(req.params.id);
    if (!setting) return res.status(404).json({ message: 'Global setting not found' });
    res.status(200).json(setting);
  } catch (error) {
    logger.error(`Error fetching global setting by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching global setting', error });
  }
};

exports.createGlobalSetting = async (req, res) => {
  try {
    const newSetting = await GlobalSetting.create(req.body);
    logger.info(`Global setting created: ${newSetting.id}`);
    res.status(201).json(newSetting);
  } catch (error) {
    logger.error(`Error creating global setting: ${error.message}`);
    res.status(500).json({ message: 'Error creating global setting', error });
  }
};

exports.updateGlobalSetting = async (req, res) => {
  try {
    const [updated] = await GlobalSetting.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Global setting not found' });

    const updatedSetting = await GlobalSetting.findByPk(req.params.id);
    logger.info(`Global setting updated: ${req.params.id}`);
    res.status(200).json(updatedSetting);
  } catch (error) {
    logger.error(`Error updating global setting: ${error.message}`);
    res.status(500).json({ message: 'Error updating global setting', error });
  }
};

exports.deleteGlobalSetting = async (req, res) => {
  try {
    const deleted = await GlobalSetting.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Global setting not found' });

    logger.info(`Global setting deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting global setting: ${error.message}`);
    res.status(500).json({ message: 'Error deleting global setting', error });
  }
};

================
File: backend/src/controllers/guestController.js
================
const { Request, Response } = require ('express');
const { getMenuItems, checkInventory } = require ('../services/menuService');
const { createOrder } = require('../services/orderService');
const { calculatePrepTime, formatEstimatedTime } = require('../services/orderPrepService');
const guestService = require('../services/guestService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getMenuController = async (req, res) => {
  try {
    const { locationId } = req.params;
    const menuItems = await getMenuItems(parseInt(locationId));
    res.status(200).json(menuItems);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching menu items' });
  }
};

const checkInventoryController = async (req, res) => {
  try {
    const { items } = req.body;
    const inventoryStatus = await checkInventory(items);
    res.status(200).json(inventoryStatus);
  } catch (error) {
    res.status(500).json({ message: 'Error checking inventory' });
  }
};

const createOrderController = async (req, res) => {
  try {
    const orderData = req.body;
    const newOrder = await createOrder(orderData);
    res.status(201).json(newOrder);
  } catch (error) {
    res.status(500).json({ message: 'Error creating order' });
  }
};

const getEstimatedPrepTimeController = async (req, res) => {
  try {
    const { items, locationId } = req.body;
    const prepTime = await calculatePrepTime({ items, locationId });
    const estimatedTime = formatEstimatedTime(prepTime);
    res.status(200).json({ estimatedTime });
  } catch (error) {
    res.status(500).json({ message: 'Error calculating estimated prep time' });
  }
};

const getAllGuests = async (req, res, next) => {
  try {
    const guests = await guestService.getAllGuests(req.user.clientId);
    res.status(200).json(guests);
  } catch (error) {
    logger.error('Error fetching all guests:', error);
    next(new AppError('Failed to fetch guests', 500));
  }
};

const getGuestById = async (req, res, next) => {
  try {
    const guest = await guestService.getGuestById(req.params.id, req.user.clientId);
    if (!guest) {
      return next(new AppError('Guest not found', 404));
    }
    res.status(200).json(guest);
  } catch (error) {
    logger.error(`Error fetching guest ${req.params.id}:`, error);
    next(error);
  }
};

const createGuest = async (req, res, next) => {
  try {
    const newGuest = await guestService.createGuest(req.body, req.user.clientId);
    res.status(201).json(newGuest);
  } catch (error) {
    logger.error('Error creating guest:', error);
    next(error);
  }
};

const updateGuest = async (req, res, next) => {
  try {
    const updatedGuest = await guestService.updateGuest(req.params.id, req.body, req.user.clientId);
    if (!updatedGuest) {
      return next(new AppError('Guest not found', 404));
    }
    res.status(200).json(updatedGuest);
  } catch (error) {
    logger.error(`Error updating guest ${req.params.id}:`, error);
    next(error);
  }
};

const deleteGuest = async (req, res, next) => {
  try {
    const result = await guestService.deleteGuest(req.params.id, req.user.clientId);
    if (!result) {
      return next(new AppError('Guest not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting guest ${req.params.id}:`, error);
    next(error);
  }
};

module.exports = {
  getAllGuests,
  getGuestById,
  createGuest,
  updateGuest,
  deleteGuest
};

================
File: backend/src/controllers/guestDiscountsController.js
================
const { GuestDiscount } = require('../models');
const logger = require('../services/logger');

exports.getAllGuestDiscounts = async (req, res) => {
  try {
    const discounts = await GuestDiscount.findAll();
    res.status(200).json(discounts);
  } catch (error) {
    logger.error(`Error fetching guest discounts: ${error.message}`);
    res.status(500).json({ message: 'Error fetching guest discounts', error });
  }
};

exports.getGuestDiscountById = async (req, res) => {
  try {
    const discount = await GuestDiscount.findByPk(req.params.id);
    if (!discount) return res.status(404).json({ message: 'Guest discount not found' });
    res.status(200).json(discount);
  } catch (error) {
    logger.error(`Error fetching guest discount by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching guest discount', error });
  }
};

exports.createGuestDiscount = async (req, res) => {
  try {
    const newDiscount = await GuestDiscount.create(req.body);
    logger.info(`Guest discount created: ${newDiscount.id}`);
    res.status(201).json(newDiscount);
  } catch (error) {
    logger.error(`Error creating guest discount: ${error.message}`);
    res.status(500).json({ message: 'Error creating guest discount', error });
  }
};

exports.updateGuestDiscount = async (req, res) => {
  try {
    const [updated] = await GuestDiscount.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Guest discount not found' });

    const updatedDiscount = await GuestDiscount.findByPk(req.params.id);
    logger.info(`Guest discount updated: ${req.params.id}`);
    res.status(200).json(updatedDiscount);
  } catch (error) {
    logger.error(`Error updating guest discount: ${error.message}`);
    res.status(500).json({ message: 'Error updating guest discount', error });
  }
};

exports.deleteGuestDiscount = async (req, res) => {
  try {
    const deleted = await GuestDiscount.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Guest discount not found' });

    logger.info(`Guest discount deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting guest discount: ${error.message}`);
    res.status(500).json({ message: 'Error deleting guest discount', error });
  }
};

================
File: backend/src/controllers/guestLoyaltyProgramController.js
================
const { GuestLoyaltyProgram } = require('../models');
const logger = require('../services/logger');

exports.getAllLoyaltyPrograms = async (req, res) => {
  try {
    const programs = await GuestLoyaltyProgram.findAll();
    res.status(200).json(programs);
  } catch (error) {
    logger.error(`Error fetching loyalty programs: ${error.message}`);
    res.status(500).json({ message: 'Error fetching loyalty programs', error });
  }
};

exports.getLoyaltyProgramById = async (req, res) => {
  try {
    const program = await GuestLoyaltyProgram.findByPk(req.params.id);
    if (!program) return res.status(404).json({ message: 'Loyalty program not found' });
    res.status(200).json(program);
  } catch (error) {
    logger.error(`Error fetching loyalty program by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching loyalty program', error });
  }
};

exports.createLoyaltyProgram = async (req, res) => {
  try {
    const newProgram = await GuestLoyaltyProgram.create(req.body);
    logger.info(`Loyalty program created: ${newProgram.id}`);
    res.status(201).json(newProgram);
  } catch (error) {
    logger.error(`Error creating loyalty program: ${error.message}`);
    res.status(500).json({ message: 'Error creating loyalty program', error });
  }
};

exports.updateLoyaltyProgram = async (req, res) => {
  try {
    const [updated] = await GuestLoyaltyProgram.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Loyalty program not found' });

    const updatedProgram = await GuestLoyaltyProgram.findByPk(req.params.id);
    logger.info(`Loyalty program updated: ${req.params.id}`);
    res.status(200).json(updatedProgram);
  } catch (error) {
    logger.error(`Error updating loyalty program: ${error.message}`);
    res.status(500).json({ message: 'Error updating loyalty program', error });
  }
};

exports.deleteLoyaltyProgram = async (req, res) => {
  try {
    const deleted = await GuestLoyaltyProgram.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Loyalty program not found' });

    logger.info(`Loyalty program deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting loyalty program: ${error.message}`);
    res.status(500).json({ message: 'Error deleting loyalty program', error });
  }
};

================
File: backend/src/controllers/guestProfileController.js
================
const { GuestProfile } = require('../models');
const logger = require('../services/logger');

exports.getAllGuestProfiles = async (req, res) => {
  try {
    const profiles = await GuestProfile.findAll();
    res.status(200).json(profiles);
  } catch (error) {
    logger.error(`Error fetching guest profiles: ${error.message}`);
    res.status(500).json({ message: 'Error fetching guest profiles', error });
  }
};

exports.getGuestProfileById = async (req, res) => {
  try {
    const profile = await GuestProfile.findByPk(req.params.id);
    if (!profile) return res.status(404).json({ message: 'Guest profile not found' });
    res.status(200).json(profile);
  } catch (error) {
    logger.error(`Error fetching guest profile by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching guest profile', error });
  }
};

exports.createGuestProfile = async (req, res) => {
  try {
    const newProfile = await GuestProfile.create(req.body);
    logger.info(`Guest profile created: ${newProfile.id}`);
    res.status(201).json(newProfile);
  } catch (error) {
    logger.error(`Error creating guest profile: ${error.message}`);
    res.status(500).json({ message: 'Error creating guest profile', error });
  }
};

exports.updateGuestProfile = async (req, res) => {
  try {
    const [updated] = await GuestProfile.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Guest profile not found' });

    const updatedProfile = await GuestProfile.findByPk(req.params.id);
    logger.info(`Guest profile updated: ${req.params.id}`);
    res.status(200).json(updatedProfile);
  } catch (error) {
    logger.error(`Error updating guest profile: ${error.message}`);
    res.status(500).json({ message: 'Error updating guest profile', error });
  }
};

exports.deleteGuestProfile = async (req, res) => {
  try {
    const deleted = await GuestProfile.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Guest profile not found' });

    logger.info(`Guest profile deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting guest profile: ${error.message}`);
    res.status(500).json({ message: 'Error deleting guest profile', error });
  }
};

================
File: backend/src/controllers/guestRewardsController.js
================
const { GuestReward } = require('../models');
const logger = require('../services/logger');

exports.getAllGuestRewards = async (req, res) => {
  try {
    const rewards = await GuestReward.findAll();
    res.status(200).json(rewards);
  } catch (error) {
    logger.error(`Error fetching guest rewards: ${error.message}`);
    res.status(500).json({ message: 'Error fetching guest rewards', error });
  }
};

exports.getGuestRewardById = async (req, res) => {
  try {
    const reward = await GuestReward.findByPk(req.params.id);
    if (!reward) return res.status(404).json({ message: 'Guest reward not found' });
    res.status(200).json(reward);
  } catch (error) {
    logger.error(`Error fetching guest reward by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching guest reward', error });
  }
};

exports.createGuestReward = async (req, res) => {
  try {
    const newReward = await GuestReward.create(req.body);
    logger.info(`Guest reward created: ${newReward.id}`);
    res.status(201).json(newReward);
  } catch (error) {
    logger.error(`Error creating guest reward: ${error.message}`);
    res.status(500).json({ message: 'Error creating guest reward', error });
  }
};

exports.updateGuestReward = async (req, res) => {
  try {
    const [updated] = await GuestReward.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Guest reward not found' });

    const updatedReward = await GuestReward.findByPk(req.params.id);
    logger.info(`Guest reward updated: ${req.params.id}`);
    res.status(200).json(updatedReward);
  } catch (error) {
    logger.error(`Error updating guest reward: ${error.message}`);
    res.status(500).json({ message: 'Error updating guest reward', error });
  }
};

exports.deleteGuestReward = async (req, res) => {
  try {
    const deleted = await GuestReward.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Guest reward not found' });

    logger.info(`Guest reward deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting guest reward: ${error.message}`);
    res.status(500).json({ message: 'Error deleting guest reward', error });
  }
};

================
File: backend/src/controllers/houseAccountController.js
================
const HouseAccount = require('../models/HouseAccount');
const HouseAccountUser = require('../models/HouseAccountUser');
const houseAccountService = require('../services/houseAccountService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.getHouseAccountsByClient = async (req, res, next) => {
  try {
    const accounts = await houseAccountService.getHouseAccountsByClient(req.params.clientId);
    res.status(200).json(accounts);
  } catch (error) {
    logger.error(`Error fetching house accounts for client ${req.params.clientId}:`, error);
    next(new AppError('Error fetching house accounts', 500));
  }
};

exports.getHouseAccountById = async (req, res, next) => {
  try {
    const account = await houseAccountService.getHouseAccountById(req.params.id);
    if (!account) {
      return next(new AppError('House account not found', 404));
    }
    res.status(200).json(account);
  } catch (error) {
    logger.error(`Error fetching house account ${req.params.id}:`, error);
    next(error);
  }
};

exports.createHouseAccount = async (req, res, next) => {
  try {
    const newAccount = await houseAccountService.createHouseAccount(req.body);
    res.status(201).json(newAccount);
  } catch (error) {
    logger.error('Error creating house account:', error);
    next(error);
  }
};

exports.updateHouseAccount = async (req, res, next) => {
  try {
    const updatedAccount = await houseAccountService.updateHouseAccount(req.params.id, req.body);
    if (!updatedAccount) {
      return next(new AppError('House account not found', 404));
    }
    res.status(200).json(updatedAccount);
  } catch (error) {
    logger.error(`Error updating house account ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteHouseAccount = async (req, res, next) => {
  try {
    const result = await houseAccountService.deleteHouseAccount(req.params.id);
    if (!result) {
      return next(new AppError('House account not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting house account ${req.params.id}:`, error);
    next(error);
  }
};

exports.addFunds = async (req, res, next) => {
  try {
    const updatedAccount = await houseAccountService.addFunds(req.params.id, req.body.amount);
    res.status(200).json(updatedAccount);
  } catch (error) {
    logger.error(`Error adding funds to house account ${req.params.id}:`, error);
    next(error);
  }
};

exports.deductFunds = async (req, res, next) => {
  try {
    const updatedAccount = await houseAccountService.deductFunds(req.params.id, req.body.amount);
    res.status(200).json(updatedAccount);
  } catch (error) {
    logger.error(`Error deducting funds from house account ${req.params.id}:`, error);
    next(error);
  }
};

exports.getTransactionHistory = async (req, res, next) => {
  try {
    const transactions = await houseAccountService.getTransactionHistory(req.params.id);
    res.status(200).json(transactions);
  } catch (error) {
    logger.error(`Error fetching transaction history for house account ${req.params.id}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/houseAccountLocationsController.js
================
const { HouseAccountLocation } = require('../models');
const logger = require('../services/logger');

exports.getAllHouseAccountLocations = async (req, res) => {
  try {
    const locations = await HouseAccountLocation.findAll();
    res.status(200).json(locations);
  } catch (error) {
    logger.error(`Error fetching house account locations: ${error.message}`);
    res.status(500).json({ message: 'Error fetching house account locations', error });
  }
};

exports.getHouseAccountLocationById = async (req, res) => {
  try {
    const location = await HouseAccountLocation.findByPk(req.params.id);
    if (!location) return res.status(404).json({ message: 'House account location not found' });
    res.status(200).json(location);
  } catch (error) {
    logger.error(`Error fetching house account location by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching house account location', error });
  }
};

exports.createHouseAccountLocation = async (req, res) => {
  try {
    const newLocation = await HouseAccountLocation.create(req.body);
    logger.info(`House account location created: ${newLocation.id}`);
    res.status(201).json(newLocation);
  } catch (error) {
    logger.error(`Error creating house account location: ${error.message}`);
    res.status(500).json({ message: 'Error creating house account location', error });
  }
};

exports.updateHouseAccountLocation = async (req, res) => {
  try {
    const [updated] = await HouseAccountLocation.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'House account location not found' });

    const updatedLocation = await HouseAccountLocation.findByPk(req.params.id);
    logger.info(`House account location updated: ${req.params.id}`);
    res.status(200).json(updatedLocation);
  } catch (error) {
    logger.error(`Error updating house account location: ${error.message}`);
    res.status(500).json({ message: 'Error updating house account location', error });
  }
};

exports.deleteHouseAccountLocation = async (req, res) => {
  try {
    const deleted = await HouseAccountLocation.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'House account location not found' });

    logger.info(`House account location deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting house account location: ${error.message}`);
    res.status(500).json({ message: 'Error deleting house account location', error });
  }
};

================
File: backend/src/controllers/houseAccountUserController.js
================
const { HouseAccountUser } = require('../models');
const logger = require('../services/logger');

exports.getAllHouseAccountUsers = async (req, res) => {
  try {
    const users = await HouseAccountUser.findAll();
    res.status(200).json(users);
  } catch (error) {
    logger.error(`Error fetching house account users: ${error.message}`);
    res.status(500).json({ message: 'Error fetching house account users', error });
  }
};

exports.getHouseAccountUserById = async (req, res) => {
  try {
    const user = await HouseAccountUser.findByPk(req.params.id);
    if (!user) return res.status(404).json({ message: 'House account user not found' });
    res.status(200).json(user);
  } catch (error) {
    logger.error(`Error fetching house account user by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching house account user', error });
  }
};

exports.createHouseAccountUser = async (req, res) => {
  try {
    const newUser = await HouseAccountUser.create(req.body);
    logger.info(`House account user created: ${newUser.id}`);
    res.status(201).json(newUser);
  } catch (error) {
    logger.error(`Error creating house account user: ${error.message}`);
    res.status(500).json({ message: 'Error creating house account user', error });
  }
};

exports.updateHouseAccountUser = async (req, res) => {
  try {
    const [updated] = await HouseAccountUser.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'House account user not found' });

    const updatedUser = await HouseAccountUser.findByPk(req.params.id);
    logger.info(`House account user updated: ${req.params.id}`);
    res.status(200).json(updatedUser);
  } catch (error) {
    logger.error(`Error updating house account user: ${error.message}`);
    res.status(500).json({ message: 'Error updating house account user', error });
  }
};

exports.deleteHouseAccountUser = async (req, res) => {
  try {
    const deleted = await HouseAccountUser.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'House account user not found' });

    logger.info(`House account user deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting house account user: ${error.message}`);
    res.status(500).json({ message: 'Error deleting house account user', error });
  }
};

================
File: backend/src/controllers/inventoryController.js
================
const inventoryService = require('../services/inventoryService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getInventory = async (req, res, next) => {
  try {
    const inventory = await inventoryService.getInventoryItems();
    res.json(inventory);
  } catch (error) {
    logger.error('Error fetching inventory:', error);
    next(new AppError('Error fetching inventory', 500));
  }
};

const getInventoryItemById = async (req, res, next) => {
  try {
    const item = await inventoryService.getInventoryItemById(req.params.id);
    if (!item) {
      return next(new AppError('Inventory item not found', 404));
    }
    res.json(item);
  } catch (error) {
    logger.error(`Error fetching inventory item ${req.params.id}:`, error);
    next(new AppError('Error fetching inventory item', 500));
  }
};

const addInventoryItem = async (req, res, next) => {
  try {
    const newItem = await inventoryService.createInventoryItem(req.body);
    res.status(201).json(newItem);
  } catch (error) {
    logger.error('Error adding inventory item:', error);
    next(new AppError('Error adding inventory item', 500));
  }
};

const updateInventory = async (req, res, next) => {
  try {
    const updatedItem = await inventoryService.updateInventoryItem(req.params.id, req.body);
    res.json(updatedItem);
  } catch (error) {
    logger.error(`Error updating inventory item ${req.params.id}:`, error);
    next(new AppError('Error updating inventory item', 500));
  }
};

const removeInventoryItem = async (req, res, next) => {
  try {
    await inventoryService.deleteInventoryItem(req.params.id);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error removing inventory item ${req.params.id}:`, error);
    next(new AppError('Error removing inventory item', 500));
  }
};

const updateInventoryQuantity = async (req, res, next) => {
  try {
    const updatedItem = await inventoryService.updateInventoryQuantity(req.params.id, req.body.quantity);
    res.json(updatedItem);
  } catch (error) {
    logger.error(`Error updating inventory quantity for item ${req.params.id}:`, error);
    next(new AppError('Error updating inventory quantity', 500));
  }
};

module.exports = {
  getInventory,
  getInventoryItemById,
  addInventoryItem,
  updateInventory,
  removeInventoryItem,
  updateInventoryQuantity
};

================
File: backend/src/controllers/invoiceController.js
================
const invoiceService = require('../services/invoiceService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.generateInvoice = async (req, res, next) => {
  try {
    const invoice = await invoiceService.generateInvoice(req.body);
    res.status(201).json(invoice);
  } catch (error) {
    logger.error('Error generating invoice:', error);
    next(new AppError('Failed to generate invoice', 500));
  }
};

exports.getInvoiceById = async (req, res, next) => {
  try {
    const invoice = await invoiceService.getInvoiceById(req.params.id);
    if (!invoice) {
      return next(new AppError('Invoice not found', 404));
    }
    res.status(200).json(invoice);
  } catch (error) {
    logger.error(`Error fetching invoice ${req.params.id}:`, error);
    next(error);
  }
};

exports.getClientInvoices = async (req, res, next) => {
  try {
    const invoices = await invoiceService.getClientInvoices(req.params.clientId);
    res.status(200).json(invoices);
  } catch (error) {
    logger.error(`Error fetching invoices for client ${req.params.clientId}:`, error);
    next(error);
  }
};

exports.updateInvoice = async (req, res, next) => {
  try {
    const updatedInvoice = await invoiceService.updateInvoice(req.params.id, req.body);
    if (!updatedInvoice) {
      return next(new AppError('Invoice not found', 404));
    }
    res.status(200).json(updatedInvoice);
  } catch (error) {
    logger.error(`Error updating invoice ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteInvoice = async (req, res, next) => {
  try {
    const result = await invoiceService.deleteInvoice(req.params.id);
    if (!result) {
      return next(new AppError('Invoice not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting invoice ${req.params.id}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/itemModifierController.js
================
const { ItemModifier } = require('../models');
const logger = require('../services/logger');

exports.getAllItemModifiers = async (req, res) => {
  try {
    const modifiers = await ItemModifier.findAll();
    res.status(200).json(modifiers);
  } catch (error) {
    logger.error(`Error fetching item modifiers: ${error.message}`);
    res.status(500).json({ message: 'Error fetching item modifiers', error });
  }
};

exports.getItemModifierById = async (req, res) => {
  try {
    const modifier = await ItemModifier.findByPk(req.params.id);
    if (!modifier) return res.status(404).json({ message: 'Item modifier not found' });
    res.status(200).json(modifier);
  } catch (error) {
    logger.error(`Error fetching item modifier by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching item modifier', error });
  }
};

exports.createItemModifier = async (req, res) => {
  try {
    const newModifier = await ItemModifier.create(req.body);
    logger.info(`Item modifier created: ${newModifier.id}`);
    res.status(201).json(newModifier);
  } catch (error) {
    logger.error(`Error creating item modifier: ${error.message}`);
    res.status(500).json({ message: 'Error creating item modifier', error });
  }
};

exports.updateItemModifier = async (req, res) => {
  try {
    const [updated] = await ItemModifier.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Item modifier not found' });

    const updatedModifier = await ItemModifier.findByPk(req.params.id);
    logger.info(`Item modifier updated: ${req.params.id}`);
    res.status(200).json(updatedModifier);
  } catch (error) {
    logger.error(`Error updating item modifier: ${error.message}`);
    res.status(500).json({ message: 'Error updating item modifier', error });
  }
};

exports.deleteItemModifier = async (req, res) => {
  try {
    const deleted = await ItemModifier.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Item modifier not found' });

    logger.info(`Item modifier deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting item modifier: ${error.message}`);
    res.status(500).json({ message: 'Error deleting item modifier', error });
  }
};

================
File: backend/src/controllers/itemReviewController.js
================
const { ItemReview } = require('../models');
const logger = require('../services/logger');

exports.getAllItemReviews = async (req, res) => {
  try {
    const reviews = await ItemReview.findAll();
    res.status(200).json(reviews);
  } catch (error) {
    logger.error(`Error fetching item reviews: ${error.message}`);
    res.status(500).json({ message: 'Error fetching item reviews', error });
  }
};

exports.getItemReviewById = async (req, res) => {
  try {
    const review = await ItemReview.findByPk(req.params.id);
    if (!review) return res.status(404).json({ message: 'Item review not found' });
    res.status(200).json(review);
  } catch (error) {
    logger.error(`Error fetching item review by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching item review', error });
  }
};

exports.createItemReview = async (req, res) => {
  try {
    const newReview = await ItemReview.create(req.body);
    logger.info(`Item review created: ${newReview.id}`);
    res.status(201).json(newReview);
  } catch (error) {
    logger.error(`Error creating item review: ${error.message}`);
    res.status(500).json({ message: 'Error creating item review', error });
  }
};

exports.updateItemReview = async (req, res) => {
  try {
    const [updated] = await ItemReview.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Item review not found' });

    const updatedReview = await ItemReview.findByPk(req.params.id);
    logger.info(`Item review updated: ${req.params.id}`);
    res.status(200).json(updatedReview);
  } catch (error) {
    logger.error(`Error updating item review: ${error.message}`);
    res.status(500).json({ message: 'Error updating item review', error });
  }
};

exports.deleteItemReview = async (req, res) => {
  try {
    const deleted = await ItemReview.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Item review not found' });

    logger.info(`Item review deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting item review: ${error.message}`);
    res.status(500).json({ message: 'Error deleting item review', error });
  }
};

================
File: backend/src/controllers/locationCard.js
================
const LocationCard = require('../models/LocationCard');
const logger = require('../services/logger');

exports.getLocationCard = async (req, res) => {
  try {
    const { locationId } = req.params;
    const locationCard = await LocationCard.findByPk(locationId);

    if (!locationCard) {
      return res.status(404).json({ message: 'Location card not found' });
    }

    res.status(200).json(locationCard);
  } catch (error) {
    logger.error(`Error fetching location card: ${error.message}`);
    res.status(500).json({ message: 'Error fetching location card', error: error.message });
  }
};

exports.updateLocationCard = async (req, res) => {
  try {
    const { locationId } = req.params;
    const updateData = req.body;

    const locationCard = await LocationCard.findByPk(locationId);

    if (!locationCard) {
      return res.status(404).json({ message: 'Location card not found' });
    }

    await locationCard.update(updateData);

    res.status(200).json(locationCard);
  } catch (error) {
    logger.error(`Error updating location card: ${error.message}`);
    res.status(500).json({ message: 'Error updating location card', error: error.message });
  }
};

module.exports = exports;

================
File: backend/src/controllers/locationController.js
================
const { Location } = require('../models');
const locationService = require('../services/locationService');
const { AppError } = require('../utils/errorHandler');

const getLocationsController = async (req, res) => {
  try {
    const locations = await locationService.getLocations();
    res.json(locations);
  } catch (error) {
    console.error('Error fetching locations:', error);
    res.status(500).json({ message: 'Error fetching locations' });
  }
};

const createLocationController = async (req, res) => {
  try {
    const location = await locationService.createLocation(req.body);
    res.status(201).json(location);
  } catch (error) {
    console.error('Error creating location:', error);
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error creating location' });
    }
  }
};

const changeLocationStatusController = async (req, res) => {
  try {
    const { locationId, isOpen } = req.body;
    const updatedLocation = await locationService.updateLocationStatus(locationId, isOpen);
    res.status(200).json(updatedLocation);
  } catch (error) {
    console.error('Error updating location status:', error);
    res.status(500).json({ message: 'Error updating location status' });
  }
};

const getAllLocationsController = async (req, res) => {
  try {
    const locations = await locationService.getLocations();
    res.status(200).json(locations);
  } catch (error) {
    console.error('Error fetching locations:', error);
    res.status(500).json({ message: 'Error fetching locations' });
  }
};

const getLocationProfilesController = async (req, res) => {
  try {
    const profiles = await locationService.getLocationProfiles();
    res.status(200).json(profiles);
  } catch (error) {
    console.error('Error fetching location profiles:', error);
    res.status(500).json({ message: 'Error fetching location profiles' });
  }
};

module.exports = {
  getLocationsController,
  createLocationController,
  changeLocationStatusController,
  getAllLocationsController,
  getLocationProfilesController
};

================
File: backend/src/controllers/locationController.ts
================
import { Request, Response } from 'express';
import { Location } from '../models/Location';
import { updateLocationStatus, getLocations } from '../services/locationService';
import { AppError } from '../utils/errorHandler';

export const getLocations = async (req: Request, res: Response) => {
  try {
    const locations = await Location.find();
    res.json(locations);
  } catch (error) {
    logger.error('Error fetching locations:', error);
    res.status(500).json({ message: 'Error fetching locations' });
  }
};

export const createLocation = async (req: Request, res: Response) => {
  try {
    const location = new Location(req.body);
    await location.save();
    res.status(201).json(location);
  } catch (error) {
    logger.error('Error creating location:', error);
    res.status(500).json({ message: 'Error creating location' });
  }
};

export const changeLocationStatus = async (req: Request, res: Response) => {
  try {
    const { locationId, isOpen } = req.body;
    const updatedLocation = await updateLocationStatus(locationId, isOpen);
    res.status(200).json(updatedLocation);
  } catch (error) {
    res.status(500).json({ message: 'Error updating location status', error });
  }
};

export const getAllLocations = async (req: Request, res: Response) => {
  try {
    const locations = await getLocations();
    res.status(200).json(locations);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching locations', error });
  }
};

// Implement other CRUD operations...

export const createLocationController = async (req: Request, res: Response) => {
  try {
    const locationData = req.body;
    const newLocation = await createLocation(locationData);
    res.status(201).json(newLocation);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message: error.message });
    } else {
      res.status(500).json({ message: 'Error creating location' });
    }
  }
};

export const getLocationsController = async (req: Request, res: Response) => {
  try {
    const locations = await getLocations();
    res.status(200).json(locations);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching locations' });
  }
};

export const getLocationProfilesController = async (req: Request, res: Response) => {
  try {
    const profiles = await getLocationProfiles();
    res.status(200).json(profiles);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching location profiles' });
  }
};

================
File: backend/src/controllers/locationMenuGroupController.js
================
const { LocationMenuGroup } = require('../models');
const logger = require('../services/logger');

exports.getAllLocationMenuGroups = async (req, res) => {
  try {
    const menuGroups = await LocationMenuGroup.findAll();
    res.status(200).json(menuGroups);
  } catch (error) {
    logger.error(`Error fetching location menu groups: ${error.message}`);
    res.status(500).json({ message: 'Error fetching location menu groups', error });
  }
};

exports.getLocationMenuGroupById = async (req, res) => {
  try {
    const menuGroup = await LocationMenuGroup.findByPk(req.params.id);
    if (!menuGroup) return res.status(404).json({ message: 'Location menu group not found' });
    res.status(200).json(menuGroup);
  } catch (error) {
    logger.error(`Error fetching location menu group by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching location menu group', error });
  }
};

exports.createLocationMenuGroup = async (req, res) => {
  try {
    const newMenuGroup = await LocationMenuGroup.create(req.body);
    logger.info(`Location menu group created: ${newMenuGroup.id}`);
    res.status(201).json(newMenuGroup);
  } catch (error) {
    logger.error(`Error creating location menu group: ${error.message}`);
    res.status(500).json({ message: 'Error creating location menu group', error });
  }
};

exports.updateLocationMenuGroup = async (req, res) => {
  try {
    const [updated] = await LocationMenuGroup.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Location menu group not found' });

    const updatedMenuGroup = await LocationMenuGroup.findByPk(req.params.id);
    logger.info(`Location menu group updated: ${req.params.id}`);
    res.status(200).json(updatedMenuGroup);
  } catch (error) {
    logger.error(`Error updating location menu group: ${error.message}`);
    res.status(500).json({ message: 'Error updating location menu group', error });
  }
};

exports.deleteLocationMenuGroup = async (req, res) => {
  try {
    const deleted = await LocationMenuGroup.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Location menu group not found' });

    logger.info(`Location menu group deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting location menu group: ${error.message}`);
    res.status(500).json({ message: 'Error deleting location menu group', error });
  }
};

================
File: backend/src/controllers/locationPosProfileController.js
================
const { LocationPosProfile } = require('../models');
const logger = require('../services/logger');

exports.getAllLocationPosProfiles = async (req, res) => {
  try {
    const posProfiles = await LocationPosProfile.findAll();
    res.status(200).json(posProfiles);
  } catch (error) {
    logger.error(`Error fetching location POS profiles: ${error.message}`);
    res.status(500).json({ message: 'Error fetching location POS profiles', error });
  }
};

exports.getLocationPosProfileById = async (req, res) => {
  try {
    const posProfile = await LocationPosProfile.findByPk(req.params.id);
    if (!posProfile) return res.status(404).json({ message: 'Location POS profile not found' });
    res.status(200).json(posProfile);
  } catch (error) {
    logger.error(`Error fetching location POS profile by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching location POS profile', error });
  }
};

exports.createLocationPosProfile = async (req, res) => {
  try {
    const newPosProfile = await LocationPosProfile.create(req.body);
    logger.info(`Location POS profile created: ${newPosProfile.id}`);
    res.status(201).json(newPosProfile);
  } catch (error) {
    logger.error(`Error creating location POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error creating location POS profile', error });
  }
};

exports.updateLocationPosProfile = async (req, res) => {
  try {
    const [updated] = await LocationPosProfile.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Location POS profile not found' });

    const updatedPosProfile = await LocationPosProfile.findByPk(req.params.id);
    logger.info(`Location POS profile updated: ${req.params.id}`);
    res.status(200).json(updatedPosProfile);
  } catch (error) {
    logger.error(`Error updating location POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error updating location POS profile', error });
  }
};

exports.deleteLocationPosProfile = async (req, res) => {
  try {
    const deleted = await LocationPosProfile.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Location POS profile not found' });

    logger.info(`Location POS profile deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting location POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error deleting location POS profile', error });
  }
};

================
File: backend/src/controllers/locationService.js
================
const db = require('../models');

class LocationService {
  // Create a new location
  async createLocation(clientId, locationDetails) {
    const client = await db.Client.findByPk(clientId);
    if (!client) {
      throw new Error('Client not found');
    }

    const location = await db.Location.create({
      ...locationDetails,
      clientId,
    });

    // Setup any default configurations or settings needed for the new location
    await this.setupDefaultLocationSettings(location);

    return location;
  }

  // Setup default settings for a new location
  async setupDefaultLocationSettings(location) {
    // Example: Setup default hours for the new location
    if (!location.hours) {
      location.hours = '9 AM - 5 PM'; // Default hours setup
      await location.save();
    }
    // Placeholder for further default settings logic
  }

  // Update location details
  async updateLocation(locationId, locationDetails) {
    const location = await db.Location.findByPk(locationId);
    if (!location) {
      throw new Error('Location not found');
    }

    return await location.update(locationDetails);
  }

  // Fetch all locations for a client
  async getLocations(clientId) {
    return await db.Location.findAll({ where: { clientId } });
  }

  // Fetch a single location by ID
  async getLocationById(locationId) {
    return await db.Location.findByPk(locationId);
  }

  // Delete a location
  async deleteLocation(locationId) {
    const location = await db.Location.findByPk(locationId);
    if (!location) {
      throw new Error('Location not found');
    }

    return await location.destroy();
  }

  // Create a drop-off spot for a location
  async createDropOffSpot(locationId, spotDetails) {
    const location = await db.Location.findByPk(locationId);
    if (!location) {
      throw new Error('Location not found');
    }

    return await db.DropOffSpot.create({
      ...spotDetails,
      locationId,
    });
  }

  // Fetch all drop-off spots for a location
  async getDropOffSpots(locationId) {
    return await db.DropOffSpot.findAll({ where: { locationId } });
  }

  // Update drop-off spot details
  async updateDropOffSpot(spotId, spotDetails) {
    const dropOffSpot = await db.DropOffSpot.findByPk(spotId);
    if (!dropOffSpot) {
      throw new Error('Drop-off spot not found');
    }

    return await dropOffSpot.update(spotDetails);
  }

  // Delete a drop-off spot
  async deleteDropOffSpot(spotId) {
    const dropOffSpot = await db.DropOffSpot.findByPk(spotId);
    if (!dropOffSpot) {
      throw new Error('Drop-off spot not found');
    }

    return await dropOffSpot.destroy();
  }
}

module.exports = new LocationService();

================
File: backend/src/controllers/locationTaxConfigController.js
================
const { LocationTaxConfig } = require('../models');
const logger = require('../services/logger');

exports.getAllLocationTaxConfigs = async (req, res) => {
  try {
    const taxConfigs = await LocationTaxConfig.findAll();
    res.status(200).json(taxConfigs);
  } catch (error) {
    logger.error(`Error fetching location tax configs: ${error.message}`);
    res.status(500).json({ message: 'Error fetching location tax configs', error });
  }
};

exports.getLocationTaxConfigById = async (req, res) => {
  try {
    const taxConfig = await LocationTaxConfig.findByPk(req.params.id);
    if (!taxConfig) return res.status(404).json({ message: 'Location tax config not found' });
    res.status(200).json(taxConfig);
  } catch (error) {
    logger.error(`Error fetching location tax config by ID (${req.params.id}): ${error.message}`);
    res.status(500).json({ message: 'Error fetching location tax config', error });
  }
};

exports.createLocationTaxConfig = async (req, res) => {
  try {
    const newTaxConfig = await LocationTaxConfig.create(req.body);
    logger.info(`Location tax config created: ${newTaxConfig.id}`);
    res.status(201).json(newTaxConfig);
  } catch (error) {
    logger.error(`Error creating location tax config: ${error.message}`);
    res.status(500).json({ message: 'Error creating location tax config', error });
  }
};

exports.updateLocationTaxConfig = async (req, res) => {
  try {
    const [updated] = await LocationTaxConfig.update(req.body, { where: { id: req.params.id } });
    if (!updated) return res.status(404).json({ message: 'Location tax config not found' });

    const updatedTaxConfig = await LocationTaxConfig.findByPk(req.params.id);
    logger.info(`Location tax config updated: ${req.params.id}`);
    res.status(200).json(updatedTaxConfig);
  } catch (error) {
    logger.error(`Error updating location tax config: ${error.message}`);
    res.status(500).json({ message: 'Error updating location tax config', error });
  }
};

exports.deleteLocationTaxConfig = async (req, res) => {
  try {
    const deleted = await LocationTaxConfig.destroy({ where: { id: req.params.id } });
    if (!deleted) return res.status(404).json({ message: 'Location tax config not found' });

    logger.info(`Location tax config deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting location tax config: ${error.message}`);
    res.status(500).json({ message: 'Error deleting location tax config', error });
  }
};

================
File: backend/src/controllers/loyaltyChallengeController.js
================
exports.getGuestChallengeProgress = async (req, res) => {
  try {
    const { guestId } = req.params;
    const progress = await LoyaltyChallengeProgress.findAll({
      where: { guestId },
      include: [{ model: LoyaltyChallenge, where: { status: 'active' } }]
    });
    res.json(progress);
  } catch (error) {
    console.error('Error fetching guest challenge progress:', error);
    res.status(500).json({ message: 'Error fetching guest challenge progress' });
  }
};

================
File: backend/src/controllers/loyaltyController.js
================
const LoyaltyReward = require('../models/LoyaltyReward');
const Wallet = require('../models/Wallet');
const moment = require('moment');
const Guest = require('../models/Guest');
const loyaltyService = require('../services/loyaltyService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.applyLoyaltyReward = async (req, res) => {
  try {
    const { orderId, loyaltyRewardId } = req.body;
    const reward = await LoyaltyReward.findByPk(loyaltyRewardId);
    const wallet = await Wallet.findOne({ where: { guestId: req.user.id } });

    if (!reward || reward.walletId !== wallet.id) {
      return res.status(400).json({ message: 'Loyalty reward not available.' });
    }

    const now = new Date();
    if (reward.expirationDate && now > reward.expirationDate) {
      return res.status(400).json({ message: 'This reward has expired.' });
    }

    if (reward.cooldownPeriod) {
      const lastUsed = reward.lastUsedAt;
      if (lastUsed && now - lastUsed < reward.cooldownPeriod * 60 * 60 * 1000) {
        return res.status(400).json({ message: `This reward is on cooldown. Try again later.` });
      }
    }

    // Apply reward logic here (e.g., adjusting order totals)
    // For demonstration, we'll just update the lastUsedAt
    reward.lastUsedAt = now;
    await reward.save();

    return res.status(200).json({ 
      message: 'Loyalty reward applied successfully.', 
      orderId, 
      rewardId: loyaltyRewardId,
      appliedAt: now
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

exports.resetLoyaltyProgress = async (req, res) => {
  try {
    const { guestId } = req.params;
    const { resetOption } = req.body;
    const guest = await Guest.findByPk(guestId);

    if (!guest) {
      return res.status(404).json({ message: 'Guest not found.' });
    }

    const now = moment();
    let resetDate;
    if (resetOption === 'calendar_year') {
      resetDate = moment().startOf('year');
    } else if (resetOption === 'signup_anniversary') {
      resetDate = moment(guest.createdAt).add(1, 'year').startOf('day');
    } else {
      return res.status(400).json({ message: 'Invalid reset option.', providedOption: resetOption });
    }

    if (now.isAfter(resetDate)) {
      const oldPoints = guest.loyaltyPoints;
      guest.loyaltyPoints = 0;
      await guest.save();
      return res.status(200).json({ 
        message: 'Loyalty progress has been reset.',
        guestId,
        oldPoints,
        newPoints: 0,
        resetDate: resetDate.toDate(),
        resetOption
      });
    } else {
      return res.status(400).json({ 
        message: 'Loyalty reset is not yet applicable.',
        guestId,
        currentPoints: guest.loyaltyPoints,
        nextResetDate: resetDate.toDate(),
        resetOption
      });
    }
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

exports.getLoyaltyProgram = async (req, res, next) => {
  try {
    const program = await loyaltyService.getLoyaltyProgram(req.params.clientId);
    res.status(200).json(program);
  } catch (error) {
    logger.error(`Error fetching loyalty program for client ${req.params.clientId}:`, error);
    next(new AppError('Error fetching loyalty program', 500));
  }
};

exports.createOrUpdateLoyaltyProgram = async (req, res, next) => {
  try {
    const program = await loyaltyService.createOrUpdateLoyaltyProgram(req.body);
    res.status(201).json(program);
  } catch (error) {
    logger.error('Error creating/updating loyalty program:', error);
    next(new AppError('Error creating/updating loyalty program', 500));
  }
};

exports.getCustomerPoints = async (req, res, next) => {
  try {
    const points = await loyaltyService.getCustomerPoints(req.params.customerId);
    res.status(200).json({ points });
  } catch (error) {
    logger.error(`Error fetching points for customer ${req.params.customerId}:`, error);
    next(new AppError('Error fetching customer points', 500));
  }
};

exports.addLoyaltyPoints = async (req, res, next) => {
  try {
    const { customerId, points } = req.body;
    const updatedPoints = await loyaltyService.addLoyaltyPoints(customerId, points);
    res.status(200).json({ updatedPoints });
  } catch (error) {
    logger.error('Error adding loyalty points:', error);
    next(new AppError('Error adding loyalty points', 500));
  }
};

exports.redeemLoyaltyPoints = async (req, res, next) => {
  try {
    const { customerId, points, rewardId } = req.body;
    const result = await loyaltyService.redeemLoyaltyPoints(customerId, points, rewardId);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error redeeming loyalty points:', error);
    next(new AppError('Error redeeming loyalty points', 500));
  }
};

exports.getLoyaltyTiers = async (req, res, next) => {
  try {
    const tiers = await loyaltyService.getLoyaltyTiers(req.params.clientId);
    res.status(200).json(tiers);
  } catch (error) {
    logger.error(`Error fetching loyalty tiers for client ${req.params.clientId}:`, error);
    next(new AppError('Error fetching loyalty tiers', 500));
  }
};

exports.createLoyaltyTier = async (req, res, next) => {
  try {
    const newTier = await loyaltyService.createLoyaltyTier(req.body);
    res.status(201).json(newTier);
  } catch (error) {
    logger.error('Error creating loyalty tier:', error);
    next(new AppError('Error creating loyalty tier', 500));
  }
};

exports.updateLoyaltyTier = async (req, res, next) => {
  try {
    const updatedTier = await loyaltyService.updateLoyaltyTier(req.params.tierId, req.body);
    res.status(200).json(updatedTier);
  } catch (error) {
    logger.error(`Error updating loyalty tier ${req.params.tierId}:`, error);
    next(new AppError('Error updating loyalty tier', 500));
  }
};

exports.deleteLoyaltyTier = async (req, res, next) => {
  try {
    await loyaltyService.deleteLoyaltyTier(req.params.tierId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting loyalty tier ${req.params.tierId}:`, error);
    next(new AppError('Error deleting loyalty tier', 500));
  }
};

exports.getLoyaltyRewards = async (req, res, next) => {
  try {
    const rewards = await loyaltyService.getLoyaltyRewards(req.params.clientId);
    res.status(200).json(rewards);
  } catch (error) {
    logger.error(`Error fetching loyalty rewards for client ${req.params.clientId}:`, error);
    next(new AppError('Error fetching loyalty rewards', 500));
  }
};

exports.createLoyaltyReward = async (req, res, next) => {
  try {
    const newReward = await loyaltyService.createLoyaltyReward(req.body);
    res.status(201).json(newReward);
  } catch (error) {
    logger.error('Error creating loyalty reward:', error);
    next(new AppError('Error creating loyalty reward', 500));
  }
};

exports.updateLoyaltyReward = async (req, res, next) => {
  try {
    const updatedReward = await loyaltyService.updateLoyaltyReward(req.params.rewardId, req.body);
    res.status(200).json(updatedReward);
  } catch (error) {
    logger.error(`Error updating loyalty reward ${req.params.rewardId}:`, error);
    next(new AppError('Error updating loyalty reward', 500));
  }
};

exports.deleteLoyaltyReward = async (req, res, next) => {
  try {
    await loyaltyService.deleteLoyaltyReward(req.params.rewardId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting loyalty reward ${req.params.rewardId}:`, error);
    next(new AppError('Error deleting loyalty reward', 500));
  }
};

================
File: backend/src/controllers/loyaltyWalletController.js
================
const Guest = require('../models/Guest');
const LoyaltyReward = require('../models/LoyaltyReward'); // Assuming you have a LoyaltyReward model

exports.getWallet = async (req, res) => {
  const { guestId } = req.params;

  try {
    const guest = await Guest.findByPk(guestId);

    if (!guest) return res.status(404).json({ message: 'Guest not found.' });

    res.json({
      points: guest.loyaltyPoints,
      tier: guest.loyaltyTier,
      rewards: guest.rewardsWallet,
    });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching wallet data', error });
  }
};

exports.addPoints = async (req, res) => {
  const { guestId, points } = req.body;

  try {
    const guest = await Guest.findByPk(guestId);

    if (!guest) return res.status(404).json({ message: 'Guest not found.' });

    guest.loyaltyPoints += points;
    await guest.save();

    res.json({ message: 'Points added successfully.', points: guest.loyaltyPoints });
  } catch (error) {
    res.status(500).json({ message: 'Error adding points', error });
  }
};

exports.redeemReward = async (req, res) => {
  const { guestId, rewardId } = req.body;

  try {
    const guest = await Guest.findByPk(guestId);
    const reward = await LoyaltyReward.findByPk(rewardId); // Use reward

    if (!guest) return res.status(404).json({ message: 'Guest not found.' });

    if (!reward || reward.walletId !== guest.walletId) {
      return res.status(400).json({ message: 'Reward not found in wallet.' });
    }

    // Logic to redeem the reward (e.g., deduct points, apply discount, etc.)
    reward.isRedeemed = true; // Example logic
    await reward.save();

    res.json({ message: 'Reward redeemed successfully.', reward });
  } catch (error) {
    res.status(500).json({ message: 'Error redeeming reward', error });
  }
};

================
File: backend/src/controllers/marketingController.js
================
const analyticsService = require('../services/analyticsService');

// Generate A/B Test Report
exports.getABTestReport = async (req, res) => {
  try {
    const { testId } = req.params;
    const performance = await analyticsService.calculateABTestPerformance(testId);

    if (!performance) {
      return res.status(404).json({ message: 'A/B Test data not found.' });
    }

    res.status(200).json(performance);
  } catch (error) {
    console.error(`Error generating A/B Test report: ${error.message}`);
    res.status(500).json({ message: 'Error generating A/B Test report', error });
  }
};

// Generate Discount Performance Report
exports.getDiscountPerformance = async (req, res) => {
  try {
    const { discountId } = req.params;
    const performance = await analyticsService.calculateDiscountPerformance(discountId);

    if (!performance) {
      return res.status(404).json({ message: 'Discount performance data not found.' });
    }

    res.status(200).json(performance);
  } catch (error) {
    console.error(`Error generating discount report: ${error.message}`);
    res.status(500).json({ message: 'Error generating discount report', error });
  }
};

// Additional marketing-related methods can be added here as needed.

================
File: backend/src/controllers/menuController.js
================
const db = require('../models');
const menuService = require('../services/menuService');
const logger = require('../services/logger');
const syncEngine = require('../services/posSyncService');

const getMenus = async (req, res) => {
  try {
    const menus = await menuService.getMenus(req.user.clientId);
    res.status(200).json(menus);
  } catch (error) {
    logger.error(`Error fetching menus for client ID ${req.user.clientId}: ${error.message}`);
    res.status(500).json({ message: 'Error fetching menus', error: error.message });
  }
};

const getMenuById = async (req, res) => {
  try {
    const menu = await menuService.getMenuById(req.params.id, req.user.clientId);
    if (!menu) {
      return res.status(404).json({ message: 'Menu not found or unauthorized access' });
    }
    res.status(200).json(menu);
  } catch (error) {
    logger.error(`Error fetching menu ID ${req.params.id}: ${error.message}`);
    res.status(500).json({ message: 'Error fetching menu', error: error.message });
  }
};

const createMenu = async (req, res) => {
  const transaction = await db.sequelize.transaction();
  try {
    const menu = await menuService.createMenu(req.body, req.user.clientId, transaction);
    await syncEngine.syncMenus(req.body.locationId, transaction);
    await transaction.commit();
    logger.info(`Menu created and synced for client ID ${req.user.clientId}`);
    res.status(201).json(menu);
  } catch (error) {
    await transaction.rollback();
    logger.error(`Error creating menu: ${error.message}`);
    res.status(500).json({ message: 'Error creating menu', error: error.message });
  }
};

const updateMenu = async (req, res) => {
  const transaction = await db.sequelize.transaction();
  try {
    const menu = await menuService.updateMenu(req.params.id, req.body, req.user.clientId, transaction);
    await syncEngine.syncMenus(req.body.locationId, transaction);
    await transaction.commit();
    logger.info(`Menu ID ${req.params.id} updated and synced for client ID ${req.user.clientId}`);
    res.status(200).json(menu);
  } catch (error) {
    await transaction.rollback();
    logger.error(`Error updating menu ID ${req.params.id}: ${error.message}`);
    res.status(500).json({ message: 'Error updating menu', error: error.message });
  }
};

const deleteMenu = async (req, res) => {
  const transaction = await db.sequelize.transaction();
  try {
    await menuService.deleteMenu(req.params.id, req.user.clientId, transaction);
    await syncEngine.syncMenus(req.body.locationId, transaction);
    await transaction.commit();
    logger.info(`Menu ID ${req.params.id} deleted and synced for client ID ${req.user.clientId}`);
    res.status(204).send();
  } catch (error) {
    await transaction.rollback();
    logger.error(`Error deleting menu ID ${req.params.id}: ${error.message}`);
    res.status(500).json({ message: 'Error deleting menu', error: error.message });
  }
};

const upsertMenuItem = async (req, res) => {
  const transaction = await db.sequelize.transaction();
  try {
    const menuItem = await menuService.upsertMenuItem(req.body, req.user.clientId, transaction);

    if (req.body.isABTest) {
      await menuService.createABTest(req.body, req.user.clientId, transaction);
    }

    await syncEngine.syncMenuItems(req.body.locationId, transaction);
    await transaction.commit();
    res.status(200).json(menuItem);
  } catch (error) {
    await transaction.rollback();
    logger.error(`Error upserting menu item: ${error.message}`);
    res.status(500).json({ message: 'Error adding/updating menu item', error: error.message });
  }
};

module.exports = {
  getMenus,
  getMenuById,
  createMenu,
  updateMenu,
  deleteMenu,
  upsertMenuItem
};

================
File: backend/src/controllers/menuItemController.js
================
const { Request, Response } = require 'express';
const { getMenuItemsByLocation } = require '../services/menuItemService';
const { AppError } = require '../utils/errorHandler';

const getMenuItems = async (req, res) => {
  try {
    const { locationId } = req.params;
    const menuItems = await getMenuItemsByLocation(locationId);
    res.status(200).json(menuItems);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error fetching menu items' });
    }
  }
};

================
File: backend/src/controllers/menuService.js
================
const db = require('../models');
const logger = require('../services/logger');

class MenuService {
  async getMenusByLocation(locationId) {
    try {
      const menus = await db.Menu.findAll({
        where: { locationId },
        include: [
          { model: db.MenuGroup, include: [{ model: db.MenuItem }] },
        ],
      });

      return menus;
    } catch (error) {
      logger.error(`Error fetching menus for location ${locationId}:`, error);
      throw error;
    }
  }

  async updateMenu(menuId, menuData) {
    try {
      const updatedMenu = await db.Menu.update(menuData, {
        where: { id: menuId },
        returning: true,
        plain: true,
      });

      return updatedMenu[1]; // Returning the updated instance
    } catch (error) {
      logger.error(`Error updating menu with ID ${menuId}:`, error);
      throw error;
    }
  }

  async deleteMenu(menuId) {
    try {
      await db.Menu.destroy({
        where: { id: menuId },
      });

      logger.info(`Menu with ID ${menuId} deleted successfully`);
    } catch (error) {
      logger.error(`Error deleting menu with ID ${menuId}:`, error);
      throw error;
    }
  }

  async syncMenuWithProvider(locationId, provider) {
    try {
      const menus = await this.getMenusByLocation(locationId);

      // Assuming PosSyncService handles sending menus to the provider
      const PosSyncService = require('./posSyncService');
      await PosSyncService.syncMenus({ menus, provider });

      logger.info(`Menus synced with provider ${provider} for location ${locationId}`);
    } catch (error) {
      logger.error(`Error syncing menus for location ${locationId} with provider ${provider}:`, error);
      throw error;
    }
  }
}

module.exports = new MenuService();

================
File: backend/src/controllers/notificationController.js
================
const NotificationService = require('../services/notificationService');
const logger = require('../services/logger');

// Send a notification (email/SMS) based on type
exports.sendNotification = async (req, res) => {
  try {
    const { recipient, message, notificationType } = req.body;

    await NotificationService.sendNotification(recipient, message, notificationType);

    res.status(200).json({ message: `Notification sent to ${recipient}` });
  } catch (error) {
    logger.error(`Error sending notification: ${error.message}`);
    res.status(500).json({ message: 'Error sending notification', error });
  }
};

================
File: backend/src/controllers/orderController.js
================
const { Order, Location, MenuItem } = require('../models');
const orderService = require('../services/orderService');
const logger = require('../utils/logger');
const Order = require('../models/Order');
const OrderItem = require('../models/OrderItem');
const Modifier = require('../models/Modifier');

class OrderController {
  static async cancelOrder(req, res) {
    // Existing implementation
  }

  static async getOrderHistory(req, res) {
    // Existing implementation
  }

  static async createOrder(req, res) {
    try {
      const { clientId, customerId, items, total, status } = req.body;
      const order = await Order.create({ clientId, customerId, total, status });

      for (const item of items) {
        const orderItem = await OrderItem.create({ ...item, orderId: order.id });
        if (item.modifiers) {
          for (const modifier of item.modifiers) {
            await Modifier.create({ ...modifier, orderItemId: orderItem.id });
          }
        }
      }

      res.status(201).json(order);
    } catch (error) {
      logger.error(`Error creating order: ${error.message}`);
      res.status(500).json({ message: 'Error creating order', error: error.message });
    }
  }

  static async getOrderDetails(req, res) {
    try {
      const order = await orderService.getOrderById(req.params.orderId);
      if (!order) {
        return res.status(404).json({ message: 'Order not found' });
      }
      res.status(200).json(order);
    } catch (error) {
      logger.error(`Error fetching order details: ${error.message}`);
      res.status(500).json({ message: 'Error fetching order details', error: error.message });
    }
  }

  static async updateOrderStatus(req, res) {
    try {
      const updatedOrder = await orderService.updateOrderStatus(req.params.orderId, req.body.status);
      res.status(200).json(updatedOrder);
    } catch (error) {
      logger.error(`Error updating order status: ${error.message}`);
      res.status(500).json({ message: 'Error updating order status', error: error.message });
    }
  }

  static async getOrder(req, res) {
    try {
      const { id } = req.params;
      const order = await Order.findByPk(id, {
        include: [{ model: OrderItem, include: [Modifier] }]
      });
      if (!order) {
        return res.status(404).json({ error: 'Order not found' });
      }
      res.json(order);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
}

module.exports = {
  cancelOrder: OrderController.cancelOrder,
  getOrderHistory: OrderController.getOrderHistory,
  createOrder: OrderController.createOrder,
  getOrderDetails: OrderController.getOrderDetails,
  updateOrderStatus: OrderController.updateOrderStatus,
  getOrder: OrderController.getOrder
};

================
File: backend/src/controllers/orderHistoryController.js
================
const OrderHistory = require('../models/OrderHistory');
const Order = require('../models/Order');
const Guest = require('../models/Guest');

exports.getOrderHistoryByGuest = async (req, res) => {
  const { guestId } = req.params;

  try {
    const orders = await OrderHistory.findAll({
      where: { guestId },
      include: [
        {
          model: Order,
          attributes: ['id', 'totalPrice', 'createdAt'],
        },
        {
          model: Guest,
          attributes: ['firstName', 'lastName', 'email'],
        },
      ],
    });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching order history', error });
  }
};

================
File: backend/src/controllers/orderProviderController.js
================
const { Request, Response } = require 'express';
const *  = require '../services/orderProviderService';
const { AppError } = require '../utils/errorHandler';

const createOrderProviderController = async (req, res) => {
  try {
    const { locationId } = req.params;
    const newProvider = await orderProviderService.createOrderProvider(parseInt(locationId), req.body);
    res.status(201).json(newProvider);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error creating order provider' });
    }
  }
};

const updateOrderProviderController = async (req, res) => {
  try {
    const updatedProvider = await orderProviderService.updateOrderProvider(parseInt(req.params.id), req.body);
    res.status(200).json(updatedProvider);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error updating order provider' });
    }
  }
};

const getOrderProvidersController = async (req, res) => {
  try {
    const providers = await orderProviderService.getOrderProviders(parseInt(req.params.locationId));
    res.status(200).json(providers);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching order providers' });
  }
};

const deleteOrderProviderController = async (req, res) => {
  try {
    await orderProviderService.deleteOrderProvider(parseInt(req.params.id));
    res.status(204).send();
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error deleting order provider' });
    }
  }
};

const handleIncomingOrderController = async (req, res) => {
  try {
    const { providerId } = req.params;
    const orderData = req.body;
    const processedOrder = await orderProviderService.processIncomingOrder(parseInt(providerId), orderData);
    res.status(200).json(processedOrder);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error processing incoming order' });
    }
  }
};

const createLocationMenuController = async (req, res) => {
  try {
    const { locationId } = req.params;
    const newMenu = await orderProviderService.createLocationMenu(parseInt(locationId), req.body);
    res.status(201).json(newMenu);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error creating location menu' });
    }
  }
};

// ... add other controllers for updateLocationMenu, getLocationMenus, deleteLocationMenu

================
File: backend/src/controllers/paymentController.js
================
const { Request, Response } = require ('express');
const { getAvailablePaymentGateways } = require ('../services/paymentService');

const getAvailablePaymentGatewaysForOrder = async (req, res) => {
  try {
    const { orderId } = req.params;
    const order = await Order.findByPk(orderId);
    if (!order) {
      return res.status(404).json({ message: 'Order not found' });
    }

    const availableGateways = await getAvailablePaymentGateways(order.clientId, order.locationId);
    res.json({ availableGateways });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching available payment gateways' });
  }
};

const paymentService = require('../services/paymentService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.processPayment = async (req, res, next) => {
  try {
    const { orderId, amount, gateway, paymentDetails } = req.body;
    const payment = await paymentService.processPayment(orderId, amount, gateway, paymentDetails);
    res.status(200).json(payment);
  } catch (error) {
    logger.error('Error processing payment:', error);
    next(new AppError('Payment processing failed', 500));
  }
};

exports.getPaymentById = async (req, res, next) => {
  try {
    const payment = await paymentService.getPaymentById(req.params.id);
    res.status(200).json(payment);
  } catch (error) {
    logger.error(`Error fetching payment ${req.params.id}:`, error);
    next(error);
  }
};

exports.refundPayment = async (req, res, next) => {
  try {
    const { paymentId, amount } = req.body;
    const refund = await paymentService.refundPayment(paymentId, amount);
    res.status(200).json(refund);
  } catch (error) {
    logger.error('Error processing refund:', error);
    next(new AppError('Refund processing failed', 500));
  }
};

exports.getPaymentMethods = async (req, res, next) => {
  try {
    const methods = await paymentService.getPaymentMethods(req.params.clientId);
    res.status(200).json(methods);
  } catch (error) {
    logger.error(`Error fetching payment methods for client ${req.params.clientId}:`, error);
    next(error);
  }
};

exports.addPaymentMethod = async (req, res, next) => {
  try {
    const newMethod = await paymentService.addPaymentMethod(req.body);
    res.status(201).json(newMethod);
  } catch (error) {
    logger.error('Error adding payment method:', error);
    next(error);
  }
};

exports.updatePaymentMethod = async (req, res, next) => {
  try {
    const updatedMethod = await paymentService.updatePaymentMethod(req.params.methodId, req.body);
    res.status(200).json(updatedMethod);
  } catch (error) {
    logger.error(`Error updating payment method ${req.params.methodId}:`, error);
    next(error);
  }
};

exports.deletePaymentMethod = async (req, res, next) => {
  try {
    await paymentService.deletePaymentMethod(req.params.methodId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting payment method ${req.params.methodId}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/permissionController.js
================
const Permission = require('../models/Permission');
const { createAuditLog } = require('../services/auditLogService');

exports.createPermission = async (req, res) => {
  try {
    const permission = await Permission.create(req.body);
    await createAuditLog('Permission Created', { permission: permission.name }, req.user.id);
    res.status(201).json(permission);
  } catch (error) {
    res.status(500).json({ message: 'Error creating permission', error });
  }
};

exports.getAllPermissions = async (req, res) => {
  try {
    const permissions = await Permission.findAll();
    res.json(permissions);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching permissions', error });
  }
};

exports.updatePermission = async (req, res) => {
  try {
    const permission = await Permission.findByPk(req.params.id);
    if (!permission) return res.status(404).json({ message: 'Permission not found' });

    await permission.update(req.body);
    await createAuditLog('Permission Updated', { permission: permission.name }, req.user.id);
    res.json(permission);
  } catch (error) {
    res.status(500).json({ message: 'Error updating permission', error });
  }
};

exports.deletePermission = async (req, res) => {
  try {
    const permission = await Permission.findByPk(req.params.id);
    if (!permission) return res.status(404).json({ message: 'Permission not found' });

    await permission.destroy();
    await createAuditLog('Permission Deleted', { permission: permission.name }, req.user.id);
    res.json({ message: 'Permission deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting permission', error });
  }
};

================
File: backend/src/controllers/posAlertController.js
================
const { Request, Response } = require 'express';
const { POSAlert } = require '../models/POSAlert';
const { createPOSAlert, getPOSAlerts } = require '../services/posAlertService';

const createAlert = async (req, res) => {
  try {
    const alert = await createPOSAlert(req.body);
    res.status(201).json(alert);
  } catch (error) {
    res.status(500).json({ message: 'Error creating POS alert', error });
  }
};

const getAlerts = async (req, res) => {
  try {
    const alerts = await getPOSAlerts();
    res.status(200).json(alerts);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching POS alerts', error });
  }
};

================
File: backend/src/controllers/posController.js
================
const posService = require('../services/posService');
const logger = require('../utils/logger');
const { AppError } = require('../utils/errorHandler');
const { validationResult } = require('express-validator');

const handleErrors = (req, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new AppError('Validation error', 400, errors.array()));
  }
};

const createProfile = async (req, res, next) => {
  try {
    handleErrors(req, next);
    const profile = await posService.createProfile(req.body);
    logger.info(`POS profile created: ${profile.id}`);
    res.status(201).json(profile);
  } catch (error) {
    logger.error('Error creating POS profile:', error);
    next(new AppError('Error creating POS profile', 500));
  }
};

const getProfile = async (req, res, next) => {
  try {
    const profile = await posService.getProfile(req.params.id);
    if (!profile) {
      return next(new AppError('POS profile not found', 404));
    }
    res.json(profile);
  } catch (error) {
    logger.error(`Error fetching POS profile ${req.params.id}:`, error);
    next(new AppError('Error fetching POS profile', 500));
  }
};

const updateProfile = async (req, res, next) => {
  try {
    handleErrors(req, next);
    const updatedProfile = await posService.updateProfile(req.params.id, req.body);
    logger.info(`POS profile updated: ${req.params.id}`);
    res.json(updatedProfile);
  } catch (error) {
    logger.error(`Error updating POS profile ${req.params.id}:`, error);
    next(new AppError('Error updating POS profile', 500));
  }
};

const deleteProfile = async (req, res, next) => {
  try {
    await posService.deleteProfile(req.params.id);
    logger.info(`POS profile deleted: ${req.params.id}`);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting POS profile ${req.params.id}:`, error);
    next(new AppError('Error deleting POS profile', 500));
  }
};

const syncData = async (req, res, next) => {
  try {
    handleErrors(req, next);
    const result = await posService.syncData(req.body);
    logger.info('POS data synced successfully');
    res.json(result);
  } catch (error) {
    logger.error('Error syncing POS data:', error);
    next(new AppError('Error syncing POS data', 500));
  }
};

const getStatus = async (req, res, next) => {
  try {
    const status = await posService.getStatus(req.params.id);
    res.json(status);
  } catch (error) {
    logger.error(`Error fetching POS status ${req.params.id}:`, error);
    next(new AppError('Error fetching POS status', 500));
  }
};

module.exports = {
  createProfile,
  getProfile,
  updateProfile,
  deleteProfile,
  syncData,
  getStatus
};

================
File: backend/src/controllers/PosController.js
================
const PosService = require('../services/PosService');

class PosController {
  static async createProfile(req, res) {
    try {
      const profile = await PosService.createProfile(req.body);
      return res.status(201).json(profile);
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }

  static async getAllProfiles(req, res) {
    try {
      const profiles = await PosService.getAllProfiles();
      return res.status(200).json(profiles);
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }

  static async getProfileById(req, res) {
    try {
      const profile = await PosService.getProfileById(req.params.id);
      if (profile) {
        return res.status(200).json(profile);
      }
      return res.status(404).json({ message: 'Profile not found' });
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }

  static async updateProfile(req, res) {
    try {
      const profile = await PosService.updateProfile(req.params.id, req.body);
      return res.status(200).json(profile);
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }

  static async deleteProfile(req, res) {
    try {
      const success = await PosService.deleteProfile(req.params.id);
      if (success) {
        return res.status(204).send();
      }
      return res.status(404).json({ message: 'Profile not found' });
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }
}

module.exports = PosController;

================
File: backend/src/controllers/posIntegrationController.js
================
const PosProfile = require('../models/PosProfile');
const PosSyncService = require('../services/posSyncService');

// Controller for syncing menus
exports.syncMenus = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncMenus(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing menus', error });
  }
};

// Controller for syncing orders
exports.syncOrders = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncOrders(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing orders', error });
  }
};

// Controller for syncing inventory
exports.syncInventory = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncInventory(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing inventory', error });
  }
};

// Controller for syncing tax rates (if applicable for the POS system)
exports.syncTaxRates = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncTaxRates(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing tax rates', error });
  }
};

================
File: backend/src/controllers/posIntegrationErrorLogController.js
================
const PosIntegrationSettings = require('../models/PosIntegrationSettings');

// Get all POS integration settings
exports.getAllSettings = async (req, res) => {
    try {
        const settings = await PosIntegrationSettings.findAll();
        res.json(settings);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching POS integration settings', error });
    }
};

// Create new POS integration settings
exports.createSettings = async (req, res) => {
    try {
        const newSettings = await PosIntegrationSettings.create(req.body);
        res.status(201).json(newSettings);
    } catch (error) {
        res.status(400).json({ message: 'Error creating POS integration settings', error });
    }
};

// Get POS integration settings by ID
exports.getSettingsById = async (req, res) => {
    try {
        const settings = await PosIntegrationSettings.findByPk(req.params.id);
        if (settings) {
            res.json(settings);
        } else {
            res.status(404).json({ message: 'POS integration settings not found' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error fetching POS integration settings', error });
    }
};

// Update POS integration settings by ID
exports.updateSettings = async (req, res) => {
    try {
        const [updated] = await PosIntegrationSettings.update(req.body, {
            where: { id: req.params.id }
        });
        if (updated) {
            const updatedSettings = await PosIntegrationSettings.findByPk(req.params.id);
            res.json(updatedSettings);
        } else {
            res.status(404).json({ message: 'POS integration settings not found' });
        }
    } catch (error) {
        res.status(400).json({ message: 'Error updating POS integration settings', error });
    }
};

// Delete POS integration settings by ID
exports.deleteSettings = async (req, res) => {
    try {
        const deleted = await PosIntegrationSettings.destroy({
            where: { id: req.params.id }
        });
        if (deleted) {
            res.status(204).send();
        } else {
            res.status(404).json({ message: 'POS integration settings not found' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error deleting POS integration settings', error });
    }
};

================
File: backend/src/controllers/posIntegrationMappingController.js
================
const PosIntegrationMapping = require('../models/PosIntegrationMapping');

// Get all POS integration mappings
exports.getAllMappings = async (req, res) => {
    try {
        const mappings = await PosIntegrationMapping.findAll();
        res.json(mappings);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching POS integration mappings', error });
    }
};

// Create a new POS integration mapping
exports.createMapping = async (req, res) => {
    try {
        const newMapping = await PosIntegrationMapping.create(req.body);
        res.status(201).json(newMapping);
    } catch (error) {
        res.status(400).json({ message: 'Error creating POS integration mapping', error });
    }
};

// Get a single POS integration mapping by ID
exports.getMappingById = async (req, res) => {
    try {
        const mapping = await PosIntegrationMapping.findByPk(req.params.id);
        if (mapping) {
            res.json(mapping);
        } else {
            res.status(404).json({ message: 'POS integration mapping not found' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error fetching POS integration mapping', error });
    }
};

// Update a POS integration mapping by ID
exports.updateMapping = async (req, res) => {
    try {
        const [updated] = await PosIntegrationMapping.update(req.body, {
            where: { id: req.params.id }
        });
        if (updated) {
            const updatedMapping = await PosIntegrationMapping.findByPk(req.params.id);
            res.json(updatedMapping);
        } else {
            res.status(404).json({ message: 'POS integration mapping not found' });
        }
    } catch (error) {
        res.status(400).json({ message: 'Error updating POS integration mapping', error });
    }
};

// Delete a POS integration mapping by ID
exports.deleteMapping = async (req, res) => {
    try {
        const deleted = await PosIntegrationMapping.destroy({
            where: { id: req.params.id }
        });
        if (deleted) {
            res.status(204).send();
        } else {
            res.status(404).json({ message: 'POS integration mapping not found' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error deleting POS integration mapping', error });
    }
};

================
File: backend/src/controllers/posIntegrationSettingsController.js
================
const { PosIntegrationSettings } = require('../models');

// Get all POS integration settings
exports.getAllPosIntegrationSettings = async (req, res) => {
    try {
        const settings = await PosIntegrationSettings.findAll();
        res.json(settings);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching POS integration settings', error: error.message });
    }
};

// Get a specific POS integration setting by ID
exports.getPosIntegrationSettingById = async (req, res) => {
    try {
        const setting = await PosIntegrationSettings.findByPk(req.params.id);
        if (!setting) {
            return res.status(404).json({ message: 'POS integration setting not found' });
        }
        res.json(setting);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching POS integration setting', error: error.message });
    }
};

// Create a new POS integration setting
exports.createPosIntegrationSetting = async (req, res) => {
    try {
        const newSetting = await PosIntegrationSettings.create(req.body);
        res.status(201).json(newSetting);
    } catch (error) {
        res.status(400).json({ message: 'Error creating POS integration setting', error: error.message });
    }
};

// Update an existing POS integration setting
exports.updatePosIntegrationSetting = async (req, res) => {
    try {
        const [updated] = await PosIntegrationSettings.update(req.body, {
            where: { id: req.params.id }
        });
        if (!updated) {
            return res.status(404).json({ message: 'POS integration setting not found' });
        }
        const updatedSetting = await PosIntegrationSettings.findByPk(req.params.id);
        res.json(updatedSetting);
    } catch (error) {
        res.status(400).json({ message: 'Error updating POS integration setting', error: error.message });
    }
};

// Delete a POS integration setting
exports.deletePosIntegrationSetting = async (req, res) => {
    try {
        const deleted = await PosIntegrationSettings.destroy({
            where: { id: req.params.id }
        });
        if (!deleted) {
            return res.status(404).json({ message: 'POS integration setting not found' });
        }
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ message: 'Error deleting POS integration setting', error: error.message });
    }
};

================
File: backend/src/controllers/posProfileController.js
================
const posSyncService = require('../services/posSyncService');
const db = require('../models');
const logger = require('../services/logger');

// Create a Core POS profile (Admin Only)
exports.createCorePosProfile = async (req, res) => {
  try {
    if (req.user.role !== 'Admin') {
      return res.status(403).json({ message: 'Access denied' });
    }

    const coreProfileData = req.body;
    const newCoreProfile = await db.CorePOSProfile.create(coreProfileData);

    logger.info(`Core POS profile created: ${newCoreProfile.profileName}`);
    res.status(201).json(newCoreProfile);
  } catch (error) {
    logger.error(`Error creating Core POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error creating Core POS profile', error });
  }
};

// Fetch Core POS profiles (Admin Only)
exports.getCorePosProfiles = async (req, res) => {
  try {
    if (req.user.role !== 'Admin') {
      return res.status(403).json({ message: 'Access denied' });
    }

    const profiles = await db.CorePOSProfile.findAll();
    res.status(200).json(profiles);
  } catch (error) {
    logger.error(`Error fetching Core POS profiles: ${error.message}`);
    res.status(500).json({ message: 'Error fetching Core POS profiles', error });
  }
};

// Create a Location-specific POS profile
exports.createLocationPosProfile = async (req, res) => {
  try {
    const { locationId } = req.params;
    const profileData = req.body;

    const location = await db.Location.findByPk(locationId);
    if (!location) {
      return res.status(404).json({ message: 'Location not found' });
    }

    const coreProfile = await db.CorePOSProfile.findByPk(profileData.coreProfileId);
    if (!coreProfile) {
      return res.status(404).json({ message: 'Core POS Profile not found' });
    }

    const newLocationProfile = await db.LocationPOSProfile.create({
      ...profileData,
      locationId,
      coreProfileId: coreProfile.id,
    });

    logger.info(`Location POS profile created for location ID ${locationId}`);
    res.status(201).json(newLocationProfile);
  } catch (error) {
    logger.error(`Error creating Location POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error creating Location POS profile', error });
  }
};

// Update a Location-specific POS profile
exports.updateLocationPosProfile = async (req, res) => {
  try {
    const { profileId } = req.params;
    const profileData = req.body;

    const locationProfile = await db.LocationPOSProfile.findByPk(profileId);
    if (!locationProfile) {
      return res.status(404).json({ message: 'Location POS profile not found' });
    }

    await locationProfile.update(profileData);

    logger.info(`Location POS profile updated: ID ${profileId}`);
    res.status(200).json(locationProfile);
  } catch (error) {
    logger.error(`Error updating Location POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error updating Location POS profile', error });
  }
};

// Fetch a Location-specific POS profile by ID
exports.getLocationPosProfileById = async (req, res) => {
  try {
    const { profileId } = req.params;
    const locationProfile = await db.LocationPOSProfile.findByPk(profileId);

    if (!locationProfile) {
      return res.status(404).json({ message: 'Location POS profile not found' });
    }

    res.status(200).json(locationProfile);
  } catch (error) {
    logger.error(`Error fetching Location POS profile: ${error.message}`);
    res.status(500).json({ message: 'Error fetching Location POS profile', error });
  }
};

// Sync POS data based on Location Profile settings
exports.syncPosData = async (req, res) => {
  try {
    const { profileId } = req.params;
    const locationProfile = await db.LocationPOSProfile.findByPk(profileId);
    if (!locationProfile) {
      return res.status(404).json({ message: 'Location POS profile not found' });
    }

    const coreProfile = await db.CorePOSProfile.findByPk(locationProfile.coreProfileId);
    if (!coreProfile) {
      return res.status(404).json({ message: 'Core POS profile not found' });
    }

    await posSyncService.syncMenus(locationProfile, coreProfile);
    await posSyncService.syncInventory(locationProfile, coreProfile);

    logger.info(`POS sync triggered for location profile ID ${profileId}`);
    res.status(200).json({ message: 'POS data synced successfully' });
  } catch (error) {
    logger.error(`Error syncing POS data: ${error.message}`);
    res.status(500).json({ message: 'Error syncing POS data', error });
  }
};

================
File: backend/src/controllers/posSettingsController.js
================
const { Request, Response } = require 'express';
const { getPOSSettings, updatePOSSettings } = require '../services/posSettingsService';
const { AppError } = require '../utils/errorHandler';

const getPOSSettingsController = async (req, res) => {
  try {
    const clientId = req.user.clientId;
    const settings = await getPOSSettings(clientId);
    res.status(200).json(settings);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error fetching POS settings' });
    }
  }
};

const updatePOSSettingsController = async (req, res) => {
  try {
    const clientId = req.user.clientId;
    const { modifierSendMethod } = req.body;
    const updatedSettings = await updatePOSSettings(clientId, { modifierSendMethod });
    res.status(200).json(updatedSettings);
  } catch (error) {
    if (error instanceof AppError) {
      res.status(error.statusCode).json({ message.message });
    } else {
      res.status(500).json({ message: 'Error updating POS settings' });
    }
  }
};

================
File: backend/src/controllers/posSyncController.js
================
const PosProfile = require('../models/LocationPOSProfile');
const PosSyncService = require('../services/posSyncService');

// Controller for syncing menus
exports.syncMenus = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'Location POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncMenus(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing menus', error });
  }
};

// Controller for syncing orders
exports.syncOrders = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'Location POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncOrders(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing orders', error });
  }
};

// Controller for syncing inventory
exports.syncInventory = async (req, res) => {
  try {
    const posProfile = await PosProfile.findByPk(req.body.posProfileId);

    if (!posProfile) {
      return res.status(404).json({ message: 'Location POS Profile not found' });
    }

    const syncResult = await PosSyncService.syncInventory(posProfile);

    res.json(syncResult);
  } catch (error) {
    res.status(500).json({ message: 'Error syncing inventory', error });
  }
};

================
File: backend/src/controllers/posSyncService.js
================
const db = require('../models');
const axios = require('axios');
const logger = require('./logger');
const { applyRoundingIfNeeded } = require('../utils/pricingUtils');

class PosSyncService {
  async syncMenus(locationProfile, coreProfile) {
    try {
      const menuData = await db.Menu.findAll({
        where: { locationId: locationProfile.locationId },
        include: [
          { model: db.MenuGroup, include: [{ model: db.MenuItem, include: [db.Modifier] }] },
        ],
      });

      const formattedMenuData = menuData.map((menu) => ({
        name: menu.name,
        groups: menu.MenuGroups.map((group) => ({
          name: group.name,
          items: group.MenuItems.map((item) => ({
            name: item.name,
            price: applyRoundingIfNeeded(item.basePrice, locationProfile.roundingOption),
            modifiers: item.Modifiers.map((modifier) => ({
              name: modifier.name,
              price: applyRoundingIfNeeded(modifier.price, locationProfile.roundingOption),
            })),
          })),
        })),
      }));

      const response = await axios.post(`${coreProfile.apiBaseUrl}/menus`, formattedMenuData, {
        headers: {
          Authorization: `Bearer ${coreProfile.clientSecret}`,
          'Content-Type': coreProfile.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Menu sync successful for location ${locationProfile.locationId}`);
      } else {
        logger.error(`Menu sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing menus: ${error.message}`);
      throw error;
    }
  }

  async syncInventory(locationProfile, coreProfile) {
    try {
      const inventory = await db.Inventory.findAll({
        where: { locationId: locationProfile.locationId },
        attributes: ['itemName', 'quantity', 'sku'],
      });

      const formattedInventory = inventory.map((item) => ({
        itemName: item.itemName,
        quantity: item.quantity,
        sku: item.sku,
      }));

      const response = await axios.post(`${coreProfile.apiBaseUrl}/inventory`, formattedInventory, {
        headers: {
          Authorization: `Bearer ${coreProfile.clientSecret}`,
          'Content-Type': coreProfile.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Inventory sync successful for location ${locationProfile.locationId}`);
      } else {
        logger.error(`Inventory sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing inventory: ${error.message}`);
      throw error;
    }
  }

  // Additional logic for syncing orders, etc.
}

module.exports = new PosSyncService();

================
File: backend/src/controllers/providerController.js
================
const providerService = require('../services/providerService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

// Fetch all providers for a client
exports.getAllProviders = async (req, res, next) => {
  try {
    const providers = await providerService.getAllProviders(req.user.clientId);
    res.status(200).json(providers);
  } catch (error) {
    logger.error('Error fetching all providers:', error);
    next(new AppError('Failed to fetch providers', 500));
  }
};

// Get a provider by ID
exports.getProviderById = async (req, res, next) => {
  try {
    const provider = await providerService.getProviderById(req.params.id);
    if (!provider) {
      return next(new AppError('Provider not found', 404));
    }
    res.status(200).json(provider);
  } catch (error) {
    logger.error(`Error fetching provider ${req.params.id}:`, error);
    next(error);
  }
};

// Create a new provider
exports.createProvider = async (req, res, next) => {
  try {
    const newProvider = await providerService.createProvider(req.body);
    res.status(201).json(newProvider);
  } catch (error) {
    logger.error('Error creating provider:', error);
    next(error);
  }
};

// Update an existing provider
exports.updateProvider = async (req, res, next) => {
  try {
    const updatedProvider = await providerService.updateProvider(req.params.id, req.body);
    if (!updatedProvider) {
      return next(new AppError('Provider not found', 404));
    }
    res.status(200).json(updatedProvider);
  } catch (error) {
    logger.error(`Error updating provider ${req.params.id}:`, error);
    next(error);
  }
};

// Delete a provider
exports.deleteProvider = async (req, res, next) => {
  try {
    const result = await providerService.deleteProvider(req.params.id);
    if (!result) {
      return next(new AppError('Provider not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting provider ${req.params.id}:`, error);
    next(error);
  }
};

// Sync provider-specific data
exports.syncProviderData = async (req, res, next) => {
  try {
    await providerService.syncProviderData(req.params.id);
    res.status(200).json({ message: 'Provider data synced successfully' });
  } catch (error) {
    logger.error(`Error syncing provider data (ID: ${req.params.id}):`, error);
    next(new AppError('Error syncing provider data', 500));
  }
};

// Get provider settings
exports.getProviderSettings = async (req, res, next) => {
  try {
    const settings = await providerService.getProviderSettings(req.params.id);
    res.status(200).json(settings);
  } catch (error) {
    logger.error(`Error fetching settings for provider ${req.params.id}:`, error);
    next(error);
  }
};

// Update provider settings
exports.updateProviderSettings = async (req, res, next) => {
  try {
    const updatedSettings = await providerService.updateProviderSettings(req.params.id, req.body);
    res.status(200).json(updatedSettings);
  } catch (error) {
    logger.error(`Error updating settings for provider ${req.params.id}:`, error);
    next(error);
  }
};

// Get provider integrations
exports.getProviderIntegrations = async (req, res, next) => {
  try {
    const integrations = await providerService.getProviderIntegrations(req.params.id);
    res.status(200).json(integrations);
  } catch (error) {
    logger.error(`Error fetching integrations for provider ${req.params.id}:`, error);
    next(error);
  }
};

// Add provider integration
exports.addProviderIntegration = async (req, res, next) => {
  try {
    const newIntegration = await providerService.addProviderIntegration(req.params.id, req.body);
    res.status(201).json(newIntegration);
  } catch (error) {
    logger.error(`Error adding integration for provider ${req.params.id}:`, error);
    next(error);
  }
};

// Update provider integration
exports.updateProviderIntegration = async (req, res, next) => {
  try {
    const updatedIntegration = await providerService.updateProviderIntegration(req.params.id, req.params.integrationId, req.body);
    res.status(200).json(updatedIntegration);
  } catch (error) {
    logger.error(`Error updating integration ${req.params.integrationId} for provider ${req.params.id}:`, error);
    next(error);
  }
};

// Delete provider integration
exports.deleteProviderIntegration = async (req, res, next) => {
  try {
    await providerService.deleteProviderIntegration(req.params.id, req.params.integrationId);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting integration ${req.params.integrationId} for provider ${req.params.id}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/qrCodeController.js
================
const QRCode = require('qrcode');
const Guest = require('../models/Guest');

// Endpoint to generate QR code for scan-to-pay or scan-for-loyalty
exports.generateQRCode = async (req, res) => {
  const { guestId, actionType } = req.body; // actionType could be "pay" or "loyalty"

  try {
    const guest = await Guest.findByPk(guestId);

    if (!guest) {
      return res.status(404).json({ message: 'Guest not found.' });
    }

    // Generate QR code data
    const qrData = {
      guestId: guest.id,
      actionType,
      timestamp: new Date().toISOString(),
    };

    const qrCodeImage = await QRCode.toDataURL(JSON.stringify(qrData));

    res.json({ qrCode: qrCodeImage });
  } catch (error) {
    res.status(500).json({ message: 'Error generating QR code', error });
  }
};

================
File: backend/src/controllers/refundController.js
================
const Refund = require('../models/Refund');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

// Process a refund
exports.processRefund = async (req, res, next) => {
    try {
        const newRefund = await Refund.create(req.body);
        logger.info(`Refund processed successfully: ${newRefund.id}`);
        res.status(201).json(newRefund);
    } catch (error) {
        logger.error('Error processing refund:', error);
        next(new AppError('Failed to process refund', 500));
    }
};

// Get a single refund by ID
exports.getRefundById = async (req, res, next) => {
    try {
        const refund = await Refund.findByPk(req.params.id);
        if (!refund) {
            return next(new AppError('Refund not found', 404));
        }
        res.status(200).json(refund);
    } catch (error) {
        logger.error(`Error fetching refund ${req.params.id}:`, error);
        next(error);
    }
};

// Get all refunds for a specific order
exports.getRefundsByOrder = async (req, res, next) => {
    try {
        const refunds = await Refund.findAll({ where: { orderId: req.params.orderId } });
        res.status(200).json(refunds);
    } catch (error) {
        logger.error(`Error fetching refunds for order ${req.params.orderId}:`, error);
        next(error);
    }
};

// Update the status of a refund
exports.updateRefundStatus = async (req, res, next) => {
    try {
        const [updated] = await Refund.update(
            { status: req.body.status },
            { where: { id: req.params.id } }
        );
        if (!updated) {
            return next(new AppError('Refund not found', 404));
        }
        const updatedRefund = await Refund.findByPk(req.params.id);
        res.status(200).json(updatedRefund);
    } catch (error) {
        logger.error(`Error updating refund status ${req.params.id}:`, error);
        next(error);
    }
};

// Cancel a refund
exports.cancelRefund = async (req, res, next) => {
    try {
        const refund = await Refund.findByPk(req.params.id);
        if (!refund) {
            return next(new AppError('Refund not found', 404));
        }
        if (refund.status === 'cancelled') {
            return next(new AppError('Refund is already cancelled', 400));
        }
        refund.status = 'cancelled';
        await refund.save();
        res.status(200).json(refund);
    } catch (error) {
        logger.error(`Error cancelling refund ${req.params.id}:`, error);
        next(error);
    }
};

================
File: backend/src/controllers/reportController.js
================
const reportService = require('../services/reportService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.generateReport = async (req, res, next) => {
  try {
    const report = await reportService.generateReport(req.body);
    res.status(201).json(report);
  } catch (error) {
    logger.error('Error generating report:', error);
    next(new AppError('Failed to generate report', 500));
  }
};

exports.getReportById = async (req, res, next) => {
  try {
    const report = await reportService.getReportById(req.params.id);
    if (!report) {
      return next(new AppError('Report not found', 404));
    }
    res.status(200).json(report);
  } catch (error) {
    logger.error(`Error fetching report ${req.params.id}:`, error);
    next(error);
  }
};

exports.getClientReports = async (req, res, next) => {
  try {
    const reports = await reportService.getClientReports(req.params.clientId);
    res.status(200).json(reports);
  } catch (error) {
    logger.error(`Error fetching reports for client ${req.params.clientId}:`, error);
    next(error);
  }
};

exports.updateReport = async (req, res, next) => {
  try {
    const updatedReport = await reportService.updateReport(req.params.id, req.body);
    if (!updatedReport) {
      return next(new AppError('Report not found', 404));
    }
    res.status(200).json(updatedReport);
  } catch (error) {
    logger.error(`Error updating report ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteReport = async (req, res, next) => {
  try {
    const result = await reportService.deleteReport(req.params.id);
    if (!result) {
      return next(new AppError('Report not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting report ${req.params.id}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/reviewController.js
================
const reviewService = require('../services/reviewService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.createReview = async (req, res, next) => {
  try {
    const newReview = await reviewService.createReview(req.body);
    res.status(201).json(newReview);
  } catch (error) {
    logger.error('Error creating review:', error);
    next(new AppError('Failed to create review', 500));
  }
};

exports.getReviewsForMenuItem = async (req, res, next) => {
  try {
    const reviews = await reviewService.getReviewsForMenuItem(req.params.menuItemId);
    res.status(200).json(reviews);
  } catch (error) {
    logger.error(`Error fetching reviews for menu item ${req.params.menuItemId}:`, error);
    next(error);
  }
};

exports.getReviewById = async (req, res, next) => {
  try {
    const review = await reviewService.getReviewById(req.params.id);
    if (!review) {
      return next(new AppError('Review not found', 404));
    }
    res.status(200).json(review);
  } catch (error) {
    logger.error(`Error fetching review ${req.params.id}:`, error);
    next(error);
  }
};

exports.updateReview = async (req, res, next) => {
  try {
    const updatedReview = await reviewService.updateReview(req.params.id, req.body);
    res.status(200).json(updatedReview);
  } catch (error) {
    logger.error(`Error updating review ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteReview = async (req, res, next) => {
  try {
    await reviewService.deleteReview(req.params.id);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting review ${req.params.id}:`, error);
    next(error);
  }
};

exports.getAverageRatingForMenuItem = async (req, res, next) => {
  try {
    const averageRating = await reviewService.getAverageRatingForMenuItem(req.params.menuItemId);
    res.status(200).json({ averageRating });
  } catch (error) {
    logger.error(`Error fetching average rating for menu item ${req.params.menuItemId}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/rewardController.js
================
const RewardSchedule = require('../models/RewardSchedule');
const Guest = require('../models/Guest');

exports.checkAndTriggerRewards = async () => {
  const today = new Date().toISOString().slice(0, 10);

  // Find all rewards scheduled for today
  const rewards = await RewardSchedule.findAll({ where: { scheduleDate: today } });

  for (const reward of rewards) {
    // Trigger the reward based on its type
    switch (reward.rewardType) {
      case 'birthday':
        console.log(`Triggering birthday reward for Guest ${reward.guestId}:`, reward.rewardConfig);
        break;
      case 'anniversary':
        console.log(`Triggering anniversary reward for Guest ${reward.guestId}:`, reward.rewardConfig);
        break;
      case 'monthly_item':
        console.log(`Triggering monthly item reward for Guest ${reward.guestId}:`, reward.rewardConfig);
        break;
      default:
        console.log(`Unknown reward type for Guest ${reward.guestId}:`, reward.rewardType);
    }
  }
};

// Function to create or update a reward schedule for a guest
exports.createOrUpdateRewardSchedule = async (req, res) => {
  const { guestId, rewardType, description, rewardConfig, recurringType } = req.body;

  try {
    const guest = await Guest.findByPk(guestId);
    if (!guest) return res.status(404).json({ message: 'Guest not found' });

    let scheduleDate;

    switch (rewardType) {
      case 'birthday':
        scheduleDate = guest.birthday;
        break;
      case 'anniversary':
        scheduleDate = guest.signUpDate;
        break;
      default:
        scheduleDate = new Date(); // For monthly or other triggers
    }

    const rewardSchedule = await RewardSchedule.create({
      guestId,
      rewardType,
      description,
      rewardConfig,
      scheduleDate,
      recurringType,
    });

    res.status(201).json(rewardSchedule);
  } catch (error) {
    res.status(500).json({ message: 'Error creating reward schedule', error });
  }
};

================
File: backend/src/controllers/roleController.js
================
const Role = require('../models/Role');
const Permission = require('../models/Permission');
const RoleTemplate = require('../models/RoleTemplate');
const { createAuditLog } = require('../services/auditLogService');
const roleService = require('../services/roleService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.createRole = async (req, res, next) => {
  try {
    const role = await roleService.createRole(req.body);
    res.status(201).json(role);
  } catch (error) {
    logger.error('Error creating role:', error);
    next(new AppError('Failed to create role', 500));
  }
};

exports.assignPermission = async (req, res, next) => {
  try {
    await roleService.assignPermission(req.body.roleId, req.body.permissionId);
    res.status(200).json({ message: 'Permission assigned successfully' });
  } catch (error) {
    logger.error('Error assigning permission:', error);
    next(error);
  }
};

exports.getAllRoles = async (req, res, next) => {
  try {
    const roles = await roleService.getAllRoles();
    res.status(200).json(roles);
  } catch (error) {
    logger.error('Error fetching all roles:', error);
    next(new AppError('Failed to fetch roles', 500));
  }
};

exports.getAllPermissions = async (req, res, next) => {
  try {
    const permissions = await roleService.getAllPermissions();
    res.status(200).json(permissions);
  } catch (error) {
    logger.error('Error fetching all permissions:', error);
    next(new AppError('Failed to fetch permissions', 500));
  }
};

// Update role template assignments
exports.assignRoleTemplate = async (req, res, next) => {
  try {
    await roleService.assignRoleTemplate(req.body.roleId, req.body.roleTemplateId);
    res.status(200).json({ message: 'Role template assigned successfully' });
  } catch (error) {
    logger.error('Error assigning role template:', error);
    next(error);
  }
};

exports.getRoleById = async (req, res, next) => {
  try {
    const role = await roleService.getRoleById(req.params.id);
    if (!role) {
      return next(new AppError('Role not found', 404));
    }
    res.status(200).json(role);
  } catch (error) {
    logger.error(`Error fetching role ${req.params.id}:`, error);
    next(error);
  }
};

exports.updateRole = async (req, res, next) => {
  try {
    const updatedRole = await roleService.updateRole(req.params.id, req.body);
    res.status(200).json(updatedRole);
  } catch (error) {
    logger.error(`Error updating role ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteRole = async (req, res, next) => {
  try {
    await roleService.deleteRole(req.params.id);
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting role ${req.params.id}:`, error);
    next(error);
  }
};

exports.assignRole = async (req, res, next) => {
  try {
    await roleService.assignRole(req.body.userId, req.body.roleId);
    res.status(200).json({ message: 'Role assigned successfully' });
  } catch (error) {
    logger.error('Error assigning role:', error);
    next(error);
  }
};

exports.removeRole = async (req, res, next) => {
  try {
    await roleService.removeRole(req.body.userId, req.body.roleId);
    res.status(200).json({ message: 'Role removed successfully' });
  } catch (error) {
    logger.error('Error removing role:', error);
    next(error);
  }
};

exports.getUserRoles = async (req, res, next) => {
  try {
    const roles = await roleService.getUserRoles(req.params.userId);
    res.status(200).json(roles);
  } catch (error) {
    logger.error(`Error fetching roles for user ${req.params.userId}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/roleTemplateAssignmentsController.js
================
const { RoleTemplateAssignments } = require('../models');

// Get all role template assignments
exports.getAllRoleTemplateAssignments = async (req, res) => {
    try {
        const assignments = await RoleTemplateAssignments.findAll();
        res.json(assignments);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching role template assignments', error: error.message });
    }
};

// Get a specific role template assignment by ID
exports.getRoleTemplateAssignmentById = async (req, res) => {
    try {
        const assignment = await RoleTemplateAssignments.findByPk(req.params.id);
        if (!assignment) {
            return res.status(404).json({ message: 'Role template assignment not found' });
        }
        res.json(assignment);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching role template assignment', error: error.message });
    }
};

// Create a new role template assignment
exports.createRoleTemplateAssignment = async (req, res) => {
    try {
        const newAssignment = await RoleTemplateAssignments.create(req.body);
        res.status(201).json(newAssignment);
    } catch (error) {
        res.status(400).json({ message: 'Error creating role template assignment', error: error.message });
    }
};

// Update an existing role template assignment
exports.updateRoleTemplateAssignment = async (req, res) => {
    try {
        const [updated] = await RoleTemplateAssignments.update(req.body, {
            where: { id: req.params.id }
        });
        if (!updated) {
            return res.status(404).json({ message: 'Role template assignment not found' });
        }
        const updatedAssignment = await RoleTemplateAssignments.findByPk(req.params.id);
        res.json(updatedAssignment);
    } catch (error) {
        res.status(400).json({ message: 'Error updating role template assignment', error: error.message });
    }
};

// Delete a role template assignment
exports.deleteRoleTemplateAssignment = async (req, res) => {
    try {
        const deleted = await RoleTemplateAssignments.destroy({
            where: { id: req.params.id }
        });
        if (!deleted) {
            return res.status(404).json({ message: 'Role template assignment not found' });
        }
        res.status(204).send();
    } catch (error) {
        res.status(500).json({ message: 'Error deleting role template assignment', error: error.message });
    }
};

================
File: backend/src/controllers/roleTemplateController.js
================
const { RoleTemplate, Role } = require('../models');
const { createAuditLog } = require('../services/auditLogService');

// Fetch all role templates
exports.getAllRoleTemplates = async (req, res) => {
  try {
    const roleTemplates = await RoleTemplate.findAll({
      include: [Role], // Include associated roles
    });
    res.status(200).json(roleTemplates);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching role templates', error });
  }
};

// Fetch a single role template by ID
exports.getRoleTemplateById = async (req, res) => {
  try {
    const roleTemplate = await RoleTemplate.findByPk(req.params.id, {
      include: [Role],
    });
    if (!roleTemplate) return res.status(404).json({ message: 'Role template not found' });
    res.status(200).json(roleTemplate);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching role template', error });
  }
};

// Create a new role template
exports.createRoleTemplate = async (req, res) => {
  try {
    const { name, description, roles } = req.body;

    const roleTemplate = await RoleTemplate.create({ name, description });

    if (roles && roles.length) {
      await roleTemplate.setRoles(roles); // Associate roles with the template
    }

    await createAuditLog('Role Template Created', { roleTemplate: name }, req.user.id);
    res.status(201).json(roleTemplate);
  } catch (error) {
    res.status(500).json({ message: 'Error creating role template', error });
  }
};

// Update a role template
exports.updateRoleTemplate = async (req, res) => {
  try {
    const roleTemplate = await RoleTemplate.findByPk(req.params.id);
    if (!roleTemplate) return res.status(404).json({ message: 'Role template not found' });

    const { name, description, roles } = req.body;

    await roleTemplate.update({ name, description });

    if (roles && roles.length) {
      await roleTemplate.setRoles(roles); // Update associated roles
    }

    await createAuditLog('Role Template Updated', { roleTemplate: name }, req.user.id);
    res.json(roleTemplate);
  } catch (error) {
    res.status(500).json({ message: 'Error updating role template', error });
  }
};

// Delete a role template
exports.deleteRoleTemplate = async (req, res) => {
  try {
    const roleTemplate = await RoleTemplate.findByPk(req.params.id);
    if (!roleTemplate) return res.status(404).json({ message: 'Role template not found' });

    await roleTemplate.destroy();
    await createAuditLog('Role Template Deleted', { roleTemplate: roleTemplate.name }, req.user.id);
    res.json({ message: 'Role template deleted successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting role template', error });
  }
};

================
File: backend/src/controllers/serviceFeeController.js
================
const serviceFeeService = require('../services/serviceFeeService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

// Get all service fees
exports.getAllServiceFees = async (req, res, next) => {
  try {
    const serviceFees = await serviceFeeService.getAllServiceFees();
    res.status(200).json(serviceFees);
  } catch (error) {
    logger.error('Error fetching all service fees:', error);
    next(new AppError('Failed to fetch service fees', 500));
  }
};

// Get a single service fee by ID
exports.getServiceFeeById = async (req, res, next) => {
  try {
    const serviceFee = await serviceFeeService.getServiceFeeById(req.params.id);
    if (!serviceFee) {
      return next(new AppError('Service fee not found', 404));
    }
    res.status(200).json(serviceFee);
  } catch (error) {
    logger.error(`Error fetching service fee ${req.params.id}:`, error);
    next(error);
  }
};

// Create a new service fee
exports.createServiceFee = async (req, res, next) => {
  try {
    const newServiceFee = await serviceFeeService.createServiceFee(req.body);
    res.status(201).json(newServiceFee);
  } catch (error) {
    logger.error('Error creating service fee:', error);
    next(new AppError('Failed to create service fee', 500));
  }
};

// Update an existing service fee
exports.updateServiceFee = async (req, res, next) => {
  try {
    const updatedServiceFee = await serviceFeeService.updateServiceFee(req.params.id, req.body);
    if (!updatedServiceFee) {
      return next(new AppError('Service fee not found', 404));
    }
    res.status(200).json(updatedServiceFee);
  } catch (error) {
    logger.error(`Error updating service fee ${req.params.id}:`, error);
    next(error);
  }
};

// Delete a service fee
exports.deleteServiceFee = async (req, res, next) => {
  try {
    const result = await serviceFeeService.deleteServiceFee(req.params.id);
    if (!result) {
      return next(new AppError('Service fee not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting service fee ${req.params.id}:`, error);
    next(error);
  }
};

// Get service fees by client
exports.getServiceFeesByClient = async (req, res, next) => {
  try {
    const serviceFees = await serviceFeeService.getServiceFeesByClient(req.params.clientId);
    res.status(200).json(serviceFees);
  } catch (error) {
    logger.error(`Error fetching service fees for client ${req.params.clientId}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/superAdminController.js
================
const db = require('../models');

// Fetch all clients
exports.getAllClients = async (req, res) => {
  try {
    const clients = await db.Client.findAll();
    res.status(200).json(clients);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching clients', error });
  }
};

// Create a new client
exports.createClient = async (req, res) => {
  try {
    const client = await db.Client.create(req.body);
    res.status(201).json(client);
  } catch (error) {
    res.status(500).json({ message: 'Error creating client', error });
  }
};

// Update a client
exports.updateClient = async (req, res) => {
  try {
    const client = await db.Client.update(req.body, { where: { id: req.params.id } });
    res.status(200).json(client);
  } catch (error) {
    res.status(500).json({ message: 'Error updating client', error });
  }
};

// Delete a client
exports.deleteClient = async (req, res) => {
  try {
    await db.Client.destroy({ where: { id: req.params.id } });
    res.status(204).json();
  } catch (error) {
    res.status(500).json({ message: 'Error deleting client', error });
  }
};

================
File: backend/src/controllers/tabletController.js
================
const { Request, Response } = require ('express');
const orderService = require ('../services/orderService');
const tabletService = require('../services/tabletService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getActiveOrdersController = async (req, res) => {
  try {
    const activeOrders = await orderService.getActiveOrders();
    res.status(200).json(activeOrders);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching active orders' });
  }
};

const cancelOrderController = async (req, res) => {
  try {
    const { orderId } = req.params;
    await orderService.cancelOrder(orderId);
    res.status(200).json({ message: 'Order cancelled successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Error cancelling order' });
  }
};

const markItemOutOfStockController = async (req, res) => {
  try {
    const { itemId } = req.params;
    await orderService.markItemOutOfStock(itemId);
    res.status(200).json({ message: 'Item marked  of stock' });
  } catch (error) {
    res.status(500).json({ message: 'Error marking item  of stock' });
  }
};

exports.getAllTablets = async (req, res, next) => {
  try {
    const tablets = await tabletService.getAllTablets();
    res.status(200).json(tablets);
  } catch (error) {
    logger.error('Error fetching all tablets:', error);
    next(new AppError('Failed to fetch tablets', 500));
  }
};

exports.getTabletById = async (req, res, next) => {
  try {
    const tablet = await tabletService.getTabletById(req.params.id);
    if (!tablet) {
      return next(new AppError('Tablet not found', 404));
    }
    res.status(200).json(tablet);
  } catch (error) {
    logger.error(`Error fetching tablet ${req.params.id}:`, error);
    next(error);
  }
};

exports.createTablet = async (req, res, next) => {
  try {
    const newTablet = await tabletService.createTablet(req.body);
    res.status(201).json(newTablet);
  } catch (error) {
    logger.error('Error creating tablet:', error);
    next(new AppError('Failed to create tablet', 500));
  }
};

exports.updateTablet = async (req, res, next) => {
  try {
    const updatedTablet = await tabletService.updateTablet(req.params.id, req.body);
    if (!updatedTablet) {
      return next(new AppError('Tablet not found', 404));
    }
    res.status(200).json(updatedTablet);
  } catch (error) {
    logger.error(`Error updating tablet ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteTablet = async (req, res, next) => {
  try {
    const result = await tabletService.deleteTablet(req.params.id);
    if (!result) {
      return next(new AppError('Tablet not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting tablet ${req.params.id}:`, error);
    next(error);
  }
};

exports.getTabletsByLocation = async (req, res, next) => {
  try {
    const tablets = await tabletService.getTabletsByLocation(req.params.locationId);
    res.status(200).json(tablets);
  } catch (error) {
    logger.error(`Error fetching tablets for location ${req.params.locationId}:`, error);
    next(error);
  }
};

exports.syncTabletData = async (req, res, next) => {
  try {
    const result = await tabletService.syncTabletData(req.params.id);
    res.status(200).json(result);
  } catch (error) {
    logger.error(`Error syncing data for tablet ${req.params.id}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/taxController.js
================
const TaxService = require('../services/taxService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.getAllTaxRates = async (req, res, next) => {
  try {
    const taxRates = await TaxService.getAllTaxRates();
    res.status(200).json(taxRates);
  } catch (error) {
    logger.error('Error fetching all tax rates:', error);
    next(new AppError('Failed to fetch tax rates', 500));
  }
};

exports.getTaxRateById = async (req, res, next) => {
  try {
    const taxRate = await TaxService.getTaxRateById(req.params.id);
    if (!taxRate) {
      return next(new AppError('Tax rate not found', 404));
    }
    res.status(200).json(taxRate);
  } catch (error) {
    logger.error(`Error fetching tax rate ${req.params.id}:`, error);
    next(error);
  }
};

exports.createTaxRate = async (req, res, next) => {
  try {
    const newTaxRate = await TaxService.createTaxRate(req.body);
    res.status(201).json(newTaxRate);
  } catch (error) {
    logger.error('Error creating tax rate:', error);
    next(new AppError('Failed to create tax rate', 500));
  }
};

exports.updateTaxRate = async (req, res, next) => {
  try {
    const updatedTaxRate = await TaxService.updateTaxRate(req.params.id, req.body);
    if (!updatedTaxRate) {
      return next(new AppError('Tax rate not found', 404));
    }
    res.status(200).json(updatedTaxRate);
  } catch (error) {
    logger.error(`Error updating tax rate ${req.params.id}:`, error);
    next(error);
  }
};

exports.deleteTaxRate = async (req, res, next) => {
  try {
    const result = await TaxService.deleteTaxRate(req.params.id);
    if (!result) {
      return next(new AppError('Tax rate not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting tax rate ${req.params.id}:`, error);
    next(error);
  }
};

exports.getTaxRatesByLocation = async (req, res, next) => {
  try {
    const taxRates = await TaxService.getTaxRatesByLocation(req.params.locationId);
    res.status(200).json(taxRates);
  } catch (error) {
    logger.error(`Error fetching tax rates for location ${req.params.locationId}:`, error);
    next(error);
  }
};

exports.calculateTax = async (req, res, next) => {
  try {
    const { locationId, items } = req.body;
    const taxAmount = await TaxService.calculateTax(locationId, items);
    res.status(200).json({ taxAmount });
  } catch (error) {
    logger.error('Error calculating tax:', error);
    next(error);
  }
};

exports.getTaxSettings = async (req, res, next) => {
  try {
    const { locationId, provider } = req.params;
    const taxSettings = await TaxService.getApplicableTax(locationId, provider);
    res.status(200).json(taxSettings);
  } catch (error) {
    logger.error('Error fetching tax settings:', error);
    next(new AppError('Failed to fetch tax settings', 500));
  }
};

exports.updateTaxSettings = async (req, res, next) => {
  try {
    const { locationId, provider, taxRate, taxIdNumber } = req.body;
    const updatedSettings = await TaxService.updateTaxSettings(locationId, provider, taxRate, taxIdNumber);
    res.status(200).json(updatedSettings);
  } catch (error) {
    logger.error('Error updating tax settings:', error);
    next(new AppError('Failed to update tax settings', 500));
  }
};

================
File: backend/src/controllers/tipController.js
================
const { Tip } = require('../models');

exports.createTip = async (req, res) => {
  try {
    const { clientId, locationId, tipAmount, tipType, displayAmount } = req.body;
    const tip = await Tip.create({ clientId, locationId, tipAmount, tipType, displayAmount });
    res.status(201).json(tip);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.getTips = async (req, res) => {
  try {
    const tips = await Tip.findAll();
    res.status(200).json(tips);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

================
File: backend/src/controllers/trackingPixelController.js
================
const trackingPixelService = require('../services/trackingPixelService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.createPixel = async (req, res, next) => {
  try {
    const newPixel = await trackingPixelService.createPixel(req.body);
    res.status(201).json(newPixel);
  } catch (error) {
    logger.error('Error creating tracking pixel:', error);
    next(new AppError('Failed to create tracking pixel', 500));
  }
};

exports.getAllPixels = async (req, res, next) => {
  try {
    const pixels = await trackingPixelService.getAllPixels();
    res.status(200).json(pixels);
  } catch (error) {
    logger.error('Error fetching all tracking pixels:', error);
    next(new AppError('Failed to fetch tracking pixels', 500));
  }
};

exports.getPixelById = async (req, res, next) => {
  try {
    const pixel = await trackingPixelService.getPixelById(req.params.id);
    if (!pixel) {
      return next(new AppError('Tracking pixel not found', 404));
    }
    res.status(200).json(pixel);
  } catch (error) {
    logger.error(`Error fetching tracking pixel ${req.params.id}:`, error);
    next(error);
  }
};

exports.updatePixel = async (req, res, next) => {
  try {
    const updatedPixel = await trackingPixelService.updatePixel(req.params.id, req.body);
    if (!updatedPixel) {
      return next(new AppError('Tracking pixel not found', 404));
    }
    res.status(200).json(updatedPixel);
  } catch (error) {
    logger.error(`Error updating tracking pixel ${req.params.id}:`, error);
    next(error);
  }
};

exports.deletePixel = async (req, res, next) => {
  try {
    const result = await trackingPixelService.deletePixel(req.params.id);
    if (!result) {
      return next(new AppError('Tracking pixel not found', 404));
    }
    res.status(204).send();
  } catch (error) {
    logger.error(`Error deleting tracking pixel ${req.params.id}:`, error);
    next(error);
  }
};

exports.triggerPixel = async (req, res, next) => {
  try {
    const result = await trackingPixelService.triggerPixel(req.params.id);
    res.status(200).json(result);
  } catch (error) {
    logger.error(`Error triggering tracking pixel ${req.params.id}:`, error);
    next(error);
  }
};

================
File: backend/src/controllers/translatorController.js
================
const PosProfile = require('../models/PosProfile');
const translatorService = require('../services/translatorService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

// Sync order with the POS system
exports.syncOrder = async (req, res) => {
  const { locationId, orderData } = req.body;

  try {
    const posProfile = await PosProfile.findOne({ where: { locationId } });

    if (!posProfile) {
      return res.status(404).json({ message: 'POS profile not found for this location.' });
    }

    // Customize payload based on POS profile settings
    const payload = generatePayload(posProfile, orderData);

    // Send the payload to the third-party POS system (e.g., via API call)
    const response = await sendToThirdParty(posProfile.posName, payload);

    res.json({ message: 'Order synced successfully.', response });
  } catch (error) {
    logger.error('Error syncing order with POS:', error);
    res.status(500).json({ message: 'Error syncing order with POS', error: error.message });
  }
};

// Helper function to generate custom payload
function generatePayload(posProfile, orderData) {
  switch (posProfile.posName) {
    case 'Stripe':
      return { /* Stripe-specific payload structure with orderData */ orderData };
    case 'WorldPay':
      return { /* WorldPay-specific payload structure with orderData */ orderData };
    default:
      return { /* Default payload structure with orderData */ orderData };
  }
}

// Placeholder function for sending data to third-party systems
async function sendToThirdParty(posName, payload) {
  // Implement API call logic here
  return { success: true, posName, payload };
}

// New methods for translation functionality
exports.translateText = async (req, res, next) => {
  try {
    const { text, targetLanguage, sourceLanguage } = req.body;
    const translatedText = await translatorService.translateText(text, targetLanguage, sourceLanguage);
    res.status(200).json({ translatedText });
  } catch (error) {
    logger.error('Error translating text:', error);
    next(new AppError('Failed to translate text', 500));
  }
};

exports.getSupportedLanguages = async (req, res, next) => {
  try {
    const languages = await translatorService.getSupportedLanguages();
    res.status(200).json(languages);
  } catch (error) {
    logger.error('Error fetching supported languages:', error);
    next(new AppError('Failed to fetch supported languages', 500));
  }
};

exports.detectLanguage = async (req, res, next) => {
  try {
    const { text } = req.body;
    const detectedLanguage = await translatorService.detectLanguage(text);
    res.status(200).json({ detectedLanguage });
  } catch (error) {
    logger.error('Error detecting language:', error);
    next(new AppError('Failed to detect language', 500));
  }
};

exports.translateMenu = async (req, res, next) => {
  try {
    const { menuId, targetLanguage } = req.body;
    const translatedMenu = await translatorService.translateMenu(menuId, targetLanguage);
    res.status(200).json(translatedMenu);
  } catch (error) {
    logger.error('Error translating menu:', error);
    next(new AppError('Failed to translate menu', 500));
  }
};

exports.getTranslationHistory = async (req, res, next) => {
  try {
    const history = await translatorService.getTranslationHistory(req.query);
    res.status(200).json(history);
  } catch (error) {
    logger.error('Error fetching translation history:', error);
    next(new AppError('Failed to fetch translation history', 500));
  }
};

================
File: backend/src/controllers/twoFactorController.js
================
const twoFactorService = require('../services/twoFactorService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.enable2FA = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const result = await twoFactorService.enable2FA(userId);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error enabling 2FA:', error);
    next(new AppError('Failed to enable 2FA', 500));
  }
};

exports.disable2FA = async (req, res, next) => {
  try {
    const { userId } = req.user;
    await twoFactorService.disable2FA(userId);
    res.status(200).json({ message: '2FA disabled successfully' });
  } catch (error) {
    logger.error('Error disabling 2FA:', error);
    next(new AppError('Failed to disable 2FA', 500));
  }
};

exports.verify2FA = async (req, res, next) => {
  try {
    const { userId, token } = req.body;
    const isValid = await twoFactorService.verify2FA(userId, token);
    res.status(200).json({ isValid });
  } catch (error) {
    logger.error('Error verifying 2FA token:', error);
    next(new AppError('Failed to verify 2FA token', 500));
  }
};

exports.generateBackupCodes = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const backupCodes = await twoFactorService.generateBackupCodes(userId);
    res.status(200).json({ backupCodes });
  } catch (error) {
    logger.error('Error generating backup codes:', error);
    next(new AppError('Failed to generate backup codes', 500));
  }
};

exports.verifyBackupCode = async (req, res, next) => {
  try {
    const { userId, backupCode } = req.body;
    const isValid = await twoFactorService.verifyBackupCode(userId, backupCode);
    res.status(200).json({ isValid });
  } catch (error) {
    logger.error('Error verifying backup code:', error);
    next(new AppError('Failed to verify backup code', 500));
  }
};

exports.get2FAStatus = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const status = await twoFactorService.get2FAStatus(userId);
    res.status(200).json(status);
  } catch (error) {
    logger.error('Error fetching 2FA status:', error);
    next(new AppError('Failed to fetch 2FA status', 500));
  }
};

================
File: backend/src/controllers/userController.js
================
const userService = require('../services/userService');

const getAllUsers = async (req, res, next) => {
  try {
    const users = await userService.getAllUsers();
    res.json(users);
  } catch (error) {
    next(error);
  }
};

const getUserById = async (req, res, next) => {
  try {
    const user = await userService.getUserById(req.params.id);
    res.json(user);
  } catch (error) {
    next(error);
  }
};

const createUser = async (req, res, next) => {
  try {
    const newUser = await userService.createUser(req.body);
    res.status(201).json(newUser);
  } catch (error) {
    next(error);
  }
};

const updateUser = async (req, res, next) => {
  try {
    const updatedUser = await userService.updateUser(req.params.id, req.body);
    res.json(updatedUser);
  } catch (error) {
    next(error);
  }
};

const deleteUser = async (req, res, next) => {
  try {
    await userService.deleteUser(req.params.id);
    res.status(204).send();
  } catch (error) {
    next(error);
  }
};

module.exports = {
  getAllUsers,
  getUserById,
  createUser,
  updateUser,
  deleteUser
};

================
File: backend/src/controllers/walletController.js
================
const walletService = require('../services/walletService');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

exports.getWalletBalance = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const balance = await walletService.getWalletBalance(userId);
    res.status(200).json({ balance });
  } catch (error) {
    logger.error('Error fetching wallet balance:', error);
    next(new AppError('Failed to fetch wallet balance', 500));
  }
};

exports.addFunds = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const { amount } = req.body;
    const updatedBalance = await walletService.addFunds(userId, amount);
    res.status(200).json({ message: 'Funds added successfully', balance: updatedBalance });
  } catch (error) {
    logger.error('Error adding funds to wallet:', error);
    next(new AppError('Failed to add funds to wallet', 500));
  }
};

exports.withdrawFunds = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const { amount } = req.body;
    const updatedBalance = await walletService.withdrawFunds(userId, amount);
    res.status(200).json({ message: 'Funds withdrawn successfully', balance: updatedBalance });
  } catch (error) {
    logger.error('Error withdrawing funds from wallet:', error);
    next(new AppError('Failed to withdraw funds from wallet', 500));
  }
};

exports.getTransactionHistory = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const transactions = await walletService.getTransactionHistory(userId);
    res.status(200).json(transactions);
  } catch (error) {
    logger.error('Error fetching transaction history:', error);
    next(new AppError('Failed to fetch transaction history', 500));
  }
};

exports.transferFunds = async (req, res, next) => {
  try {
    const { userId } = req.user;
    const { recipientId, amount } = req.body;
    const result = await walletService.transferFunds(userId, recipientId, amount);
    res.status(200).json(result);
  } catch (error) {
    logger.error('Error transferring funds:', error);
    next(new AppError('Failed to transfer funds', 500));
  }
};

exports.getWalletDetails = async (req, res, next) => {
  try {
    const { userId } = req.params;
    const walletDetails = await walletService.getWalletDetails(userId);
    res.status(200).json(walletDetails);
  } catch (error) {
    logger.error('Error fetching wallet details:', error);
    next(new AppError('Failed to fetch wallet details', 500));
  }
};

================
File: backend/src/cron/subscriptionCron.js
================
const cron = require 'node-cron';
const { processSubscriptions } = require '../services/subscriptionService';
const logger = require '../utils/logger';

const startSubscriptionCron = () => {
  // Run every day at midnight
  cron.schedule('0 0 * * *', async () => {
    try {
      logger.info('Starting subscription processing');
      await processSubscriptions();
      logger.info('Subscription processing completed');
    } catch (error) {
      logger.error('Error processing subscriptions:', error);
    }
  });
};

================
File: backend/src/middleware/auditLogger.js
================
const { Request, Response, NextFunction } = require 'express';
const AuditLog = require '../models/AuditLog';
const { AuthRequest } = require './auth';

const auditLogger = (action) => {
  return async (req, res, next) => {
    try {
      await AuditLog.create({
        userId.user?.id,
        action,
        details.stringify(req.body),
        ipAddress.ip,
        userAgent.get('User-Agent') || '',
      });
      next();
    } catch (error) {
      console.error('Error logging audit:', error);
      next();
    }
  };
};

================
File: backend/src/middleware/auth.js
================
const jwt = require('jsonwebtoken');
const { AppError } = require('../utils/errorHandler');
const { User, Role } = require('../models');

const authenticate = async (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');

  if (!token) {
    return next(new AppError('Authentication required', 401));
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findByPk(decoded.userId, { include: Role });

    if (!user) {
      return next(new AppError('User not found', 401));
    }

    req.user = user;
    next();
  } catch (error) {
    next(new AppError('Invalid token', 401));
  }
};

const authorizeGlobalAdmin = (req, res, next) => {
  if (req.user.Role.name !== 'GLOBAL_ADMIN') {
    return next(new AppError('Access denied. Global Admin rights required.', 403));
  }
  next();
};

module.exports = { authenticate, authorizeGlobalAdmin };

================
File: backend/src/middleware/authorize.js
================
const authorize = (roles = []) => {
  return (req, res, next) => {
    if (typeof roles === 'string') {
      roles = [roles];
    }

    if (roles.length && !roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Forbidden' });
    }

    next();
  };
};

module.exports = authorize;

================
File: backend/src/middleware/brandingValidationMiddleware.js
================
const multer = require('multer');

const storage = multer.memoryStorage();
const fileFilter = (req, file, cb) => {
  // Accept only image files with specific formats
  if (!file.mimetype.match(/^image\/(jpeg|png|gif)$/)) {
    return cb(new Error('Only image files are allowed (jpeg, png, gif)'), false);
  }
  cb(null, true);
};

const upload = multer({
  storage,
  fileFilter,
  limits: { fileSize: 500 * 1024 }, // Limit file size to 500KB
});

exports.uploadLogo = upload.single('logo');

================
File: backend/src/middleware/cache.js
================
const redis = require('redis');
const { promisify } = require('util');

const client = redis.createClient(process.env.REDIS_URL);
const getAsync = promisify(client.get).bind(client);
const setAsync = promisify(client.set).bind(client);

const cache = (duration) => async (req, res, next) => {
  const key = `__express__${req.originalUrl || req.url}`;
  const cachedResponse = await getAsync(key);
  if (cachedResponse) {
    res.send(JSON.parse(cachedResponse));
    return;
  }
  res.sendResponse = res.send;
  res.send = (body) => {
    setAsync(key, JSON.stringify(body), 'EX', duration);
    res.sendResponse(body);
  };
  next();
};

module.exports = cache;

// Use in routes:
// backend/src/routes/dashboardRoutes.js
const cache = require('../middleware/cache');
router.get('/data/:clientId', authenticate, cache(300), dashboardController.getDashboardData);

================
File: backend/src/middleware/errorHandler.js
================
const errorHandler = (err, req, res, next) => {
  console.error(err.stack);

  const statusCode = err.statusCode || 500;
  const message = err.message || 'Internal Server Error';

  res.status(statusCode).json({
    success: false,
    error: message,
  });
};

module.exports = errorHandler;

================
File: backend/src/middleware/logger.js
================
const winston = require('winston');
const { createLogger, format, transports } = winston;

// Define custom format for logs
const customFormat = format.combine(
  format.timestamp(),
  format.printf(({ timestamp, level, message }) => {
    return `${timestamp} [${level}]: ${message}`;
  })
);

// Create a logger instance
const logger = createLogger({
  level: 'info',
  format: customFormat,
  transports: [
    new transports.Console(),
    new transports.File({ filename: 'logs/application.log' }), // Ensure correct log file path
  ],
});

module.exports = logger;

================
File: backend/src/middleware/permissionsMiddleware.js
================
const Permission = require('../models/Permission');
const User = require('../models/User');
const logger = require('../services/logger');

exports.checkPermission = (requiredPermission) => {
  return async (req, res, next) => {
    try {
      const userPermissions = req.user.permissions;

      const permissionDetails = await Permission.findOne({ where: { name: requiredPermission } });

      if (!permissionDetails) {
        logger.error(`Required permission ${requiredPermission} not found in the database`);
        return res.status(500).json({ message: 'Permission check failed: Invalid permission' });
      }

      if (!userPermissions.includes(permissionDetails.id)) {
        logger.warn(`User ${req.user.id} denied access: missing permission ${requiredPermission}`);
        return res.status(403).json({ message: 'You do not have the required permission.' });
      }

      logger.info(`User ${req.user.id} granted access: has permission ${requiredPermission}`);
      next();
    } catch (error) {
      logger.error(`Permission check failed: ${error.message}`);
      res.status(500).json({ message: 'Permission check failed', error: error.message });
    }
  };
};

exports.hasPermission = async (userId, requiredPermission) => {
  try {
    const user = await User.findByPk(userId, { include: ['permissions'] });
    if (!user) {
      logger.error(`User with ID ${userId} not found`);
      return false;
    }

    const permissionDetails = await Permission.findOne({ where: { name: requiredPermission } });

    if (!permissionDetails) {
      logger.error(`Required permission ${requiredPermission} not found in the database`);
      return false;
    }

    return user.permissions.some(p => p.id === permissionDetails.id);
  } catch (error) {
    logger.error(`Error checking permission for user ${userId}: ${error.message}`);
    return false;
  }
};

module.exports = exports;

================
File: backend/src/middleware/pixelMiddleware.js
================
const db = require('../models');

async function applyTrackingPixels(req, res, next) {
  try {
    const { locationId } = req.client; // Assuming locationId is set by subdomainMiddleware
    const globalPixels = await db.TrackingPixel.findAll({ where: { isGlobal: true } });
    const locationPixels = await db.TrackingPixel.findAll({ where: { locationId } });

    req.trackingPixels = [...globalPixels, ...locationPixels];
    next();
  } catch (error) {
    res.status(500).json({ message: 'Error loading tracking pixels', error });
  }
}

module.exports = applyTrackingPixels;

================
File: backend/src/middleware/posProfileMiddleware.js
================
const PosProfile = require('../models/PosProfile');

// Middleware to load POS profile based on location ID or selected profile
const loadPosProfile = async (req, res, next) => {
  try {
    const { locationId } = req.body;

    if (!locationId) {
      return res.status(400).json({ message: 'Location ID is required.' });
    }

    const posProfile = await PosProfile.findOne({ where: { locationId } });

    if (!posProfile) {
      return res.status(404).json({ message: 'POS Profile not found for the given location.' });
    }

    req.posProfile = posProfile;
    next();
  } catch (error) {
    res.status(500).json({ message: 'Error loading POS Profile', error });
  }
};

module.exports = loadPosProfile;

================
File: backend/src/middleware/rateLimiter.js
================
const rateLimit = require 'express-rate-limit';
const RedisStore = require 'rate-limit-redis';
const redisClient = require '../config/redis';

const apiLimiter = rateLimit({
  store RedisStore({
    client,
    prefix: 'rate_limit:',
  }),
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per windowMs
});

const authLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 5 // limit each IP to 5 login requests per hour
});

================
File: backend/src/middleware/sanitizeMiddleware.js
================
const { body } = require('express-validator');

module.exports = [
  // Escape HTML entities and trim whitespace
  body('*').escape().trim(),

  // Custom sanitization for email fields
  body('email').normalizeEmail(),

  // Custom sanitization for phone number fields
  body('phone').trim().escape().customSanitizer(value => value.replace(/[^0-9]/g, '')),

  // Additional custom sanitization based on specific model requirements
  body('address').optional().trim().escape(),

  // Use a different approach for sanitizing fields like price
  body('price').toFloat(),
];

================
File: backend/src/middleware/security.js
================
const helmet = require 'helmet';
const cors = require 'cors';
const { Express } = require 'express';

const setupSecurity = (app) => {
  // Set security HTTP headers
  app.use(helmet());

  // Enable CORS
  app.use(cors());

  // Prevent XSS attacks
  app.use(helmet.xssFilter());

  // Prevent clickjacking
  app.use(helmet.frameguard({ action: 'deny' }));

  // Hide X-Powered-By header
  app.use(helmet.hidePoweredBy());

  // Prevent MIME type sniffing
  app.use(helmet.noSniff());

  // Set strict transport security
  app.use(helmet.hsts({
    maxAge: 31536000,
    includeSubDomains,
    preload
  }));
};

================
File: backend/src/middleware/subdomainMiddleware.js
================
const { Client } = require('../models');
const NodeCache = require('node-cache');
const logger = require('../services/logger');

// Cache setup (TTL: 10 minutes)
const clientCache = new NodeCache({ stdTTL: 600, checkperiod: 120 });

const subdomainMiddleware = async (req, res, next) => {
  const subdomain = req.headers.host.split('.')[0]; // Get the subdomain part

  // Ignore predefined subdomains
  if (['www', 'api', 'yourplatform', 'localhost'].includes(subdomain)) { 
    return next(); 
  }

  try {
    // Check cache first
    let client = clientCache.get(subdomain);
    if (!client) {
      client = await Client.findOne({ where: { subdomain } });
      if (!client) {
        logger.warn(`Client not found for subdomain: ${subdomain}`);
        return res.status(404).json({ message: 'Client not found' });
      }
      // Store in cache
      clientCache.set(subdomain, client);
    }

    req.client = client; // Attach the client data to the request
    next();
  } catch (error) {
    logger.error(`Error retrieving client information for subdomain: ${subdomain}`, { error });
    return res.status(500).json({ message: 'Error retrieving client information', error });
  }
};

module.exports = subdomainMiddleware;

================
File: backend/src/middleware/subdomainRouter.js
================
const { Client } = require('../models');
const cache = require('../utils/cache');

const subdomainRouter = async (req, res, next) => {
  const host = req.get('host');
  const subdomain = host.split('.')[0];

  // Handle predefined subdomains like 'www', 'api', and 'localhost'
  if (['www', 'api', 'localhost'].includes(subdomain)) { 
    return next(); 
  }

  try {
    let client = await cache.get(`client:${subdomain}`);
    if (!client) {
      client = await Client.findOne({ where: { subdomain } });
      if (client) {
        await cache.set(`client:${subdomain}`, client, 3600); // Cache for 1 hour
      }
    }

    if (!client) {
      return res.status(404).json({ error: 'Client not found' });
    }

    req.client = client;
    next();
  } catch (error) {
    console.error('Subdomain routing error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

module.exports = subdomainRouter;

================
File: backend/src/middleware/validate.js
================
const { Request, Response, NextFunction } = require 'express';
const Joi = require 'joi';

const validate = (schema.ObjectSchema) => {
  return (req, res, next) => {
    const { error } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({ message.details[0].message });
    }
    next();
  };
};

================
File: backend/src/migrations/01_create_all_tables.js
================
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240818161348-add-location-menu-override.js
================
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240818161349-add-location-tax-config.js
================
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240818161350-add-loyalty-challenge.js
================
module.exports = {
  up: async () => {
    // ... existing code ...
  },
  down: async () => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240818161351-add-loyalty-config.js
================
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240818161352-add-loyalty-integration.js
================
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240821000100-add-cooldown-fields.js
================
'use strict';

module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240821000100-seed-sample-loyalty-and-discounts.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.bulkInsert('Discounts', [
      {
        name: '10% Off Next Purchase',
        type: 'percentage',
        value: 10.0,
        cooldownPeriod: 168, // 1 week in hours
        maxUses

================
File: backend/src/migrations/20240828024349-update-role-and-template-associations.js
================
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/20240829024230-create-campaign.js
================
'use strict';
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  up: async (queryInterface) => {
    // ... existing code ...
  },
  down: async (queryInterface) => {
    // ... existing code ...
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-add-default-prep-time-to-locations.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('Locations', 'defaultPrepTime', {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 15,
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('Locations', 'defaultPrepTime');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-add-doordash-marketplace-fields.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('OrderProviders', 'doordashStoreId', {
      type: Sequelize.STRING,
      allowNull: true,
    });
    await queryInterface.addColumn('OrderProviders', 'doordashMerchantId', {
      type: Sequelize.STRING,
      allowNull: true,
    });
    await queryInterface.addColumn('OrderProviders', 'doordashApiKey', {
      type: Sequelize.STRING,
      allowNull: true,
    });
    await queryInterface.addColumn('OrderProviders', 'isDoordashMenuSyncEnabled', {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    });
    await queryInterface.addColumn('OrderProviders', 'isDoordashAutoAcceptEnabled', {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('OrderProviders', 'doordashStoreId');
    await queryInterface.removeColumn('OrderProviders', 'doordashMerchantId');
    await queryInterface.removeColumn('OrderProviders', 'doordashApiKey');
    await queryInterface.removeColumn('OrderProviders', 'isDoordashMenuSyncEnabled');
    await queryInterface.removeColumn('OrderProviders', 'isDoordashAutoAcceptEnabled');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-add-inventory-settings-to-locations.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('Locations', 'outOfStockBehavior', {
      type: Sequelize.ENUM('grey', 'hide'),
      allowNull: false,
      defaultValue: 'grey',
    });
    await queryInterface.addColumn('Locations', 'inventoryResetTime', {
      type: Sequelize.STRING,
      allowNull: true,
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('Locations', 'outOfStockBehavior');
    await queryInterface.removeColumn('Locations', 'inventoryResetTime');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-add-prep-time-and-inventory-offset-to-menu-items.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('MenuItems', 'prepTime', {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 0,
    });
    await queryInterface.addColumn('MenuItems', 'onlineInventoryOffset', {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 0,
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('MenuItems', 'prepTime');
    await queryInterface.removeColumn('MenuItems', 'onlineInventoryOffset');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-add-scheduled-order-fields.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('OrderProviders', 'handleScheduledOrders', {
      type: Sequelize.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    });
    await queryInterface.addColumn('OrderProviders', 'scheduledOrderLeadTime', {
      type: Sequelize.INTEGER,
      allowNull: false,
      defaultValue: 30,
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('OrderProviders', 'handleScheduledOrders');
    await queryInterface.removeColumn('OrderProviders', 'scheduledOrderLeadTime');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-client-branding.js
================
const { QueryInterface, DataTypes } = require 'sequelize';

module.exports = {
  up (queryInterface) => {
    await queryInterface.createTable('ClientBrandings', {
      id: {
        allowNull,
        autoIncrement,
        primaryKey,
        type.INTEGER
      },
      clientId: {
        type.INTEGER,
        allowNull,
        references: {
          model: 'Clients',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      logo: {
        type.STRING,
        allowNull
      },
      favicon: {
        type.STRING,
        allowNull
      },
      primaryColor: {
        type.STRING,
        allowNull
      },
      secondaryColor: {
        type.STRING,
        allowNull
      },
      accentColor: {
        type.STRING,
        allowNull
      },
      fontFamily: {
        type.STRING,
        allowNull
      },
      buttonStyle: {
        type.ENUM('rounded', 'square'),
        allowNull
      },
      headerStyle: {
        type.ENUM('centered', 'left-aligned'),
        allowNull
      },
      footerContent: {
        type.TEXT,
        allowNull
      },
      createdAt: {
        allowNull,
        type.DATE
      },
      updatedAt: {
        allowNull,
        type.DATE
      }
    });
  },

  down (queryInterface) => {
    await queryInterface.dropTable('ClientBrandings');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-client-features.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('ClientFeatures', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      clientId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Clients',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      loyalty: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      onlineOrdering: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      tableReservations: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('ClientFeatures');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-location-profile.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('LocationProfiles', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      clientId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Clients',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      name: {
        type: Sequelize.STRING,
        allowNull: false
      },
      settings: {
        type: Sequelize.JSON,
        allowNull: false
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('LocationProfiles');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-location.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Locations', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      clientId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Clients',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      name: {
        type: Sequelize.STRING,
        allowNull: false
      },
      address: {
        type: Sequelize.STRING,
        allowNull: false
      },
      posIntegrationId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'POSIntegrations',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'RESTRICT'
      },
      customSettings: {
        type: Sequelize.JSON,
        allowNull: false,
        defaultValue: {
          hasDelivery: false,
          hasDineIn: false,
          hasPickup: false
        }
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Locations');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-order-provider.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('OrderProviders', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      locationId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Locations',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      name: {
        type: Sequelize.STRING,
        allowNull: false
      },
      type: {
        type: Sequelize.ENUM('doordash', 'ubereats', 'grubhub', 'other'),
        allowNull: false
      },
      apiKey: {
        type: Sequelize.STRING,
        allowNull: false
      },
      apiSecret: {
        type: Sequelize.STRING,
        allowNull: false
      },
      isActive: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: true
      },
      upliftPercentage: {
        type: Sequelize.FLOAT,
        allowNull: false,
        defaultValue: 0
      },
      customUpliftRules: {
        type: Sequelize.JSON,
        allowNull: true
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('OrderProviders');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-review.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('Reviews', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      menuItemId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'MenuItems',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      firstName: {
        type: Sequelize.STRING,
        allowNull: false
      },
      lastInitial: {
        type: Sequelize.STRING(1),
        allowNull: false
      },
      rating: {
        type: Sequelize.INTEGER,
        allowNull: false
      },
      comment: {
        type: Sequelize.TEXT,
        allowNull: true
      },
      isApproved: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      orderAgainPercentage: {
        type: Sequelize.INTEGER,
        allowNull: true
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('Reviews');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-scheduled-order.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.createTable('ScheduledOrders', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      orderId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Orders',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      scheduledTime: {
        type: Sequelize.DATE,
        allowNull: false
      },
      sentToPOS: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.dropTable('ScheduledOrders');
  }
};

================
File: backend/src/migrations/YYYYMMDDHHMMSS-create-user.js
================


================
File: backend/src/migrations/YYYYMMDDHHMMSS-update-pos-settings.js
================
const { QueryInterface, DataTypes } = require 'sequelize';

module.exports = {
  up (queryInterface) => {
    await queryInterface.addColumn('POSSettings', 'clientId', {
      type.INTEGER,
      allowNull,
      references: {
        model: 'Clients',
        key: 'id'
      },
      onUpdate: 'CASCADE',
      onDelete: 'CASCADE'
    });
  },

  down (queryInterface) => {
    await queryInterface.removeColumn('POSSettings', 'clientId');
  }
};

================
File: backend/src/models/ABTest.js
================
const { Model, DataTypes } = require('sequelize');

class ABTest extends Model {
  static init(sequelize) {
    super.init({
      name: {
        type: DataTypes.STRING,
        allowNull: false
      },
      description: DataTypes.TEXT,
      startDate: DataTypes.DATE,
      endDate: DataTypes.DATE,
      status: {
        type: DataTypes.ENUM('DRAFT', 'RUNNING', 'COMPLETED', 'CANCELLED'),
        defaultValue: 'DRAFT'
      }
    }, {
      sequelize,
      modelName: 'ABTest',
      tableName: 'ab_tests',
      timestamps: true
    });
  }

  static associate(models) {
    this.hasMany(models.ABTestVariant, { foreignKey: 'abTestId', as: 'variants' });
    this.hasMany(models.ABTestMetric, { foreignKey: 'abTestId', as: 'metrics' });
  }
}

module.exports = ABTest;

================
File: backend/src/models/ABTestMetric.js
================
const { Model, DataTypes } = require('sequelize');

class ABTestMetric extends Model {
  static init(sequelize) {
    super.init({
      abTestId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: 'ABTests',
          key: 'id'
        }
      },
      variantId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: 'ABTestVariants',
          key: 'id'
        }
      },
      metricName: {
        type: DataTypes.STRING,
        allowNull: false
      },
      metricValue: {
        type: DataTypes.FLOAT,
        allowNull: false
      },
      timestamp: {
        type: DataTypes.DATE,
        allowNull: false,
        defaultValue: DataTypes.NOW
      }
    }, {
      sequelize,
      modelName: 'ABTestMetric',
      tableName: 'ab_test_metrics',
      timestamps: true
    });
  }

  static associate(models) {
    if (models.ABTest) {
      this.belongsTo(models.ABTest, { foreignKey: 'abTestId', as: 'abTest' });
    }
    if (models.ABTestVariant) {
      this.belongsTo(models.ABTestVariant, { foreignKey: 'variantId', as: 'variant' });
    }
  }
}

module.exports = ABTestMetric;

================
File: backend/src/models/ABTestResult.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ABTestResult extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ABTestResult.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  ABTestResult.init(ABTestResult.attributes, {
    sequelize,
    modelName: 'ABTestResult',
    tableName: 'abtestresults', // Adjust this if needed
  });
  return ABTestResult
};

================
File: backend/src/models/ABTestVariant.js
================
const { Model, DataTypes } = require('sequelize');

class ABTestVariant extends Model {
  static init(sequelize) {
    super.init({
      abTestId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: 'ABTests',
          key: 'id'
        }
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false
      },
      description: DataTypes.TEXT,
      trafficAllocation: {
        type: DataTypes.FLOAT,
        allowNull: false,
        defaultValue: 0
      }
    }, {
      sequelize,
      modelName: 'ABTestVariant',
      tableName: 'ab_test_variants',
      timestamps: true
    });
  }

  static associate(models) {
    this.belongsTo(models.ABTest, { foreignKey: 'abTestId', as: 'abTest' });
    this.hasMany(models.ABTestMetric, { foreignKey: 'variantId', as: 'metrics' });
  }
}

module.exports = ABTestVariant;

================
File: backend/src/models/Analytics.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Analytics extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Analytics.attributes = attributes = {
  date: {
    type: DataTypes.DATE,
    allowNull: false
  },
  metric: {
    type: DataTypes.STRING,
    allowNull: false
  },
  value: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  // Add other attributes as needed
};

module.exports = (sequelize) => {
  Analytics.init(Analytics.attributes, {
    sequelize,
    modelName: 'Analytics',
    tableName: 'analyticss', // Adjust this if needed
  });
  return Analytics
};

================
File: backend/src/models/Asset.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Asset extends BaseModel {
  static associate(models) {
    this.belongsTo(models.Client, { foreignKey: 'clientId' });
  }
}

Asset.attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  type: {
    type: DataTypes.STRING,
    allowNull: false
  },
  url: {
    type: DataTypes.STRING,
    allowNull: false
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  size: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  mimeType: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Asset.init(Asset.attributes, {
    sequelize,
    modelName: 'Asset',
    tableName: 'assets', // Adjust this if needed
  });
  return Asset
};

================
File: backend/src/models/AuditLog.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class AuditLog extends BaseModel {
  static associate(models) {
    // define associations here if needed
  }
}

AuditLog.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: true,
  },
  action: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  details: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  ipAddress: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  userAgent: {
    type: DataTypes.STRING,
    allowNull: true,
  },
};

module.exports = (sequelize) => {
  AuditLog.init(AuditLog.attributes, {
    sequelize,
    modelName: 'AuditLog',
    tableName: 'auditlogs', // Adjust this if needed
  });
  return AuditLog
};

================
File: backend/src/models/BaseModel.js
================
const { Model, DataTypes } = require('sequelize');

class BaseModel extends Model {
  static init(sequelize) {
    if (!this.modelAttributes || typeof this.modelAttributes !== 'function') {
      throw new Error(`modelAttributes method must be implemented by ${this.name}`);
    }
    const attributes = this.modelAttributes(DataTypes);
    return super.init(attributes, { sequelize, modelName: this.name });
  }

  static getModelName() {
    return this.name;
  }
}

module.exports = BaseModel;

================
File: backend/src/models/Branding.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Branding extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Branding.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  logoUrl: {
    type: DataTypes.STRING,
    allowNull: true
  },
  primaryColor: {
    type: DataTypes.STRING,
    allowNull: true
  },
  secondaryColor: {
    type: DataTypes.STRING,
    allowNull: true
  },
  fontFamily: {
    type: DataTypes.STRING,
    allowNull: true
  },
  customCss: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Branding.init(Branding.attributes, {
    sequelize,
    modelName: 'Branding',
    tableName: 'brandings', // Adjust this if needed
  });
  return Branding
};

================
File: backend/src/models/BrandingProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class BrandingProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

BrandingProfile.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  logoUrl: {
    type: DataTypes.STRING,
    allowNull: true
  },
  colorScheme: {
    type: DataTypes.JSON,
    allowNull: true
  },
  fontSettings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  isDefault: {
    type: DataTypes.BOOLEAN,
    defaultValue: false
  }
};

module.exports = (sequelize) => {
  BrandingProfile.init(BrandingProfile.attributes, {
    sequelize,
    modelName: 'BrandingProfile',
    tableName: 'brandingprofiles', // Adjust this if needed
  });
  return BrandingProfile
};

================
File: backend/src/models/Campaign.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Campaign extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Campaign.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  status: {
    type: DataTypes.ENUM('draft', 'active', 'paused', 'completed'),
    defaultValue: 'draft'
  },
  type: {
    type: DataTypes.ENUM('email', 'sms', 'push', 'in-app'),
    allowNull: false
  },
  targetAudience: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Campaign.init(Campaign.attributes, {
    sequelize,
    modelName: 'Campaign',
    tableName: 'campaigns', // Adjust this if needed
  });
  return Campaign
};

================
File: backend/src/models/CampaignResult.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CampaignResult extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CampaignResult.attributes = attributes = {
  campaignId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Campaigns', key: 'id' }
  },
  metric: {
    type: DataTypes.STRING,
    allowNull: false
  },
  value: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  date: {
    type: DataTypes.DATE,
    allowNull: false
  }
};

module.exports = (sequelize) => {
  CampaignResult.init(CampaignResult.attributes, {
    sequelize,
    modelName: 'CampaignResult',
    tableName: 'campaignresults', // Adjust this if needed
  });
  return CampaignResult
};

================
File: backend/src/models/CampaignStep.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CampaignStep extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CampaignStep.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  CampaignStep.init(CampaignStep.attributes, {
    sequelize,
    modelName: 'CampaignStep',
    tableName: 'campaignsteps', // Adjust this if needed
  });
  return CampaignStep
};

================
File: backend/src/models/Catering.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Catering extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Catering.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  minimumOrderAmount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  leadTime: {
    type: DataTypes.INTEGER,
    allowNull: false,
    comment: 'Lead time in hours'
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  Catering.init(Catering.attributes, {
    sequelize,
    modelName: 'Catering',
    tableName: 'caterings', // Adjust this if needed
  });
  return Catering
};

================
File: backend/src/models/CateringAdmin.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringAdmin extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringAdmin.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  permissions: {
    type: DataTypes.JSON,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  CateringAdmin.init(CateringAdmin.attributes, {
    sequelize,
    modelName: 'CateringAdmin',
    tableName: 'cateringadmins', // Adjust this if needed
  });
  return CateringAdmin
};

================
File: backend/src/models/CateringMenu.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringMenu extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringMenu.attributes = attributes = {
  cateringId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Caterings', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  CateringMenu.init(CateringMenu.attributes, {
    sequelize,
    modelName: 'CateringMenu',
    tableName: 'cateringmenus', // Adjust this if needed
  });
  return CateringMenu
};

================
File: backend/src/models/CateringMenuItem.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringMenuItem extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringMenuItem.attributes = attributes = {
  cateringMenuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringMenus', key: 'id' }
  },
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  minimumQuantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  },
  maximumQuantity: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  CateringMenuItem.init(CateringMenuItem.attributes, {
    sequelize,
    modelName: 'CateringMenuItem',
    tableName: 'cateringmenuitems', // Adjust this if needed
  });
  return CateringMenuItem
};

================
File: backend/src/models/CateringOrder.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrder extends BaseModel {
  static init(sequelize) {
    super.init({
      id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
      },
      clientId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      customerId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      total: {
        type: DataTypes.FLOAT,
        allowNull: false
      },
      status: {
        type: DataTypes.ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED'),
        allowNull: false
      },
      eventDate: {
        type: DataTypes.DATE,
        allowNull: false
      },
      eventType: {
        type: DataTypes.STRING,
        allowNull: false
      },
      deliveryAddress: {
        type: DataTypes.STRING,
        allowNull: false
      },
      specialInstructions: {
        type: DataTypes.TEXT,
        allowNull: true
      }
    }, {
      sequelize,
      modelName: 'CateringOrder'
    });
  }

  static associate(models) {
    this.hasMany(models.CateringOrderItem, { foreignKey: 'orderId' });
  }
}

module.exports = CateringOrder;

================
File: backend/src/models/CateringOrderAssignments.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrderAssignments extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringOrderAssignments.attributes = attributes = {
  cateringOrderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringOrders', key: 'id' }
  },
  assignedUserId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  assignmentType: {
    type: DataTypes.ENUM('preparation', 'delivery'),
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('assigned', 'in_progress', 'completed'),
    defaultValue: 'assigned'
  },
  notes: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  CateringOrderAssignments.init(CateringOrderAssignments.attributes, {
    sequelize,
    modelName: 'CateringOrderAssignments',
    tableName: 'cateringorderassignmentss', // Adjust this if needed
  });
  return CateringOrderAssignments
};

================
File: backend/src/models/CateringOrderCustomization.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrderCustomization extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringOrderCustomization.attributes = attributes = {
  cateringOrderItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringOrderItems', key: 'id' }
  },
  customizationType: {
    type: DataTypes.STRING,
    allowNull: false
  },
  customizationValue: {
    type: DataTypes.STRING,
    allowNull: false
  },
  additionalCost: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  CateringOrderCustomization.init(CateringOrderCustomization.attributes, {
    sequelize,
    modelName: 'CateringOrderCustomization',
    tableName: 'cateringordercustomizations', // Adjust this if needed
  });
  return CateringOrderCustomization
};

================
File: backend/src/models/CateringOrderFees.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrderFees extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringOrderFees.attributes = attributes = {
  cateringOrderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringOrders', key: 'id' }
  },
  feeType: {
    type: DataTypes.ENUM('delivery', 'service', 'other'),
    allowNull: false
  },
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  description: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  CateringOrderFees.init(CateringOrderFees.attributes, {
    sequelize,
    modelName: 'CateringOrderFees',
    tableName: 'cateringorderfeess', // Adjust this if needed
  });
  return CateringOrderFees
};

================
File: backend/src/models/CateringOrderItem.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrderItem extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringOrderItem.attributes = attributes = {
  cateringOrderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringOrders', key: 'id' }
  },
  cateringMenuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringMenuItems', key: 'id' }
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  specialInstructions: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  CateringOrderItem.init(CateringOrderItem.attributes, {
    sequelize,
    modelName: 'CateringOrderItem',
    tableName: 'cateringorderitems', // Adjust this if needed
  });
  return CateringOrderItem
};

================
File: backend/src/models/CateringOrderLocation.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrderLocation extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringOrderLocation.attributes = attributes = {
  cateringOrderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringOrders', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  isPickup: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  deliveryAddress: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  deliveryInstructions: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  CateringOrderLocation.init(CateringOrderLocation.attributes, {
    sequelize,
    modelName: 'CateringOrderLocation',
    tableName: 'cateringorderlocations', // Adjust this if needed
  });
  return CateringOrderLocation
};

================
File: backend/src/models/CateringOrderModifier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringOrderModifier extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringOrderModifier.attributes = attributes = {
  cateringOrderItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CateringOrderItems', key: 'id' }
  },
  modifierId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Modifiers', key: 'id' }
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  }
};

module.exports = (sequelize) => {
  CateringOrderModifier.init(CateringOrderModifier.attributes, {
    sequelize,
    modelName: 'CateringOrderModifier',
    tableName: 'cateringordermodifiers', // Adjust this if needed
  });
  return CateringOrderModifier
};

================
File: backend/src/models/CateringSettings.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CateringSettings extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CateringSettings.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  minimumOrderAmount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  leadTimeHours: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 24
  },
  maxOrderDaysInAdvance: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 30
  },
  deliveryFee: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  serviceFeePercentage: {
    type: DataTypes.DECIMAL(5, 2),
    allowNull: true
  },
  allowPickup: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  allowDelivery: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  CateringSettings.init(CateringSettings.attributes, {
    sequelize,
    modelName: 'CateringSettings',
    tableName: 'cateringsettingss', // Adjust this if needed
  });
  return CateringSettings
};

================
File: backend/src/models/Challenge.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Challenge extends BaseModel {
  static associate(models) {
    // define associations here if needed
  }
}

Challenge.attributes = attributes = {
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  type: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  goal: {
    type: DataTypes.INTEGER,
    allowNull: false,
  },
  reward: {
    type: DataTypes.FLOAT,
    allowNull: false,
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false,
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: false,
  },
};

module.exports = (sequelize) => {
  Challenge.init(Challenge.attributes, {
    sequelize,
    modelName: 'Challenge',
    tableName: 'challenges', // Adjust this if needed
  });
  return Challenge
};

================
File: backend/src/models/checkModelExports.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class checkModelExports extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

checkModelExports.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  checkModelExports.init(checkModelExports.attributes, {
    sequelize,
    modelName: 'checkModelExports',
    tableName: 'checkmodelexportss', // Adjust this if needed
  });
  return checkModelExports
};

================
File: backend/src/models/checkModels.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class checkModels extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

checkModels.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  checkModels.init(checkModels.attributes, {
    sequelize,
    modelName: 'checkModels',
    tableName: 'checkmodelss', // Adjust this if needed
  });
  return checkModels
};

================
File: backend/src/models/Client.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Client extends BaseModel {
  static associate(models) {
    // define associations here if needed
  }
}

Client.attributes = attributes = {
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true,
    },
  },
  phone: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  address: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  // Add any other fields that are needed for the Client model
};

module.exports = (sequelize) => {
  Client.init(Client.attributes, {
    sequelize,
    modelName: 'Client',
    tableName: 'clients', // Adjust this if needed
  });
  return Client
};

================
File: backend/src/models/ClientBranding.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ClientBranding extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ClientBranding.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Clients',
      key: 'id'
    }
  },
  logoUrl: {
    type: DataTypes.STRING,
    allowNull: true
  },
  primaryColor: {
    type: DataTypes.STRING,
    allowNull: true
  },
  secondaryColor: {
    type: DataTypes.STRING,
    allowNull: true
  },
  fontFamily: {
    type: DataTypes.STRING,
    allowNull: true
  },
  customCss: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ClientBranding.init(ClientBranding.attributes, {
    sequelize,
    modelName: 'ClientBranding',
    tableName: 'clientbrandings', // Adjust this if needed
  });
  return ClientBranding
};

================
File: backend/src/models/ClientFeatures.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ClientFeatures extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ClientFeatures.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Clients',
      key: 'id'
    }
  },
  featureName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  isEnabled: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  configuration: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ClientFeatures.init(ClientFeatures.attributes, {
    sequelize,
    modelName: 'ClientFeatures',
    tableName: 'clientfeaturess', // Adjust this if needed
  });
  return ClientFeatures
};

================
File: backend/src/models/ClientPreferences.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ClientPreferences extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ClientPreferences.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  ClientPreferences.init(ClientPreferences.attributes, {
    sequelize,
    modelName: 'ClientPreferences',
    tableName: 'clientpreferencess', // Adjust this if needed
  });
  return ClientPreferences
};

================
File: backend/src/models/ClientProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ClientProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ClientProfile.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  ClientProfile.init(ClientProfile.attributes, {
    sequelize,
    modelName: 'ClientProfile',
    tableName: 'clientprofiles', // Adjust this if needed
  });
  return ClientProfile
};

================
File: backend/src/models/ClientSettings.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ClientSettings extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ClientSettings.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Clients',
      key: 'id'
    }
  },
  settingKey: {
    type: DataTypes.STRING,
    allowNull: false
  },
  settingValue: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  dataType: {
    type: DataTypes.STRING,
    allowNull: false
  }
};

module.exports = (sequelize) => {
  ClientSettings.init(ClientSettings.attributes, {
    sequelize,
    modelName: 'ClientSettings',
    tableName: 'clientsettingss', // Adjust this if needed
  });
  return ClientSettings
};

================
File: backend/src/models/CommissaryKitchen.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CommissaryKitchen extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CommissaryKitchen.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  address: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  capacity: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  operatingHours: {
    type: DataTypes.JSON,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  CommissaryKitchen.init(CommissaryKitchen.attributes, {
    sequelize,
    modelName: 'CommissaryKitchen',
    tableName: 'commissarykitchens', // Adjust this if needed
  });
  return CommissaryKitchen
};

================
File: backend/src/models/CommissaryLocation.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class CommissaryLocation extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

CommissaryLocation.attributes = attributes = {
  commissaryKitchenId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'CommissaryKitchens', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  deliverySchedule: {
    type: DataTypes.JSON,
    allowNull: true
  },
  notes: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  CommissaryLocation.init(CommissaryLocation.attributes, {
    sequelize,
    modelName: 'CommissaryLocation',
    tableName: 'commissarylocations', // Adjust this if needed
  });
  return CommissaryLocation
};

================
File: backend/src/models/CorePOSProfile.js
================
const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  const CorePOSProfile = sequelize.define('CorePOSProfile', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    posType: {
      type: DataTypes.ENUM('TOAST', 'BRINK', 'REVEL', 'SQUARE'),
      allowNull: false,
    },
    apiEndpoint: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    apiKey: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    syncInterval: {
      type: DataTypes.INTEGER,
      defaultValue: 3600,
    },
    lastSyncTimestamp: {
      type: DataTypes.DATE,
    },
    isActive: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
    },
    settings: {
      type: DataTypes.JSON,
      defaultValue: {},
    },
  }, {
    tableName: 'core_pos_profiles',
  });

  return CorePOSProfile;
};

================
File: backend/src/models/DataWall.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class DataWall extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

DataWall.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  dataSource: {
    type: DataTypes.STRING,
    allowNull: false
  },
  queryParameters: {
    type: DataTypes.JSON,
    allowNull: true
  },
  refreshInterval: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 3600 // in seconds
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  lastRefreshed: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  DataWall.init(DataWall.attributes, {
    sequelize,
    modelName: 'DataWall',
    tableName: 'datawalls', // Adjust this if needed
  });
  return DataWall
};

================
File: backend/src/models/DeliveryDriver.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class DeliveryDriver extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

DeliveryDriver.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  vehicleType: {
    type: DataTypes.ENUM('car', 'motorcycle', 'bicycle', 'scooter'),
    allowNull: false
  },
  licensePlate: {
    type: DataTypes.STRING,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  currentStatus: {
    type: DataTypes.ENUM('available', 'on_delivery', 'offline'),
    allowNull: false,
    defaultValue: 'offline'
  },
  rating: {
    type: DataTypes.FLOAT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  DeliveryDriver.init(DeliveryDriver.attributes, {
    sequelize,
    modelName: 'DeliveryDriver',
    tableName: 'deliverydrivers', // Adjust this if needed
  });
  return DeliveryDriver
};

================
File: backend/src/models/Discount.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Discount extends BaseModel {
  static associate(models) {
    // Define associations here if needed
  }
}

Discount.attributes = attributes = {
  code: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  discountType: {
    type: DataTypes.ENUM('percentage', 'fixed'),
    allowNull: false
  },
  value: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  maxUses: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  currentUses: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: {
      model: 'Clients',
      key: 'id'
    }
  }
};

module.exports = (sequelize) => {
  Discount.init(Discount.attributes, {
    sequelize,
    modelName: 'Discount',
    tableName: 'discounts', // Adjust this if needed
  });
  return Discount
};

================
File: backend/src/models/DiscountItem.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class DiscountItem extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

DiscountItem.attributes = attributes = {
  discountId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Discounts', key: 'id' }
  },
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  isExcluded: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  }
};

module.exports = (sequelize) => {
  DiscountItem.init(DiscountItem.attributes, {
    sequelize,
    modelName: 'DiscountItem',
    tableName: 'discountitems', // Adjust this if needed
  });
  return DiscountItem
};

================
File: backend/src/models/DriverLocations.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class DriverLocations extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

DriverLocations.attributes = attributes = {
  driverId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'DeliveryDrivers', key: 'id' }
  },
  latitude: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  longitude: {
    type: DataTypes.FLOAT,
    allowNull: false
  },
  timestamp: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  accuracy: {
    type: DataTypes.FLOAT,
    allowNull: true
  },
  speed: {
    type: DataTypes.FLOAT,
    allowNull: true
  },
  bearing: {
    type: DataTypes.FLOAT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  DriverLocations.init(DriverLocations.attributes, {
    sequelize,
    modelName: 'DriverLocations',
    tableName: 'driverlocationss', // Adjust this if needed
  });
  return DriverLocations
};

================
File: backend/src/models/DropOffSchedule.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class DropOffSchedule extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

DropOffSchedule.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  dropOffSpotId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'DropOffSpots', key: 'id' }
  },
  dayOfWeek: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: { min: 0, max: 6 }
  },
  startTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  endTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  DropOffSchedule.init(DropOffSchedule.attributes, {
    sequelize,
    modelName: 'DropOffSchedule',
    tableName: 'dropoffschedules', // Adjust this if needed
  });
  return DropOffSchedule
};

================
File: backend/src/models/DropOffSpot.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class DropOffSpot extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

DropOffSpot.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  address: {
    type: DataTypes.STRING,
    allowNull: false
  },
  latitude: {
    type: DataTypes.FLOAT,
    allowNull: true
  },
  longitude: {
    type: DataTypes.FLOAT,
    allowNull: true
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  DropOffSpot.init(DropOffSpot.attributes, {
    sequelize,
    modelName: 'DropOffSpot',
    tableName: 'dropoffspots', // Adjust this if needed
  });
  return DropOffSpot
};

================
File: backend/src/models/FeatureManagement.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class FeatureManagement extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

FeatureManagement.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  featureName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  isEnabled: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  configuration: {
    type: DataTypes.JSON,
    allowNull: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  FeatureManagement.init(FeatureManagement.attributes, {
    sequelize,
    modelName: 'FeatureManagement',
    tableName: 'featuremanagements', // Adjust this if needed
  });
  return FeatureManagement
};

================
File: backend/src/models/GlobalMenu.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class GlobalMenu extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

GlobalMenu.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  GlobalMenu.init(GlobalMenu.attributes, {
    sequelize,
    modelName: 'GlobalMenu',
    tableName: 'globalmenus', // Adjust this if needed
  });
  return GlobalMenu
};

================
File: backend/src/models/GlobalSetting.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class GlobalSetting extends BaseModel {
  static associate(models) {
    // Global settings typically don't have associations, but you can add if needed
  }
}

GlobalSetting.attributes = attributes = {
  key: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  value: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  dataType: {
    type: DataTypes.ENUM('string', 'number', 'boolean', 'json'),
    allowNull: false,
    defaultValue: 'string'
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isEditable: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  GlobalSetting.init(GlobalSetting.attributes, {
    sequelize,
    modelName: 'GlobalSetting',
    tableName: 'globalsettings', // Adjust this if needed
  });
  return GlobalSetting
};

================
File: backend/src/models/Guest.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Guest extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Guest.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true
    }
  },
  phoneNumber: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  lastOrderDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  totalOrders: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  totalSpent: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  Guest.init(Guest.attributes, {
    sequelize,
    modelName: 'Guest',
    tableName: 'guests', // Adjust this if needed
  });
  return Guest
};

================
File: backend/src/models/GuestDiscounts.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class GuestDiscounts extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

GuestDiscounts.attributes = attributes = {
  guestId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Guests', key: 'id' }
  },
  discountId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Discounts', key: 'id' }
  },
  usageCount: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  lastUsedDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  GuestDiscounts.init(GuestDiscounts.attributes, {
    sequelize,
    modelName: 'GuestDiscounts',
    tableName: 'guestdiscountss', // Adjust this if needed
  });
  return GuestDiscounts
};

================
File: backend/src/models/GuestLoyaltyProgram.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class GuestLoyaltyProgram extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

GuestLoyaltyProgram.attributes = attributes = {
  guestId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Guests', key: 'id' }
  },
  loyaltyProgramId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyPrograms', key: 'id' }
  },
  points: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  tier: {
    type: DataTypes.STRING,
    allowNull: true
  },
  joinDate: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  lastActivityDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  GuestLoyaltyProgram.init(GuestLoyaltyProgram.attributes, {
    sequelize,
    modelName: 'GuestLoyaltyProgram',
    tableName: 'guestloyaltyprograms', // Adjust this if needed
  });
  return GuestLoyaltyProgram
};

================
File: backend/src/models/GuestProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class GuestProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

GuestProfile.attributes = attributes = {
  guestId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Guests', key: 'id' }
  },
  firstName: {
    type: DataTypes.STRING,
    allowNull: true
  },
  lastName: {
    type: DataTypes.STRING,
    allowNull: true
  },
  dateOfBirth: {
    type: DataTypes.DATEONLY,
    allowNull: true
  },
  gender: {
    type: DataTypes.ENUM('male', 'female', 'other', 'prefer_not_to_say'),
    allowNull: true
  },
  address: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  city: {
    type: DataTypes.STRING,
    allowNull: true
  },
  state: {
    type: DataTypes.STRING,
    allowNull: true
  },
  zipCode: {
    type: DataTypes.STRING,
    allowNull: true
  },
  country: {
    type: DataTypes.STRING,
    allowNull: true
  },
  preferences: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  GuestProfile.init(GuestProfile.attributes, {
    sequelize,
    modelName: 'GuestProfile',
    tableName: 'guestprofiles', // Adjust this if needed
  });
  return GuestProfile
};

================
File: backend/src/models/GuestRewards.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class GuestRewards extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

GuestRewards.attributes = attributes = {
  guestId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Guests', key: 'id' }
  },
  rewardId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Rewards', key: 'id' }
  },
  issuedDate: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  expirationDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isRedeemed: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  redeemedDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  status: {
    type: DataTypes.ENUM('active', 'expired', 'redeemed'),
    allowNull: false,
    defaultValue: 'active'
  }
};

module.exports = (sequelize) => {
  GuestRewards.init(GuestRewards.attributes, {
    sequelize,
    modelName: 'GuestRewards',
    tableName: 'guestrewardss', // Adjust this if needed
  });
  return GuestRewards
};

================
File: backend/src/models/HouseAccount.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class HouseAccount extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

HouseAccount.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  balance: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  creditLimit: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  billingCycle: {
    type: DataTypes.ENUM('weekly', 'bi-weekly', 'monthly'),
    allowNull: false,
    defaultValue: 'monthly'
  },
  paymentTerms: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 30 // days
  }
};

module.exports = (sequelize) => {
  HouseAccount.init(HouseAccount.attributes, {
    sequelize,
    modelName: 'HouseAccount',
    tableName: 'houseaccounts', // Adjust this if needed
  });
  return HouseAccount
};

================
File: backend/src/models/HouseAccountLocations.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class HouseAccountLocations extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

HouseAccountLocations.attributes = attributes = {
  houseAccountId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'HouseAccounts', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  HouseAccountLocations.init(HouseAccountLocations.attributes, {
    sequelize,
    modelName: 'HouseAccountLocations',
    tableName: 'houseaccountlocationss', // Adjust this if needed
  });
  return HouseAccountLocations
};

================
File: backend/src/models/HouseAccountUser.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class HouseAccountUser extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

HouseAccountUser.attributes = attributes = {
  houseAccountId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'HouseAccounts', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  role: {
    type: DataTypes.ENUM('admin', 'user'),
    allowNull: false,
    defaultValue: 'user'
  },
  spendingLimit: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  HouseAccountUser.init(HouseAccountUser.attributes, {
    sequelize,
    modelName: 'HouseAccountUser',
    tableName: 'houseaccountusers', // Adjust this if needed
  });
  return HouseAccountUser
};

================
File: backend/src/models/index.js
================
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

// Function to import a model
const importModel = (file) => {
  const model = require(path.join(__dirname, file));
  if (typeof model.init === 'function') {
    model.init(sequelize);
    db[model.name] = model;
    console.log(`Initialized model: ${model.name}`);
  } else {
    console.warn(`Skipped model: ${file} (not a Sequelize model or missing init method)`);
  }
};

// Import all models
fs.readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1 &&
      file !== 'BaseModel.js'
    );
  })
  .forEach(importModel);

// Set up associations
Object.values(db).forEach(model => {
  if (typeof model.associate === 'function') {
    model.associate(db);
    console.log(`Associations set up for: ${model.name}`);
  } else {
    console.log(`No associations for: ${model.name}`);
  }
});

// Handle connection errors
sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection has been established successfully.');
  })
  .catch(err => {
    console.error('Unable to connect to the database:', err);
  });

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;

================
File: backend/src/models/Inventory.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Inventory extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Inventory.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  unit: {
    type: DataTypes.STRING,
    allowNull: false
  },
  reorderPoint: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  lastRestockDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  expirationDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Inventory.init(Inventory.attributes, {
    sequelize,
    modelName: 'Inventory',
    tableName: 'inventorys', // Adjust this if needed
  });
  return Inventory
};

================
File: backend/src/models/Invoice.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Invoice extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Invoice.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  houseAccountId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'HouseAccounts', key: 'id' }
  },
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Orders', key: 'id' }
  },
  invoiceNumber: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('pending', 'paid', 'overdue', 'cancelled'),
    allowNull: false,
    defaultValue: 'pending'
  },
  dueDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  paidDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Invoice.init(Invoice.attributes, {
    sequelize,
    modelName: 'Invoice',
    tableName: 'invoices', // Adjust this if needed
  });
  return Invoice
};

================
File: backend/src/models/Item.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Item extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Item.attributes = attributes = {
  menuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Menus', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  imageUrl: {
    type: DataTypes.STRING,
    allowNull: true
  },
  isAvailable: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  category: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Item.init(Item.attributes, {
    sequelize,
    modelName: 'Item',
    tableName: 'items', // Adjust this if needed
  });
  return Item
};

================
File: backend/src/models/ItemModifier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ItemModifier extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ItemModifier.attributes = attributes = {
  itemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Items', key: 'id' }
  },
  modifierId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Modifiers', key: 'id' }
  },
  isRequired: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  minSelection: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  maxSelection: {
    type: DataTypes.INTEGER,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ItemModifier.init(ItemModifier.attributes, {
    sequelize,
    modelName: 'ItemModifier',
    tableName: 'itemmodifiers', // Adjust this if needed
  });
  return ItemModifier
};

================
File: backend/src/models/ItemReview.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ItemReview extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ItemReview.attributes = attributes = {
  itemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Items', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  rating: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1,
      max: 5
    }
  },
  comment: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isVerified: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  }
};

module.exports = (sequelize) => {
  ItemReview.init(ItemReview.attributes, {
    sequelize,
    modelName: 'ItemReview',
    tableName: 'itemreviews', // Adjust this if needed
  });
  return ItemReview
};

================
File: backend/src/models/Location.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Location extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Location.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'Clients',
      key: 'id'
    }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  address: {
    type: DataTypes.STRING,
    allowNull: false
  },
  city: {
    type: DataTypes.STRING,
    allowNull: false
  },
  state: {
    type: DataTypes.STRING,
    allowNull: false
  },
  zipCode: {
    type: DataTypes.STRING,
    allowNull: false
  },
  country: {
    type: DataTypes.STRING,
    allowNull: false
  },
  phoneNumber: {
    type: DataTypes.STRING,
    allowNull: true
  },
  email: {
    type: DataTypes.STRING,
    allowNull: true,
    validate: {
      isEmail: true
    }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  timezone: {
    type: DataTypes.STRING,
    allowNull: false
  },
  latitude: {
    type: DataTypes.FLOAT,
    allowNull: true
  },
  longitude: {
    type: DataTypes.FLOAT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Location.init(Location.attributes, {
    sequelize,
    modelName: 'Location',
    tableName: 'locations', // Adjust this if needed
  });
  return Location
};

================
File: backend/src/models/LocationHours.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationHours extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationHours.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  dayOfWeek: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 0,
      max: 6
    }
  },
  openTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  closeTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  isClosed: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  }
};

module.exports = (sequelize) => {
  LocationHours.init(LocationHours.attributes, {
    sequelize,
    modelName: 'LocationHours',
    tableName: 'locationhourss', // Adjust this if needed
  });
  return LocationHours
};

================
File: backend/src/models/LocationMenu.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationMenu extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationMenu.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  menuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Menus', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LocationMenu.init(LocationMenu.attributes, {
    sequelize,
    modelName: 'LocationMenu',
    tableName: 'locationmenus', // Adjust this if needed
  });
  return LocationMenu
};

================
File: backend/src/models/LocationMenuGroup.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationMenuGroup extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationMenuGroup.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  menuGroupId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuGroups', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  displayOrder: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  customName: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LocationMenuGroup.init(LocationMenuGroup.attributes, {
    sequelize,
    modelName: 'LocationMenuGroup',
    tableName: 'locationmenugroups', // Adjust this if needed
  });
  return LocationMenuGroup
};

================
File: backend/src/models/LocationMenuOverride.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationMenuOverride extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationMenuOverride.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  isAvailable: {
    type: DataTypes.BOOLEAN,
    allowNull: true
  },
  customName: {
    type: DataTypes.STRING,
    allowNull: true
  },
  customDescription: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LocationMenuOverride.init(LocationMenuOverride.attributes, {
    sequelize,
    modelName: 'LocationMenuOverride',
    tableName: 'locationmenuoverrides', // Adjust this if needed
  });
  return LocationMenuOverride
};

================
File: backend/src/models/LocationPOSProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationPOSProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationPOSProfile.attributes = attributes = {
  locationId: {
    type: DataTypes.UUID,
    allowNull: false,
  },
  corePOSProfileId: {
    type: DataTypes.UUID,
    allowNull: false,
    references: {
      model: 'core_pos_profiles',
      key: 'id',
    },
  },
  lastSyncStatus: {
    type: DataTypes.ENUM('SUCCESS', 'FAILED', 'IN_PROGRESS', 'NOT_SYNCED'),
    defaultValue: 'NOT_SYNCED',
  },
  lastSyncError: {
    type: DataTypes.STRING,
  },
  customSettings: {
    type: DataTypes.JSON,
    defaultValue: {},
  },
};

module.exports = (sequelize) => {
  LocationPOSProfile.init(LocationPOSProfile.attributes, {
    sequelize,
    modelName: 'LocationPOSProfile',
    tableName: 'location_pos_profiles', // Adjust this if needed
  });
  return LocationPOSProfile
};

================
File: backend/src/models/LocationProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationProfile.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  timezone: {
    type: DataTypes.STRING,
    allowNull: false
  },
  currency: {
    type: DataTypes.STRING,
    allowNull: false
  },
  languagePreference: {
    type: DataTypes.STRING,
    allowNull: true
  },
  deliveryRadius: {
    type: DataTypes.FLOAT,
    allowNull: true
  },
  minimumOrderAmount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  deliveryFee: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  customSettings: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LocationProfile.init(LocationProfile.attributes, {
    sequelize,
    modelName: 'LocationProfile',
    tableName: 'locationprofiles', // Adjust this if needed
  });
  return LocationProfile
};

================
File: backend/src/models/LocationTaxConfig.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LocationTaxConfig extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LocationTaxConfig.attributes = attributes = {
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  taxName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  taxRate: {
    type: DataTypes.DECIMAL(5, 2),
    allowNull: false
  },
  isDefault: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  applicableItemCategories: {
    type: DataTypes.JSON,
    allowNull: true
  },
  exemptItemCategories: {
    type: DataTypes.JSON,
    allowNull: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LocationTaxConfig.init(LocationTaxConfig.attributes, {
    sequelize,
    modelName: 'LocationTaxConfig',
    tableName: 'locationtaxconfigs', // Adjust this if needed
  });
  return LocationTaxConfig
};

================
File: backend/src/models/Logger.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Logger extends BaseModel {
  static associate(models) {
    // Define associations here if needed
  }
}

Logger.attributes = attributes = {
  level: {
    type: DataTypes.STRING,
    allowNull: false
  },
  message: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  meta: {
    type: DataTypes.JSON,
    allowNull: true
  },
  timestamp: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  source: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Logger.init(Logger.attributes, {
    sequelize,
    modelName: 'Logger',
    tableName: 'loggers', // Adjust this if needed
  });
  return Logger
};

================
File: backend/src/models/Logger.js.save
================


================
File: backend/src/models/Loyalty.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Loyalty extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Loyalty.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  pointsPerDollar: {
    type: DataTypes.FLOAT,
    allowNull: false,
    defaultValue: 1
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Loyalty.init(Loyalty.attributes, {
    sequelize,
    modelName: 'Loyalty',
    tableName: 'loyaltys', // Adjust this if needed
  });
  return Loyalty
};

================
File: backend/src/models/LoyaltyAnalytics.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyAnalytics extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyAnalytics.attributes = attributes = {
  loyaltyId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Loyalties', key: 'id' }
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  totalPointsEarned: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  totalPointsRedeemed: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  activeUsers: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  newEnrollments: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  LoyaltyAnalytics.init(LoyaltyAnalytics.attributes, {
    sequelize,
    modelName: 'LoyaltyAnalytics',
    tableName: 'loyaltyanalyticss', // Adjust this if needed
  });
  return LoyaltyAnalytics
};

================
File: backend/src/models/LoyaltyChallenge.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyChallenge extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyChallenge.attributes = attributes = {
  loyaltyId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Loyalties', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  type: {
    type: DataTypes.ENUM('purchase', 'visit', 'referral', 'social', 'custom'),
    allowNull: false
  },
  goal: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  reward: {
    type: DataTypes.INTEGER,
    allowNull: false,
    comment: 'Points awarded for completing the challenge'
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  LoyaltyChallenge.init(LoyaltyChallenge.attributes, {
    sequelize,
    modelName: 'LoyaltyChallenge',
    tableName: 'loyaltychallenges', // Adjust this if needed
  });
  return LoyaltyChallenge
};

================
File: backend/src/models/LoyaltyChallengeProgress.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyChallengeProgress extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyChallengeProgress.attributes = attributes = {
  challengeId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyChallenges', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  progress: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  isCompleted: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  completedAt: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LoyaltyChallengeProgress.init(LoyaltyChallengeProgress.attributes, {
    sequelize,
    modelName: 'LoyaltyChallengeProgress',
    tableName: 'loyaltychallengeprogresss', // Adjust this if needed
  });
  return LoyaltyChallengeProgress
};

================
File: backend/src/models/LoyaltyChallengeRewards.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyChallengeRewards extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyChallengeRewards.attributes = attributes = {
  challengeId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyChallenges', key: 'id' }
  },
  rewardId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyRewards', key: 'id' }
  },
  quantity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  }
};

module.exports = (sequelize) => {
  LoyaltyChallengeRewards.init(LoyaltyChallengeRewards.attributes, {
    sequelize,
    modelName: 'LoyaltyChallengeRewards',
    tableName: 'loyaltychallengerewardss', // Adjust this if needed
  });
  return LoyaltyChallengeRewards
};

================
File: backend/src/models/LoyaltyConfig.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyConfig extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyConfig.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  pointsPerDollar: {
    type: DataTypes.FLOAT,
    allowNull: false,
    defaultValue: 1
  },
  pointsExpirationMonths: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  tierSystem: {
    type: DataTypes.JSON,
    allowNull: true
  },
  bonusRules: {
    type: DataTypes.JSON,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  LoyaltyConfig.init(LoyaltyConfig.attributes, {
    sequelize,
    modelName: 'LoyaltyConfig',
    tableName: 'loyaltyconfigs', // Adjust this if needed
  });
  return LoyaltyConfig
};

================
File: backend/src/models/LoyaltyIntegration.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyIntegration extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyIntegration.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  integrationType: {
    type: DataTypes.ENUM('pos', 'crm', 'email', 'sms', 'other'),
    allowNull: false
  },
  integrationName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  config: {
    type: DataTypes.JSON,
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  lastSyncDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LoyaltyIntegration.init(LoyaltyIntegration.attributes, {
    sequelize,
    modelName: 'LoyaltyIntegration',
    tableName: 'loyaltyintegrations', // Adjust this if needed
  });
  return LoyaltyIntegration
};

================
File: backend/src/models/LoyaltyProgram.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyProgram extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyProgram.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  rules: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LoyaltyProgram.init(LoyaltyProgram.attributes, {
    sequelize,
    modelName: 'LoyaltyProgram',
    tableName: 'loyaltyprograms', // Adjust this if needed
  });
  return LoyaltyProgram
};

================
File: backend/src/models/LoyaltyReward.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyReward extends BaseModel {
  static init(sequelize) {
    super.init({
      id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
      },
      clientId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false
      },
      description: {
        type: DataTypes.TEXT,
        allowNull: true
      },
      pointsRequired: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      reward: {
        type: DataTypes.STRING,
        allowNull: false
      }
    }, {
      sequelize,
      modelName: 'LoyaltyReward'
    });
  }

  static associate(models) {
    // Define associations if any
  }
}

module.exports = LoyaltyReward;

================
File: backend/src/models/LoyaltySubscription.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltySubscription extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltySubscription.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  programId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyPrograms', key: 'id' }
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  status: {
    type: DataTypes.ENUM('active', 'paused', 'cancelled'),
    allowNull: false,
    defaultValue: 'active'
  },
  currentPoints: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  currentTier: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  LoyaltySubscription.init(LoyaltySubscription.attributes, {
    sequelize,
    modelName: 'LoyaltySubscription',
    tableName: 'loyaltysubscriptions', // Adjust this if needed
  });
  return LoyaltySubscription
};

================
File: backend/src/models/LoyaltyTier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyTier extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyTier.attributes = attributes = {
  programId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyPrograms', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  requiredPoints: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  benefits: {
    type: DataTypes.JSON,
    allowNull: true
  },
  multiplier: {
    type: DataTypes.FLOAT,
    allowNull: false,
    defaultValue: 1
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  LoyaltyTier.init(LoyaltyTier.attributes, {
    sequelize,
    modelName: 'LoyaltyTier',
    tableName: 'loyaltytiers', // Adjust this if needed
  });
  return LoyaltyTier
};

================
File: backend/src/models/LoyaltyTransaction.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class LoyaltyTransaction extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

LoyaltyTransaction.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  programId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'LoyaltyPrograms', key: 'id' }
  },
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Orders', key: 'id' }
  },
  points: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  type: {
    type: DataTypes.ENUM('earn', 'redeem', 'expire', 'adjust'),
    allowNull: false
  },
  description: {
    type: DataTypes.STRING,
    allowNull: true
  },
  balance: {
    type: DataTypes.INTEGER,
    allowNull: false
  }
};

module.exports = (sequelize) => {
  LoyaltyTransaction.init(LoyaltyTransaction.attributes, {
    sequelize,
    modelName: 'LoyaltyTransaction',
    tableName: 'loyaltytransactions', // Adjust this if needed
  });
  return LoyaltyTransaction
};

================
File: backend/src/models/MarketingCampaign.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MarketingCampaign extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MarketingCampaign.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  type: {
    type: DataTypes.ENUM('email', 'sms', 'push', 'social', 'other'),
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('draft', 'scheduled', 'active', 'paused', 'completed'),
    allowNull: false,
    defaultValue: 'draft'
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  targetAudience: {
    type: DataTypes.JSON,
    allowNull: true
  },
  content: {
    type: DataTypes.JSON,
    allowNull: true
  },
  budget: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  }
};

module.exports = (sequelize) => {
  MarketingCampaign.init(MarketingCampaign.attributes, {
    sequelize,
    modelName: 'MarketingCampaign',
    tableName: 'marketingcampaigns', // Adjust this if needed
  });
  return MarketingCampaign
};

================
File: backend/src/models/MarketingPerformance.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MarketingPerformance extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MarketingPerformance.attributes = attributes = {
  campaignId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MarketingCampaigns', key: 'id' }
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  impressions: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  clicks: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  conversions: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  revenue: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  cost: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  roi: {
    type: DataTypes.FLOAT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  MarketingPerformance.init(MarketingPerformance.attributes, {
    sequelize,
    modelName: 'MarketingPerformance',
    tableName: 'marketingperformances', // Adjust this if needed
  });
  return MarketingPerformance
};

================
File: backend/src/models/MarketingReport.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MarketingReport extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MarketingReport.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  campaignId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'MarketingCampaigns', key: 'id' }
  },
  reportType: {
    type: DataTypes.ENUM('daily', 'weekly', 'monthly', 'campaign'),
    allowNull: false
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  metrics: {
    type: DataTypes.JSON,
    allowNull: false
  },
  insights: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  recommendations: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  generatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
};

module.exports = (sequelize) => {
  MarketingReport.init(MarketingReport.attributes, {
    sequelize,
    modelName: 'MarketingReport',
    tableName: 'marketingreports', // Adjust this if needed
  });
  return MarketingReport
};

================
File: backend/src/models/Menu.js
================
const { DataTypes } = require('sequelize');
const sequelize = require('../db');

const Menu = sequelize.define('Menu', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  clientId: {
    type: DataTypes.UUID,
    allowNull: false,
  },
  locationId: {
    type: DataTypes.UUID,
    allowNull: true,
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true,
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true,
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true,
  },
  menuType: {
    type: DataTypes.ENUM('REGULAR', 'SPECIAL', 'SEASONAL'),
    defaultValue: 'REGULAR',
  },
});

Menu.associate = (models) => {
  Menu.hasMany(models.MenuGroup, { as: 'groups', foreignKey: 'menuId' });
  Menu.belongsTo(models.Client, { foreignKey: 'clientId' });
  Menu.belongsTo(models.Location, { foreignKey: 'locationId' });
};

module.exports = Menu;

================
File: backend/src/models/MenuAnalytics.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuAnalytics extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuAnalytics.attributes = attributes = {
  menuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Menus', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  views: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  orders: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  revenue: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  averageOrderValue: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  MenuAnalytics.init(MenuAnalytics.attributes, {
    sequelize,
    modelName: 'MenuAnalytics',
    tableName: 'menuanalyticss', // Adjust this if needed
  });
  return MenuAnalytics
};

================
File: backend/src/models/MenuBuilderSettings.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuBuilderSettings extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuBuilderSettings.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  defaultCurrency: {
    type: DataTypes.STRING,
    allowNull: false,
    defaultValue: 'USD'
  },
  allowCustomization: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  maxCategories: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 10
  },
  maxItemsPerCategory: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 50
  },
  allowSpecialInstructions: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  customSettings: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  MenuBuilderSettings.init(MenuBuilderSettings.attributes, {
    sequelize,
    modelName: 'MenuBuilderSettings',
    tableName: 'menubuildersettingss', // Adjust this if needed
  });
  return MenuBuilderSettings
};

================
File: backend/src/models/MenuGroup.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuGroup extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuGroup.attributes = attributes = {
  menuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Menus', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  displayOrder: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  MenuGroup.init(MenuGroup.attributes, {
    sequelize,
    modelName: 'MenuGroup',
    tableName: 'menugroups', // Adjust this if needed
  });
  return MenuGroup
};

================
File: backend/src/models/MenuItem.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuItem extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuItem.attributes = attributes = {
  menuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Menus', key: 'id' }
  },
  menuGroupId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'MenuGroups', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  imageUrl: {
    type: DataTypes.STRING,
    allowNull: true
  },
  isAvailable: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  calories: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  allergens: {
    type: DataTypes.JSON,
    allowNull: true
  },
  tags: {
    type: DataTypes.JSON,
    allowNull: true
  },
  displayOrder: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  MenuItem.init(MenuItem.attributes, {
    sequelize,
    modelName: 'MenuItem',
    tableName: 'menuitems', // Adjust this if needed
  });
  return MenuItem
};

================
File: backend/src/models/MenuItemAnalytics.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuItemAnalytics extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuItemAnalytics.attributes = attributes = {
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  views: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  orders: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  revenue: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  averageRating: {
    type: DataTypes.FLOAT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  MenuItemAnalytics.init(MenuItemAnalytics.attributes, {
    sequelize,
    modelName: 'MenuItemAnalytics',
    tableName: 'menuitemanalyticss', // Adjust this if needed
  });
  return MenuItemAnalytics
};

================
File: backend/src/models/MenuItemModifier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuItemModifier extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuItemModifier.attributes = attributes = {
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  modifierId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Modifiers', key: 'id' }
  },
  isRequired: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  minSelection: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  maxSelection: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  displayOrder: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  MenuItemModifier.init(MenuItemModifier.attributes, {
    sequelize,
    modelName: 'MenuItemModifier',
    tableName: 'menuitemmodifiers', // Adjust this if needed
  });
  return MenuItemModifier
};

================
File: backend/src/models/MenuItemSizeModifier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuItemSizeModifier extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuItemSizeModifier.attributes = attributes = {
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  sizeModifierId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'SizeModifiers', key: 'id' }
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  isDefault: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  isAvailable: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  displayOrder: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  MenuItemSizeModifier.init(MenuItemSizeModifier.attributes, {
    sequelize,
    modelName: 'MenuItemSizeModifier',
    tableName: 'menuitemsizemodifiers', // Adjust this if needed
  });
  return MenuItemSizeModifier
};

================
File: backend/src/models/MenuSyncHistory.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MenuSyncHistory extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MenuSyncHistory.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  menuId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Menus', key: 'id' }
  },
  syncType: {
    type: DataTypes.ENUM('manual', 'automatic', 'scheduled'),
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('success', 'failed', 'partial'),
    allowNull: false
  },
  startTime: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endTime: {
    type: DataTypes.DATE,
    allowNull: false
  },
  details: {
    type: DataTypes.JSON,
    allowNull: true
  },
  errorMessage: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  MenuSyncHistory.init(MenuSyncHistory.attributes, {
    sequelize,
    modelName: 'MenuSyncHistory',
    tableName: 'menusynchistorys', // Adjust this if needed
  });
  return MenuSyncHistory
};

================
File: backend/src/models/MiniSite.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MiniSite extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MiniSite.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  subdomain: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  theme: {
    type: DataTypes.STRING,
    allowNull: false,
    defaultValue: 'default'
  },
  customDomain: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  settings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  seoSettings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  createdAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  updatedAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
};

module.exports = (sequelize) => {
  MiniSite.init(MiniSite.attributes, {
    sequelize,
    modelName: 'MiniSite',
    tableName: 'minisites', // Adjust this if needed
  });
  return MiniSite
};

================
File: backend/src/models/MiniSiteAnalytics.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class MiniSiteAnalytics extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

MiniSiteAnalytics.attributes = attributes = {
  miniSiteId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MiniSites', key: 'id' }
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  pageViews: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  uniqueVisitors: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  averageTimeOnSite: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0,
    comment: 'Average time on site in seconds'
  },
  bounceRate: {
    type: DataTypes.FLOAT,
    allowNull: false,
    defaultValue: 0
  },
  conversionRate: {
    type: DataTypes.FLOAT,
    allowNull: false,
    defaultValue: 0
  }
};

module.exports = (sequelize) => {
  MiniSiteAnalytics.init(MiniSiteAnalytics.attributes, {
    sequelize,
    modelName: 'MiniSiteAnalytics',
    tableName: 'minisiteanalyticss', // Adjust this if needed
  });
  return MiniSiteAnalytics
};

================
File: backend/src/models/ModelName.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ModelName extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ModelName.attributes = attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  ModelName.init(ModelName.attributes, {
    sequelize,
    modelName: 'ModelName',
    tableName: 'modelnames', // Adjust this if needed
  });
  return ModelName
};

================
File: backend/src/models/Modifier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Modifier extends BaseModel {
  static init(sequelize) {
    super.init({
      id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
      },
      orderItemId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false
      },
      price: {
        type: DataTypes.FLOAT,
        allowNull: false
      }
    }, {
      sequelize,
      modelName: 'Modifier'
    });
  }

  static associate(models) {
    this.belongsTo(models.OrderItem, { foreignKey: 'orderItemId' });
  }
}

module.exports = Modifier;

================
File: backend/src/models/Order.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Order extends BaseModel {
  static init(sequelize) {
    super.init({
      id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
      },
      clientId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      customerId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      total: {
        type: DataTypes.FLOAT,
        allowNull: false
      },
      status: {
        type: DataTypes.ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED'),
        allowNull: false
      }
    }, {
      sequelize,
      modelName: 'Order'
    });
  }

  static associate(models) {
    this.hasMany(models.OrderItem, { foreignKey: 'orderId' });
  }
}

module.exports = Order;

================
File: backend/src/models/OrderHistory.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class OrderHistory extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

OrderHistory.attributes = attributes = {
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Orders', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Users', key: 'id' }
  },
  status: {
    type: DataTypes.ENUM('pending', 'processing', 'completed', 'cancelled'),
    allowNull: false
  },
  note: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  timestamp: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
};

module.exports = (sequelize) => {
  OrderHistory.init(OrderHistory.attributes, {
    sequelize,
    modelName: 'OrderHistory',
    tableName: 'orderhistorys', // Adjust this if needed
  });
  return OrderHistory
};

================
File: backend/src/models/OrderItem.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class OrderItem extends BaseModel {
  static init(sequelize) {
    super.init({
      id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
      },
      orderId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      menuItemId: {
        type: DataTypes.UUID,
        allowNull: false
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false
      },
      quantity: {
        type: DataTypes.INTEGER,
        allowNull: false
      },
      price: {
        type: DataTypes.FLOAT,
        allowNull: false
      },
      specialInstructions: {
        type: DataTypes.TEXT,
        allowNull: true
      }
    }, {
      sequelize,
      modelName: 'OrderItem'
    });
  }

  static associate(models) {
    this.belongsTo(models.Order, { foreignKey: 'orderId' });
    this.belongsTo(models.MenuItem, { foreignKey: 'menuItemId' });
    this.hasMany(models.Modifier, { foreignKey: 'orderItemId' });
  }
}

module.exports = OrderItem;

================
File: backend/src/models/OrderProvider.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class OrderProvider extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

OrderProvider.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  providerId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Providers', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  apiKey: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiSecret: {
    type: DataTypes.STRING,
    allowNull: true
  },
  settings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  lastSyncDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  OrderProvider.init(OrderProvider.attributes, {
    sequelize,
    modelName: 'OrderProvider',
    tableName: 'orderproviders', // Adjust this if needed
  });
  return OrderProvider
};

================
File: backend/src/models/PaymentProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PaymentProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PaymentProfile.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  paymentType: {
    type: DataTypes.ENUM('credit_card', 'bank_account', 'paypal', 'other'),
    allowNull: false
  },
  isDefault: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  lastFour: {
    type: DataTypes.STRING(4),
    allowNull: false
  },
  expirationDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  tokenizedData: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  billingAddress: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PaymentProfile.init(PaymentProfile.attributes, {
    sequelize,
    modelName: 'PaymentProfile',
    tableName: 'paymentprofiles', // Adjust this if needed
  });
  return PaymentProfile
};

================
File: backend/src/models/Permission.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Permission extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Permission.attributes = attributes = {
  name: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  category: {
    type: DataTypes.STRING,
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  Permission.init(Permission.attributes, {
    sequelize,
    modelName: 'Permission',
    tableName: 'permissions', // Adjust this if needed
  });
  return Permission
};

================
File: backend/src/models/PosIntegration.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PosIntegration extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PosIntegration.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  posType: {
    type: DataTypes.STRING,
    allowNull: false
  },
  apiKey: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiSecret: {
    type: DataTypes.STRING,
    allowNull: true
  },
  accessToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  refreshToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  tokenExpiresAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  lastSyncDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  settings: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PosIntegration.init(PosIntegration.attributes, {
    sequelize,
    modelName: 'PosIntegration',
    tableName: 'posintegrations', // Adjust this if needed
  });
  return PosIntegration
};

================
File: backend/src/models/PosIntegrationErrorLog.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PosIntegrationErrorLog extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PosIntegrationErrorLog.attributes = attributes = {
  posIntegrationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'PosIntegrations', key: 'id' }
  },
  errorType: {
    type: DataTypes.STRING,
    allowNull: false
  },
  errorMessage: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  errorDetails: {
    type: DataTypes.JSON,
    allowNull: true
  },
  occurredAt: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  resolved: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  resolvedAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  resolutionNotes: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PosIntegrationErrorLog.init(PosIntegrationErrorLog.attributes, {
    sequelize,
    modelName: 'PosIntegrationErrorLog',
    tableName: 'posintegrationerrorlogs', // Adjust this if needed
  });
  return PosIntegrationErrorLog
};

================
File: backend/src/models/PosIntegrationMapping.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PosIntegrationMapping extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PosIntegrationMapping.attributes = attributes = {
  posIntegrationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'PosIntegrations', key: 'id' }
  },
  entityType: {
    type: DataTypes.STRING,
    allowNull: false
  },
  localId: {
    type: DataTypes.STRING,
    allowNull: false
  },
  externalId: {
    type: DataTypes.STRING,
    allowNull: false
  },
  mappingData: {
    type: DataTypes.JSON,
    allowNull: true
  },
  lastSyncDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PosIntegrationMapping.init(PosIntegrationMapping.attributes, {
    sequelize,
    modelName: 'PosIntegrationMapping',
    tableName: 'posintegrationmappings', // Adjust this if needed
  });
  return PosIntegrationMapping
};

================
File: backend/src/models/PosIntegrationSettings.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PosIntegrationSettings extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PosIntegrationSettings.attributes = attributes = {
  posIntegrationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'PosIntegrations', key: 'id' }
  },
  syncFrequency: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 60, // in minutes
    comment: 'How often to sync with POS system in minutes'
  },
  autoSync: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  syncItems: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  syncCategories: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  syncModifiers: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  syncOrders: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  customSettings: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PosIntegrationSettings.init(PosIntegrationSettings.attributes, {
    sequelize,
    modelName: 'PosIntegrationSettings',
    tableName: 'posintegrationsettingss', // Adjust this if needed
  });
  return PosIntegrationSettings
};

================
File: backend/src/models/PosProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PosProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PosProfile.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  posType: {
    type: DataTypes.ENUM('Toast', 'Square', 'Clover', 'Other'),
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  apiKey: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiSecret: {
    type: DataTypes.STRING,
    allowNull: true
  },
  accessToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  refreshToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  tokenExpiresAt: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PosProfile.init(PosProfile.attributes, {
    sequelize,
    modelName: 'PosProfile',
    tableName: 'posprofiles', // Adjust this if needed
  });
  return PosProfile
};

================
File: backend/src/models/PosProfileConfig.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PosProfileConfig extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PosProfileConfig.attributes = attributes = {
  posProfileId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'PosProfiles', key: 'id' }
  },
  syncFrequency: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 60, // in minutes
  },
  autoSync: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  menuSyncEnabled: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  orderSyncEnabled: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  customerSyncEnabled: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  customConfig: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PosProfileConfig.init(PosProfileConfig.attributes, {
    sequelize,
    modelName: 'PosProfileConfig',
    tableName: 'posprofileconfigs', // Adjust this if needed
  });
  return PosProfileConfig
};

================
File: backend/src/models/PosSettings.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class POSSettings extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

POSSettings.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  posType: {
    type: DataTypes.STRING,
    allowNull: false
  },
  apiEndpoint: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiKey: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiSecret: {
    type: DataTypes.STRING,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  settings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  lastSyncDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  POSSettings.init(POSSettings.attributes, {
    sequelize,
    modelName: 'POSSettings',
    tableName: 'possettingss', // Adjust this if needed
  });
  return POSSettings
};

================
File: backend/src/models/PricingOverride.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PricingOverride extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PricingOverride.attributes = attributes = {
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'MenuItems', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  reason: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  PricingOverride.init(PricingOverride.attributes, {
    sequelize,
    modelName: 'PricingOverride',
    tableName: 'pricingoverrides', // Adjust this if needed
  });
  return PricingOverride
};

================
File: backend/src/models/PricingUplift.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class PricingUplift extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

PricingUplift.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Locations', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  type: {
    type: DataTypes.ENUM('percentage', 'fixed'),
    allowNull: false
  },
  value: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  appliesTo: {
    type: DataTypes.ENUM('all', 'category', 'item'),
    allowNull: false
  },
  categoryId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Categories', key: 'id' }
  },
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'MenuItems', key: 'id' }
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  PricingUplift.init(PricingUplift.attributes, {
    sequelize,
    modelName: 'PricingUplift',
    tableName: 'pricinguplifts', // Adjust this if needed
  });
  return PricingUplift
};

================
File: backend/src/models/Product.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Product extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Product.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  categoryId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Categories', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  sku: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  cost: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  imageUrl: {
    type: DataTypes.STRING,
    allowNull: true
  },
  attributes: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Product.init(Product.attributes, {
    sequelize,
    modelName: 'Product',
    tableName: 'products', // Adjust this if needed
  });
  return Product
};

================
File: backend/src/models/Provider.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Provider extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Provider.attributes = attributes = {
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  type: {
    type: DataTypes.ENUM('delivery', 'pos', 'payment', 'other'),
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  apiEndpoint: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiVersion: {
    type: DataTypes.STRING,
    allowNull: true
  },
  supportContact: {
    type: DataTypes.STRING,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Provider.init(Provider.attributes, {
    sequelize,
    modelName: 'Provider',
    tableName: 'providers', // Adjust this if needed
  });
  return Provider
};

================
File: backend/src/models/ProviderIntegration.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ProviderIntegration extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ProviderIntegration.attributes = attributes = {
  providerId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Providers', key: 'id' }
  },
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  apiKey: {
    type: DataTypes.STRING,
    allowNull: true
  },
  apiSecret: {
    type: DataTypes.STRING,
    allowNull: true
  },
  accessToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  refreshToken: {
    type: DataTypes.STRING,
    allowNull: true
  },
  tokenExpiresAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  settings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  lastSyncDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ProviderIntegration.init(ProviderIntegration.attributes, {
    sequelize,
    modelName: 'ProviderIntegration',
    tableName: 'providerintegrations', // Adjust this if needed
  });
  return ProviderIntegration
};

================
File: backend/src/models/ProviderPricing.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ProviderPricing extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ProviderPricing.attributes = attributes = {
  providerId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Providers', key: 'id' }
  },
  planName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  billingCycle: {
    type: DataTypes.ENUM('monthly', 'yearly', 'per-transaction'),
    allowNull: false
  },
  features: {
    type: DataTypes.JSON,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ProviderPricing.init(ProviderPricing.attributes, {
    sequelize,
    modelName: 'ProviderPricing',
    tableName: 'providerpricings', // Adjust this if needed
  });
  return ProviderPricing
};

================
File: backend/src/models/ProviderProfile.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ProviderProfile extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ProviderProfile.attributes = attributes = {
  providerId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Providers', key: 'id' }
  },
  logo: {
    type: DataTypes.STRING,
    allowNull: true
  },
  website: {
    type: DataTypes.STRING,
    allowNull: true
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  supportEmail: {
    type: DataTypes.STRING,
    allowNull: true
  },
  supportPhone: {
    type: DataTypes.STRING,
    allowNull: true
  },
  technicalContactName: {
    type: DataTypes.STRING,
    allowNull: true
  },
  technicalContactEmail: {
    type: DataTypes.STRING,
    allowNull: true
  },
  serviceAreas: {
    type: DataTypes.JSON,
    allowNull: true
  },
  features: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ProviderProfile.init(ProviderProfile.attributes, {
    sequelize,
    modelName: 'ProviderProfile',
    tableName: 'providerprofiles', // Adjust this if needed
  });
  return ProviderProfile
};

================
File: backend/src/models/Refund.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Refund extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Refund.attributes = attributes = {
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Orders', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  reason: {
    type: DataTypes.TEXT,
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('pending', 'processed', 'rejected'),
    allowNull: false,
    defaultValue: 'pending'
  },
  processedBy: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Users', key: 'id' }
  },
  processedAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  refundMethod: {
    type: DataTypes.ENUM('original_payment', 'store_credit', 'bank_transfer'),
    allowNull: false
  }
};

module.exports = (sequelize) => {
  Refund.init(Refund.attributes, {
    sequelize,
    modelName: 'Refund',
    tableName: 'refunds', // Adjust this if needed
  });
  return Refund
};

================
File: backend/src/models/Report.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Report extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Report.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  type: {
    type: DataTypes.ENUM('sales', 'inventory', 'customer', 'financial', 'custom'),
    allowNull: false
  },
  parameters: {
    type: DataTypes.JSON,
    allowNull: true
  },
  schedule: {
    type: DataTypes.JSON,
    allowNull: true
  },
  lastRunAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  createdBy: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  Report.init(Report.attributes, {
    sequelize,
    modelName: 'Report',
    tableName: 'reports', // Adjust this if needed
  });
  return Report
};

================
File: backend/src/models/Review.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Review extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Review.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Orders', key: 'id' }
  },
  menuItemId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'MenuItems', key: 'id' }
  },
  rating: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 1,
      max: 5
    }
  },
  comment: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isVerified: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  status: {
    type: DataTypes.ENUM('pending', 'approved', 'rejected'),
    allowNull: false,
    defaultValue: 'pending'
  }
};

module.exports = (sequelize) => {
  Review.init(Review.attributes, {
    sequelize,
    modelName: 'Review',
    tableName: 'reviews', // Adjust this if needed
  });
  return Review
};

================
File: backend/src/models/Reward.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Reward extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Reward.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  type: {
    type: DataTypes.ENUM('discount', 'freeItem', 'points', 'other'),
    allowNull: false
  },
  value: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  code: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  usageLimit: {
    type: DataTypes.INTEGER,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Reward.init(Reward.attributes, {
    sequelize,
    modelName: 'Reward',
    tableName: 'rewards', // Adjust this if needed
  });
  return Reward
};

================
File: backend/src/models/RewardSchedule.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class RewardSchedule extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

RewardSchedule.attributes = attributes = {
  rewardId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Rewards', key: 'id' }
  },
  dayOfWeek: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 0,
      max: 6
    }
  },
  startTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  endTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  RewardSchedule.init(RewardSchedule.attributes, {
    sequelize,
    modelName: 'RewardSchedule',
    tableName: 'rewardschedules', // Adjust this if needed
  });
  return RewardSchedule
};

================
File: backend/src/models/Role.js
================
const BaseModel = require('./BaseModel');

class Role extends BaseModel {
  static associate(models) {
    this.belongsToMany(models.RoleTemplate, {
      through: models.RoleTemplateAssignments,
      foreignKey: 'roleId',
      otherKey: 'roleTemplateId',
      as: 'AssignedTemplates'
    });
  }

  static modelAttributes(DataTypes) {
    return {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
      description: {
        type: DataTypes.STRING,
        allowNull: true,
      },
    };
  }
}

module.exports = Role;

================
File: backend/src/models/RolePermission.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class RolePermission extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

RolePermission.attributes = attributes = {
  roleId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Roles', key: 'id' }
  },
  permissionId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Permissions', key: 'id' }
  }
};

module.exports = (sequelize) => {
  RolePermission.init(RolePermission.attributes, {
    sequelize,
    modelName: 'RolePermission',
    tableName: 'rolepermissions', // Adjust this if needed
  });
  return RolePermission
};

================
File: backend/src/models/RolePermissions.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class RolePermissions extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

RolePermissions.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  RolePermissions.init(RolePermissions.attributes, {
    sequelize,
    modelName: 'RolePermissions',
    tableName: 'rolepermissionss', // Adjust this if needed
  });
  return RolePermissions
};

================
File: backend/src/models/RoleTemplate.js
================
const BaseModel = require('./BaseModel');

class RoleTemplate extends BaseModel {
  static associate(models) {
    this.belongsToMany(models.Role, {
      through: models.RoleTemplateAssignments, // Make sure this model exists
      foreignKey: 'roleTemplateId',
      otherKey: 'roleId',
      as: 'AssignedRoles'
    });
  }

  static modelAttributes(DataTypes) {
    return {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
      description: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      isEditable: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
      },
      isPredefined: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
      },
    };
  }
}

module.exports = RoleTemplate;

================
File: backend/src/models/RoleTemplateAssignments.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class RoleTemplateAssignments extends BaseModel {
  static modelAttributes(DataTypes) {
    return {
      roleId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: 'Roles',
          key: 'id'
        }
      },
      roleTemplateId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: 'RoleTemplates',
          key: 'id'
        }
      }
    };
  }
}

module.exports = RoleTemplateAssignments;

================
File: backend/src/models/SalesAnalytics.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class SalesAnalytics extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

SalesAnalytics.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  totalSales: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  orderCount: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  averageOrderValue: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false,
    defaultValue: 0
  },
  topSellingItems: {
    type: DataTypes.JSON,
    allowNull: true
  },
  salesByHour: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  SalesAnalytics.init(SalesAnalytics.attributes, {
    sequelize,
    modelName: 'SalesAnalytics',
    tableName: 'salesanalyticss', // Adjust this if needed
  });
  return SalesAnalytics
};

================
File: backend/src/models/SalesReport.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class SalesReport extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

SalesReport.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Locations', key: 'id' }
  },
  reportDate: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  reportType: {
    type: DataTypes.ENUM('daily', 'weekly', 'monthly', 'yearly'),
    allowNull: false
  },
  totalSales: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  totalOrders: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  averageOrderValue: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  topSellingItems: {
    type: DataTypes.JSON,
    allowNull: true
  },
  salesByCategory: {
    type: DataTypes.JSON,
    allowNull: true
  },
  salesByHour: {
    type: DataTypes.JSON,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  SalesReport.init(SalesReport.attributes, {
    sequelize,
    modelName: 'SalesReport',
    tableName: 'salesreports', // Adjust this if needed
  });
  return SalesReport
};

================
File: backend/src/models/ScheduledOrder.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ScheduledOrder extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ScheduledOrder.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  orderId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Orders', key: 'id' }
  },
  scheduledDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('pending', 'processed', 'cancelled'),
    allowNull: false,
    defaultValue: 'pending'
  },
  recurrence: {
    type: DataTypes.JSON,
    allowNull: true
  },
  notes: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ScheduledOrder.init(ScheduledOrder.attributes, {
    sequelize,
    modelName: 'ScheduledOrder',
    tableName: 'scheduledorders', // Adjust this if needed
  });
  return ScheduledOrder
};

================
File: backend/src/models/ServiceFee.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class ServiceFee extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

ServiceFee.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  type: {
    type: DataTypes.ENUM('fixed', 'percentage'),
    allowNull: false
  },
  value: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  applicableOrderTypes: {
    type: DataTypes.JSON,
    allowNull: true
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  ServiceFee.init(ServiceFee.attributes, {
    sequelize,
    modelName: 'ServiceFee',
    tableName: 'servicefees', // Adjust this if needed
  });
  return ServiceFee
};

================
File: backend/src/models/SizeModifier.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class SizeModifier extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

SizeModifier.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  SizeModifier.init(SizeModifier.attributes, {
    sequelize,
    modelName: 'SizeModifier',
    tableName: 'sizemodifiers', // Adjust this if needed
  });
  return SizeModifier
};

================
File: backend/src/models/Staff.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Staff extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Staff.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  employeeId: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true
  },
  position: {
    type: DataTypes.STRING,
    allowNull: false
  },
  hireDate: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  hourlyRate: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: true
  },
  notes: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Staff.init(Staff.attributes, {
    sequelize,
    modelName: 'Staff',
    tableName: 'staffs', // Adjust this if needed
  });
  return Staff
};

================
File: backend/src/models/StaffRole.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class StaffRole extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

StaffRole.attributes = attributes = {
  staffId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Staff', key: 'id' }
  },
  roleId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Roles', key: 'id' }
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  startDate: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATEONLY,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  StaffRole.init(StaffRole.attributes, {
    sequelize,
    modelName: 'StaffRole',
    tableName: 'staffroles', // Adjust this if needed
  });
  return StaffRole
};

================
File: backend/src/models/StaffSchedule.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class StaffSchedule extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

StaffSchedule.attributes = attributes = {
  staffId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Staff', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Locations', key: 'id' }
  },
  dayOfWeek: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 0,
      max: 6
    }
  },
  startTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  endTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  isRecurring: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  date: {
    type: DataTypes.DATEONLY,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  StaffSchedule.init(StaffSchedule.attributes, {
    sequelize,
    modelName: 'StaffSchedule',
    tableName: 'staffschedules', // Adjust this if needed
  });
  return StaffSchedule
};

================
File: backend/src/models/Subscription.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Subscription extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Subscription.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  subscriptionPlanId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'SubscriptionPlans', key: 'id' }
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  status: {
    type: DataTypes.ENUM('active', 'cancelled', 'expired', 'suspended'),
    allowNull: false,
    defaultValue: 'active'
  },
  cancelledAt: {
    type: DataTypes.DATE,
    allowNull: true
  },
  cancelReason: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  currentPeriodStart: {
    type: DataTypes.DATE,
    allowNull: false
  },
  currentPeriodEnd: {
    type: DataTypes.DATE,
    allowNull: false
  },
  lastBillingDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  nextBillingDate: {
    type: DataTypes.DATE,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  Subscription.init(Subscription.attributes, {
    sequelize,
    modelName: 'Subscription',
    tableName: 'subscriptions', // Adjust this if needed
  });
  return Subscription
};

================
File: backend/src/models/SubscriptionPlan.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class SubscriptionPlan extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

SubscriptionPlan.attributes = attributes = {
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  price: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  billingCycle: {
    type: DataTypes.ENUM('monthly', 'quarterly', 'yearly'),
    allowNull: false
  },
  features: {
    type: DataTypes.JSON,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  trialPeriodDays: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  maxLocations: {
    type: DataTypes.INTEGER,
    allowNull: true
  },
  maxUsers: {
    type: DataTypes.INTEGER,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  SubscriptionPlan.init(SubscriptionPlan.attributes, {
    sequelize,
    modelName: 'SubscriptionPlan',
    tableName: 'subscriptionplans', // Adjust this if needed
  });
  return SubscriptionPlan
};

================
File: backend/src/models/Tag.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Tag extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Tag.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  type: {
    type: DataTypes.ENUM('dietary', 'allergen', 'cuisine', 'custom'),
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  Tag.init(Tag.attributes, {
    sequelize,
    modelName: 'Tag',
    tableName: 'tags', // Adjust this if needed
  });
  return Tag
};

================
File: backend/src/models/Tax.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Tax extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Tax.attributes = attributes = {
  clientId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Clients', key: 'id' }
  },
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  },
  type: {
    type: DataTypes.ENUM('sales', 'vat', 'service', 'other'),
    allowNull: false
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  Tax.init(Tax.attributes, {
    sequelize,
    modelName: 'Tax',
    tableName: 'taxs', // Adjust this if needed
  });
  return Tax
};

================
File: backend/src/models/TaxRate.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class TaxRate extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

TaxRate.attributes = attributes = {
  taxId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Taxes', key: 'id' }
  },
  locationId: {
    type: DataTypes.INTEGER,
    allowNull: true,
    references: { model: 'Locations', key: 'id' }
  },
  rate: {
    type: DataTypes.DECIMAL(5, 2),
    allowNull: false
  },
  startDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  }
};

module.exports = (sequelize) => {
  TaxRate.init(TaxRate.attributes, {
    sequelize,
    modelName: 'TaxRate',
    tableName: 'taxrates', // Adjust this if needed
  });
  return TaxRate
};

================
File: backend/src/models/Tenant.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Tenant extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Tenant.attributes = attributes = {
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  subdomain: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  settings: {
    type: DataTypes.JSON,
    allowNull: true
  },
  plan: {
    type: DataTypes.STRING,
    allowNull: false
  },
  billingEmail: {
    type: DataTypes.STRING,
    allowNull: false,
    validate: {
      isEmail: true
    }
  },
  technicalContactEmail: {
    type: DataTypes.STRING,
    allowNull: true,
    validate: {
      isEmail: true
    }
  }
};

module.exports = (sequelize) => {
  Tenant.init(Tenant.attributes, {
    sequelize,
    modelName: 'Tenant',
    tableName: 'tenants', // Adjust this if needed
  });
  return Tenant
};

================
File: backend/src/models/TimeSlot.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class TimeSlot extends BaseModel {
  static associate(models) {
    // Add associations here if needed
    // For example:
  }
}

TimeSlot.attributes = attributes = {
  startTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  endTime: {
    type: DataTypes.TIME,
    allowNull: false
  },
  dayOfWeek: {
    type: DataTypes.INTEGER,
    allowNull: false,
    validate: {
      min: 0,
      max: 6
    }
  },
  isAvailable: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  capacity: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 1
  }
};

module.exports = (sequelize) => {
  TimeSlot.init(TimeSlot.attributes, {
    sequelize,
    modelName: 'TimeSlot',
    tableName: 'timeslots', // Adjust this if needed
  });
  return TimeSlot
};

================
File: backend/src/models/Tip.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Tip extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Tip.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  Tip.init(Tip.attributes, {
    sequelize,
    modelName: 'Tip',
    tableName: 'tips', // Adjust this if needed
  });
  return Tip
};

================
File: backend/src/models/TipConfiguration.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class TipConfiguration extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

TipConfiguration.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  TipConfiguration.init(TipConfiguration.attributes, {
    sequelize,
    modelName: 'TipConfiguration',
    tableName: 'tipconfigurations', // Adjust this if needed
  });
  return TipConfiguration
};

================
File: backend/src/models/TrackingPixel.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class TrackingPixel extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

TrackingPixel.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  TrackingPixel.init(TrackingPixel.attributes, {
    sequelize,
    modelName: 'TrackingPixel',
    tableName: 'trackingpixels', // Adjust this if needed
  });
  return TrackingPixel
};

================
File: backend/src/models/Transaction.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Transaction extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Transaction.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  Transaction.init(Transaction.attributes, {
    sequelize,
    modelName: 'Transaction',
    tableName: 'transactions', // Adjust this if needed
  });
  return Transaction
};

================
File: backend/src/models/User.js
================
const { DataTypes } = require('sequelize');
const sequelize = require('../db');

const User = sequelize.define('User', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true,
    },
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  role: {
    type: DataTypes.ENUM('GUEST', 'CLIENT_ADMIN', 'GLOBAL_ADMIN', 'EMPLOYEE'),
    allowNull: false,
    defaultValue: 'GUEST',
  },
  clientId: {
    type: DataTypes.UUID,
    allowNull: true,
  },
});

module.exports = User;

================
File: backend/src/models/UserRole.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class UserRole extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

UserRole.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  UserRole.init(UserRole.attributes, {
    sequelize,
    modelName: 'UserRole',
    tableName: 'userroles', // Adjust this if needed
  });
  return UserRole
};

================
File: backend/src/models/Wallet.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class Wallet extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

Wallet.attributes = {
  // Define attributes here
};

module.exports = (sequelize) => {
  Wallet.init(Wallet.attributes, {
    sequelize,
    modelName: 'Wallet',
    tableName: 'wallets', // Adjust this if needed
  });
  return Wallet
};

================
File: backend/src/models/WalletDrop.js
================
const { DataTypes } = require('sequelize');
const BaseModel = require('./BaseModel');

class WalletDrop extends BaseModel {
  static associate(models) {
    // Define associations here
  }
}

WalletDrop.attributes = attributes = {
  userId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Users', key: 'id' }
  },
  walletId: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: { model: 'Wallets', key: 'id' }
  },
  amount: {
    type: DataTypes.DECIMAL(10, 2),
    allowNull: false
  },
  status: {
    type: DataTypes.ENUM('pending', 'completed', 'failed'),
    allowNull: false,
    defaultValue: 'pending'
  },
  dropDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  expirationDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true
  }
};

module.exports = (sequelize) => {
  WalletDrop.init(WalletDrop.attributes, {
    sequelize,
    modelName: 'WalletDrop',
    tableName: 'walletdrops', // Adjust this if needed
  });
  return WalletDrop
};

================
File: backend/src/posConnector/posConfigs.js
================
const posConfigs = {
  brink: {
    format: 'XML',
    apiEndpoint: 'https://api.brinkpos.net/orders',
    inventoryEndpoint: 'https://api.brinkpos.net/inventory',
    contentType: 'application/xml',
  },
  toast: {
    format: 'JSON',
    apiEndpoint: 'https://api.toasttab.com/orders',
    inventoryEndpoint: 'https://api.toasttab.com/inventory',
    contentType: 'application/json',
  },
  revel: {
    format: 'JSON',
    apiEndpoint: 'https://api.revelsystems.com/orders',
    inventoryEndpoint: 'https://api.revelsystems.com/inventory',
    contentType: 'application/json',
  },
  square: {
    format: 'JSON',
    apiEndpoint: 'https://connect.squareup.com/v2/orders',
    inventoryEndpoint: 'https://connect.squareup.com/v2/inventory',
    contentType: 'application/json',
  },
};

module.exports = posConfigs;

================
File: backend/src/posConnector/posConnector.js
================
const axios = require('axios');
const posConfigs = require('./posConfigs');
const logger = require('../services/logger');

class POSConnectorService {
  constructor(posConfig) {
    this.posConfig = posConfig;
    this.defaultConfig = posConfigs[posConfig.provider] || {};
  }

  syncMenus(menuData) {
    if (this.posConfig.format === 'JSON') {
      return this.syncToJSONPOS(menuData);
    } else if (this.posConfig.format === 'XML') {
      return this.syncToXMLPOS(menuData);
    }
  }

  syncToJSONPOS(menuData) {
    return {
      menuName: menuData.name,
      items: menuData.menuItems.map(item => ({
        itemName: item.name,
        price: item.basePrice,
        pointsPrice: item.pointsPrice || null,
        modifiers: item.modifiers,
      })),
    };
  }

  syncToXMLPOS(menuData) {
    return `<Menu><Name>${menuData.name}</Name></Menu>`;
  }

  async sendOrderToPOS(orderData) {
    try {
      const endpoint = this.posConfig.apiEndpoint || this.defaultConfig.apiEndpoint;
      const response = await axios.post(endpoint, orderData, {
        headers: { 'Content-Type': this.posConfig.contentType || this.defaultConfig.contentType },
      });
      logger.info(`Order sent successfully to POS: ${this.posConfig.name}`);
      return response.data;
    } catch (error) {
      logger.error(`Error sending order to POS ${this.posConfig.name}: ${error.message}`);
      throw error;
    }
  }

  async syncInventory(inventoryData) {
    try {
      const endpoint = this.posConfig.inventoryEndpoint || this.defaultConfig.inventoryEndpoint;
      const response = await axios.post(endpoint, inventoryData, {
        headers: { 'Content-Type': this.posConfig.contentType || this.defaultConfig.contentType },
      });
      logger.info(`Inventory synced successfully with POS: ${this.posConfig.name}`);
      return response.data;
    } catch (error) {
      logger.error(`Error syncing inventory with POS ${this.posConfig.name}: ${error.message}`);
      throw error;
    }
  }
}

module.exports = POSConnectorService;

================
File: backend/src/posConnector/posConnectorService.js
================
const axios = require('axios');
const TaxService = require('../services/taxService');
const logger = require('../services/logger');

class POSConnectorService {
  constructor(posConfig) {
    this.posConfig = posConfig;
  }

  async syncMenus(menuData) {
    try {
      const formattedData = this.posConfig.format === 'JSON' 
        ? this.syncToJSONPOS(menuData) 
        : this.syncToXMLPOS(menuData);

      const response = await this.makeRequest('post', this.posConfig.apiEndpoint, formattedData);
      logger.info(`Menu synced successfully with POS: ${this.posConfig.name}`);
      return response.data;
    } catch (error) {
      this.handleError('syncing menu', error);
    }
  }

  syncToJSONPOS(menuData) {
    return {
      menuName: menuData.name,
      items: menuData.menuItems.map(item => ({
        itemName: item.name,
        price: item.basePrice,
        pointsPrice: item.pointsPrice || null,
        modifiers: item.modifiers,
      })),
    };
  }

  syncToXMLPOS(menuData) {
    return `<Menu><Name>${menuData.name}</Name></Menu>`;
  }

  async sendOrderToPOS(orderData) {
    try {
      const response = await this.makeRequest('post', this.posConfig.apiEndpoint, orderData);
      logger.info(`Order sent successfully to POS: ${this.posConfig.name}`);
      return response.data;
    } catch (error) {
      this.handleError('sending order', error);
    }
  }

  async syncInventory(inventoryData) {
    try {
      const response = await this.makeRequest('post', this.posConfig.inventoryEndpoint, inventoryData);
      logger.info(`Inventory synced successfully with POS: ${this.posConfig.name}`);
      return response.data;
    } catch (error) {
      this.handleError('syncing inventory', error);
    }
  }

  async syncTaxRates(locationId, provider) {
    try {
      const taxDetails = await TaxService.getApplicableTax(locationId, provider);
      const response = await this.makeRequest('post', this.posConfig.taxEndpoint, taxDetails);
      logger.info(`Tax rates synced successfully with POS: ${this.posConfig.name}`);
      return response.data;
    } catch (error) {
      this.handleError('syncing tax rates', error);
    }
  }

  async makeRequest(method, url, data) {
    return axios({
      method,
      url,
      data,
      headers: { 'Content-Type': this.posConfig.contentType },
    });
  }

  handleError(operation, error) {
    logger.error(`Error ${operation} with POS ${this.posConfig.name}: ${error.message}`);
    throw error;
  }
}

module.exports = POSConnectorService;

================
File: backend/src/posConnector/posProfiles.js
================
const posConfigs = require('./posConfigs');

const posProfiles = {
  location1: {
    posSystem: 'brink',
    locationId: 1,
    posConfig: posConfigs.brink,
  },
  location2: {
    posSystem: 'toast',
    locationId: 2,
    posConfig: posConfigs.toast,
  },
  location3: {
    posSystem: 'revel',
    locationId: 3,
    posConfig: posConfigs.revel,
  },
  location4: {
    posSystem: 'square',
    locationId: 4,
    posConfig: posConfigs.square,
  },
  // Add more locations as needed
};

module.exports = posProfiles;

================
File: backend/src/routes/abTestResultRoutes.js
================
const express = require('express');
const router = express.Router();
const abTestResultController = require('../controllers/abTestResultController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), abTestResultController.getAllABTestResults);
router.post('/', authorizeRoles(1, 2), abTestResultController.createABTestResult);
router.get('/:id', authorizeRoles(1, 2), abTestResultController.getABTestResult);
router.put('/:id', authorizeRoles(1, 2), abTestResultController.updateABTestResult);
router.delete('/:id', authorizeRoles(1, 2), abTestResultController.deleteABTestResult);

module.exports = router;

================
File: backend/src/routes/abTestRoutes.js
================
const express = require('express');
const { body } = require('express-validator');
const ABTestController = require('../controllers/abTestController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

router.use(authenticate);

router.post('/', 
  authorize(['admin']),
  [
    body('name').notEmpty().withMessage('Name is required'),
    // Add other validation rules as needed
  ],
  ABTestController.createABTest
);

router.get('/:id', authorize(['admin']), ABTestController.getABTest);
router.put('/:id', authorize(['admin']), ABTestController.updateABTest);
router.delete('/:id', authorize(['admin']), ABTestController.deleteABTest);
router.get('/:id/results', authorize(['admin']), ABTestController.getABTestResults);
router.post('/:id/start', authorize(['admin']), ABTestController.startABTest);
router.post('/:id/stop', authorize(['admin']), ABTestController.stopABTest);

module.exports = router;

================
File: backend/src/routes/adminRoutes.js
================
const express = require('express');
const adminController = require('../controllers/adminController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');
const { body } = require('express-validator');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Apply authorization middleware to all routes
router.use(authorize(['clientAdmin', 'superAdmin']));

// Dashboard data
router.get('/dashboard', adminController.getDashboardData);

// User management
router.get('/users', adminController.getUsers);
router.post('/users', [
  body('username').isString().notEmpty(),
  body('email').isEmail(),
  body('password').isLength({ min: 6 }),
  body('role').isIn(['user', 'admin', 'clientAdmin', 'superAdmin'])
], adminController.createUser);
router.put('/users/:id', [
  body('username').optional().isString(),
  body('email').optional().isEmail(),
  body('password').optional().isLength({ min: 6 }),
  body('role').optional().isIn(['user', 'admin', 'clientAdmin', 'superAdmin'])
], adminController.updateUser);
router.delete('/users/:id', adminController.deleteUser);

// System logs
router.get('/logs', adminController.getSystemLogs);

// System health
router.get('/health', adminController.getSystemHealth);

// Database operations
router.post('/backup', adminController.backupDatabase);
router.post('/restore', [
  body('backupId').isString().notEmpty()
], adminController.restoreDatabase);

module.exports = router;

================
File: backend/src/routes/analytics.js
================
const express = require 'express';
const { getOrderAnalytics, getGuestAnalytics } = require '../controllers/analyticsController';

const router = express.Router();

router.get('/orders', getOrderAnalytics);
router.get('/guests', getGuestAnalytics);

module.exports = router;

================
File: backend/src/routes/analyticsRoutes.js
================
const express = require('express');
const analyticsController = require('../controllers/analyticsController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Use authenticate middleware for all routes
router.use(authenticate);

// Define routes
router.get('/order', authorize(['Admin']), analyticsController.getOrderAnalytics);
router.get('/guest', authorize(['Admin']), analyticsController.getGuestAnalytics);
router.get('/revenue', authorize(['Admin']), analyticsController.getRevenue);
router.get('/customers', authorize(['Admin']), analyticsController.getCustomers);
router.get('/realtime', authorize(['Admin']), analyticsController.getRealtimeMetricsController);

module.exports = router;

================
File: backend/src/routes/assetRoutes.js
================
const express = require('express');
const path = require('path');
const multer = require('multer');
const AssetController = require('../controllers/assetController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

const upload = multer({ storage: multer.memoryStorage() });

router.use('/uploads', express.static(path.join(__dirname, '..', '..', 'uploads')));

router.use(authenticate);

router.get('/', authorize(['admin', 'manager']), AssetController.getAllAssets);
router.get('/:id', authorize(['admin', 'manager']), AssetController.getAsset);
router.post('/upload', authorize(['admin', 'manager']), upload.single('file'), AssetController.uploadAsset);
router.put('/:id', authorize(['admin', 'manager']), AssetController.updateAsset);
router.delete('/:id', authorize(['admin']), AssetController.deleteAsset);

module.exports = router;

================
File: backend/src/routes/auth.js
================
const express = require 'express';
const { login, logout, refreshToken } = require '../controllers/authController';
const { authenticate } = require '../middleware/auth';

const router = express.Router();

router.post('/login', login);
router.post('/logout', authenticate, logout);
router.post('/refresh-token', refreshToken);

module.exports = router;

================
File: backend/src/routes/authRoutes.js
================
const express = require('express');
const authController = require('../controllers/authController');

const router = express.Router();

router.post('/login', authController.login);
router.post('/register', authController.register);
router.post('/logout', authController.logout);
router.get('/user', authController.getUser);

module.exports = router;

================
File: backend/src/routes/brandingProfileRoutes.js
================
const express = require('express');
const router = express.Router();
const brandingProfileController = require('../controllers/brandingProfileController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), brandingProfileController.getBrandingProfile);
router.post('/', authorizeRoles(1, 2), brandingProfileController.createBrandingProfile);
router.put('/', authorizeRoles(1, 2), brandingProfileController.updateBrandingProfile);
router.delete('/', authorizeRoles(1, 2), brandingProfileController.deleteBrandingProfile);

module.exports = router;

================
File: backend/src/routes/brandingRoutes.js
================
const express = require('express');
const brandingController = require('../controllers/brandingController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

router.get('/client/:clientId', authenticate, authorize(['Super Admin', 'Admin']), brandingController.getBrandingProfiles);
router.get('/:id', authenticate, authorize(['Super Admin', 'Admin']), brandingController.getBrandingProfileById);
router.post('/', authenticate, authorize(['Super Admin', 'Admin']), brandingController.createBrandingProfile);
router.put('/:id', authenticate, authorize(['Super Admin', 'Admin']), brandingController.updateBrandingProfile);
router.delete('/:id', authenticate, authorize(['Super Admin']), brandingController.deleteBrandingProfile);

module.exports = router;

================
File: backend/src/routes/campaignResultRoutes.js
================
const express = require('express');
const campaignResultController = require('../controllers/campaignResultController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Apply authorization middleware to all routes
router.use(authorize(['admin', 'manager']));

// Get all campaign results
router.get('/', campaignResultController.getAllCampaignResults);

// Get a specific campaign result
router.get('/:id', campaignResultController.getCampaignResultById);

// Create a new campaign result
router.post('/', campaignResultController.createCampaignResult);

// Update a campaign result
router.put('/:id', campaignResultController.updateCampaignResult);

// Delete a campaign result
router.delete('/:id', campaignResultController.deleteCampaignResult);

module.exports = router;

================
File: backend/src/routes/campaignStepRoutes.js
================
const express = require('express');
const router = express.Router();
const campaignStepController = require('../controllers/campaignStepController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), campaignStepController.getAllCampaignSteps);
router.post('/', authorizeRoles(1, 2), campaignStepController.createCampaignStep);
router.get('/:id', authorizeRoles(1, 2), campaignStepController.getCampaignStep);
router.put('/:id', authorizeRoles(1, 2), campaignStepController.updateCampaignStep);
router.delete('/:id', authorizeRoles(1, 2), campaignStepController.deleteCampaignStep);

module.exports = router;

================
File: backend/src/routes/categoryRoutes.js
================
const express = require('express');
const categoryController = require('../controllers/categoryController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all categories
router.get('/', authorize(['admin', 'manager']), categoryController.getAllCategories);

// Get a specific category
router.get('/:id', authorize(['admin', 'manager']), categoryController.getCategoryById);

// Create a new category
router.post('/', authorize(['admin']), categoryController.createCategory);

// Update a category
router.put('/:id', authorize(['admin']), categoryController.updateCategory);

// Delete a category
router.delete('/:id', authorize(['admin']), categoryController.deleteCategory);

module.exports = router;

================
File: backend/src/routes/cateringAdminRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringAdminController = require('../controllers/cateringAdminController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringAdminController.getAllCateringAdmins);
router.post('/', authorizeRoles(1, 2), cateringAdminController.createCateringAdmin);
router.get('/:id', authorizeRoles(1, 2), cateringAdminController.getCateringAdmin);
router.put('/:id', authorizeRoles(1, 2), cateringAdminController.updateCateringAdmin);
router.delete('/:id', authorizeRoles(1, 2), cateringAdminController.deleteCateringAdmin);

module.exports = router;

================
File: backend/src/routes/cateringMenuItemRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringMenuItemController = require('../controllers/cateringMenuItemController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringMenuItemController.getAllCateringMenuItems);
router.post('/', authorizeRoles(1, 2), cateringMenuItemController.createCateringMenuItem);
router.get('/:id', authorizeRoles(1, 2), cateringMenuItemController.getCateringMenuItem);
router.put('/:id', authorizeRoles(1, 2), cateringMenuItemController.updateCateringMenuItem);
router.delete('/:id', authorizeRoles(1, 2), cateringMenuItemController.deleteCateringMenuItem);

module.exports = router;

================
File: backend/src/routes/cateringMenuRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringMenuController = require('../controllers/cateringMenuController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringMenuController.getAllCateringMenus);
router.post('/', authorizeRoles(1, 2), cateringMenuController.createCateringMenu);
router.get('/:id', authorizeRoles(1, 2), cateringMenuController.getCateringMenu);
router.put('/:id', authorizeRoles(1, 2), cateringMenuController.updateCateringMenu);
router.delete('/:id', authorizeRoles(1, 2), cateringMenuController.deleteCateringMenu);

module.exports = router;

================
File: backend/src/routes/cateringOrderAssignmentsRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringOrderAssignmentsController = require('../controllers/cateringOrderAssignmentsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringOrderAssignmentsController.getAllAssignments);
router.post('/', authorizeRoles(1, 2), cateringOrderAssignmentsController.createAssignment);
router.get('/:id', authorizeRoles(1, 2), cateringOrderAssignmentsController.getAssignment);
router.put('/:id', authorizeRoles(1, 2), cateringOrderAssignmentsController.updateAssignment);
router.delete('/:id', authorizeRoles(1, 2), cateringOrderAssignmentsController.deleteAssignment);

module.exports = router;

================
File: backend/src/routes/cateringOrderCustomizationRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringOrderCustomizationController = require('../controllers/cateringOrderCustomizationController');

// GET all customizations
router.get('/', cateringOrderCustomizationController.getAllCustomizations);

// GET a single customization by ID
router.get('/:id', cateringOrderCustomizationController.getCustomizationById);

// POST a new customization
router.post('/', cateringOrderCustomizationController.createCustomization);

// PUT update an existing customization
router.put('/:id', cateringOrderCustomizationController.updateCustomization);

// DELETE a customization
router.delete('/:id', cateringOrderCustomizationController.deleteCustomization);

module.exports = router;

================
File: backend/src/routes/cateringOrderFeesRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringOrderFeesController = require('../controllers/cateringOrderFeesController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringOrderFeesController.getAllFees);
router.post('/', authorizeRoles(1, 2), cateringOrderFeesController.createFee);
router.get('/:id', authorizeRoles(1, 2), cateringOrderFeesController.getFee);
router.put('/:id', authorizeRoles(1, 2), cateringOrderFeesController.updateFee);
router.delete('/:id', authorizeRoles(1, 2), cateringOrderFeesController.deleteFee);

module.exports = router;

================
File: backend/src/routes/cateringOrderItemRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringOrderItemController = require('../controllers/cateringOrderItemController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringOrderItemController.getAllItems);
router.post('/', authorizeRoles(1, 2), cateringOrderItemController.createItem);
router.get('/:id', authorizeRoles(1, 2), cateringOrderItemController.getItem);
router.put('/:id', authorizeRoles(1, 2), cateringOrderItemController.updateItem);
router.delete('/:id', authorizeRoles(1, 2), cateringOrderItemController.deleteItem);

module.exports = router;

================
File: backend/src/routes/cateringOrderLocationRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringOrderLocationController = require('../controllers/cateringOrderLocationController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringOrderLocationController.getAllLocations);
router.post('/', authorizeRoles(1, 2), cateringOrderLocationController.createLocation);
router.get('/:id', authorizeRoles(1, 2), cateringOrderLocationController.getLocation);
router.put('/:id', authorizeRoles(1, 2), cateringOrderLocationController.updateLocation);
router.delete('/:id', authorizeRoles(1, 2), cateringOrderLocationController.deleteLocation);

module.exports = router;

================
File: backend/src/routes/cateringOrderModifierRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringOrderModifierController = require('../controllers/cateringOrderModifierController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringOrderModifierController.getAllModifiers);
router.post('/', authorizeRoles(1, 2), cateringOrderModifierController.createModifier);
router.get('/:id', authorizeRoles(1, 2), cateringOrderModifierController.getModifier);
router.put('/:id', authorizeRoles(1, 2), cateringOrderModifierController.updateModifier);
router.delete('/:id', authorizeRoles(1, 2), cateringOrderModifierController.deleteModifier);

module.exports = router;

================
File: backend/src/routes/cateringOrderRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const CateringOrder = require('../models/CateringOrder');
const cateringOrderController = require('../controllers/cateringOrderController');

// Get all catering orders for a guest
router.get('/guest/:guestId', authenticateToken, async (req, res) => {
  try {
    const orders = await CateringOrder.findAll({ where: { guestId: req.params.guestId } });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching catering orders', error });
  }
});

// Create a new catering order
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { orderNumber, guestId, houseAccountId, orderDate, totalPrice, orderDetails } = req.body;
    const cateringOrder = await CateringOrder.create({ orderNumber, guestId, houseAccountId, orderDate, totalPrice, orderDetails });
    res.status(201).json(cateringOrder);
  } catch (error) {
    res.status(500).json({ message: 'Error creating catering order', error });
  }
});

// New routes for clients
router.get('/clients/:clientId/catering-orders', cateringOrderController.getOrders);
router.patch('/clients/:clientId/catering-orders/:orderId', cateringOrderController.updateOrderStatus);
router.delete('/clients/:clientId/catering-orders/:orderId', cateringOrderController.deleteOrder);

// Add more routes as needed

module.exports = router;

================
File: backend/src/routes/cateringRoutes.js
================
const express = require('express');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');
const cateringController = require('../controllers/cateringController');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get catering menu for a specific location
router.get('/location/:locationId', authorize(['admin', 'manager']), cateringController.getCateringMenu);

// Create a new catering order
router.post('/order', authorize(['admin', 'manager', 'user']), cateringController.createCateringOrder);

// Get catering order details
router.get('/order/:orderId', authorize(['admin', 'manager', 'user']), cateringController.getCateringOrderDetails);

// Update catering order status
router.put('/order/:orderId/status', authorize(['admin', 'manager']), cateringController.updateCateringOrderStatus);

// Get all catering orders for a client
router.get('/orders', authorize(['admin', 'manager']), cateringController.getAllCateringOrders);

// Create or update catering menu item
router.post('/menu-item', authorize(['admin']), cateringController.upsertCateringMenuItem);

// Delete catering menu item
router.delete('/menu-item/:itemId', authorize(['admin']), cateringController.deleteCateringMenuItem);

module.exports = router;

================
File: backend/src/routes/cateringSettingsRoutes.js
================
const express = require('express');
const router = express.Router();
const cateringSettingsController = require('../controllers/cateringSettingsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), cateringSettingsController.getSettings);
router.put('/', authorizeRoles(1, 2), cateringSettingsController.updateSettings);

module.exports = router;

================
File: backend/src/routes/checkoutRoutes.js
================
const express = require('express');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');
const checkoutController = require('../controllers/checkoutController');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Initialize checkout process
router.post('/initialize', authorize(['user', 'admin']), checkoutController.initializeCheckout);

// Process payment
router.post('/process-payment', authorize(['user', 'admin']), checkoutController.processPayment);

// Confirm order
router.post('/confirm-order', authorize(['user', 'admin']), checkoutController.confirmOrder);

// Get checkout status
router.get('/status/:checkoutId', authorize(['user', 'admin']), checkoutController.getCheckoutStatus);

// Apply coupon
router.post('/apply-coupon', authorize(['user', 'admin']), checkoutController.applyCoupon);

// Remove coupon
router.post('/remove-coupon', authorize(['user', 'admin']), checkoutController.removeCoupon);

// Update shipping address
router.put('/shipping-address', authorize(['user', 'admin']), checkoutController.updateShippingAddress);

// Get available payment methods
router.get('/payment-methods', authorize(['user', 'admin']), checkoutController.getPaymentMethods);

module.exports = router;

================
File: backend/src/routes/clientLocationsRoutes.js
================
const express = require('express');
const router = express.Router();
const clientLocationsController = require('../controllers/clientLocationsController');

router.get('/:clientId', clientLocationsController.getClientLocations);

module.exports = router;

================
File: backend/src/routes/clientRoutes.js
================
const express = require('express');
const clientController = require('../controllers/clientController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');
const { body } = require('express-validator');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all clients (Super Admin only)
router.get('/', authorize(['superAdmin']), clientController.getAllClients);

// Get a specific client
router.get('/:id', authorize(['superAdmin', 'clientAdmin']), clientController.getClientById);

// Create a new client (Super Admin only)
router.post('/', 
  authorize(['superAdmin']),
  [
    body('name').notEmpty().withMessage('Client name is required'),
    body('email').isEmail().withMessage('Valid email is required'),
    // Add other validation as needed
  ],
  clientController.createClient
);

// Update a client
router.put('/:id', 
  authorize(['superAdmin', 'clientAdmin']),
  [
    body('name').optional().notEmpty().withMessage('Client name cannot be empty'),
    body('email').optional().isEmail().withMessage('Valid email is required'),
    // Add other validation as needed
  ],
  clientController.updateClient
);

// Delete a client (Super Admin only)
router.delete('/:id', authorize(['superAdmin']), clientController.deleteClient);

// Get client settings
router.get('/:id/settings', authorize(['superAdmin', 'clientAdmin']), clientController.getClientSettings);

// Update client settings
router.put('/:id/settings', 
  authorize(['superAdmin', 'clientAdmin']),
  [
    // Add validation for settings fields
  ],
  clientController.updateClientSettings
);

module.exports = router;

================
File: backend/src/routes/clientSettingsRoutes.js
================
const express = require 'express';
const *  = require '../controllers/clientSettingsController';
const { authenticate, authorize } = require '../middleware/auth';

const router = express.Router();

router.use(authenticate);
router.use(authorize(['clientAdmin']));

router.put('/two-factor', clientSettingsController.updateGlobalTwoFactorSetting);
router.put('/location-two-factor-exception', clientSettingsController.updateLocationTwoFactorException);

router.put('/payment-gateways', clientSettingsController.updateGlobalPaymentGateways);
router.put('/location-payment-gateway-exceptions', clientSettingsController.updateLocationPaymentGatewayExceptions);

module.exports = router;

================
File: backend/src/routes/commissaryKitchenRoutes.js
================
const express = require('express');
const commissaryKitchenController = require('../controllers/commissaryKitchenController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all commissary kitchens
router.get('/', authorize(['admin', 'manager']), commissaryKitchenController.getAllCommissaryKitchens);

// Get a specific commissary kitchen
router.get('/:id', authorize(['admin', 'manager']), commissaryKitchenController.getCommissaryKitchenById);

// Create a new commissary kitchen
router.post('/', authorize(['admin']), commissaryKitchenController.createCommissaryKitchen);

// Update a commissary kitchen
router.put('/:id', authorize(['admin']), commissaryKitchenController.updateCommissaryKitchen);

// Delete a commissary kitchen
router.delete('/:id', authorize(['admin']), commissaryKitchenController.deleteCommissaryKitchen);

// Get inventory for a commissary kitchen
router.get('/:id/inventory', authorize(['admin', 'manager']), commissaryKitchenController.getCommissaryKitchenInventory);

// Update inventory for a commissary kitchen
router.put('/:id/inventory', authorize(['admin', 'manager']), commissaryKitchenController.updateCommissaryKitchenInventory);

module.exports = router;

================
File: backend/src/routes/commissaryLocationRoutes.js
================
const express = require('express');
const router = express.Router();
const commissaryLocationController = require('../controllers/commissaryLocationController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), commissaryLocationController.getAllCommissaryLocations);
router.get('/:id', authorizeRoles(1, 2), commissaryLocationController.getCommissaryLocationById);
router.post('/', authorizeRoles(1, 2), commissaryLocationController.createCommissaryLocation);
router.put('/:id', authorizeRoles(1, 2), commissaryLocationController.updateCommissaryLocation);
router.delete('/:id', authorizeRoles(1, 2), commissaryLocationController.deleteCommissaryLocation);

module.exports = router;

================
File: backend/src/routes/corePosProfileRoutes.js
================
const express = require('express');
const corePosProfileController = require('../controllers/corePosProfileController');

const router = express.Router();

router.get('/', corePosProfileController.getAll);
router.get('/:id', corePosProfileController.getById);
router.post('/', corePosProfileController.create);
router.put('/:id', corePosProfileController.update);
router.delete('/:id', corePosProfileController.delete);
router.post('/:id/sync', corePosProfileController.syncLocation);

module.exports = router;

================
File: backend/src/routes/dashboardRoutes.js
================
const express = require('express');
const router = express.Router();
const dashboardController = require('../controllers/dashboardController');
const { authenticateUser, authorizeGlobalAdmin } = require('../middleware/auth');

router.get('/data', authenticateUser, dashboardController.getDashboardData);
router.get('/global-data', authenticateUser, authorizeGlobalAdmin, dashboardController.getGlobalDashboardData);

module.exports = router;

================
File: backend/src/routes/dataWallRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles, checkPermission } = require('../middleware/roleMiddleware');
const dataWallController = require('../controllers/dataWallController');

// Routes for managing data walls
router.post('/', authenticateToken, authorizeRoles(['Admin']), checkPermission('manage_data_walls'), dataWallController.createDataWall);
router.get('/:locationId', authenticateToken, authorizeRoles(['Admin', 'Manager']), checkPermission('view_data_walls'), dataWallController.getDataWallsByLocation);

module.exports = router;

================
File: backend/src/routes/deliveryDriverRoutes.js
================
const express = require('express');
const deliveryDriverController = require('../controllers/deliveryDriverController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all delivery drivers
router.get('/', authorize(['admin', 'manager']), deliveryDriverController.getAllDeliveryDrivers);

// Get a specific delivery driver
router.get('/:id', authorize(['admin', 'manager']), deliveryDriverController.getDeliveryDriverById);

// Create a new delivery driver
router.post('/', authorize(['admin']), deliveryDriverController.createDeliveryDriver);

// Update a delivery driver
router.put('/:id', authorize(['admin']), deliveryDriverController.updateDeliveryDriver);

// Delete a delivery driver
router.delete('/:id', authorize(['admin']), deliveryDriverController.deleteDeliveryDriver);

// Get active deliveries for a driver
router.get('/:id/active-deliveries', authorize(['admin', 'manager', 'driver']), deliveryDriverController.getActiveDeliveries);

// Update delivery status
router.put('/:id/delivery/:deliveryId', authorize(['admin', 'manager', 'driver']), deliveryDriverController.updateDeliveryStatus);

module.exports = router;

================
File: backend/src/routes/discountItemRoutes.js
================
const express = require('express');
const router = express.Router();
const discountItemController = require('../controllers/discountItemController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), discountItemController.getAllDiscountItems);
router.get('/:id', authorizeRoles(1, 2), discountItemController.getDiscountItemById);
router.post('/', authorizeRoles(1, 2), discountItemController.createDiscountItem);
router.put('/:id', authorizeRoles(1, 2), discountItemController.updateDiscountItem);
router.delete('/:id', authorizeRoles(1, 2), discountItemController.deleteDiscountItem);

module.exports = router;

================
File: backend/src/routes/discountRoutes.js
================
const express = require('express');
const discountController = require('../controllers/discountController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all discounts
router.get('/', authorize(['admin', 'manager']), discountController.getAllDiscounts);

// Get a specific discount
router.get('/:id', authorize(['admin', 'manager']), discountController.getDiscountById);

// Create a new discount
router.post('/', authorize(['admin']), discountController.createDiscount);

// Update a discount
router.put('/:id', authorize(['admin']), discountController.updateDiscount);

// Delete a discount
router.delete('/:id', authorize(['admin']), discountController.deleteDiscount);

module.exports = router;

================
File: backend/src/routes/discountsRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const discountController = require('../controllers/discountController');

// Create a discount (Admin or higher)
router.post('/', authenticateToken, authorizeRoles(1, 2), discountController.createDiscount);

// Get all discounts for a specific location
router.get('/:locationId', authenticateToken, discountController.getDiscountsByLocation);

module.exports = router;

================
File: backend/src/routes/driverLocationsRoutes.js
================
const express = require('express');
const router = express.Router();
const driverLocationsController = require('../controllers/driverLocationsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), driverLocationsController.getAllDriverLocations);
router.get('/:id', authorizeRoles(1, 2), driverLocationsController.getDriverLocationById);
router.post('/', authorizeRoles(1, 2), driverLocationsController.createDriverLocation);
router.put('/:id', authorizeRoles(1, 2), driverLocationsController.updateDriverLocation);
router.delete('/:id', authorizeRoles(1, 2), driverLocationsController.deleteDriverLocation);

module.exports = router;

================
File: backend/src/routes/dropoffScheduleRoutes.js
================
const express = require('express');
const router = express.Router();
const dropoffScheduleController = require('../controllers/dropoffScheduleController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), dropoffScheduleController.getAllDropoffSchedules);
router.get('/:id', authorizeRoles(1, 2), dropoffScheduleController.getDropoffScheduleById);
router.post('/', authorizeRoles(1, 2), dropoffScheduleController.createDropoffSchedule);
router.put('/:id', authorizeRoles(1, 2), dropoffScheduleController.updateDropoffSchedule);
router.delete('/:id', authorizeRoles(1, 2), dropoffScheduleController.deleteDropoffSchedule);

module.exports = router;

================
File: backend/src/routes/featureManagementRoutes.js
================
const express = require('express');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');
const featureManagementController = require('../controllers/featureManagementController');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get client features
router.get('/features/:clientId', authorize(['superAdmin']), featureManagementController.getClientFeatures);

// Update client features
router.put('/features/:clientId', authorize(['superAdmin']), featureManagementController.updateClientFeatures);

// Get all available features
router.get('/available-features', authorize(['superAdmin']), featureManagementController.getAllAvailableFeatures);

// Create a new feature
router.post('/features', authorize(['superAdmin']), featureManagementController.createFeature);

// Update an existing feature
router.put('/features/:featureId', authorize(['superAdmin']), featureManagementController.updateFeature);

// Delete a feature
router.delete('/features/:featureId', authorize(['superAdmin']), featureManagementController.deleteFeature);

module.exports = router;

================
File: backend/src/routes/globalMenuRoutes.js
================
const express = require('express');
const router = express.Router();
const globalMenuController = require('../controllers/globalMenuController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), globalMenuController.getAllGlobalMenus);
router.get('/:id', authorizeRoles(1, 2), globalMenuController.getGlobalMenuById);
router.post('/', authorizeRoles(1, 2), globalMenuController.createGlobalMenu);
router.put('/:id', authorizeRoles(1, 2), globalMenuController.updateGlobalMenu);
router.delete('/:id', authorizeRoles(1, 2), globalMenuController.deleteGlobalMenu);

module.exports = router;

================
File: backend/src/routes/globalSettingRoutes.js
================
const express = require('express');
const router = express.Router();
const globalSettingController = require('../controllers/globalSettingController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), globalSettingController.getAllGlobalSettings);
router.get('/:id', authorizeRoles(1, 2), globalSettingController.getGlobalSettingById);
router.post('/', authorizeRoles(1, 2), globalSettingController.createGlobalSetting);
router.put('/:id', authorizeRoles(1, 2), globalSettingController.updateGlobalSetting);
router.delete('/:id', authorizeRoles(1, 2), globalSettingController.deleteGlobalSetting);

module.exports = router;

================
File: backend/src/routes/guestDiscountsRoutes.js
================
const express = require('express');
const router = express.Router();
const guestDiscountsController = require('../controllers/guestDiscountsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), guestDiscountsController.getAllGuestDiscounts);
router.get('/:id', authorizeRoles(1, 2), guestDiscountsController.getGuestDiscountById);
router.post('/', authorizeRoles(1, 2), guestDiscountsController.createGuestDiscount);
router.put('/:id', authorizeRoles(1, 2), guestDiscountsController.updateGuestDiscount);
router.delete('/:id', authorizeRoles(1, 2), guestDiscountsController.deleteGuestDiscount);

module.exports = router;

================
File: backend/src/routes/guestLoyaltyProgramRoutes.js
================
const express = require('express');
const router = express.Router();
const guestLoyaltyProgramController = require('../controllers/guestLoyaltyProgramController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), guestLoyaltyProgramController.getAllGuestLoyaltyPrograms);
router.get('/:id', authorizeRoles(1, 2), guestLoyaltyProgramController.getGuestLoyaltyProgramById);
router.post('/', authorizeRoles(1, 2), guestLoyaltyProgramController.createGuestLoyaltyProgram);
router.put('/:id', authorizeRoles(1, 2), guestLoyaltyProgramController.updateGuestLoyaltyProgram);
router.delete('/:id', authorizeRoles(1, 2), guestLoyaltyProgramController.deleteGuestLoyaltyProgram);

module.exports = router;

================
File: backend/src/routes/guestProfileRoutes.js
================
const express = require('express');
const router = express.Router();
const guestProfileController = require('../controllers/guestProfileController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), guestProfileController.getAllGuestProfiles);
router.get('/:id', authorizeRoles(1, 2), guestProfileController.getGuestProfileById);
router.post('/', authorizeRoles(1, 2), guestProfileController.createGuestProfile);
router.put('/:id', authorizeRoles(1, 2), guestProfileController.updateGuestProfile);
router.delete('/:id', authorizeRoles(1, 2), guestProfileController.deleteGuestProfile);

module.exports = router;

================
File: backend/src/routes/guestRewardsRoutes.js
================
const express = require('express');
const router = express.Router();
const guestRewardsController = require('../controllers/guestRewardsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), guestRewardsController.getAllGuestRewards);
router.get('/:id', authorizeRoles(1, 2), guestRewardsController.getGuestRewardById);
router.post('/', authorizeRoles(1, 2), guestRewardsController.createGuestReward);
router.put('/:id', authorizeRoles(1, 2), guestRewardsController.updateGuestReward);
router.delete('/:id', authorizeRoles(1, 2), guestRewardsController.deleteGuestReward);

module.exports = router;

================
File: backend/src/routes/guestRoutes.js
================
const express = require('express');
const guestController = require('../controllers/guestController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all guests
router.get('/', authorize(['admin', 'manager']), guestController.getAllGuests);

// Get a specific guest
router.get('/:id', authorize(['admin', 'manager']), guestController.getGuestById);

// Create a new guest
router.post('/', authorize(['admin', 'manager']), guestController.createGuest);

// Update a guest
router.put('/:id', authorize(['admin', 'manager']), guestController.updateGuest);

// Delete a guest
router.delete('/:id', authorize(['admin']), guestController.deleteGuest);

module.exports = router;

================
File: backend/src/routes/health.js
================
const express = require('express');
const router = express.Router();

router.get('/', async (req, res) => {
  try {
    // Simple health check without database query
    res.status(200).json({ status: 'healthy' });
  } catch (error) {
    console.error('Health check failed:', error);
    res.status(500).json({ status: 'unhealthy', error: error.message });
  }
});

module.exports = router;

================
File: backend/src/routes/houseAccountLocationsRoutes.js
================
const express = require('express');
const router = express.Router();
const houseAccountLocationsController = require('../controllers/houseAccountLocationsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), houseAccountLocationsController.getAllHouseAccountLocations);
router.get('/:id', authorizeRoles(1, 2), houseAccountLocationsController.getHouseAccountLocationById);
router.post('/', authorizeRoles(1, 2), houseAccountLocationsController.createHouseAccountLocation);
router.put('/:id', authorizeRoles(1, 2), houseAccountLocationsController.updateHouseAccountLocation);
router.delete('/:id', authorizeRoles(1, 2), houseAccountLocationsController.deleteHouseAccountLocation);

module.exports = router;

================
File: backend/src/routes/houseAccountRoutes.js
================
const express = require('express');
const houseAccountController = require('../controllers/houseAccountController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get house accounts by client
router.get('/client/:clientId', authorize(['admin', 'manager']), houseAccountController.getHouseAccountsByClient);

// Get a specific house account
router.get('/:id', authorize(['admin', 'manager']), houseAccountController.getHouseAccountById);

// Create a new house account
router.post('/', authorize(['admin']), houseAccountController.createHouseAccount);

// Update a house account
router.put('/:id', authorize(['admin']), houseAccountController.updateHouseAccount);

// Delete a house account
router.delete('/:id', authorize(['admin']), houseAccountController.deleteHouseAccount);

// Add funds to a house account
router.post('/:id/add-funds', authorize(['admin', 'manager']), houseAccountController.addFunds);

// Deduct funds from a house account
router.post('/:id/deduct-funds', authorize(['admin', 'manager']), houseAccountController.deductFunds);

// Get transaction history for a house account
router.get('/:id/transactions', authorize(['admin', 'manager']), houseAccountController.getTransactionHistory);

module.exports = router;

================
File: backend/src/routes/houseAccountUserRoutes.js
================
const express = require('express');
const router = express.Router();
const houseAccountUserController = require('../controllers/houseAccountUserController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), houseAccountUserController.getAllHouseAccountUsers);
router.get('/:id', authorizeRoles(1, 2), houseAccountUserController.getHouseAccountUserById);
router.post('/', authorizeRoles(1, 2), houseAccountUserController.createHouseAccountUser);
router.put('/:id', authorizeRoles(1, 2), houseAccountUserController.updateHouseAccountUser);
router.delete('/:id', authorizeRoles(1, 2), houseAccountUserController.deleteHouseAccountUser);

module.exports = router;

================
File: backend/src/routes/imageUploadRoutes.js
================
const express = require('express');
const multer = require('multer');
const path = require('path');
const router = express.Router();

// Configure multer for local storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, '../uploads/images/'));
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({ storage: storage });

// Image upload route
router.post('/upload', upload.single('image'), (req, res) => {
  try {
    res.json({ message: 'Image uploaded successfully', imagePath: req.file.path });
  } catch (error) {
    res.status(500).json({ message: 'Image upload failed', error });
  }
});

module.exports = router;

================
File: backend/src/routes/index.js
================
const express = require('express');
const { authenticate } = require('../middleware/auth');

// Import all route files
const authRoutes = require('./authRoutes');
const locationRoutes = require('./locationRoutes');
const menuRoutes = require('./menuRoutes');
const orderRoutes = require('./orderRoutes');
const userRoutes = require('./userRoutes');
const analyticsRoutes = require('./analyticsRoutes');
const inventoryRoutes = require('./inventoryRoutes');
const posRoutes = require('./posRoutes');
const abTestRoutes = require('./abTestRoutes');
const adminRoutes = require('./adminRoutes');
const assetRoutes = require('./assetRoutes');
const brandingRoutes = require('./brandingRoutes');
const campaignRoutes = require('./campaignResultRoutes');
const categoryRoutes = require('./categoryRoutes');
const cateringRoutes = require('./cateringRoutes');
const checkoutRoutes = require('./checkoutRoutes');
const clientRoutes = require('./clientRoutes');
const commissaryRoutes = require('./commissaryKitchenRoutes');
const discountRoutes = require('./discountRoutes');
const driverRoutes = require('./deliveryDriverRoutes');
const featureManagementRoutes = require('./featureManagementRoutes');
const guestRoutes = require('./guestRoutes');
const houseAccountRoutes = require('./houseAccountRoutes');
const imageUploadRoutes = require('./imageUploadRoutes');
const invoiceRoutes = require('./invoiceRoutes');
const loyaltyRoutes = require('./loyaltyRoutes');
const paymentRoutes = require('./paymentRoutes');
const providerRoutes = require('./providerRoutes');
const refundRoutes = require('./refundRoutes');
const reportRoutes = require('./reportRoutes');
const reviewRoutes = require('./reviewRoutes');
const roleRoutes = require('./roleRoutes');
const serviceFeeRoutes = require('./serviceFeeRoutes');
const tabletRoutes = require('./tabletRoutes');
const taxRoutes = require('./taxRoutes');
const tipRoutes = require('./tipRoutes');
const trackingPixelRoutes = require('./trackingPixelRoutes');
const translatorRoutes = require('./translatorRoutes');
const twoFactorRoutes = require('./twoFactorRoutes');
const walletRoutes = require('./walletRoutes');
const campaignResultRoutes = require('./campaignResultRoutes');

const router = express.Router();

// Public routes
router.use('/auth', authRoutes);
router.use('/two-factor', twoFactorRoutes);

// Apply authentication middleware to all routes below
router.use(authenticate);

// Protected routes
router.use('/locations', locationRoutes);
router.use('/menu', menuRoutes);
router.use('/orders', orderRoutes);
router.use('/users', userRoutes);
router.use('/analytics', analyticsRoutes);
router.use('/inventory', inventoryRoutes);
router.use('/pos', posRoutes);
router.use('/ab-test', abTestRoutes);
router.use('/admin', adminRoutes);
router.use('/assets', assetRoutes);
router.use('/branding', brandingRoutes);
router.use('/campaigns', campaignRoutes);
router.use('/categories', categoryRoutes);
router.use('/catering', cateringRoutes);
router.use('/checkout', checkoutRoutes);
router.use('/clients', clientRoutes);
router.use('/commissary', commissaryRoutes);
router.use('/discounts', discountRoutes);
router.use('/drivers', driverRoutes);
router.use('/features', featureManagementRoutes);
router.use('/guests', guestRoutes);
router.use('/house-accounts', houseAccountRoutes);
router.use('/images', imageUploadRoutes);
router.use('/invoices', invoiceRoutes);
router.use('/loyalty', loyaltyRoutes);
router.use('/payments', paymentRoutes);
router.use('/providers', providerRoutes);
router.use('/refunds', refundRoutes);
router.use('/reports', reportRoutes);
router.use('/reviews', reviewRoutes);
router.use('/roles', roleRoutes);
router.use('/service-fees', serviceFeeRoutes);
router.use('/tablet', tabletRoutes);
router.use('/taxes', taxRoutes);
router.use('/tips', tipRoutes);
router.use('/tracking', trackingPixelRoutes);
router.use('/translator', translatorRoutes);
router.use('/wallets', walletRoutes);
router.use('/campaign-results', campaignResultRoutes);

module.exports = router;

================
File: backend/src/routes/inventoryRoutes.js
================
const express = require('express');
const inventoryController = require('../controllers/inventoryController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all inventory items
router.get('/', authorize(['Admin', 'Manager']), inventoryController.getInventory);

// Get a single inventory item by ID
router.get('/:id', authorize(['Admin', 'Manager']), inventoryController.getInventoryItemById);

// Create a new inventory item
router.post('/', authorize(['Admin']), inventoryController.addInventoryItem);

// Update an existing inventory item
router.put('/:id', authorize(['Admin', 'Manager']), inventoryController.updateInventory);

// Delete an inventory item
router.delete('/:id', authorize(['Admin']), inventoryController.removeInventoryItem);

// Update inventory quantity
router.patch('/:id/quantity', authorize(['Admin', 'Manager']), inventoryController.updateInventoryQuantity);

module.exports = router;

================
File: backend/src/routes/invoiceRoutes.js
================
const express = require('express');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');
const invoiceController = require('../controllers/invoiceController');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Generate invoice
router.post('/generate', authorize(['admin', 'manager']), invoiceController.generateInvoice);

// Get invoice by ID
router.get('/:id', authorize(['admin', 'manager']), invoiceController.getInvoiceById);

// Get all invoices for a client
router.get('/client/:clientId', authorize(['admin', 'manager']), invoiceController.getClientInvoices);

// Update invoice
router.put('/:id', authorize(['admin']), invoiceController.updateInvoice);

// Delete invoice
router.delete('/:id', authorize(['admin']), invoiceController.deleteInvoice);

module.exports = router;

================
File: backend/src/routes/itemModifierRoutes.js
================
const express = require('express');
const router = express.Router();
const itemModifierController = require('../controllers/itemModifierController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), itemModifierController.getAllItemModifiers);
router.get('/:id', authorizeRoles(1, 2), itemModifierController.getItemModifierById);
router.post('/', authorizeRoles(1, 2), itemModifierController.createItemModifier);
router.put('/:id', authorizeRoles(1, 2), itemModifierController.updateItemModifier);
router.delete('/:id', authorizeRoles(1, 2), itemModifierController.deleteItemModifier);

module.exports = router;

================
File: backend/src/routes/itemReviewRoutes.js
================
const express = require('express');
const router = express.Router();
const itemReviewController = require('../controllers/itemReviewController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), itemReviewController.getAllItemReviews);
router.get('/:id', authorizeRoles(1, 2), itemReviewController.getItemReviewById);
router.post('/', authorizeRoles(1, 2), itemReviewController.createItemReview);
router.put('/:id', authorizeRoles(1, 2), itemReviewController.updateItemReview);
router.delete('/:id', authorizeRoles(1, 2), itemReviewController.deleteItemReview);

module.exports = router;

================
File: backend/src/routes/itemRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const MenuItem = require('../models/MenuItem');

// Get all items
router.get('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const items = await MenuItem.findAll();
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching items', error });
  }
});

// Create a new item
router.post('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { name, description, basePrice, pointsPrice, menuGroupId } = req.body;
    const newItem = await MenuItem.create({ name, description, basePrice, pointsPrice, menuGroupId });
    res.status(201).json(newItem);
  } catch (error) {
    res.status(500).json({ message: 'Error creating item', error });
  }
});

// Update an item
router.put('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const item = await MenuItem.findByPk(req.params.id);
    if (!item) return res.status(404).json({ message: 'Item not found' });

    await item.update(req.body);
    res.json(item);
  } catch (error) {
    res.status(500).json({ message: 'Error updating item', error });
  }
});

// Delete an item
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const item = await MenuItem.findByPk(req.params.id);
    if (!item) return res.status(404).json({ message: 'Item not found' });

    await item.destroy();
    res.json({ message: 'Item deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting item', error });
  }
});

module.exports = router;

================
File: backend/src/routes/LocationCard.js
================
const express = require('express');
const router = express.Router();
const LocationController = require('../controllers/LocationController');

// Get location card details
router.get('/:locationId', LocationController.getLocationCard);

// Update location card details
router.put('/:locationId', LocationController.updateLocationCard);

// Start order for a location
router.post('/:locationId/start-order', LocationController.startOrder);

module.exports = router;

================
File: backend/src/routes/locationHoursRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const LocationHours = require('../models/LocationHours');

// Get all hours for a location
router.get('/location/:locationId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const hours = await LocationHours.findAll({ where: { locationId: req.params.locationId } });
    res.json(hours);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching location hours', error });
  }
});

// Create new location hours
router.post('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { locationId, type, dayOfWeek, startTime, endTime, startDate, endDate } = req.body;
    const hours = await LocationHours.create({
      locationId,
      type,
      dayOfWeek,
      startTime,
      endTime,
      startDate,
      endDate,
    });
    res.status(201).json(hours);
  } catch (error) {
    res.status(500).json({ message: 'Error creating location hours', error });
  }
});

// Update location hours
router.put('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const hours = await LocationHours.findByPk(req.params.id);
    if (!hours) return res.status(404).json({ message: 'Hours not found' });

    await hours.update(req.body);
    res.json(hours);
  } catch (error) {
    res.status(500).json({ message: 'Error updating location hours', error });
  }
});

// Delete location hours
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const hours = await LocationHours.findByPk(req.params.id);
    if (!hours) return res.status(404).json({ message: 'Hours not found' });

    await hours.destroy();
    res.json({ message: 'Hours deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting location hours', error });
  }
});

module.exports = router;

================
File: backend/src/routes/locationMenuGroupRoutes.js
================
const express = require('express');
const router = express.Router();
const locationMenuGroupController = require('../controllers/locationMenuGroupController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), locationMenuGroupController.getAllLocationMenuGroups);
router.get('/:id', authorizeRoles(1, 2), locationMenuGroupController.getLocationMenuGroupById);
router.post('/', authorizeRoles(1, 2), locationMenuGroupController.createLocationMenuGroup);
router.put('/:id', authorizeRoles(1, 2), locationMenuGroupController.updateLocationMenuGroup);
router.delete('/:id', authorizeRoles(1, 2), locationMenuGroupController.deleteLocationMenuGroup);

module.exports = router;

================
File: backend/src/routes/locationMenuOverrideRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const LocationMenuOverride = require('../models/LocationMenuOverride');
const { check, validationResult } = require('express-validator');

// Get all overrides for a location
router.get('/location/:locationId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const overrides = await LocationMenuOverride.findAll({ where: { locationId: req.params.locationId } });
    res.json(overrides);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching overrides', error });
  }
});

// Create a new location-specific override
router.post(
  '/',
  authenticateToken,
  authorizeRoles(1, 2),
  [
    check('locationId').isInt().withMessage('locationId must be an integer'),
    check('menuItemId').isInt().withMessage('menuItemId must be an integer'),
    check('price').optional().isFloat({ min: 0 }).withMessage('price must be a positive number'),
    check('upliftPercentage').optional().isFloat({ min: 0 }).withMessage('upliftPercentage must be a positive number'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const { price, isAvailable, upliftPercentage, locationId, menuItemId } = req.body;
      const override = await LocationMenuOverride.create({
        price,
        isAvailable,
        upliftPercentage,
        locationId,
        menuItemId,
      });
      res.status(201).json(override);
    } catch (error) {
      res.status(500).json({ message: 'Error creating override', error });
    }
  }
);

// Update location-specific override
router.put(
  '/:id',
  authenticateToken,
  authorizeRoles(1, 2),
  [
    check('price').optional().isFloat({ min: 0 }).withMessage('price must be a positive number'),
    check('upliftPercentage').optional().isFloat({ min: 0 }).withMessage('upliftPercentage must be a positive number'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    try {
      const override = await LocationMenuOverride.findByPk(req.params.id);
      if (!override) return res.status(404).json({ message: 'Override not found' });

      await override.update(req.body);
      res.json(override);
    } catch (error) {
      res.status(500).json({ message: 'Error updating override', error });
    }
  }
);

// Delete location-specific override
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const override = await LocationMenuOverride.findByPk(req.params.id);
    if (!override) return res.status(404).json({ message: 'Override not found' });

    await override.destroy();
    res.json({ message: 'Override deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting override', error });
  }
});

module.exports = router;

================
File: backend/src/routes/locationPosProfileRoutes.js
================
const express = require('express');
const router = express.Router();
const locationPosProfileController = require('../controllers/locationPosProfileController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), locationPosProfileController.getAllLocationPosProfiles);
router.get('/:id', authorizeRoles(1, 2), locationPosProfileController.getLocationPosProfileById);
router.post('/', authorizeRoles(1, 2), locationPosProfileController.createLocationPosProfile);
router.put('/:id', authorizeRoles(1, 2), locationPosProfileController.updateLocationPosProfile);
router.delete('/:id', authorizeRoles(1, 2), locationPosProfileController.deleteLocationPosProfile);

module.exports = router;

================
File: backend/src/routes/locationRoutes.js
================
const express = require('express');
const locationController = require('../controllers/locationController');
const authorize = require('../middleware/authorize');
const { authenticate } = require('../middleware/auth');

const router = express.Router();

router.use(authenticate); // Authenticate all location routes

router.get('/', locationController.getLocations);
router.post('/', locationController.createLocation);
router.get('/:id', locationController.getLocationDetails);
router.put('/:id', locationController.updateLocation);
router.delete('/:id', locationController.deleteLocation);
router.get('/count/:clientId', authenticate, locationController.getLocationCount);

module.exports = router;

================
File: backend/src/routes/locations.js
================
const express = require 'express';
import { 
  getLocations, 
  createLocation, 
  updateLocation, 
  deleteLocation,
  updateLocationPOSSettings
} from '../controllers/locationController';
const { authenticate, authorize } = require '../middleware/auth';

const router = express.Router();

router.get('/', authenticate, getLocations);
router.post('/', authenticate, authorize('admin'), createLocation);
router.put('/:id', authenticate, authorize('admin'), updateLocation);
router.delete('/:id', authenticate, authorize('admin'), deleteLocation);
router.put('/:id/pos-settings', authenticate, authorize('admin'), updateLocationPOSSettings);

module.exports = router;

================
File: backend/src/routes/LocationSelectionPage.js
================
const express = require('express');
const router = express.Router();
const LocationController = require('../controllers/LocationController');
const AuthController = require('../controllers/AuthController');

// Get all locations for the selection page
router.get('/', LocationController.getAllLocations);

// Get filtered locations
router.post('/filter', LocationController.getFilteredLocations);

// Get client branding information
router.get('/branding', LocationController.getClientBranding);

// Get user role (for admin dashboard access)
router.get('/user-role', AuthController.getUserRole);

// Login route (if needed on this page)
router.post('/login', AuthController.login);

module.exports = router;

================
File: backend/src/routes/locationTaxConfigRoutes.js
================
const express = require('express');
const router = express.Router();
const locationTaxConfigController = require('../controllers/locationTaxConfigController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles(1, 2), locationTaxConfigController.getAllLocationTaxConfigs);
router.get('/:id', authorizeRoles(1, 2), locationTaxConfigController.getLocationTaxConfigById);
router.post('/', authorizeRoles(1, 2), locationTaxConfigController.createLocationTaxConfig);
router.put('/:id', authorizeRoles(1, 2), locationTaxConfigController.updateLocationTaxConfig);
router.delete('/:id', authorizeRoles(1, 2), locationTaxConfigController.deleteLocationTaxConfig);

module.exports = router;

================
File: backend/src/routes/loyaltyRoutes.js
================
const express = require('express');
const loyaltyController = require('../controllers/loyaltyController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get loyalty program details
router.get('/program/:clientId', authorize(['admin', 'manager']), loyaltyController.getLoyaltyProgram);

// Create or update loyalty program
router.post('/program', authorize(['admin']), loyaltyController.createOrUpdateLoyaltyProgram);

// Get customer loyalty points
router.get('/points/:customerId', authorize(['admin', 'manager', 'customer']), loyaltyController.getCustomerPoints);

// Add loyalty points
router.post('/points/add', authorize(['admin', 'manager']), loyaltyController.addLoyaltyPoints);

// Redeem loyalty points
router.post('/points/redeem', authorize(['admin', 'manager', 'customer']), loyaltyController.redeemLoyaltyPoints);

// Get loyalty tiers
router.get('/tiers/:clientId', authorize(['admin', 'manager']), loyaltyController.getLoyaltyTiers);

// Create loyalty tier
router.post('/tiers', authorize(['admin']), loyaltyController.createLoyaltyTier);

// Update loyalty tier
router.put('/tiers/:tierId', authorize(['admin']), loyaltyController.updateLoyaltyTier);

// Delete loyalty tier
router.delete('/tiers/:tierId', authorize(['admin']), loyaltyController.deleteLoyaltyTier);

// Get loyalty rewards
router.get('/rewards/:clientId', authorize(['admin', 'manager', 'customer']), loyaltyController.getLoyaltyRewards);

// Create loyalty reward
router.post('/rewards', authorize(['admin']), loyaltyController.createLoyaltyReward);

// Update loyalty reward
router.put('/rewards/:rewardId', authorize(['admin']), loyaltyController.updateLoyaltyReward);

// Delete loyalty reward
router.delete('/rewards/:rewardId', authorize(['admin']), loyaltyController.deleteLoyaltyReward);

module.exports = router;

================
File: backend/src/routes/loyaltyWalletRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const loyaltyWalletController = require('../controllers/loyaltyWalletController');

// Get loyalty wallet
router.get('/:guestId', authenticateToken, loyaltyWalletController.getWallet);

// Add points to the wallet
router.post('/add-points', authenticateToken, loyaltyWalletController.addPoints);

// Redeem a reward
router.post('/redeem', authenticateToken, loyaltyWalletController.redeemReward);

module.exports = router;

================
File: backend/src/routes/menuGroupRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const MenuGroup = require('../models/MenuGroup');

// Get all groups for a menu
router.get('/menu/:menuId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const groups = await MenuGroup.findAll({ where: { menuId: req.params.menuId } });
    res.json(groups);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching groups', error });
  }
});

// Create a new menu group
router.post('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { name, description, menuId } = req.body;
    const group = await MenuGroup.create({ name, description, menuId });
    res.status(201).json(group);
  } catch (error) {
    res.status(500).json({ message: 'Error creating group', error });
  }
});

// Update a menu group
router.put('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const group = await MenuGroup.findByPk(req.params.id);
    if (!group) return res.status(404).json({ message: 'Group not found' });

    await group.update(req.body);
    res.json(group);
  } catch (error) {
    res.status(500).json({ message: 'Error updating group', error });
  }
});

// Delete a menu group
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const group = await MenuGroup.findByPk(req.params.id);
    if (!group) return res.status(404).json({ message: 'Group not found' });

    await group.destroy();
    res.json({ message: 'Group deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting group', error });
  }
});

module.exports = router;

================
File: backend/src/routes/menuItemRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const MenuItem = require('../models/MenuItem');

// Get all items for a menu group
router.get('/group/:menuGroupId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const items = await MenuItem.findAll({ where: { menuGroupId: req.params.menuGroupId } });
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching items', error });
  }
});

// Create a new menu item
router.post('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { name, description, basePrice, menuGroupId } = req.body;
    const item = await MenuItem.create({ name, description, basePrice, menuGroupId });
    res.status(201).json(item);
  } catch (error) {
    res.status(500).json({ message: 'Error creating item', error });
  }
});

// Update a menu item
router.put('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const item = await MenuItem.findByPk(req.params.id);
    if (!item) return res.status(404).json({ message: 'Item not found' });

    await item.update(req.body);
    res.json(item);
  } catch (error) {
    res.status(500).json({ message: 'Error updating item', error });
  }
});

// Delete a menu item
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const item = await MenuItem.findByPk(req.params.id);
    if (!item) return res.status(404).json({ message: 'Item not found' });

    await item.destroy();
    res.json({ message: 'Item deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting item', error });
  }
});

module.exports = router;

================
File: backend/src/routes/menuRoutes.js
================
const express = require('express');
const { getMenus, updateMenuItem } = require('../controllers/menuController');
const { authMiddleware } = require('../middleware/authMiddleware');

const router = express.Router();

router.get('/clients/:clientId/menus', authMiddleware, getMenus);
router.put('/menus/:menuId/items/:itemId', authMiddleware, updateMenuItem);

module.exports = router;

================
File: backend/src/routes/modifierRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const Modifier = require('../models/Modifier');

// Get all modifiers for a menu item
router.get('/item/:menuItemId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const modifiers = await Modifier.findAll({ where: { menuItemId: req.params.menuItemId } });
    res.json(modifiers);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching modifiers', error });
  }
});

// Create a new modifier
router.post('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { name, price, menuItemId } = req.body;
    const modifier = await Modifier.create({ name, price, menuItemId });
    res.status(201).json(modifier);
  } catch (error) {
    res.status(500).json({ message: 'Error creating modifier', error });
  }
});

// Update a modifier
router.put('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const modifier = await Modifier.findByPk(req.params.id);
    if (!modifier) return res.status(404).json({ message: 'Modifier not found' });

    await modifier.update(req.body);
    res.json(modifier);
  } catch (error) {
    res.status(500).json({ message: 'Error updating modifier', error });
  }
});

// Delete a modifier
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const modifier = await Modifier.findByPk(req.params.id);
    if (!modifier) return res.status(404).json({ message: 'Modifier not found' });

    await modifier.destroy();
    res.json({ message: 'Modifier deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting modifier', error });
  }
});

module.exports = router;

================
File: backend/src/routes/orderHistoryRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const Order = require('../models/Order');

// Get order history for a guest
router.get('/guest/:guestId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const orders = await Order.findAll({ where: { guestId: req.params.guestId } });
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching order history', error });
  }
});

module.exports = router;

================
File: backend/src/routes/orderRoutes.js
================
const express = require('express');
const OrderController = require('../controllers/orderController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Order routes
router.get('/history', authenticate, authorize(['User', 'Admin']), OrderController.getOrderHistory);
router.post('/', authenticate, authorize(['User']), OrderController.createOrder); // Changed to createOrder
router.get('/:orderId', authenticate, authorize(['User', 'Admin']), OrderController.getOrderDetails);
router.put('/:orderId/cancel', authenticate, authorize(['User']), OrderController.cancelOrder);
router.put('/:orderId/status', authenticate, authorize(['Admin']), OrderController.updateOrderStatus);

// Add other necessary routes (updateOrder, deleteOrder, etc.)
router.post('/orders', OrderController.createOrder);
router.get('/orders/:id', OrderController.getOrder);

module.exports = router;

================
File: backend/src/routes/orders.js
================
const express = require('express');
const router = express.Router();
const { Order } = require('../models');

// Get all orders
router.get('/', async (req, res) => {
  try {
    const orders = await Order.findAll();
    res.json(orders);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get a specific order
router.get('/:id', async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);
    if (order) {
      res.json(order);
    } else {
      res.status(404).json({ message: 'Order not found' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Create a new order
router.post('/', async (req, res) => {
  try {
    const newOrder = await Order.create(req.body);
    res.status(201).json(newOrder);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update an order
router.put('/:id', async (req, res) => {
  try {
    const [updated] = await Order.update(req.body, {
      where: { id: req.params.id }
    });
    if (updated) {
      const updatedOrder = await Order.findByPk(req.params.id);
      res.status(200).json(updatedOrder);
    } else {
      res.status(404).json({ message: 'Order not found' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete an order
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await Order.destroy({
      where: { id: req.params.id }
    });
    if (deleted) {
      res.status(204).json({ message: 'Order deleted' });
    } else {
      res.status(404).json({ message: 'Order not found' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

================
File: backend/src/routes/paymentRoutes.js
================
const express = require('express');
const paymentController = require('../controllers/paymentController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Process payment
router.post('/process', authorize(['admin', 'manager', 'customer']), paymentController.processPayment);

// Get payment by ID
router.get('/:id', authorize(['admin', 'manager']), paymentController.getPaymentById);

// Refund payment
router.post('/refund', authorize(['admin', 'manager']), paymentController.refundPayment);

// Get payment methods for a client
router.get('/methods/:clientId', authorize(['admin', 'manager', 'customer']), paymentController.getPaymentMethods);

// Add payment method
router.post('/methods', authorize(['admin', 'manager', 'customer']), paymentController.addPaymentMethod);

// Update payment method
router.put('/methods/:methodId', authorize(['admin', 'manager', 'customer']), paymentController.updatePaymentMethod);

// Delete payment method
router.delete('/methods/:methodId', authorize(['admin', 'manager', 'customer']), paymentController.deletePaymentMethod);

module.exports = router;

================
File: backend/src/routes/posIntegrationMappingRoutes.js
================
const express = require('express');
const router = express.Router();
const posIntegrationMappingController = require('../controllers/posIntegrationMappingController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles('Admin', 'Manager'), posIntegrationMappingController.getAllMappings);
router.post('/', authorizeRoles('Admin', 'Manager'), posIntegrationMappingController.createMapping);
router.get('/:id', authorizeRoles('Admin', 'Manager'), posIntegrationMappingController.getMappingById);
router.put('/:id', authorizeRoles('Admin', 'Manager'), posIntegrationMappingController.updateMapping);
router.delete('/:id', authorizeRoles('Admin', 'Manager'), posIntegrationMappingController.deleteMapping);

module.exports = router;

================
File: backend/src/routes/posIntegrationRoutes.js
================
const express = require('express');
const router = express.Router();
const PosIntegrationController = require('../controllers/posIntegrationController');

// Route to trigger menu sync
router.post('/sync/menus', PosIntegrationController.syncMenus);

// Route to trigger order sync
router.post('/sync/orders', PosIntegrationController.syncOrders);

// Route to trigger inventory sync
router.post('/sync/inventory', PosIntegrationController.syncInventory);

// Route to trigger tax rates sync (if applicable)
router.post('/sync/tax-rates', PosIntegrationController.syncTaxRates);

module.exports = router;

================
File: backend/src/routes/posIntegrationSettingsRoutes.js
================
const express = require('express');
const router = express.Router();
const posIntegrationSettingsController = require('../controllers/posIntegrationSettingsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles('Admin', 'Manager'), posIntegrationSettingsController.getAllPosIntegrationSettings);
router.post('/', authorizeRoles('Admin', 'Manager'), posIntegrationSettingsController.createPosIntegrationSetting);
router.get('/:id', authorizeRoles('Admin', 'Manager'), posIntegrationSettingsController.getPosIntegrationSettingById);
router.put('/:id', authorizeRoles('Admin', 'Manager'), posIntegrationSettingsController.updatePosIntegrationSetting);
router.delete('/:id', authorizeRoles('Admin', 'Manager'), posIntegrationSettingsController.deletePosIntegrationSetting);

module.exports = router;

================
File: backend/src/routes/posRoutes.js
================
const express = require('express');
const PosController = require('../controllers/posController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Define routes with appropriate authorization
router.post('/', authorize(['admin']), PosController.createProfile);
router.get('/:id', authorize(['admin']), PosController.getProfile);
router.put('/:id', authorize(['admin']), PosController.updateProfile);
router.delete('/:id', authorize(['admin']), PosController.deleteProfile);
router.post('/sync', authorize(['admin']), PosController.syncData);
router.get('/status/:id', authorize(['admin']), PosController.getStatus);

module.exports = router;

================
File: backend/src/routes/posSyncRoutes.js
================
const express = require('express');
const router = express.Router();
const PosSyncController = require('../controllers/posSyncController');

// Route to sync menus
router.post('/sync/menus', PosSyncController.syncMenus);

// Route to sync orders
router.post('/sync/orders', PosSyncController.syncOrders);

// Route to sync inventory
router.post('/sync/inventory', PosSyncController.syncInventory);

module.exports = router;

================
File: backend/src/routes/pricingUtils.js
================
const roundToNext99 = (price) => {
  const roundedPrice = Math.ceil(price) - 0.01;
  return roundedPrice.toFixed(2);
};

module.exports = { roundToNext99 };

================
File: backend/src/routes/providerIntegrationRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const TranslatorService = require('../translator/translatorService');
const providerConfigs = require('../translator/providerConfigs');

// Example route to send a menu to a provider
router.post('/send-menu/:provider', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { provider } = req.params;
    const providerConfig = providerConfigs[provider];

    if (!providerConfig) {
      return res.status(400).json({ message: 'Invalid provider specified.' });
    }

    const translator = new TranslatorService(providerConfig);
    const translatedMenu = translator.translateMenu(req.body.menuData);

    const response = await translator.sendDataToProvider(translatedMenu);
    res.json({ message: 'Menu sent successfully.', data: response });
  } catch (error) {
    res.status(500).json({ message: 'Error sending menu to provider.', error });
  }
});

module.exports = router;

================
File: backend/src/routes/ProviderPricing.js
================
module.exports = (sequelize, DataTypes) => {
  const ProviderPricing = sequelize.define('ProviderPricing', {
    provider: {
      type: DataTypes.STRING, // e.g., 'DoorDash', 'UberEats'
      allowNull: false,
    },
    upliftPercentage: {
      type: DataTypes.FLOAT,
      allowNull: false, // e.g., 18 for 18%
    },
  });

  ProviderPricing.associate = (models) => {
    ProviderPricing.belongsTo(models.LocationMenuOverride, { foreignKey: 'locationMenuOverrideId' });
  };

  return ProviderPricing;
};

================
File: backend/src/routes/providerPricingRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const ProviderPricing = require('../models/ProviderPricing');

// Get all provider-specific pricings for a location menu override
router.get('/override/:locationMenuOverrideId', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const providerPricings = await ProviderPricing.findAll({ where: { locationMenuOverrideId: req.params.locationMenuOverrideId } });
    res.json(providerPricings);
  } catch (error) {
    res.status(500).json({ message: 'Error fetching provider pricings', error });
  }
});

// Create a new provider-specific pricing
router.post('/', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { provider, upliftPercentage, locationMenuOverrideId, shouldRound } = req.body;
    const providerPricing = await ProviderPricing.create({
      provider,
      upliftPercentage,
      locationMenuOverrideId,
      shouldRound,
    });
    res.status(201).json(providerPricing);
  } catch (error) {
    res.status(500).json({ message: 'Error creating provider pricing', error });
  }
});

// Update provider-specific pricing
router.put('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const providerPricing = await ProviderPricing.findByPk(req.params.id);
    if (!providerPricing) return res.status(404).json({ message: 'Provider pricing not found' });

    await providerPricing.update(req.body);
    res.json(providerPricing);
  } catch (error) {
    res.status(500).json({ message: 'Error updating provider pricing', error });
  }
});

// Delete provider-specific pricing
router.delete('/:id', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const providerPricing = await ProviderPricing.findByPk(req.params.id);
    if (!providerPricing) return res.status(404).json({ message: 'Provider pricing not found' });

    await providerPricing.destroy();
    res.json({ message: 'Provider pricing deleted successfully.' });
  } catch (error) {
    res.status(500).json({ message: 'Error deleting provider pricing', error });
  }
});

module.exports = router;

================
File: backend/src/routes/providerRoutes.js
================
const express = require('express');
const providerController = require('../controllers/providerController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all providers
router.get('/', authorize(['admin', 'manager']), providerController.getAllProviders);

// Get a specific provider
router.get('/:id', authorize(['admin', 'manager']), providerController.getProviderById);

// Create a new provider
router.post('/', authorize(['admin']), providerController.createProvider);

// Update a provider
router.put('/:id', authorize(['admin']), providerController.updateProvider);

// Delete a provider
router.delete('/:id', authorize(['admin']), providerController.deleteProvider);

// Get provider settings
router.get('/:id/settings', authorize(['admin', 'manager']), providerController.getProviderSettings);

// Update provider settings
router.put('/:id/settings', authorize(['admin']), providerController.updateProviderSettings);

// Get provider integrations
router.get('/:id/integrations', authorize(['admin', 'manager']), providerController.getProviderIntegrations);

// Add provider integration
router.post('/:id/integrations', authorize(['admin']), providerController.addProviderIntegration);

// Update provider integration
router.put('/:id/integrations/:integrationId', authorize(['admin']), providerController.updateProviderIntegration);

// Delete provider integration
router.delete('/:id/integrations/:integrationId', authorize(['admin']), providerController.deleteProviderIntegration);

// Sync provider data
router.post('/:id/sync', authorize(['admin']), providerController.syncProviderData);

// New routes for provider service
router.get('/providers', providerController.getProviders);
router.get('/providers/:id', providerController.getProvider);
router.post('/providers', providerController.addProvider);
router.put('/providers/:id', providerController.updateProvider);
router.delete('/providers/:id', providerController.deleteProvider);
router.get('/providers/search', providerController.searchProviders);
router.post('/providers/bulk-delete', providerController.bulkDeleteProviders);
router.get('/providers/stats', providerController.getProviderStats);

module.exports = router;

================
File: backend/src/routes/refundRoutes.js
================
const express = require('express');
const refundController = require('../controllers/refundController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Process refund
router.post('/', authorize(['admin', 'manager']), refundController.processRefund);

// Get refund by ID
router.get('/:id', authorize(['admin', 'manager']), refundController.getRefundById);

// Get all refunds for an order
router.get('/order/:orderId', authorize(['admin', 'manager']), refundController.getRefundsByOrder);

// Update refund status
router.put('/:id/status', authorize(['admin']), refundController.updateRefundStatus);

// Cancel refund
router.post('/:id/cancel', authorize(['admin']), refundController.cancelRefund);

module.exports = router;

================
File: backend/src/routes/reportRoutes.js
================
const express = require('express');
const reportController = require('../controllers/reportController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Generate report
router.post('/generate', authorize(['admin', 'manager']), reportController.generateReport);

// Get report by ID
router.get('/:id', authorize(['admin', 'manager']), reportController.getReportById);

// Get all reports for a client
router.get('/client/:clientId', authorize(['admin', 'manager']), reportController.getClientReports);

// Update report
router.put('/:id', authorize(['admin']), reportController.updateReport);

// Delete report
router.delete('/:id', authorize(['admin']), reportController.deleteReport);

module.exports = router;

================
File: backend/src/routes/reviewRoutes.js
================
const express = require('express');
const reviewController = require('../controllers/reviewController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Create a new review
router.post('/', authorize(['customer', 'admin']), reviewController.createReview);

// Get reviews for a menu item
router.get('/menuItem/:menuItemId', reviewController.getReviewsForMenuItem);

// Get a specific review
router.get('/:id', reviewController.getReviewById);

// Update a review
router.put('/:id', authorize(['customer', 'admin']), reviewController.updateReview);

// Delete a review
router.delete('/:id', authorize(['admin']), reviewController.deleteReview);

// Get average rating for a menu item
router.get('/menuItem/:menuItemId/averageRating', reviewController.getAverageRatingForMenuItem);

module.exports = router;

================
File: backend/src/routes/rewardRoutes.js
================
const express = require('express');
const router = express.Router();
const rewardController = require('../controllers/rewardController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles('Admin', 'Manager'), rewardController.getAllRewards);
router.post('/', authorizeRoles('Admin', 'Manager'), rewardController.createReward);
router.get('/:id', authorizeRoles('Admin', 'Manager'), rewardController.getRewardById);

module.exports = router;

================
File: backend/src/routes/roleRoutes.js
================
const express = require('express');
const roleController = require('../controllers/roleController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Create a new role
router.post('/create-role', authorize(['Super Admin']), roleController.createRole);

// Get all roles
router.get('/', authorize(['Super Admin', 'Admin']), roleController.getAllRoles);

// Get a specific role
router.get('/:id', authorize(['Super Admin', 'Admin']), roleController.getRoleById);

// Update a role
router.put('/:id', authorize(['Super Admin']), roleController.updateRole);

// Delete a role
router.delete('/:id', authorize(['Super Admin']), roleController.deleteRole);

// Assign a role to a user
router.post('/assign', authorize(['Super Admin', 'Admin']), roleController.assignRole);

// Remove a role from a user
router.post('/remove', authorize(['Super Admin', 'Admin']), roleController.removeRole);

// Get roles for a specific user
router.get('/user/:userId', authorize(['Super Admin', 'Admin']), roleController.getUserRoles);

// Assign permission to a role
router.post('/assign-permission', authorize(['Super Admin']), roleController.assignPermission);

// Get all permissions
router.get('/permissions', authorize(['Super Admin', 'Admin']), roleController.getAllPermissions);

// Assign role template
router.post('/assign-template', authorize(['Super Admin']), roleController.assignRoleTemplate);

module.exports = router;

================
File: backend/src/routes/roleTemplateAssignmentsRoutes.js
================
const express = require('express');
const router = express.Router();
const roleTemplateAssignmentsController = require('../controllers/roleTemplateAssignmentsController');
const { authenticateToken, authorizeRoles } = require('../middleware/auth');

router.use(authenticateToken);

router.get('/', authorizeRoles('Admin', 'Manager'), roleTemplateAssignmentsController.getAllRoleTemplateAssignments);
router.post('/', authorizeRoles('Admin', 'Manager'), roleTemplateAssignmentsController.createRoleTemplateAssignment);
router.get('/:id', authorizeRoles('Admin', 'Manager'), roleTemplateAssignmentsController.getRoleTemplateAssignmentById);
router.put('/:id', authorizeRoles('Admin', 'Manager'), roleTemplateAssignmentsController.updateRoleTemplateAssignment);
router.delete('/:id', authorizeRoles('Admin', 'Manager'), roleTemplateAssignmentsController.deleteRoleTemplateAssignment);

module.exports = router;

================
File: backend/src/routes/secureRoutes.js
================
const express = require('express');
const { authenticateToken } = require('../middleware/auth');
const router = express.Router();

router.get('/secure-endpoint', authenticateToken, (req, res) => {
  res.status(200).json({ message: 'Access granted' });
});

module.exports = router;

================
File: backend/src/routes/serviceFeeRoutes.js
================
const express = require('express');
const serviceFeeController = require('../controllers/serviceFeeController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all service fees
router.get('/', authorize(['admin', 'manager']), serviceFeeController.getAllServiceFees);

// Get a specific service fee
router.get('/:id', authorize(['admin', 'manager']), serviceFeeController.getServiceFeeById);

// Create a new service fee
router.post('/', authorize(['admin']), serviceFeeController.createServiceFee);

// Update a service fee
router.put('/:id', authorize(['admin']), serviceFeeController.updateServiceFee);

// Delete a service fee
router.delete('/:id', authorize(['admin']), serviceFeeController.deleteServiceFee);

// Get service fees for a specific client
router.get('/client/:clientId', authorize(['admin', 'manager']), serviceFeeController.getServiceFeesByClient);

module.exports = router;

================
File: backend/src/routes/tabletRoutes.js
================
const express = require('express');
const tabletController = require('../controllers/tabletController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all tablets
router.get('/', authorize(['admin', 'manager']), tabletController.getAllTablets);

// Get a specific tablet
router.get('/:id', authorize(['admin', 'manager']), tabletController.getTabletById);

// Create a new tablet
router.post('/', authorize(['admin']), tabletController.createTablet);

// Update a tablet
router.put('/:id', authorize(['admin']), tabletController.updateTablet);

// Delete a tablet
router.delete('/:id', authorize(['admin']), tabletController.deleteTablet);

// Get tablets for a specific location
router.get('/location/:locationId', authorize(['admin', 'manager']), tabletController.getTabletsByLocation);

// Sync tablet data
router.post('/:id/sync', authorize(['admin', 'manager']), tabletController.syncTabletData);

module.exports = router;

================
File: backend/src/routes/tailwind.css
================
/* Add styles for the inventory management and guest-facing features */

.menu-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  padding: 20px;
}

.menu-item {
  background-color: #fff;
  border: 1px solid #ccc;
  padding: 10px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.menu-item:hover {
  background-color: #f9f9f9;
}

.menu-item.unavailable {
  opacity: 0.5;
  pointer-events: none;
}

.unavailable-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-weight: bold;
  color: red;
}

.order-page {
  padding: 20px;
}

================
File: backend/src/routes/taxRoutes.js
================
const express = require('express');
const taxController = require('../controllers/taxController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get all tax rates
router.get('/', authorize(['admin', 'manager']), taxController.getAllTaxRates);

// Get a specific tax rate
router.get('/:id', authorize(['admin', 'manager']), taxController.getTaxRateById);

// Create a new tax rate
router.post('/', authorize(['admin']), taxController.createTaxRate);

// Update a tax rate
router.put('/:id', authorize(['admin']), taxController.updateTaxRate);

// Delete a tax rate
router.delete('/:id', authorize(['admin']), taxController.deleteTaxRate);

// Get tax rates for a specific location
router.get('/location/:locationId', authorize(['admin', 'manager']), taxController.getTaxRatesByLocation);

// Calculate tax for an order
router.post('/calculate', authorize(['admin', 'manager', 'customer']), taxController.calculateTax);

module.exports = router;

================
File: backend/src/routes/throttleSettingsRoutes.js
================
const express = require('express');
const router = express.Router();
const { authenticateToken, authorizeRoles } = require('../middleware/auth');
const Location = require('../models/Location');

// Update throttle settings for a location
router.put('/location/:locationId/throttle-settings', authenticateToken, authorizeRoles(1, 2), async (req, res) => {
  try {
    const { locationId } = req.params;
    const { throttleSettings } = req.body;

    const location = await Location.findByPk(locationId);
    if (!location) return res.status(404).json({ message: 'Location not found' });

    location.throttleSettings = throttleSettings;
    await location.save();

    res.json(location);
  } catch (error) {
    res.status(500).json({ message: 'Error updating throttle settings', error });
  }
});

module.exports = router;

================
File: backend/src/routes/tipRoutes.js
================
const express = require('express');
const router = express.Router();
const tipController = require('../controllers/tipController');

router.post('/tips', tipController.createTip);
router.get('/tips', tipController.getTips);

module.exports = router;

================
File: backend/src/routes/toastRoutes.js
================
const express = require('express');
const router = express.Router();
const ToastService = require('../services/ToastService');
const { authenticateToken } = require('../middleware/auth');

// Route to authenticate with Toast and retrieve the token
router.post('/toast/authenticate', authenticateToken, async (req, res) => {
  try {
    const { clientId, clientSecret } = req.body;
    const token = await ToastService.authenticate(clientId, clientSecret);
    res.status(200).json({ token });
  } catch (error) {
    res.status(500).json({ message: 'Authentication failed', error: error.message });
  }
});

// Route to fetch menu data from Toast
router.get('/toast/menu', authenticateToken, async (req, res) => {
  try {
    const { token, restaurantId } = req.query;
    const menuData = await ToastService.getMenu(token, restaurantId);
    res.status(200).json(menuData);
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve menu data', error: error.message });
  }
});

module.exports = router;

================
File: backend/src/routes/trackingPixelRoutes.js
================
const express = require('express');
const trackingPixelController = require('../controllers/trackingPixelController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Create a new tracking pixel
router.post('/', authorize(['Admin']), trackingPixelController.createPixel);

// Get all tracking pixels
router.get('/', authorize(['Admin']), trackingPixelController.getAllPixels);

// Get a specific tracking pixel
router.get('/:id', authorize(['Admin']), trackingPixelController.getPixelById);

// Update a tracking pixel
router.put('/:id', authorize(['Admin']), trackingPixelController.updatePixel);

// Delete a tracking pixel
router.delete('/:id', authorize(['Admin']), trackingPixelController.deletePixel);

// Trigger a tracking pixel
router.get('/trigger/:id', trackingPixelController.triggerPixel);

module.exports = router;

================
File: backend/src/routes/translatorRoutes.js
================
const express = require('express');
const translatorController = require('../controllers/translatorController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Translate text
router.post('/translate', authorize(['admin', 'manager']), translatorController.translateText);

// Get supported languages
router.get('/languages', authorize(['admin', 'manager']), translatorController.getSupportedLanguages);

// Detect language
router.post('/detect', authorize(['admin', 'manager']), translatorController.detectLanguage);

// Translate menu items
router.post('/translate-menu', authorize(['admin']), translatorController.translateMenu);

// Get translation history
router.get('/history', authorize(['admin', 'manager']), translatorController.getTranslationHistory);

module.exports = router;

================
File: backend/src/routes/twoFactorRoutes.js
================
const express = require('express');
const twoFactorController = require('../controllers/twoFactorController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Enable 2FA for a user
router.post('/enable', authorize(['user', 'admin']), twoFactorController.enable2FA);

// Disable 2FA for a user
router.post('/disable', authorize(['user', 'admin']), twoFactorController.disable2FA);

// Verify 2FA token
router.post('/verify', twoFactorController.verify2FA);

// Generate backup codes
router.post('/generate-backup-codes', authorize(['user', 'admin']), twoFactorController.generateBackupCodes);

// Verify backup code
router.post('/verify-backup-code', twoFactorController.verifyBackupCode);

// Get 2FA status for a user
router.get('/status', authorize(['user', 'admin']), twoFactorController.get2FAStatus);

module.exports = router;

================
File: backend/src/routes/userRoutes.js
================
const express = require('express');
const UserController = require('../controllers/userController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Check if the method exists before using it
if (UserController.getAllUsers) {
  router.get('/', authenticate, authorize(['Super Admin']), UserController.getAllUsers);
} else {
  console.warn('Warning: UserController.getAllUsers is not defined');
}

if (UserController.getUserById) {
  router.get('/:id', authenticate, authorize(['Super Admin', 'Admin']), UserController.getUserById);
} else {
  console.warn('Warning: UserController.getUserById is not defined');
}

if (UserController.createUser) {
  router.post('/', authenticate, authorize(['Super Admin']), UserController.createUser);
} else {
  console.warn('Warning: UserController.createUser is not defined');
}

if (UserController.updateUser) {
  router.put('/:id', authenticate, authorize(['Super Admin', 'Admin']), UserController.updateUser);
} else {
  console.warn('Warning: UserController.updateUser is not defined');
}

if (UserController.deleteUser) {
  router.delete('/:id', authenticate, authorize(['Super Admin']), UserController.deleteUser);
} else {
  console.warn('Warning: UserController.deleteUser is not defined');
}

module.exports = router;

================
File: backend/src/routes/walletRoutes.js
================
const express = require('express');
const walletController = require('../controllers/walletController');
const { authenticate } = require('../middleware/auth');
const authorize = require('../middleware/authorize');

const router = express.Router();

// Apply authentication middleware to all routes
router.use(authenticate);

// Get wallet balance
router.get('/balance', authorize(['user', 'admin']), walletController.getWalletBalance);

// Add funds to wallet
router.post('/add-funds', authorize(['user', 'admin']), walletController.addFunds);

// Withdraw funds from wallet
router.post('/withdraw', authorize(['user', 'admin']), walletController.withdrawFunds);

// Get transaction history
router.get('/transactions', authorize(['user', 'admin']), walletController.getTransactionHistory);

// Transfer funds to another user
router.post('/transfer', authorize(['user', 'admin']), walletController.transferFunds);

// Get wallet details
router.get('/:userId', authorize(['admin']), walletController.getWalletDetails);

module.exports = router;

================
File: backend/src/seeders/enterpriseClientSeeder.js
================
const { getRepository, Connection } = require 'typeorm';
const { faker } = require '@faker-js/faker';
const { Client, Location, Guest, MenuItem, LoyaltyReward, Order, Discount, AuditLog, DropOffLocation, DropOffTime } = require '../entities';

export async function seedEnterpriseClient(connection) {
  const client = await seedClient(connection);
  const locations = await seedLocations(connection, client);
  const menuItems = await seedMenuItems(connection, client);
  const guests = await seedGuests(connection, client);
  const loyaltyRewards = await seedLoyaltyRewards(connection, client);
  const discounts = await seedDiscounts(connection, client);
  await seedOrders(connection, client, locations, guests, menuItems, discounts);
  await seedAuditLog(connection, client);

  console.log('Enterprise client data seeded successfully');
}

async function seedClient(connection) {
  const clientRepository = getRepository(Client);
  const client = clientRepository.create({
    name: 'Enterprise Foods Inc.',
    subdomain: 'enterprise-foods',
    active,
  });
  return await clientRepository.save(client);
}

async function seedLocations(connection, client)[]> {
  const locationRepository = getRepository(Location);
  const locations[] = [];

  for (let i = 0; i < 15; i++) {
    const location = locationRepository.create({
      name: `${faker.address.city()} Branch`,
      address.address.streetAddress(),
      city.address.city(),
      state.address.state(),
      zipCode.address.zipCode(),
      phoneNumber.phone.phoneNumber(),
      email.internet.email(),
      latitude(faker.address.latitude()),
      longitude(faker.address.longitude()),
      client,
      isDropoffSite.datatype.boolean(),
    });
    locations.push(await locationRepository.save(location));

    if (location.isDropoffSite) {
      await seedDropOffLocations(connection, location);
    }
  }

  return locations;
}

async function seedDropOffLocations(connection, parentLocation) {
  const dropOffLocationRepository = getRepository(DropOffLocation);
  const dropOffTimeRepository = getRepository(DropOffTime);

  for (let i = 0; i < faker.datatype.number({ min: 1, max: 3 }); i++) {
    const dropOffLocation = dropOffLocationRepository.create({
      name: `${faker.company.companyName()} Drop-off`,
      address.address.streetAddress(),
      city.address.city(),
      state.address.state(),
      zipCode.address.zipCode(),
      parentLocation,
    });
    const savedDropOffLocation = await dropOffLocationRepository.save(dropOffLocation);

    for (let j = 0; j < faker.datatype.number({ min: 1, max: 5 }); j++) {
      const dropOffTime = dropOffTimeRepository.create({
        time.date.future().toTimeString().slice(0, 5),
        dropOffLocation,
      });
      await dropOffTimeRepository.save(dropOffTime);
    }
  }
}

async function seedMenuItems(connection, client)[]> {
  const menuItemRepository = getRepository(MenuItem);
  const menuItems[] = [];

  const categories = ['Appetizers', 'Main Courses', 'Desserts', 'Drinks'];

  for (let i = 0; i < 50; i++) {
    const menuItem = menuItemRepository.create({
      name.commerce.productName(),
      description.lorem.sentence(),
      price(faker.commerce.price()),
      category.random.arrayElement(categories),
      client,
    });
    menuItems.push(await menuItemRepository.save(menuItem));
  }

  return menuItems;
}

// ... (implement other seeding functions, seedLoyaltyRewards, seedDiscounts, seedOrders, seedAuditLog)

================
File: backend/src/seeders/YYYYMMDDHHMMSS-seed-enterprise-client.js
================
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    // Seed Client
    const [client] = await queryInterface.bulkInsert('Clients', [{
      name: 'Enterprise Foods Inc.',
      createdAt: new Date(),
      updatedAt: new Date()
    }], { returning: true });

    // Seed ClientBranding
    await queryInterface.bulkInsert('ClientBrandings', [{
      clientId: client.id,
      logo: 'https://example.com/logo.png',
      favicon: 'https://example.com/favicon.ico',
      primaryColor: '#1976D2',
      secondaryColor: '#424242',
      accentColor: '#82B1FF',
      fontFamily: 'Roboto, sans-serif',
      buttonStyle: 'rounded',
      headerStyle: 'centered',
      footerContent: '© 2023 Enterprise Foods Inc. All rights reserved.',
      createdAt: new Date(),
      updatedAt: new Date()
    }]);

    // Seed ClientFeatures
    await queryInterface.bulkInsert('ClientFeatures', [{
      clientId: client.id,
      loyalty: true,
      onlineOrdering: true,
      tableReservations: false,
      createdAt: new Date(),
      updatedAt: new Date()
    }]);

    // Seed Users
    await queryInterface.bulkInsert('Users', [
      {
        clientId: client.id,
        email: 'admin@enterprisefoods.com',
        password: '$2b$10$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', // Hashed password
        role: 'admin',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        clientId: client.id,
        email: 'manager@enterprisefoods.com',
        password: '$2b$10$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', // Hashed password
        role: 'manager',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);

    // Seed Locations
    const locations = await queryInterface.bulkInsert('Locations', [
      {
        clientId: client.id,
        name: 'Downtown Branch',
        address: '123 Main St, Metropolis, NY 10001',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        clientId: client.id,
        name: 'Uptown Branch',
        address: '456 Park Ave, Metropolis, NY 10002',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ], { returning: true });

    // Seed Menu Items
    const menuItems = await queryInterface.bulkInsert('MenuItems', [
      {
        locationId: locations[0].id,
        name: 'Enterprise Burger',
        description: 'Our signature burger with secret sauce',
        price: 9.99,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        locationId: locations[0].id,
        name: 'Veggie Delight',
        description: 'Plant-based burger for vegetarians',
        price: 8.99,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        locationId: locations[1].id,
        name: 'Gourmet Pizza',
        description: 'Artisanal pizza with premium toppings',
        price: 12.99,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ], { returning: true });

    // Seed Modifiers
    await queryInterface.bulkInsert('Modifiers', [
      {
        menuItemId: menuItems[0].id,
        name: 'Extra Cheese',
        price: 1.00,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        menuItemId: menuItems[0].id,
        name: 'Bacon',
        price: 1.50,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        menuItemId: menuItems[2].id,
        name: 'Gluten-Free Crust',
        price: 2.00,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);

    // Seed POS Settings
    await queryInterface.bulkInsert('POSSettings', [
      {
        clientId: client.id,
        modifierSendMethod: 'list',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);

    // Seed A/B Tests
    await queryInterface.bulkInsert('ABTests', [
      {
        clientId: client.id,
        name: 'Burger Name Test',
        description: 'Testing different names for our signature burger',
        status: 'active',
        startDate: new Date(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
        variantA: 'Enterprise Burger',
        variantB: 'Signature Deluxe Burger',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.bulkDelete('ABTests', null, {});
    await queryInterface.bulkDelete('POSSettings', null, {});
    await queryInterface.bulkDelete('Modifiers', null, {});
    await queryInterface.bulkDelete('MenuItems', null, {});
    await queryInterface.bulkDelete('Locations', null, {});
    await queryInterface.bulkDelete('Users', null, {});
    await queryInterface.bulkDelete('ClientFeatures', null, {}); // Add this line
    await queryInterface.bulkDelete('ClientBrandings', null, {});
    await queryInterface.bulkDelete('Clients', null, {});
  }
};

================
File: backend/src/services/integrations/basePosService.js
================
const { MenuItem, Order, InventoryItem } = require('../../models');

class BasePosService {
  constructor(coreProfile, locationProfile) {
    this.coreProfile = coreProfile;
    this.locationProfile = locationProfile;
  }

  async processAndSaveMenuItems(menuItems) {
    for (const item of menuItems) {
      await MenuItem.upsert({
        externalId: item.id,
        name: item.name,
        description: item.description,
        price: item.price,
        locationId: this.locationProfile.id,
      });
    }
  }

  async processAndSaveOrders(orders) {
    for (const order of orders) {
      await Order.upsert({
        externalId: order.id,
        total: order.total,
        status: order.status,
        createdAt: order.createdAt,
        locationId: this.locationProfile.id,
      });
    }
  }

  async processAndSaveInventory(inventoryItems) {
    for (const item of inventoryItems) {
      await InventoryItem.upsert({
        externalId: item.id,
        name: item.name,
        quantity: item.quantity,
        locationId: this.locationProfile.id,
      });
    }
  }
}

module.exports = BasePosService;

================
File: backend/src/services/integrations/brinkService.js
================
const BasePosService = require('./basePosService');
const axios = require('axios');
const rateLimit = require('axios-rate-limit');
const pRetry = require('p-retry');

class BrinkService extends BasePosService {
  constructor(coreProfile, locationProfile) {
    super(coreProfile, locationProfile);
    this.api = rateLimit(axios.create({
      baseURL: this.coreProfile.apiEndpoint,
      headers: { 
        'X-API-Key': this.coreProfile.apiKey,
        'Content-Type': 'application/json',
      },
    }), { maxRequests: 5, perMilliseconds: 1000 });
  }

  async syncMenuItems() {
    try {
      const fetchMenuItems = async (page = 1) => {
        const response = await this.api.get(`/api/v1/menu?page=${page}`);
        return response.data;
      };

      let allMenuItems = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchMenuItems(page), { retries: 3 });
        allMenuItems = allMenuItems.concat(data.items);
        hasMore = data.hasNextPage;
        page++;
      }

      await this.processAndSaveMenuItems(allMenuItems);
      console.log(`Synced ${allMenuItems.length} menu items from Brink`);
    } catch (error) {
      console.error('Error syncing Brink menu items:', error);
      throw error;
    }
  }

  async syncOrders() {
    try {
      const fetchOrders = async (page = 1) => {
        const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
        const response = await this.api.get(`/api/v1/orders?start_date=${startDate}&page=${page}`);
        return response.data;
      };

      let allOrders = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchOrders(page), { retries: 3 });
        allOrders = allOrders.concat(data.orders);
        hasMore = data.hasNextPage;
        page++;
      }

      await this.processAndSaveOrders(allOrders);
      console.log(`Synced ${allOrders.length} orders from Brink`);
    } catch (error) {
      console.error('Error syncing Brink orders:', error);
      throw error;
    }
  }

  async syncInventory() {
    try {
      const fetchInventory = async (page = 1) => {
        const response = await this.api.get(`/api/v1/inventory?page=${page}`);
        return response.data;
      };

      let allInventoryItems = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchInventory(page), { retries: 3 });
        allInventoryItems = allInventoryItems.concat(data.items);
        hasMore = data.hasNextPage;
        page++;
      }

      await this.processAndSaveInventory(allInventoryItems);
      console.log(`Synced ${allInventoryItems.length} inventory items from Brink`);
    } catch (error) {
      console.error('Error syncing Brink inventory:', error);
      throw error;
    }
  }
}

module.exports = BrinkService;

================
File: backend/src/services/integrations/revelService.js
================
const BasePosService = require('./basePosService');
const axios = require('axios');
const rateLimit = require('axios-rate-limit');
const pRetry = require('p-retry');

class RevelService extends BasePosService {
  constructor(coreProfile, locationProfile) {
    super(coreProfile, locationProfile);
    this.api = rateLimit(axios.create({
      baseURL: this.coreProfile.apiEndpoint,
      auth: {
        username: this.coreProfile.settings.username,
        password: this.coreProfile.settings.password,
      },
      headers: { 'Content-Type': 'application/json' },
    }), { maxRequests: 5, perMilliseconds: 1000 });
  }

  async syncMenuItems() {
    try {
      const fetchMenuItems = async (offset = 0) => {
        const response = await this.api.get(`/resources/Product?limit=100&offset=${offset}`);
        return response.data;
      };

      let allMenuItems = [];
      let offset = 0;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchMenuItems(offset), { retries: 3 });
        allMenuItems = allMenuItems.concat(data.objects);
        hasMore = data.meta.next !== null;
        offset += 100;
      }

      await this.processAndSaveMenuItems(allMenuItems);
      console.log(`Synced ${allMenuItems.length} menu items from Revel`);
    } catch (error) {
      console.error('Error syncing Revel menu items:', error);
      throw error;
    }
  }

  async syncOrders() {
    try {
      const fetchOrders = async (offset = 0) => {
        const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
        const response = await this.api.get(`/resources/Order?limit=100&offset=${offset}&created_date__gte=${startDate}`);
        return response.data;
      };

      let allOrders = [];
      let offset = 0;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchOrders(offset), { retries: 3 });
        allOrders = allOrders.concat(data.objects);
        hasMore = data.meta.next !== null;
        offset += 100;
      }

      await this.processAndSaveOrders(allOrders);
      console.log(`Synced ${allOrders.length} orders from Revel`);
    } catch (error) {
      console.error('Error syncing Revel orders:', error);
      throw error;
    }
  }

  async syncInventory() {
    try {
      const fetchInventory = async (offset = 0) => {
        const response = await this.api.get(`/resources/Inventory?limit=100&offset=${offset}`);
        return response.data;
      };

      let allInventoryItems = [];
      let offset = 0;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchInventory(offset), { retries: 3 });
        allInventoryItems = allInventoryItems.concat(data.objects);
        hasMore = data.meta.next !== null;
        offset += 100;
      }

      await this.processAndSaveInventory(allInventoryItems);
      console.log(`Synced ${allInventoryItems.length} inventory items from Revel`);
    } catch (error) {
      console.error('Error syncing Revel inventory:', error);
      throw error;
    }
  }
}

module.exports = RevelService;

================
File: backend/src/services/integrations/squareService.js
================
const BasePosService = require('./basePosService');
const { Client, Environment } = require('square');
const pRetry = require('p-retry');

class SquareService extends BasePosService {
  constructor(coreProfile, locationProfile) {
    super(coreProfile, locationProfile);
    this.client = new Client({
      accessToken: this.coreProfile.apiKey,
      environment: Environment.Production, // or Environment.Sandbox for testing
    });
  }

  async syncMenuItems() {
    try {
      const fetchMenuItems = async (cursor) => {
        const response = await this.client.catalogApi.listCatalog(cursor, 'ITEM');
        return response.result;
      };

      let allMenuItems = [];
      let cursor;
      do {
        const data = await pRetry(() => fetchMenuItems(cursor), { retries: 3 });
        allMenuItems = allMenuItems.concat(data.objects);
        cursor = data.cursor;
      } while (cursor);

      await this.processAndSaveMenuItems(allMenuItems);
      console.log(`Synced ${allMenuItems.length} menu items from Square`);
    } catch (error) {
      console.error('Error syncing Square menu items:', error);
      throw error;
    }
  }

  async syncOrders() {
    try {
      const { ordersApi } = this.client;
      const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();

      const fetchOrders = async (cursor) => {
        const response = await ordersApi.searchOrders({
          locationIds: [this.locationProfile.settings.squareLocationId],
          query: {
            filter: {
              dateTimeFilter: {
                createdAt: {
                  startAt: startDate,
                },
              },
            },
          },
          cursor: cursor,
        });
        return response.result;
      };

      let allOrders = [];
      let cursor;
      do {
        const data = await pRetry(() => fetchOrders(cursor), { retries: 3 });
        allOrders = allOrders.concat(data.orders || []);
        cursor = data.cursor;
      } while (cursor);

      await this.processAndSaveOrders(allOrders);
      console.log(`Synced ${allOrders.length} orders from Square`);
    } catch (error) {
      console.error('Error syncing Square orders:', error);
      throw error;
    }
  }

  async syncInventory() {
    try {
      const fetchInventory = async (cursor) => {
        const response = await this.client.inventoryApi.retrieveInventoryCounts({
          locationIds: [this.locationProfile.settings.squareLocationId],
          cursor: cursor,
        });
        return response.result;
      };

      let allInventoryItems = [];
      let cursor;
      do {
        const data = await pRetry(() => fetchInventory(cursor), { retries: 3 });
        allInventoryItems = allInventoryItems.concat(data.counts || []);
        cursor = data.cursor;
      } while (cursor);

      await this.processAndSaveInventory(allInventoryItems);
      console.log(`Synced ${allInventoryItems.length} inventory items from Square`);
    } catch (error) {
      console.error('Error syncing Square inventory:', error);
      throw error;
    }
  }
}

module.exports = SquareService;

================
File: backend/src/services/integrations/toastService.js
================
const BasePosService = require('./basePosService');
const axios = require('axios');
const rateLimit = require('axios-rate-limit');
const pRetry = require('p-retry');

class ToastService extends BasePosService {
  constructor(coreProfile, locationProfile) {
    super(coreProfile, locationProfile);
    this.api = rateLimit(axios.create({
      baseURL: this.coreProfile.apiEndpoint,
      headers: { 
        'Authorization': `Bearer ${this.coreProfile.apiKey}`,
        'Content-Type': 'application/json',
      },
    }), { maxRequests: 5, perMilliseconds: 1000 });
  }

  async syncMenuItems() {
    try {
      const fetchMenuItems = async (page = 1) => {
        const response = await this.api.get(`/v2/menus?page=${page}`);
        return response.data;
      };

      let allMenuItems = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchMenuItems(page), { retries: 3 });
        allMenuItems = allMenuItems.concat(data.items);
        hasMore = data.hasMore;
        page++;
      }

      await this.processAndSaveMenuItems(allMenuItems);
      console.log(`Synced ${allMenuItems.length} menu items from Toast`);
    } catch (error) {
      console.error('Error syncing Toast menu items:', error);
      throw error;
    }
  }

  async syncOrders() {
    try {
      const fetchOrders = async (page = 1) => {
        const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
        const response = await this.api.get(`/v2/orders?startDate=${startDate}&page=${page}`);
        return response.data;
      };

      let allOrders = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchOrders(page), { retries: 3 });
        allOrders = allOrders.concat(data.orders);
        hasMore = data.hasMore;
        page++;
      }

      await this.processAndSaveOrders(allOrders);
      console.log(`Synced ${allOrders.length} orders from Toast`);
    } catch (error) {
      console.error('Error syncing Toast orders:', error);
      throw error;
    }
  }

  async syncInventory() {
    try {
      const fetchInventory = async (page = 1) => {
        const response = await this.api.get(`/v2/inventory/items?page=${page}`);
        return response.data;
      };

      let allInventoryItems = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const data = await pRetry(() => fetchInventory(page), { retries: 3 });
        allInventoryItems = allInventoryItems.concat(data.items);
        hasMore = data.hasMore;
        page++;
      }

      await this.processAndSaveInventory(allInventoryItems);
      console.log(`Synced ${allInventoryItems.length} inventory items from Toast`);
    } catch (error) {
      console.error('Error syncing Toast inventory:', error);
      throw error;
    }
  }
}

module.exports = ToastService;

================
File: backend/src/services/abTestMetricsService.js
================
const { ABTestMetric } = require '../models/ABTestMetric';
const { AppError } = require '../utils/errorHandler';

const trackABTestMetric = async (testId, variant: 'A' | 'B', metricType, value) => {
  const metric = await ABTestMetric.create({
    testId,
    variant,
    metricType,
    value,
  });
  return metric;
};

const getABTestMetrics = async (testId) => {
  const metrics = await ABTestMetric.findAll({
    where: { testId },
    group: ['variant', 'metricType'],
    attributes: [
      'variant',
      'metricType',
      [sequelize.fn('AVG', sequelize.col('value')), 'averageValue'],
      [sequelize.fn('COUNT', sequelize.col('id')), 'count'],
    ],
  });
  return metrics;
};

================
File: backend/src/services/abTestService.js
================
const { ABTest, ABTestVariant, ABTestMetric } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const createABTest = async (testData) => {
  try {
    const abTest = await ABTest.create(testData, {
      include: [{ model: ABTestVariant, as: 'variants' }]
    });
    logger.info(`A/B Test created with ID: ${abTest.id}`);
    return abTest;
  } catch (error) {
    logger.error('Error creating A/B Test:', error);
    throw new AppError('Failed to create A/B Test', 500);
  }
};

const getABTest = async (id) => {
  try {
    const abTest = await ABTest.findByPk(id, {
      include: [{ model: ABTestVariant, as: 'variants' }]
    });
    if (!abTest) {
      throw new AppError('A/B Test not found', 404);
    }
    return abTest;
  } catch (error) {
    logger.error(`Error fetching A/B Test with ID ${id}:`, error);
    throw error;
  }
};

const updateABTest = async (id, updateData) => {
  try {
    const abTest = await getABTest(id);
    const updatedTest = await abTest.update(updateData);
    logger.info(`A/B Test updated with ID: ${id}`);
    return updatedTest;
  } catch (error) {
    logger.error(`Error updating A/B Test with ID ${id}:`, error);
    throw error;
  }
};

const deleteABTest = async (id) => {
  try {
    const abTest = await getABTest(id);
    await abTest.destroy();
    logger.info(`A/B Test deleted with ID: ${id}`);
  } catch (error) {
    logger.error(`Error deleting A/B Test with ID ${id}:`, error);
    throw error;
  }
};

const getABTestResults = async (id) => {
  try {
    const metrics = await ABTestMetric.findAll({
      where: { abTestId: id },
      include: [{ model: ABTestVariant, as: 'variant' }]
    });
    return metrics;
  } catch (error) {
    logger.error(`Error fetching A/B Test results for ID ${id}:`, error);
    throw new AppError('Failed to fetch A/B Test results', 500);
  }
};

const startABTest = async (id) => {
  try {
    const abTest = await getABTest(id);
    await abTest.update({ status: 'RUNNING', startDate: new Date() });
    logger.info(`A/B Test started with ID: ${id}`);
    return abTest;
  } catch (error) {
    logger.error(`Error starting A/B Test with ID ${id}:`, error);
    throw error;
  }
};

const stopABTest = async (id) => {
  try {
    const abTest = await getABTest(id);
    await abTest.update({ status: 'COMPLETED', endDate: new Date() });
    logger.info(`A/B Test stopped with ID: ${id}`);
    return abTest;
  } catch (error) {
    logger.error(`Error stopping A/B Test with ID ${id}:`, error);
    throw error;
  }
};

const recordMetric = async (abTestId, variantId, metricName, metricValue) => {
  try {
    const metric = await ABTestMetric.create({
      abTestId,
      variantId,
      metricName,
      metricValue
    });
    logger.info(`Metric recorded for A/B Test ID: ${abTestId}, Variant ID: ${variantId}`);
    return metric;
  } catch (error) {
    logger.error(`Error recording metric for A/B Test ID: ${abTestId}:`, error);
    throw new AppError('Failed to record metric', 500);
  }
};

module.exports = {
  createABTest,
  getABTest,
  updateABTest,
  deleteABTest,
  getABTestResults,
  startABTest,
  stopABTest,
  recordMetric
};

================
File: backend/src/services/adminService.js
================
const { User } = require('../models');
const logger = require('../utils/logger');
const { AppError } = require('../utils/errorHandler');

const getUsers = async (query) => {
  try {
    const users = await User.findAll({
      where: query,
      attributes: { exclude: ['password'] }
    });
    return users;
  } catch (error) {
    logger.error('Error fetching users:', error);
    throw new AppError('Error fetching users', 500);
  }
};

const createUser = async (userData) => {
  try {
    const newUser = await User.create(userData);
    return newUser;
  } catch (error) {
    logger.error('Error creating user:', error);
    throw new AppError('Error creating user', 500);
  }
};

const updateUser = async (userId, userData) => {
  try {
    const user = await User.findByPk(userId);
    if (!user) {
      throw new AppError('User not found', 404);
    }
    const updatedUser = await user.update(userData);
    return updatedUser;
  } catch (error) {
    logger.error(`Error updating user ${userId}:`, error);
    throw new AppError('Error updating user', 500);
  }
};

const deleteUser = async (userId) => {
  try {
    const user = await User.findByPk(userId);
    if (!user) {
      throw new AppError('User not found', 404);
    }
    await user.destroy();
  } catch (error) {
    logger.error(`Error deleting user ${userId}:`, error);
    throw new AppError('Error deleting user', 500);
  }
};

const getSystemLogs = async (query) => {
  // Implement system log retrieval logic
  // This might involve querying a logs table or reading log files
  throw new AppError('System logs retrieval not implemented', 501);
};

const getSystemHealth = async () => {
  // Implement system health check logic
  // This might involve checking database connection, API endpoints, etc.
  throw new AppError('System health check not implemented', 501);
};

const backupDatabase = async () => {
  // Implement database backup logic
  throw new AppError('Database backup not implemented', 501);
};

const restoreDatabase = async (backupId) => {
  // Implement database restore logic
  throw new AppError('Database restore not implemented', 501);
};

module.exports = {
  getUsers,
  createUser,
  updateUser,
  deleteUser,
  getSystemLogs,
  getSystemHealth,
  backupDatabase,
  restoreDatabase
};

================
File: backend/src/services/analyticsService.js
================
const { Order, User, MenuItem } = require('../models');
const { Op } = require('sequelize');

const getRevenueData = async (startDate, endDate) => {
  const revenue = await Order.sum('total', {
    where: {
      createdAt: {
        [Op.between]: [startDate, endDate]
      }
    }
  });

  return { revenue };
};

const getCustomerMetrics = async () => {
  const totalCustomers = await User.count();
  const newCustomers = await User.count({
    where: {
      createdAt: {
        [Op.gte]: new Date(new Date().setDate(new Date().getDate() - 30))
      }
    }
  });

  return { totalCustomers, newCustomers };
};

const getRealtimeMetrics = async () => {
  const currentDate = new Date();
  const startOfDay = new Date(currentDate.setHours(0,0,0,0));

  const ordersToday = await Order.count({
    where: {
      createdAt: {
        [Op.gte]: startOfDay
      }
    }
  });

  const revenueToday = await Order.sum('total', {
    where: {
      createdAt: {
        [Op.gte]: startOfDay
      }
    }
  });

  const topSellingItems = await MenuItem.findAll({
    attributes: [
      'id',
      'name',
      [sequelize.fn('SUM', sequelize.col('OrderItems.quantity')), 'totalSold']
    ],
    include: [{
      model: OrderItem,
      attributes: [],
      where: {
        createdAt: {
          [Op.gte]: startOfDay
        }
      }
    }],
    group: ['MenuItem.id'],
    order: [[sequelize.literal('totalSold'), 'DESC']],
    limit: 5
  });

  return {
    ordersToday,
    revenueToday,
    topSellingItems
  };
};

module.exports = {
  getRevenueData,
  getCustomerMetrics,
  getRealtimeMetrics
};

================
File: backend/src/services/analyticsService.Js
================
import { Order, Customer, Product } from '../models';
import { Op, Sequelize } from 'sequelize';
import { redisClient } from '../config/redis';

export const getRevenueData = async (startDate: Date, endDate: Date) => {
  const cacheKey = `revenue:${startDate.toISOString()}:${endDate.toISOString()}`;
  const cachedData = await redisClient.get(cacheKey);

  if (cachedData) {
    return JSON.parse(cachedData);
  }

  const revenue = await Order.findAll({
    where: {
      createdAt: {
        [Op.between]: [startDate, endDate]
      }
    },
    attributes: [
      [Sequelize.fn('date', Sequelize.col('createdAt')), 'date'],
      [Sequelize.fn('sum', Sequelize.col('total')), 'amount']
    ],
    group: [Sequelize.fn('date', Sequelize.col('createdAt'))],
    order: [[Sequelize.fn('date', Sequelize.col('createdAt')), 'ASC']]
  });

  await redisClient.set(cacheKey, JSON.stringify(revenue), 'EX', 3600); // Cache for 1 hour

  return revenue;
};

export const getCustomerMetrics = async () => {
  const cacheKey = 'customer_metrics';
  const cachedData = await redisClient.get(cacheKey);

  if (cachedData) {
    return JSON.parse(cachedData);
  }

  const [totalCustomers, newCustomers, repeatCustomers, averageOrderValue] = await Promise.all([
    Customer.count(),
    Customer.count({
      where: {
        createdAt: {
          [Op.gte]: new Date(new Date().setDate(new Date().getDate() - 30))
        }
      }
    }),
    Order.count({
      distinct: true,
      col: 'customerId',
      where: {
        createdAt: {
          [Op.gte]: new Date(new Date().setDate(new Date().getDate() - 30))
        }
      },
      having: Sequelize.literal('COUNT(DISTINCT(createdAt)) > 1')
    }),
    Order.findOne({
      attributes: [[Sequelize.fn('AVG', Sequelize.col('total')), 'averageOrderValue']],
      raw: true
    })
  ]);

  const metrics = {
    totalCustomers,
    newCustomers,
    repeatCustomers,
    averageOrderValue: averageOrderValue?.averageOrderValue || 0
  };

  await redisClient.set(cacheKey, JSON.stringify(metrics), 'EX', 300); // Cache for 5 minutes

  return metrics;
};

export const getRealtimeMetricsData = async () => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const [todaySales, todayOrders, newGuests, returningGuests, mostPopularItem] = await Promise.all([
    Order.sum('total', { where: { createdAt: { [Op.gte]: today } } }),
    Order.count({ where: { createdAt: { [Op.gte]: today } } }),
    Customer.count({ where: { createdAt: { [Op.gte]: today } } }),
    Order.count({
      distinct: true,
      col: 'customerId',
      where: {
        createdAt: { [Op.gte]: today },
        '$customer.createdAt$': { [Op.lt]: today }
      },
      include: [{ model: Customer, attributes: [] }]
    }),
    Product.findOne({
      attributes: ['name'],
      include: [{
        model: Order,
        attributes: [],
        where: { createdAt: { [Op.gte]: today } }
      }],
      order: [[Sequelize.fn('COUNT', Sequelize.col('orders.id')), 'DESC']],
      group: ['Product.id'],
      limit: 1
    })
  ]);

  const averageOrderValue = todayOrders > 0 ? todaySales / todayOrders : 0;

  return {
    todaySales,
    todayOrders,
    averageOrderValue,
    newGuests,
    returningGuests,
    mostPopularItem: mostPopularItem?.name || ''
  };
};

import { Order, MenuItem, User } from '../models';
import { Op } from 'sequelize';

export const generateSalesReport = async (startDate: Date, endDate: Date) => {
  const orders = await Order.findAll({
    where: {
      createdAt: {
        [Op.between]: [startDate, endDate]
      }
    },
    include: [{ model: MenuItem }]
  });

  // Process orders and generate report
  // ...

  return {
    totalSales: orders.reduce((sum, order) => sum + order.total, 0),
    orderCount: orders.length,
    // Add more metrics as needed
  };
};

export const generateForecast = async () => {
  // Implement forecasting logic based on historical data
  // ...
};

================
File: backend/src/services/auditLogService.js
================
const { AuditLog, Op } = require('../models');
const logger = require('../logger');

// Function to create an audit log entry
exports.createAuditLog = async (action, details, userId) => {
  try {
    // Log using Winston
    logger.info(`Action: ${action}, Details: ${JSON.stringify(details)}, User ID: ${userId}`);
    
    // Create the audit log entry in the database
    await AuditLog.create({ action, details, userId });
  } catch (error) {
    logger.error(`Error creating audit log: ${error.message}`);
  }
};

// Function to fetch audit logs with optional filters
exports.fetchAuditLogs = async (filters) => {
  try {
    const whereClause = {};

    // Apply filters for userId, action, and date range
    if (filters.userId) whereClause.userId = filters.userId;
    if (filters.action) whereClause.action = filters.action;
    if (filters.dateRangeStart && filters.dateRangeEnd) {
      whereClause.timestamp = {
        [Op.between]: [filters.dateRangeStart, filters.dateRangeEnd],
      };
    }

    // Fetch the audit logs based on filters
    return await AuditLog.findAll({ where: whereClause, order: [['timestamp', 'DESC']] });
  } catch (error) {
    logger.error(`Error fetching audit logs: ${error.message}`);
    throw new Error('Error fetching audit logs');
  }
};

================
File: backend/src/services/authService.js
================
const speakeasy = require 'speakeasy';
const { User } = require '../models';

const generateTwoFactorSecret = () => {
  return speakeasy.generateSecret({ length: 32 });
};

const verifyTwoFactor = (token, secret) => {
  return speakeasy.totp.verify({
    secret,
    encoding: 'base32',
    token,
  });
};

const enableTwoFactor = async (userId, secret) => {
  await User.update({ twoFactorSecret, twoFactorEnabled }, { where: { id } });
};

const disableTwoFactor = async (userId) => {
  await User.update({ twoFactorSecret, twoFactorEnabled }, { where: { id } });
};

================
File: backend/src/services/brandingService.js
================
const { BrandingProfile } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getBrandingProfiles = async (clientId) => {
  if (!clientId) {
    throw new AppError('Client ID is required', 400);
  }
  return await BrandingProfile.findAll({ where: { clientId } });
};

const getBrandingProfileById = async (id) => {
  if (!id) {
    throw new AppError('Profile ID is required', 400);
  }
  const profile = await BrandingProfile.findByPk(id);
  if (!profile) {
    throw new AppError('Branding profile not found', 404);
  }
  return profile;
};

const createBrandingProfile = async (profileData) => {
  if (!profileData || !profileData.clientId) {
    throw new AppError('Invalid profile data', 400);
  }
  try {
    return await BrandingProfile.create(profileData);
  } catch (error) {
    logger.error('Error creating branding profile:', error);
    throw new AppError('Failed to create branding profile', 500);
  }
};

const updateBrandingProfile = async (id, profileData) => {
  if (!id || !profileData) {
    throw new AppError('Invalid update data', 400);
  }
  const profile = await getBrandingProfileById(id);
  try {
    return await profile.update(profileData);
  } catch (error) {
    logger.error(`Error updating branding profile ${id}:`, error);
    throw new AppError('Failed to update branding profile', 500);
  }
};

const deleteBrandingProfile = async (id) => {
  if (!id) {
    throw new AppError('Profile ID is required', 400);
  }
  const profile = await getBrandingProfileById(id);
  try {
    await profile.destroy();
  } catch (error) {
    logger.error(`Error deleting branding profile ${id}:`, error);
    throw new AppError('Failed to delete branding profile', 500);
  }
};

module.exports = {
  getBrandingProfiles,
  getBrandingProfileById,
  createBrandingProfile,
  updateBrandingProfile,
  deleteBrandingProfile
};

================
File: backend/src/services/campaignResultService.js
================
const { CampaignResult } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllCampaignResults = async () => {
  return await CampaignResult.findAll();
};

const getCampaignResultById = async (id) => {
  return await CampaignResult.findByPk(id);
};

const createCampaignResult = async (data) => {
  return await CampaignResult.create(data);
};

const updateCampaignResult = async (id, data) => {
  const result = await CampaignResult.findByPk(id);
  if (!result) {
    return null;
  }
  return await result.update(data);
};

const deleteCampaignResult = async (id) => {
  const result = await CampaignResult.findByPk(id);
  if (!result) {
    return false;
  }
  await result.destroy();
  return true;
};

module.exports = {
  getAllCampaignResults,
  getCampaignResultById,
  createCampaignResult,
  updateCampaignResult,
  deleteCampaignResult
};

================
File: backend/src/services/cartService.js
================
const Cart = require('../models/Cart');
const DiscountService = require('./DiscountService');
const LoyaltyService = require('./LoyaltyService');

class CartService {
  static async calculateCart(cartId) {
    const cart = await Cart.findByPk(cartId, {
      include: ['Items', 'Discounts', 'LoyaltyRewards'],
    });

    let cartTotal = 0;

    // Calculate item totals
    cart.Items.forEach(item => {
      cartTotal += item.price;
      item.Modifiers.forEach(modifier => {
        if (modifier.price > 0) {
          cartTotal += modifier.price;
        }
      });
    });

    // Apply discounts
    cartTotal = await DiscountService.applyDiscounts(cart, cartTotal);

    // Apply loyalty rewards
    cartTotal = await LoyaltyService.applyLoyaltyRewards(cart, cartTotal);

    // Apply service fees, taxes, etc.

    return {
      cartTotal,
      breakdown: {
        items: cart.Items,
        discounts: cart.Discounts,
        loyaltyRewards: cart.LoyaltyRewards,
      },
    };
  }
}

module.exports = CartService;

================
File: backend/src/services/categoryService.js
================
const { Category } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllCategories = async (clientId) => {
  try {
    return await Category.findAll({ where: { clientId } });
  } catch (error) {
    logger.error('Error fetching all categories:', error);
    throw new AppError('Failed to fetch categories', 500);
  }
};

const getCategoryById = async (id, clientId) => {
  try {
    const category = await Category.findOne({ where: { id, clientId } });
    if (!category) {
      throw new AppError('Category not found', 404);
    }
    return category;
  } catch (error) {
    logger.error(`Error fetching category with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch category', 500);
  }
};

const createCategory = async (categoryData, clientId) => {
  try {
    const newCategory = await Category.create({ ...categoryData, clientId });
    logger.info(`New category created with ID: ${newCategory.id}`);
    return newCategory;
  } catch (error) {
    logger.error('Error creating category:', error);
    throw new AppError('Failed to create category', 500);
  }
};

const updateCategory = async (id, categoryData, clientId) => {
  try {
    const category = await getCategoryById(id, clientId);
    const updatedCategory = await category.update(categoryData);
    logger.info(`Category updated with ID: ${id}`);
    return updatedCategory;
  } catch (error) {
    logger.error(`Error updating category with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update category', 500);
  }
};

const deleteCategory = async (id, clientId) => {
  try {
    const category = await getCategoryById(id, clientId);
    await category.destroy();
    logger.info(`Category deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting category with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete category', 500);
  }
};

module.exports = {
  getAllCategories,
  getCategoryById,
  createCategory,
  updateCategory,
  deleteCategory
};

================
File: backend/src/services/cateringOrderService.js
================
const db = require('../models');
const logger = require('../services/logger');
const TaxService = require('./taxService');
const PaymentService = require('./paymentService');
const LoyaltyService = require('./loyaltyService'); // In case loyalty points are involved

class CateringOrderService {
  // Calculate the total price for a catering order
  calculateOrderTotal(items, fees = {}, tips = {}) {
    const itemTotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);

    // Calculate fees and tips
    const serviceFee = fees.serviceFee || 0;
    const packagingFee = fees.packagingFee || 0;
    const deliveryFee = fees.deliveryFee || 0;
    const kitchenTip = tips.kitchenTip || 0;
    const driverTip = tips.driverTip || 0;

    // Calculate the grand total
    const total = itemTotal + serviceFee + packagingFee + deliveryFee + kitchenTip + driverTip;

    return parseFloat(total.toFixed(2));
  }

  // Create a new catering order with all logic
  async createCateringOrder(orderData) {
    try {
      const {
        guestId,
        houseAccountId,
        orderDate,
        scheduledDate,
        locationId,
        items,
        fees,
        tips,
        provider,
      } = orderData;

      // Fetch applicable tax using the TaxService
      const taxDetails = await TaxService.getApplicableTax(locationId, provider, guestId);

      // Calculate the subtotal and then the total with tax
      const subtotal = this.calculateOrderTotal(items, fees, tips);
      const totalWithTax = subtotal + (subtotal * taxDetails.rate) / 100;

      // Handle loyalty points if applicable
      if (orderData.loyaltyPointsUsed) {
        await LoyaltyService.deductPoints(guestId, orderData.loyaltyPointsUsed);
      }

      // Create the catering order
      const order = await db.CateringOrder.create({
        guestId,
        houseAccountId,
        orderDate,
        scheduledDate,
        totalPrice: totalWithTax,
        orderDetails: items,
        taxExempt: taxDetails.rate === 0,
        taxIdNumber: taxDetails.taxId,
      });

      // Handle payment if required
      if (orderData.paymentData) {
        await PaymentService.processPayment({
          amount: totalWithTax,
          currency: 'usd', // or another currency
          paymentMethod: orderData.paymentData.paymentMethod,
          guestId,
          locationId,
        });
      }

      logger.info(`Catering order created: ID ${order.id} for guest ID ${guestId}`);
      return order;
    } catch (error) {
      logger.error(`Error creating catering order: ${error.message}`);
      throw new Error('Error creating catering order');
    }
  }

  // Fetch all catering orders by house account
  async getCateringOrdersByHouseAccount(houseAccountId) {
    try {
      const orders = await db.CateringOrder.findAll({
        where: { houseAccountId },
      });
      return orders;
    } catch (error) {
      logger.error(`Error fetching catering orders for house account ID ${houseAccountId}: ${error.message}`);
      throw new Error('Error fetching catering orders');
    }
  }

  // Fetch all catering orders by guest
  async getCateringOrdersByGuest(guestId) {
    try {
      const orders = await db.CateringOrder.findAll({
        where: { guestId },
      });
      return orders;
    } catch (error) {
      logger.error(`Error fetching catering orders for guest ID ${guestId}: ${error.message}`);
      throw new Error('Error fetching catering orders');
    }
  }

  // Handle catering order invoicing
  async handleCateringInvoicing(orderId) {
    try {
      const order = await db.CateringOrder.findByPk(orderId);
      if (!order) throw new Error('Catering order not found');

      // Invoicing logic: calculate invoice total, apply discounts, etc.
      const invoiceTotal = order.totalPrice; // Can be extended to handle discounts and additional charges

      logger.info(`Catering invoicing processed for order ID ${orderId}`);
      return { success: true, message: 'Invoicing processed successfully', invoiceTotal };
    } catch (error) {
      logger.error(`Error handling catering invoicing for order ID ${orderId}: ${error.message}`);
      throw new Error('Error handling catering invoicing');
    }
  }
}

module.exports = new CateringOrderService();

================
File: backend/src/services/cateringService.js
================
const db = require('../models');
const { Op } = require('sequelize');
const logger = require('../utils/logger');

class CateringService {
  // Function to schedule future catering orders
  static async scheduleCateringOrder(orderData) {
    try {
      const cateringOrder = await db.CateringOrder.create(orderData);
      logger.info(`Catering order scheduled successfully. Order ID: ${cateringOrder.id}`);
      return cateringOrder;
    } catch (error) {
      logger.error('Error scheduling catering order:', error);
      throw error;
    }
  }

  // Function to retrieve all scheduled catering orders within a given time range
  static async getScheduledOrders(startDate, endDate) {
    try {
      const orders = await db.CateringOrder.findAll({
        where: {
          scheduledDate: {
            [Op.between]: [startDate, endDate],
          },
        },
        include: [{ model: db.Guest }],
      });
      logger.info(`Retrieved ${orders.length} scheduled catering orders.`);
      return orders;
    } catch (error) {
      logger.error('Error fetching scheduled catering orders:', error);
      throw error;
    }
  }

  // Function to handle cancellations with notice period enforcement
  static async cancelCateringOrder(orderId, noticeHours = 24) {
    try {
      const order = await db.CateringOrder.findByPk(orderId);
      if (!order) {
        throw new Error('Order not found');
      }

      const now = new Date();
      const scheduledTime = new Date(order.scheduledDate);
      const timeDifference = (scheduledTime - now) / (1000 * 60 * 60); // Convert to hours

      if (timeDifference < noticeHours) {
        throw new Error(`Cannot cancel. Orders require a minimum of ${noticeHours} hours notice.`);
      }

      await order.destroy();
      logger.info(`Catering order ID ${orderId} cancelled successfully.`);
      return { message: 'Order cancelled successfully' };
    } catch (error) {
      logger.error(`Error cancelling catering order ID ${orderId}:`, error);
      throw error;
    }
  }

  // Function to process scheduled catering orders
  static async handleScheduledOrders() {
    try {
      const orders = await db.CateringOrder.findAll({
        where: {
          status: 'scheduled',
          scheduledDate: { [Op.lte]: new Date() },
        },
      });

      for (const order of orders) {
        // Logic to mark the order as "in-progress"
        order.status = 'in-progress';
        await order.save();

        // Trigger necessary preparations (e.g., kitchen, delivery, etc.)
        logger.info(`Processing scheduled catering order: Order ID ${order.id}`);

        // Mark the order as "completed"
        order.status = 'completed';
        await order.save();

        logger.info(`Catering order ID ${order.id} completed.`);
      }
    } catch (error) {
      logger.error('Error handling scheduled catering orders:', error);
      throw error;
    }
  }
}

module.exports = CateringService;

================
File: backend/src/services/checkoutService.js
================
const { Order, OrderItem, Coupon } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const initializeCheckout = async (checkoutData, clientId) => {
  try {
    // Implement checkout initialization logic
    // This might involve creating a temporary order or checkout session
    logger.info(`Checkout initialized for client: ${clientId}`);
    return { checkoutId: 'temp-id', ...checkoutData };
  } catch (error) {
    logger.error('Error initializing checkout:', error);
    throw new AppError('Failed to initialize checkout', 500);
  }
};

const processPayment = async (paymentData, clientId) => {
  try {
    // Implement payment processing logic
    // This might involve calling a payment gateway
    logger.info(`Payment processed for client: ${clientId}`);
    return { success: true, transactionId: 'mock-transaction-id' };
  } catch (error) {
    logger.error('Error processing payment:', error);
    throw new AppError('Failed to process payment', 500);
  }
};

const confirmOrder = async (orderData, clientId) => {
  try {
    // Implement order confirmation logic
    const order = await Order.create({ ...orderData, clientId });
    logger.info(`Order confirmed for client: ${clientId}, Order ID: ${order.id}`);
    return order;
  } catch (error) {
    logger.error('Error confirming order:', error);
    throw new AppError('Failed to confirm order', 500);
  }
};

const getCheckoutStatus = async (checkoutId, clientId) => {
  try {
    // Implement logic to fetch checkout status
    // This might involve querying the database for the current state of the order
    logger.info(`Fetched checkout status for ID: ${checkoutId}, Client: ${clientId}`);
    return { status: 'pending', checkoutId };
  } catch (error) {
    logger.error(`Error fetching checkout status for ID ${checkoutId}:`, error);
    throw new AppError('Failed to fetch checkout status', 500);
  }
};

const applyCoupon = async (checkoutId, couponCode, clientId) => {
  try {
    // Implement coupon application logic
    const coupon = await Coupon.findOne({ where: { code: couponCode, clientId } });
    if (!coupon) {
      throw new AppError('Invalid coupon code', 400);
    }
    logger.info(`Coupon applied to checkout: ${checkoutId}, Client: ${clientId}`);
    return { success: true, discount: coupon.discountAmount };
  } catch (error) {
    logger.error('Error applying coupon:', error);
    throw error instanceof AppError ? error : new AppError('Failed to apply coupon', 500);
  }
};

const removeCoupon = async (checkoutId, clientId) => {
  try {
    // Implement coupon removal logic
    logger.info(`Coupon removed from checkout: ${checkoutId}, Client: ${clientId}`);
    return { success: true };
  } catch (error) {
    logger.error('Error removing coupon:', error);
    throw new AppError('Failed to remove coupon', 500);
  }
};

const updateShippingAddress = async (checkoutId, address, clientId) => {
  try {
    // Implement shipping address update logic
    logger.info(`Shipping address updated for checkout: ${checkoutId}, Client: ${clientId}`);
    return { success: true, updatedAddress: address };
  } catch (error) {
    logger.error('Error updating shipping address:', error);
    throw new AppError('Failed to update shipping address', 500);
  }
};

const getPaymentMethods = async (clientId) => {
  try {
    // Implement logic to fetch available payment methods
    // This might involve querying a database or external payment service
    logger.info(`Fetched payment methods for client: ${clientId}`);
    return ['credit_card', 'paypal', 'apple_pay']; // Example payment methods
  } catch (error) {
    logger.error('Error fetching payment methods:', error);
    throw new AppError('Failed to fetch payment methods', 500);
  }
};

module.exports = {
  initializeCheckout,
  processPayment,
  confirmOrder,
  getCheckoutStatus,
  applyCoupon,
  removeCoupon,
  updateShippingAddress,
  getPaymentMethods
};

================
File: backend/src/services/clientBrandingService.js
================
const ClientBranding = require '../models/ClientBranding';
const { AppError } = require '../utils/errorHandler';

const getClientBranding = async (clientId) => {
  const branding = await ClientBranding.findOne({ where: { clientId } });
  if (!branding) {
    throw new AppError('Client branding not found', 404);
  }
  return branding;
};

const updateClientBranding = async (clientId, brandingData) => {
  const branding = await ClientBranding.findOne({ where: { clientId } });
  if (!branding) {
    throw new AppError('Client branding not found', 404);
  }
  await branding.update(brandingData);
  return branding;
};

================
File: backend/src/services/clientService.js
================
const { Client, ClientSettings } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllClients = async () => {
  try {
    return await Client.findAll();
  } catch (error) {
    logger.error('Error fetching all clients:', error);
    throw new AppError('Failed to fetch clients', 500);
  }
};

const getClientById = async (id) => {
  try {
    const client = await Client.findByPk(id);
    if (!client) {
      throw new AppError('Client not found', 404);
    }
    return client;
  } catch (error) {
    logger.error(`Error fetching client with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch client', 500);
  }
};

const createClient = async (clientData) => {
  try {
    const newClient = await Client.create(clientData);
    logger.info(`New client created with ID: ${newClient.id}`);
    return newClient;
  } catch (error) {
    logger.error('Error creating client:', error);
    throw new AppError('Failed to create client', 500);
  }
};

const updateClient = async (id, clientData) => {
  try {
    const client = await getClientById(id);
    const updatedClient = await client.update(clientData);
    logger.info(`Client updated with ID: ${id}`);
    return updatedClient;
  } catch (error) {
    logger.error(`Error updating client with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update client', 500);
  }
};

const deleteClient = async (id) => {
  try {
    const client = await getClientById(id);
    await client.destroy();
    logger.info(`Client deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting client with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete client', 500);
  }
};

const getClientSettings = async (clientId) => {
  try {
    const settings = await ClientSettings.findOne({ where: { clientId } });
    if (!settings) {
      throw new AppError('Client settings not found', 404);
    }
    return settings;
  } catch (error) {
    logger.error(`Error fetching settings for client ${clientId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch client settings', 500);
  }
};

const updateClientSettings = async (clientId, settingsData) => {
  try {
    const [settings, created] = await ClientSettings.findOrCreate({
      where: { clientId },
      defaults: settingsData
    });

    if (!created) {
      await settings.update(settingsData);
    }

    logger.info(`Settings updated for client: ${clientId}`);
    return settings;
  } catch (error) {
    logger.error(`Error updating settings for client ${clientId}:`, error);
    throw new AppError('Failed to update client settings', 500);
  }
};

module.exports = {
  getAllClients,
  getClientById,
  createClient,
  updateClient,
  deleteClient,
  getClientSettings,
  updateClientSettings
};

================
File: backend/src/services/commissaryKitchenService.js
================
const { CommissaryKitchen, Inventory } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllCommissaryKitchens = async (clientId) => {
  try {
    return await CommissaryKitchen.findAll({ where: { clientId } });
  } catch (error) {
    logger.error('Error fetching all commissary kitchens:', error);
    throw new AppError('Failed to fetch commissary kitchens', 500);
  }
};

const getCommissaryKitchenById = async (id, clientId) => {
  try {
    const kitchen = await CommissaryKitchen.findOne({ where: { id, clientId } });
    if (!kitchen) {
      throw new AppError('Commissary kitchen not found', 404);
    }
    return kitchen;
  } catch (error) {
    logger.error(`Error fetching commissary kitchen with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch commissary kitchen', 500);
  }
};

const createCommissaryKitchen = async (kitchenData, clientId) => {
  try {
    const newKitchen = await CommissaryKitchen.create({ ...kitchenData, clientId });
    logger.info(`New commissary kitchen created with ID: ${newKitchen.id}`);
    return newKitchen;
  } catch (error) {
    logger.error('Error creating commissary kitchen:', error);
    throw new AppError('Failed to create commissary kitchen', 500);
  }
};

const updateCommissaryKitchen = async (id, kitchenData, clientId) => {
  try {
    const kitchen = await getCommissaryKitchenById(id, clientId);
    const updatedKitchen = await kitchen.update(kitchenData);
    logger.info(`Commissary kitchen updated with ID: ${id}`);
    return updatedKitchen;
  } catch (error) {
    logger.error(`Error updating commissary kitchen with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update commissary kitchen', 500);
  }
};

const deleteCommissaryKitchen = async (id, clientId) => {
  try {
    const kitchen = await getCommissaryKitchenById(id, clientId);
    await kitchen.destroy();
    logger.info(`Commissary kitchen deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting commissary kitchen with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete commissary kitchen', 500);
  }
};

const getCommissaryKitchenInventory = async (kitchenId, clientId) => {
  try {
    await getCommissaryKitchenById(kitchenId, clientId); // Ensure kitchen exists
    const inventory = await Inventory.findAll({ where: { commissaryKitchenId: kitchenId } });
    return inventory;
  } catch (error) {
    logger.error(`Error fetching inventory for commissary kitchen ${kitchenId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch commissary kitchen inventory', 500);
  }
};

const updateCommissaryKitchenInventory = async (kitchenId, inventoryData, clientId) => {
  try {
    await getCommissaryKitchenById(kitchenId, clientId); // Ensure kitchen exists
    const updatedInventory = await Promise.all(
      inventoryData.map(async (item) => {
        const [inventoryItem, created] = await Inventory.findOrCreate({
          where: { commissaryKitchenId: kitchenId, itemId: item.itemId },
          defaults: { ...item, commissaryKitchenId: kitchenId }
        });
        if (!created) {
          await inventoryItem.update(item);
        }
        return inventoryItem;
      })
    );
    logger.info(`Inventory updated for commissary kitchen with ID: ${kitchenId}`);
    return updatedInventory;
  } catch (error) {
    logger.error(`Error updating inventory for commissary kitchen ${kitchenId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update commissary kitchen inventory', 500);
  }
};

module.exports = {
  getAllCommissaryKitchens,
  getCommissaryKitchenById,
  createCommissaryKitchen,
  updateCommissaryKitchen,
  deleteCommissaryKitchen,
  getCommissaryKitchenInventory,
  updateCommissaryKitchenInventory
};

================
File: backend/src/services/corePosProfileService.js
================
const { CorePOSProfile, LocationPOSProfile } = require('../models');
const ToastService = require('./integrations/toastService');
const BrinkService = require('./integrations/brinkService');
const RevelService = require('./integrations/revelService');
const SquareService = require('./integrations/squareService');

class CorePosProfileService {
  async getAll() {
    return CorePOSProfile.findAll({ where: { isActive: true } });
  }

  async getById(id) {
    return CorePOSProfile.findByPk(id);
  }

  async create(data) {
    return CorePOSProfile.create(data);
  }

  async update(id, data) {
    const profile = await CorePOSProfile.findByPk(id);
    if (profile) {
      return profile.update(data);
    }
    return null;
  }

  async delete(id) {
    await CorePOSProfile.update({ isActive: false }, { where: { id } });
  }

  async syncLocation(locationProfileId) {
    const locationProfile = await LocationPOSProfile.findByPk(locationProfileId, {
      include: [CorePOSProfile],
    });
    if (!locationProfile) {
      throw new Error('Location POS profile not found');
    }

    const coreProfile = locationProfile.CorePOSProfile;

    let integrationService;
    switch (coreProfile.posType) {
      case 'TOAST':
        integrationService = new ToastService(coreProfile, locationProfile);
        break;
      case 'BRINK':
        integrationService = new BrinkService(coreProfile, locationProfile);
        break;
      case 'REVEL':
        integrationService = new RevelService(coreProfile, locationProfile);
        break;
      case 'SQUARE':
        integrationService = new SquareService(coreProfile, locationProfile);
        break;
      default:
        throw new Error('Unsupported POS type');
    }

    try {
      await locationProfile.update({ lastSyncStatus: 'IN_PROGRESS' });

      await integrationService.syncMenuItems();
      await integrationService.syncOrders();
      await integrationService.syncInventory();
      
      await locationProfile.update({
        lastSyncStatus: 'SUCCESS',
        lastSyncError: null,
        lastSyncTimestamp: new Date(),
      });
    } catch (error) {
      await locationProfile.update({
        lastSyncStatus: 'FAILED',
        lastSyncError: error.message,
        lastSyncTimestamp: new Date(),
      });
      throw error;
    }
  }
}

module.exports = new CorePosProfileService();

================
File: backend/src/services/currencyService.js
================
const axios = require 'axios';

const API_KEY = process.env.CURRENCY_API_KEY;
const BASE_URL = 'https://api.exchangeratesapi.io/latest';

const convertCurrency = async (amount, from, to) => {
  const response = await axios.get(`${BASE_URL}?base=${from}&symbols=${to}&access_key=${API_KEY}`);
  const rate = response.data.rates[to];
  return amount * rate;
};

================
File: backend/src/services/dashboardService.js
================
const { Order, MenuItem } = require('../models');
const { Op } = require('sequelize');
const { io } = require('../socket');

const getDashboardData = async () => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const orders = await Order.findAll({
    where: {
      createdAt: {
        [Op.gte]: today
      }
    },
    include: [{ model: MenuItem }]
  });

  const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);
  const totalOrders = orders.length;
  const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;

  const itemSales = orders.flatMap(order => 
    order.items.map(item => ({
      name: item.name,
      quantity: item.quantity,
      revenue: item.price * item.quantity
    }))
  );

  const topSellingItems = Object.values(itemSales.reduce((acc, item) => {
    if (!acc[item.name]) {
      acc[item.name] = { name: item.name, quantity: 0, revenue: 0 };
    }
    acc[item.name].quantity += item.quantity;
    acc[item.name].revenue += item.revenue;
    return acc;
  }, {})).sort((a, b) => b.quantity - a.quantity).slice(0, 5);

  const recentOrders = orders
    .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())
    .slice(0, 10)
    .map(order => ({
      id: order.id,
      total: order.total,
      status: order.status
    }));

  return {
    totalRevenue,
    totalOrders,
    averageOrderValue,
    topSellingItems,
    recentOrders
  };
};

const emitDashboardUpdate = async () => {
  const dashboardData = await getDashboardData();
  io.emit('dashboard-update', dashboardData);
};

const emitNewOrder = (order) => {
  io.emit('new-order', {
    id: order.id,
    total: order.total,
    status: order.status
  });
};

module.exports = {
  getDashboardData,
  emitDashboardUpdate,
  emitNewOrder
};

================
File: backend/src/services/deliveryDriverService.js
================
const { DeliveryDriver, Order } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllDeliveryDrivers = async (clientId) => {
  try {
    return await DeliveryDriver.findAll({ where: { clientId } });
  } catch (error) {
    logger.error('Error fetching all delivery drivers:', error);
    throw new AppError('Failed to fetch delivery drivers', 500);
  }
};

const getDeliveryDriverById = async (id, clientId) => {
  try {
    const driver = await DeliveryDriver.findOne({ where: { id, clientId } });
    if (!driver) {
      throw new AppError('Delivery driver not found', 404);
    }
    return driver;
  } catch (error) {
    logger.error(`Error fetching delivery driver with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch delivery driver', 500);
  }
};

const createDeliveryDriver = async (driverData, clientId) => {
  try {
    const newDriver = await DeliveryDriver.create({ ...driverData, clientId });
    logger.info(`New delivery driver created with ID: ${newDriver.id}`);
    return newDriver;
  } catch (error) {
    logger.error('Error creating delivery driver:', error);
    throw new AppError('Failed to create delivery driver', 500);
  }
};

const updateDeliveryDriver = async (id, driverData, clientId) => {
  try {
    const driver = await getDeliveryDriverById(id, clientId);
    const updatedDriver = await driver.update(driverData);
    logger.info(`Delivery driver updated with ID: ${id}`);
    return updatedDriver;
  } catch (error) {
    logger.error(`Error updating delivery driver with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update delivery driver', 500);
  }
};

const deleteDeliveryDriver = async (id, clientId) => {
  try {
    const driver = await getDeliveryDriverById(id, clientId);
    await driver.destroy();
    logger.info(`Delivery driver deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting delivery driver with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete delivery driver', 500);
  }
};

const getActiveDeliveries = async (driverId, clientId) => {
  try {
    await getDeliveryDriverById(driverId, clientId); // Ensure driver exists
    const activeDeliveries = await Order.findAll({
      where: { driverId, status: 'in_progress', clientId }
    });
    return activeDeliveries;
  } catch (error) {
    logger.error(`Error fetching active deliveries for driver ${driverId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch active deliveries', 500);
  }
};

const updateDeliveryStatus = async (driverId, deliveryId, status, clientId) => {
  try {
    await getDeliveryDriverById(driverId, clientId); // Ensure driver exists
    const delivery = await Order.findOne({ where: { id: deliveryId, driverId, clientId } });
    if (!delivery) {
      throw new AppError('Delivery not found', 404);
    }
    const updatedDelivery = await delivery.update({ status });
    logger.info(`Delivery status updated for delivery ID: ${deliveryId}`);
    return updatedDelivery;
  } catch (error) {
    logger.error(`Error updating delivery status for delivery ${deliveryId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update delivery status', 500);
  }
};

module.exports = {
  getAllDeliveryDrivers,
  getDeliveryDriverById,
  createDeliveryDriver,
  updateDeliveryDriver,
  deleteDeliveryDriver,
  getActiveDeliveries,
  updateDeliveryStatus
};

================
File: backend/src/services/discountService.js
================
const { Discount } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllDiscounts = async (clientId) => {
  try {
    return await Discount.findAll({ where: { clientId } });
  } catch (error) {
    logger.error('Error fetching all discounts:', error);
    throw new AppError('Failed to fetch discounts', 500);
  }
};

const getDiscountById = async (id, clientId) => {
  try {
    const discount = await Discount.findOne({ where: { id, clientId } });
    if (!discount) {
      throw new AppError('Discount not found', 404);
    }
    return discount;
  } catch (error) {
    logger.error(`Error fetching discount with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch discount', 500);
  }
};

const createDiscount = async (discountData, clientId) => {
  try {
    const newDiscount = await Discount.create({ ...discountData, clientId });
    logger.info(`New discount created with ID: ${newDiscount.id}`);
    return newDiscount;
  } catch (error) {
    logger.error('Error creating discount:', error);
    throw new AppError('Failed to create discount', 500);
  }
};

const updateDiscount = async (id, discountData, clientId) => {
  try {
    const discount = await getDiscountById(id, clientId);
    const updatedDiscount = await discount.update(discountData);
    logger.info(`Discount updated with ID: ${id}`);
    return updatedDiscount;
  } catch (error) {
    logger.error(`Error updating discount with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update discount', 500);
  }
};

const deleteDiscount = async (id, clientId) => {
  try {
    const discount = await getDiscountById(id, clientId);
    await discount.destroy();
    logger.info(`Discount deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting discount with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete discount', 500);
  }
};

const getDiscountsByLocation = async (locationId, clientId) => {
  try {
    return await Discount.findAll({ where: { locationId, clientId } });
  } catch (error) {
    logger.error(`Error fetching discounts for location ${locationId}:`, error);
    throw new AppError('Failed to fetch discounts for location', 500);
  }
};

module.exports = {
  getAllDiscounts,
  getDiscountById,
  createDiscount,
  updateDiscount,
  deleteDiscount,
  getDiscountsByLocation
};

================
File: backend/src/services/DiscountService.js
================
const { Discount } = require('../models');
const discountUtils = require('../utils/discountUtils');

class DiscountService {
  static async createDiscount(discountData) {
    return await Discount.create(discountData);
  }

  static async getDiscountsByLocation(locationId) {
    return await Discount.findAll({
      where: { locationId },
    });
  }

  static async validateAndApplyDiscounts(order, guestId) {
    const applicableDiscounts = await discountUtils.getApplicableDiscounts(order, guestId);
    return discountUtils.applyBestDiscount(applicableDiscounts, order);
  }
}

module.exports = DiscountService;

================
File: backend/src/services/featureManagementService.js
================
const { Feature, ClientFeature } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getClientFeatures = async (clientId) => {
  try {
    const clientFeatures = await ClientFeature.findAll({
      where: { clientId },
      include: [{ model: Feature, attributes: ['name', 'description'] }]
    });
    return clientFeatures;
  } catch (error) {
    logger.error(`Error fetching features for client ${clientId}:`, error);
    throw new AppError('Failed to fetch client features', 500);
  }
};

const updateClientFeatures = async (clientId, featureUpdates) => {
  try {
    const updatedFeatures = await Promise.all(
      featureUpdates.map(async (update) => {
        const [clientFeature, created] = await ClientFeature.findOrCreate({
          where: { clientId, featureId: update.featureId },
          defaults: { isEnabled: update.isEnabled }
        });
        if (!created) {
          await clientFeature.update({ isEnabled: update.isEnabled });
        }
        return clientFeature;
      })
    );
    return updatedFeatures;
  } catch (error) {
    logger.error(`Error updating features for client ${clientId}:`, error);
    throw new AppError('Failed to update client features', 500);
  }
};

const getAllAvailableFeatures = async () => {
  try {
    return await Feature.findAll();
  } catch (error) {
    logger.error('Error fetching all available features:', error);
    throw new AppError('Failed to fetch available features', 500);
  }
};

const createFeature = async (featureData) => {
  try {
    const newFeature = await Feature.create(featureData);
    logger.info(`New feature created with ID: ${newFeature.id}`);
    return newFeature;
  } catch (error) {
    logger.error('Error creating new feature:', error);
    throw new AppError('Failed to create feature', 500);
  }
};

const updateFeature = async (featureId, featureData) => {
  try {
    const feature = await Feature.findByPk(featureId);
    if (!feature) {
      throw new AppError('Feature not found', 404);
    }
    const updatedFeature = await feature.update(featureData);
    return updatedFeature;
  } catch (error) {
    logger.error(`Error updating feature ${featureId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update feature', 500);
  }
};

const deleteFeature = async (featureId) => {
  try {
    const feature = await Feature.findByPk(featureId);
    if (!feature) {
      throw new AppError('Feature not found', 404);
    }
    await feature.destroy();
    logger.info(`Feature deleted with ID: ${featureId}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting feature ${featureId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete feature', 500);
  }
};

module.exports = {
  getClientFeatures,
  updateClientFeatures,
  getAllAvailableFeatures,
  createFeature,
  updateFeature,
  deleteFeature
};

================
File: backend/src/services/GlobalSettingsService.js
================
const GlobalSetting = require('../models/GlobalSetting');

class GlobalSettingsService {
  static async getSetting(key) {
    const setting = await GlobalSetting.findOne({ where: { key } });
    return setting ? setting.value : null;
  }

  static async updateSetting(key, value) {
    const setting = await GlobalSetting.findOne({ where: { key } });
    if (setting) {
      setting.value = value;
      await setting.save();
    } else {
      await GlobalSetting.create({ key, value });
    }
  }
}

module.exports = GlobalSettingsService;

================
File: backend/src/services/guestService.js
================
const db = require('../models');
const logger = require('../services/logger');

class GuestService {
  // Create a new guest profile
  async createGuestProfile(guestData) {
    try {
      const guest = await db.Guest.create(guestData);
      logger.info(`Guest profile created: ID ${guest.id}`);
      return guest;
    } catch (error) {
      logger.error(`Error creating guest profile: ${error.message}`);
      throw error;
    }
  }

  // Update guest profile (e.g., after an order)
  async updateGuestProfile(guestId, updates) {
    try {
      const guest = await db.Guest.findByPk(guestId);
      if (!guest) throw new Error('Guest not found');

      await guest.update(updates);
      logger.info(`Guest profile updated: ID ${guest.id}`);
      return guest;
    } catch (error) {
      logger.error(`Error updating guest profile: ${error.message}`);
      throw error;
    }
  }

  // Fetch guest order history
  async getGuestOrderHistory(guestId) {
    try {
      const orders = await db.Order.findAll({
        where: { guestId },
        include: [{ model: db.OrderItem }, { model: db.Location }],
      });
      return orders;
    } catch (error) {
      logger.error(`Error fetching guest order history: ${error.message}`);
      throw error;
    }
  }

  // Manage loyalty points (e.g., add points after an order)
  async manageLoyaltyPoints(guestId, points, operation = 'add') {
    try {
      const guest = await db.Guest.findByPk(guestId);
      if (!guest) throw new Error('Guest not found');

      guest.loyaltyPoints = operation === 'add' ? guest.loyaltyPoints + points : guest.loyaltyPoints - points;
      await guest.save();

      logger.info(`Loyalty points ${operation}ed for guest ID ${guest.id}`);
      return guest.loyaltyPoints;
    } catch (error) {
      logger.error(`Error managing loyalty points: ${error.message}`);
      throw error;
    }
  }

  // Calculate engagement metrics for a guest
  async calculateEngagementMetrics(guestId) {
    try {
      const orders = await this.getGuestOrderHistory(guestId);
      const totalOrders = orders.length;
      const totalSpend = orders.reduce((sum, order) => sum + order.totalAmount, 0);

      const engagementScore = totalSpend * totalOrders; // Example formula
      logger.info(`Engagement score calculated for guest ID ${guestId}: ${engagementScore}`);

      return { totalOrders, totalSpend, engagementScore };
    } catch (error) {
      logger.error(`Error calculating engagement metrics: ${error.message}`);
      throw error;
    }
  }
}

module.exports = new GuestService();

================
File: backend/src/services/houseAccountService.js
================
const { HouseAccount, Transaction } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getHouseAccountsByClient = async (clientId) => {
  try {
    return await HouseAccount.findAll({ where: { clientId } });
  } catch (error) {
    logger.error(`Error fetching house accounts for client ${clientId}:`, error);
    throw new AppError('Failed to fetch house accounts', 500);
  }
};

const getHouseAccountById = async (id) => {
  try {
    const account = await HouseAccount.findByPk(id);
    if (!account) {
      throw new AppError('House account not found', 404);
    }
    return account;
  } catch (error) {
    logger.error(`Error fetching house account with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch house account', 500);
  }
};

const createHouseAccount = async (accountData) => {
  try {
    const newAccount = await HouseAccount.create(accountData);
    logger.info(`New house account created with ID: ${newAccount.id}`);
    return newAccount;
  } catch (error) {
    logger.error('Error creating house account:', error);
    throw new AppError('Failed to create house account', 500);
  }
};

const updateHouseAccount = async (id, accountData) => {
  try {
    const account = await getHouseAccountById(id);
    const updatedAccount = await account.update(accountData);
    logger.info(`House account updated with ID: ${id}`);
    return updatedAccount;
  } catch (error) {
    logger.error(`Error updating house account with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update house account', 500);
  }
};

const deleteHouseAccount = async (id) => {
  try {
    const account = await getHouseAccountById(id);
    await account.destroy();
    logger.info(`House account deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting house account with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete house account', 500);
  }
};

const addFunds = async (id, amount) => {
  try {
    const account = await getHouseAccountById(id);
    account.balance += amount;
    await account.save();
    await Transaction.create({ houseAccountId: id, amount, type: 'credit' });
    logger.info(`Funds added to house account ${id}: ${amount}`);
    return account;
  } catch (error) {
    logger.error(`Error adding funds to house account ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to add funds', 500);
  }
};

const deductFunds = async (id, amount) => {
  try {
    const account = await getHouseAccountById(id);
    if (account.balance < amount) {
      throw new AppError('Insufficient funds', 400);
    }
    account.balance -= amount;
    await account.save();
    await Transaction.create({ houseAccountId: id, amount, type: 'debit' });
    logger.info(`Funds deducted from house account ${id}: ${amount}`);
    return account;
  } catch (error) {
    logger.error(`Error deducting funds from house account ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to deduct funds', 500);
  }
};

const getTransactionHistory = async (id) => {
  try {
    await getHouseAccountById(id); // Ensure account exists
    const transactions = await Transaction.findAll({ where: { houseAccountId: id } });
    return transactions;
  } catch (error) {
    logger.error(`Error fetching transaction history for house account ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch transaction history', 500);
  }
};

module.exports = {
  getHouseAccountsByClient,
  getHouseAccountById,
  createHouseAccount,
  updateHouseAccount,
  deleteHouseAccount,
  addFunds,
  deductFunds,
  getTransactionHistory
};

================
File: backend/src/services/imageService.js
================
const sharp = require('sharp');

const optimizeImage = async (buffer) => {
  return sharp(buffer)
    .resize(1000, 1000, { fit: 'inside', withoutEnlargement: true })
    .jpeg({ quality: 80 })
    .toBuffer();
};

module.exports = {
  optimizeImage
};

================
File: backend/src/services/integrationService.js
================
const axios = require 'axios';

const syncWithPOS = async (posSystem, data) => {
  // Implement POS integration logic
  // ...
};

const syncWithAccounting = async (accountingSoftware, data) => {
  // Implement accounting software integration logic
  // ...
};

const syncWithCRM = async (crmSystem, data) => {
  // Implement CRM integration logic
  // ...
};

================
File: backend/src/services/inventoryService.js
================
const { InventoryItem } = require('../models');
const { AppError } = require('../utils/errorHandler');

const getInventoryItems = async () => {
  return await InventoryItem.findAll();
};

const getInventoryItemById = async (id) => {
  const item = await InventoryItem.findByPk(id);
  if (!item) {
    throw new AppError('Inventory item not found', 404);
  }
  return item;
};

const createInventoryItem = async (itemData) => {
  return await InventoryItem.create(itemData);
};

const updateInventoryItem = async (id, itemData) => {
  const item = await getInventoryItemById(id);
  return await item.update(itemData);
};

const deleteInventoryItem = async (id) => {
  const item = await getInventoryItemById(id);
  await item.destroy();
};

const updateInventoryQuantity = async (id, quantity) => {
  const item = await getInventoryItemById(id);
  item.quantity += quantity;
  if (item.quantity < 0) {
    throw new AppError('Insufficient inventory', 400);
  }
  return await item.save();
};

module.exports = {
  getInventoryItems,
  getInventoryItemById,
  createInventoryItem,
  updateInventoryItem,
  deleteInventoryItem,
  updateInventoryQuantity
};

================
File: backend/src/services/inventorySyncService.js
================
const axios = require('axios');
const db = require('../models');
const logger = require('./logger');

class InventorySyncService {
  async syncInventory(posProfile) {
    try {
      const inventory = await db.Inventory.findAll({
        where: { locationId: posProfile.locationId },
        attributes: ['itemName', 'quantity', 'sku'],
      });

      const formattedInventory = inventory.map((item) => ({
        itemName: item.itemName,
        quantity: item.quantity,
        sku: item.sku,
      }));

      const response = await axios.post(`${posProfile.apiBaseUrl}/inventory`, formattedInventory, {
        headers: {
          Authorization: `Bearer ${posProfile.clientSecret}`,
          'Content-Type': posProfile.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Inventory sync successful for location ${posProfile.locationId}`);
      } else {
        logger.error(`Inventory sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing inventory: ${error.message}`);
      throw error;
    }
  }

  // Check inventory levels and trigger alerts if low
  async checkLowInventory(locationId) {
    try {
      const lowStockItems = await db.Inventory.findAll({
        where: {
          locationId,
          quantity: { [db.Sequelize.Op.lt]: 10 }, // Example threshold for low stock
        },
      });

      if (lowStockItems.length > 0) {
        logger.warn(`Low stock alert for location ID ${locationId}`);
        // Example: Trigger notification or restock order
      }

      return lowStockItems;
    } catch (error) {
      logger.error(`Error checking low inventory: ${error.message}`);
      throw error;
    }
  }
}

module.exports = new InventorySyncService();

================
File: backend/src/services/invoiceService.js
================
const { Invoice, Order } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const generateInvoice = async (invoiceData) => {
  try {
    const newInvoice = await Invoice.create(invoiceData);
    logger.info(`New invoice generated with ID: ${newInvoice.id}`);
    return newInvoice;
  } catch (error) {
    logger.error('Error generating invoice:', error);
    throw new AppError('Failed to generate invoice', 500);
  }
};

const getInvoiceById = async (id) => {
  try {
    const invoice = await Invoice.findByPk(id, {
      include: [{ model: Order, as: 'orders' }]
    });
    if (!invoice) {
      throw new AppError('Invoice not found', 404);
    }
    return invoice;
  } catch (error) {
    logger.error(`Error fetching invoice with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch invoice', 500);
  }
};

const getClientInvoices = async (clientId) => {
  try {
    return await Invoice.findAll({
      where: { clientId },
      include: [{ model: Order, as: 'orders' }]
    });
  } catch (error) {
    logger.error(`Error fetching invoices for client ${clientId}:`, error);
    throw new AppError('Failed to fetch client invoices', 500);
  }
};

const updateInvoice = async (id, invoiceData) => {
  try {
    const invoice = await Invoice.findByPk(id);
    if (!invoice) {
      throw new AppError('Invoice not found', 404);
    }
    const updatedInvoice = await invoice.update(invoiceData);
    logger.info(`Invoice updated with ID: ${id}`);
    return updatedInvoice;
  } catch (error) {
    logger.error(`Error updating invoice with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update invoice', 500);
  }
};

const deleteInvoice = async (id) => {
  try {
    const invoice = await Invoice.findByPk(id);
    if (!invoice) {
      throw new AppError('Invoice not found', 404);
    }
    await invoice.destroy();
    logger.info(`Invoice deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting invoice with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete invoice', 500);
  }
};

module.exports = {
  generateInvoice,
  getInvoiceById,
  getClientInvoices,
  updateInvoice,
  deleteInvoice
};

================
File: backend/src/services/InvoiceService.js
================
class InvoiceService {
  static generateInvoice(orderDetails, options = {}) {
    // Placeholder logic for generating invoices
    // You can use libraries like pdfkit to create a PDF invoice
    const invoiceData = {
      ...orderDetails,
      generatedAt: new Date(),
      dueDate: options.dueDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // default to 7 days later
    };

    return invoiceData;
  }

  static storeInvoice(invoiceData, clientId) {
    // Placeholder logic for storing invoices in the database
    // This could involve saving the invoice to a storage service or database
    console.log(`Storing invoice for client ${clientId}:`, invoiceData);
    return true;
  }

  static retrieveInvoice(invoiceId) {
    // Placeholder logic for retrieving an invoice by its ID
    return {
      invoiceId,
      status: 'pending',
      amount: 100.0,
      issuedAt: new Date(),
    };
  }

  static listInvoices(clientId) {
    // Placeholder logic for listing all invoices for a specific client
    console.log(`Listing invoices for client ${clientId}`);
    return [
      {
        invoiceId: 1,
        status: 'paid',
        amount: 150.0,
        issuedAt: new Date(),
      },
      {
        invoiceId: 2,
        status: 'pending',
        amount: 200.0,
        issuedAt: new Date(),
      },
    ];
  }
}

module.exports = InvoiceService;

================
File: backend/src/services/locationService.js
================
const { Location, MenuItem } = require('../models');
const { scheduleJob } = require('node-schedule');
const LocationProfile = require('../models/LocationProfile');
const { AppError } = require('../utils/errorHandler');

const updateLocationStatus = async (locationId, isOpen) => {
  const location = await Location.findByPk(locationId);
  if (!location) {
    throw new AppError('Location not found', 404);
  }
  location.isOpen = isOpen;
  await location.save();
  return location;
};

const getLocations = async () => {
  return await Location.findAll();
};

const createLocation = async (locationData) => {
  const location = await Location.create(locationData);
  await setupInventoryReset(location.id);
  return location;
};

const updateLocation = async (locationData) => {
  const location = await Location.findByPk(locationData.id);
  if (!location) throw new AppError('Location not found', 404);

  await location.update(locationData);
  await setupInventoryReset(location.id);
  return location;
};

const getLocationProfiles = async () => {
  return await LocationProfile.findAll();
};

const setupInventoryReset = async (locationId) => {
  const location = await Location.findByPk(locationId);
  if (!location || !location.inventoryResetTime) return;

  const [hours, minutes] = location.inventoryResetTime.split(':').map(Number);

  scheduleJob(`${minutes} ${hours} * * *`, async () => {
    const menuItems = await MenuItem.findAll({ where: { locationId } });
    for (const item of menuItems) {
      await item.update({ onlineInventoryOffset: 0 });
    }
  });
};

module.exports = {
  updateLocationStatus,
  getLocations,
  createLocation,
  updateLocation,
  getLocationProfiles,
  setupInventoryReset
};

================
File: backend/src/services/logger.js
================
const winston = require('winston');

// Customize log levels
const levels = {
  error: 0,
  warn: 1,
  info: 2,
  http: 3,
  verbose: 4,
  debug: 5,
  silly: 6,
};

// Set up log level based on environment
const level = () => {
  return process.env.NODE_ENV === 'development' ? 'debug' : 'info';
};

// Configure the Winston logger
const logger = winston.createLogger({
  level: level(),
  levels,
  format: winston.format.combine(
    winston.format.colorize(),
    winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    winston.format.printf((info) => `${info.timestamp} [${info.level}]: ${info.message}`)
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs/app.log', level: 'info' }),
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
  ],
});

// Middleware to add request ID and user information to log metadata
logger.add(new winston.transports.Console({
  format: winston.format.printf(({ level, message, timestamp, ...meta }) => {
    const requestId = meta.req && meta.req.headers['x-request-id'];
    const userId = meta.req && meta.req.user && meta.req.user.id;
    return `${timestamp} [${level}] [Request ID: ${requestId || 'N/A'}] [User ID: ${userId || 'N/A'}]: ${message}`;
  }),
}));

module.exports = logger;

================
File: backend/src/services/loyaltyService.js
================
const { User, Order, LoyaltyProgram } = require ('../models');

const calculatePoints = async (orderId) => {
  const order = await Order.findByPk(orderId);
  const loyaltyProgram = await LoyaltyProgram.findOne();
  
  const points = Math.floor(order.total * loyaltyProgram.pointsPerDollar);
  
  await User.increment('loyaltyPoints', { by: points, where: { id: order.userId } });
};

const checkAndUpdateTier = async (userId) => {
  const user = await User.findByPk(userId);
  const loyaltyProgram = await LoyaltyProgram.findOne();
  
  const newTier = loyaltyProgram.tiers.find(tier => user.loyaltyPoints >= tier.minPoints);
  
  if (newTier && newTier.name !== user.loyaltyTier) {
    await user.update({ loyaltyTier: newTier.name });
  }
};

================
File: backend/src/services/menuItemService.js
================
const { MenuItem, Modifier } = require '../models';
const { AppError } = require '../utils/errorHandler';

const getMenuItemsByLocation = async (locationId) => {
  const menuItems = await MenuItem.findAll({
    where: { locationId },
    include: [
      {
        model,
        as: 'modifiers',
      },
      {
        model,
        as: 'defaultModifiers',
      },
    ],
  });

  if (!menuItems) {
    throw new AppError('No menu items found for this location', 404);
  }

  return menuItems;
};

================
File: backend/src/services/menuService.js
================
const { MenuItem } = require('../models/index');
const { getIO } = require('../socket');

const updateInventory = async (menuItemId, quantity) => {
  const menuItem = await MenuItem.findByPk(menuItemId);
  if (menuItem) {
    await menuItem.update({
      onlineInventoryOffset: menuItem.onlineInventoryOffset - quantity,
    });

    const io = getIO();
    io.to(`location-${menuItem.locationId}`).emit('inventory-update', {
      menuItemId: menuItem.id,
      newInventory: menuItem.onlineInventoryOffset,
    });
  }
};

module.exports = {
  updateInventory
};

================
File: backend/src/services/menuSyncEnhancements.js
================
const axios = require('axios');
const db = require('../models');
const logger = require('./logger');

class MenuSyncEnhancements {
  async syncMenuData(posProfile) {
    try {
      const menuData = await db.Menu.findAll({
        where: { locationId: posProfile.locationId },
        include: [
          { model: db.MenuGroup, include: [{ model: db.MenuItem, include: [db.Modifier] }] },
        ],
      });

      const formattedMenuData = menuData.map((menu) => ({
        name: menu.name,
        groups: menu.MenuGroups.map((group) => ({
          name: group.name,
          items: group.MenuItems.map((item) => ({
            name: item.name,
            price: item.basePrice,
            pointsPrice: item.pointsPrice || null,
            availability: item.isAvailable,
            modifiers: item.Modifiers.map((modifier) => ({
              name: modifier.name,
              price: modifier.price,
            })),
            tags: item.tags || [],
          })),
        })),
      }));

      const response = await axios.post(`${posProfile.apiBaseUrl}/menus`, formattedMenuData, {
        headers: {
          Authorization: `Bearer ${posProfile.clientSecret}`,
          'Content-Type': posProfile.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Menu sync successful for location ${posProfile.locationId}`);
      } else {
        logger.error(`Menu sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing menu data: ${error.message}`);
      throw error;
    }
  }

  // Additional logic for syncing modifiers and item availability
  async syncModifiersAndAvailability(posProfile) {
    try {
      // Implement modifier-specific sync logic here
      logger.info(`Modifiers and availability synced for profile ${posProfile.id}`);
    } catch (error) {
      logger.error(`Error syncing modifiers and availability: ${error.message}`);
      throw error;
    }
  }
}

module.exports = new MenuSyncEnhancements();

================
File: backend/src/services/notificationService.js
================
const db = require('../models');
const logger = require('./logger');
const twilio = require('twilio')(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const nodemailer = require('nodemailer');

class NotificationService {
  // Send email or SMS based on the notification type
  async sendNotification(recipient, message, notificationType) {
    try {
      if (notificationType === 'email') {
        await this.sendEmail(recipient, message);
      } else if (notificationType === 'sms') {
        await this.sendSMS(recipient, message);
      }

      // Update the notification status in the database
      await db.Notification.update({ status: 'sent' }, { where: { recipient } });

      logger.info(`Notification sent: ${notificationType} to ${recipient}`);
    } catch (error) {
      await db.Notification.update({ status: 'failed' }, { where: { recipient } });
      logger.error(`Error sending notification: ${error.message}`);
      throw error;
    }
  }

  // Send an email
  async sendEmail(recipient, message) {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USERNAME,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USERNAME,
      to: recipient,
      subject: 'Notification',
      text: message,
    };

    await transporter.sendMail(mailOptions);
  }

  // Send an SMS
  async sendSMS(recipient, message) {
    await twilio.messages.create({
      body: message,
      from: process.env.TWILIO_PHONE_NUMBER,
      to: recipient,
    });
  }
}

module.exports = new NotificationService();

================
File: backend/src/services/orderPrepService.js
================
const { MenuItem } = require('../models/MenuItem');
const { Location } = require('../models/Location');
const { Order } = require('../models/Order');

const calculatePrepTime = async (order) => {
  const location = await Location.findByPk(order.locationId);
  const menuItems = await MenuItem.findAll({
    where: { id: order.items.map(item => item.menuItemId) }
  });

  const maxPrepTime = Math.max(
    ...menuItems.map(item => item.prepTime),
    location?.defaultPrepTime || 15
  );

  return maxPrepTime;
};

const formatEstimatedTime = (minutes) => {
  const now = new Date();
  const estimatedTime = new Date(now.getTime() + minutes * 60000);
  
  // Round to nearest 5 minutes
  estimatedTime.setMinutes(Math.round(estimatedTime.getMinutes() / 5) * 5);
  
  const start = new Date(estimatedTime);
  const end = new Date(estimatedTime.getTime() + 15 * 60000);

  return `${formatTime(start)}-${formatTime(end)}`;
};

const formatTime = (date) => {
  return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
};

const checkInventory = async (orderItems) => {
  for (const item of orderItems) {
    const menuItem = await MenuItem.findByPk(item.menuItemId);
    if (!menuItem) continue;

    const availableStock = await getAvailableStock(menuItem);
    if (item.quantity > availableStock) {
      return false;
    }
  }
  return true;
};

const getAvailableStock = async (menuItem) => {
  // This is a placeholder. In a real scenario, you'd fetch the actual stock from your POS system.
  const posStock = 10; // Example value
  return Math.max(0, posStock + menuItem.onlineInventoryOffset);
};

module.exports = {
  calculatePrepTime,
  formatEstimatedTime,
  checkInventory,
  getAvailableStock
};

================
File: backend/src/services/orderProviderService.js
================
const OrderProvider = require '../models/OrderProvider';
const LocationMenu = require '../models/LocationMenu';
const { AppError } = require '../utils/errorHandler';
const { sendMenuToProvider, handleIncomingOrder, sendDoordashSSIOUpdate } = require '../utils/orderProviderIntegration';
const { scheduleMenuSync } = require '../utils/menuSyncScheduler';
const ScheduledOrder = require '../models/ScheduledOrder';
const { scheduleJob } = require 'node-schedule';

const createOrderProvider = async (locationId, providerData) => {
  const newProvider = await OrderProvider.create({ ...providerData, locationId });
  await sendMenuToProvider(newProvider);
  scheduleMenuSync(newProvider);
  return newProvider;
};

const updateOrderProvider = async (id, providerData) => {
  const provider = await OrderProvider.findByPk(id);
  if (!provider) {
    throw new AppError('Order provider not found', 404);
  }
  await provider.update(providerData);
  await sendMenuToProvider(provider);
  scheduleMenuSync(provider);
  return provider;
};

const getOrderProviders = async (locationId) => {
  return await OrderProvider.findAll({ where: { locationId } });
};

const deleteOrderProvider = async (id) => {
  const provider = await OrderProvider.findByPk(id);
  if (!provider) {
    throw new AppError('Order provider not found', 404);
  }
  await provider.destroy();
};

const processIncomingOrder = async (providerId, orderData) => {
  const provider = await OrderProvider.findByPk(providerId);
  if (!provider) {
    throw new AppError('Order provider not found', 404);
  }

  const transformedOrder = transformOrderData(orderData);
  const order = await Order.create(transformedOrder);

  if (orderData.scheduledTime && provider.handleScheduledOrders) {
    const scheduledTime = new Date(orderData.scheduledTime);
    const prepTime = new Date(scheduledTime.getTime() - provider.scheduledOrderLeadTime * 60000);

    await ScheduledOrder.create({
      orderId.id,
      scheduledTime,
    });

    scheduleJob(prepTime, async () => {
      await sendOrderToPOS(order);
      await ScheduledOrder.update({ sentToPOS }, { where: { orderId.id } });
    });
  } else {
    await sendOrderToPOS(order);
  }

  return order;
};

const syncMenuForProvider = async (providerId) => {
  const provider = await OrderProvider.findByPk(providerId);
  if (!provider) {
    throw new AppError('Order provider not found', 404);
  }
  const locationMenu = await LocationMenu.findOne({ 
    where: { locationId.locationId, isActive } 
  });
  if (!locationMenu) {
    throw new AppError('Active menu not found for this location', 404);
  }
  await sendMenuToProvider(provider, locationMenu.items);
  provider.lastMenuSync = new Date();
  await provider.save();
};

const createLocationMenu = async (locationId, menuData) => {
  const newMenu = await LocationMenu.create({ ...menuData, locationId });
  return newMenu;
};

const updateLocationMenu = async (id, menuData) => {
  const menu = await LocationMenu.findByPk(id);
  if (!menu) {
    throw new AppError('Menu not found', 404);
  }
  await menu.update(menuData);
  return menu;
};

const getLocationMenus = async (locationId) => {
  return await LocationMenu.findAll({ where: { locationId } });
};

const deleteLocationMenu = async (id) => {
  const menu = await LocationMenu.findByPk(id);
  if (!menu) {
    throw new AppError('Menu not found', 404);
  }
  await menu.destroy();
};

const updateDoordashSSIOSettings = async (providerId, ssioSettings) => {
  const provider = await OrderProvider.findByPk(providerId);
  if (!provider) {
    throw new AppError('Order provider not found', 404);
  }
  await provider.update(ssioSettings);
  await sendDoordashSSIOUpdate(provider);
  return provider;
};

const syncDoordashSSIOMenu = async (providerId) => {
  const provider = await OrderProvider.findByPk(providerId);
  if (!provider) {
    throw new AppError('Order provider not found', 404);
  }
  const locationMenu = await LocationMenu.findOne({ 
    where: { locationId.locationId, isActive } 
  });
  if (!locationMenu) {
    throw new AppError('Active menu not found for this location', 404);
  }
  await sendDoordashSSIOUpdate(provider, locationMenu.items);
  provider.lastMenuSync = new Date();
  await provider.save();
};

function transformOrderData(orderData) {
    throw new Error('Function not implemented.');
}


function sendOrderToPOS(order) {
    throw new Error('Function not implemented.');
}

================
File: backend/src/services/orderService.js
================
const { Counter, Histogram } = require('prom-client');
const { Order, OrderItem, MenuItem } = require('../models/Order');
const { calculatePrepTime, formatEstimatedTime, checkInventory } = require('./orderPrepService');
const { emitDashboardUpdate, emitNewOrder } = require('./dashboardService'); // Changed from './dashboardService1' to './dashboardService'
const { emitOrderUpdate } = require('../socket');
const { io } = require('../socket');
const { sendNotification } = require('../utils/notificationService');

const orderCounter = new Counter({
  name: 'pos_orders_total',
  help: 'Total number of orders'
});

const orderValueHistogram = new Histogram({
  name: 'pos_order_value',
  help: 'Distribution of order values'
});

const createOrder = async (orderData) => {
  const order = await Order.create(orderData);

  for (const item of orderData.items) {
    const menuItem = await MenuItem.findByPk(item.menuItemId);
    if (!menuItem) {
      throw new Error(`Menu item not found: ${item.menuItemId}`);
    }

    await OrderItem.create({
      orderId: order.id,
      menuItemId: menuItem.id,
      name: menuItem.name,
      quantity: item.quantity,
      price: item.price || menuItem.price, // Use provided price or default to menu price
      specialInstructions: item.specialInstructions
    });
  }

  return order;
};

// ... other order-related functions ...

const getActiveOrders = async () => {
  return await Order.findAll({
    where: {
      status: ['pending', 'in-progress'],
    },
    order: [['promiseTime', 'ASC']],
  });
};

const cancelOrder = async (orderId) => {
  const order = await Order.findByPk(orderId);
  if (!order) {
    throw new Error('Order not found');
  }
  await order.update({ status: 'cancelled' });
  
  // Notify guest
  await sendNotification(order.guestId, 'Your order has been cancelled');
  
  // Notify provider (if applicable)
  if (order.providerId) {
    await sendNotification(order.providerId, `Order #${order.id} has been cancelled`);
  }
  
  // Notify driver (if applicable)
  if (order.driverId) {
    await sendNotification(order.driverId, `Order #${order.id} has been cancelled`);
  }
  
  emitOrderUpdate(order);
};

const markItemOutOfStock = async (itemId) => {
  const menuItem = await MenuItem.findByPk(itemId);
  if (!menuItem) {
    throw new Error('Menu item not found');
  }
  await menuItem.update({ isAvailable: false });
  
  // Emit event to update all channels
  io.emit('menu-item-update', { itemId, isAvailable: false });
  
  // Update third-party delivery services
  await updateThirdPartyMenus(itemId, false);
};

const updateThirdPartyMenus = async (itemId, isAvailable) => {
  // Implement logic to update menus on third-party delivery services
  // This might involve calling APIs for services like DoorDash, Uber Eats, etc.
};

module.exports = {
  createOrder,
  getActiveOrders,
  cancelOrder,
  markItemOutOfStock,
  updateThirdPartyMenus
};

================
File: backend/src/services/orderThrottleService.js
================
const Location = require('../models/Location');

class OrderThrottleService {
  static async adjustReadyTime(locationId) {
    const location = await Location.findByPk(locationId);
    const { throttleSettings } = location;

    // Logic to determine the new ready time based on sales volume, item count, etc.
    if (throttleSettings && throttleSettings.orderThreshold) { // Assuming some condition to adjust time
      location.readyTime += 10; // Example adjustment
    }

    await location.save();
  }
}

module.exports = OrderThrottleService;

================
File: backend/src/services/paymentService.js
================
const { Payment, Order } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

// Define payment gateways as an object instead of an enum
const PaymentGateway = {
  STRIPE: 'stripe',
  PAYPAL: 'paypal',
  SQUARE: 'square'
};

const processPayment = async (orderId, amount, gateway, paymentDetails) => {
  try {
    // Validate the order
    const order = await Order.findByPk(orderId);
    if (!order) {
      throw new AppError('Order not found', 404);
    }

    // Process payment based on the gateway
    let paymentResult;
    switch (gateway) {
      case PaymentGateway.STRIPE:
        paymentResult = await processStripePayment(amount, paymentDetails);
        break;
      case PaymentGateway.PAYPAL:
        paymentResult = await processPayPalPayment(amount, paymentDetails);
        break;
      case PaymentGateway.SQUARE:
        paymentResult = await processSquarePayment(amount, paymentDetails);
        break;
      default:
        throw new AppError('Invalid payment gateway', 400);
    }

    // Create a payment record
    const payment = await Payment.create({
      orderId,
      amount,
      gateway,
      status: paymentResult.status,
      transactionId: paymentResult.transactionId
    });

    // Update order status
    await order.update({ paymentStatus: 'paid' });

    logger.info(`Payment processed successfully for order ${orderId}`);
    return payment;
  } catch (error) {
    logger.error(`Error processing payment for order ${orderId}:`, error);
    throw error instanceof AppError ? error : new AppError('Payment processing failed', 500);
  }
};

const processStripePayment = async (amount, paymentDetails) => {
  // Implement Stripe payment logic here
  // This is a placeholder implementation
  return { status: 'success', transactionId: 'stripe_' + Date.now() };
};

const processPayPalPayment = async (amount, paymentDetails) => {
  // Implement PayPal payment logic here
  // This is a placeholder implementation
  return { status: 'success', transactionId: 'paypal_' + Date.now() };
};

const processSquarePayment = async (amount, paymentDetails) => {
  // Implement Square payment logic here
  // This is a placeholder implementation
  return { status: 'success', transactionId: 'square_' + Date.now() };
};

const getPaymentById = async (paymentId) => {
  try {
    const payment = await Payment.findByPk(paymentId);
    if (!payment) {
      throw new AppError('Payment not found', 404);
    }
    return payment;
  } catch (error) {
    logger.error(`Error fetching payment ${paymentId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch payment', 500);
  }
};

const refundPayment = async (paymentId, amount) => {
  try {
    const payment = await getPaymentById(paymentId);
    
    // Process refund based on the original payment gateway
    let refundResult;
    switch (payment.gateway) {
      case PaymentGateway.STRIPE:
        refundResult = await processStripeRefund(payment.transactionId, amount);
        break;
      case PaymentGateway.PAYPAL:
        refundResult = await processPayPalRefund(payment.transactionId, amount);
        break;
      case PaymentGateway.SQUARE:
        refundResult = await processSquareRefund(payment.transactionId, amount);
        break;
      default:
        throw new AppError('Invalid payment gateway', 400);
    }

    // Update payment record
    await payment.update({
      refundedAmount: (payment.refundedAmount || 0) + amount,
      status: amount === payment.amount ? 'refunded' : 'partially_refunded'
    });

    logger.info(`Refund processed successfully for payment ${paymentId}`);
    return payment;
  } catch (error) {
    logger.error(`Error processing refund for payment ${paymentId}:`, error);
    throw error instanceof AppError ? error : new AppError('Refund processing failed', 500);
  }
};

const processStripeRefund = async (transactionId, amount) => {
  // Implement Stripe refund logic here
  // This is a placeholder implementation
  return { status: 'success', refundId: 'stripe_refund_' + Date.now() };
};

const processPayPalRefund = async (transactionId, amount) => {
  // Implement PayPal refund logic here
  // This is a placeholder implementation
  return { status: 'success', refundId: 'paypal_refund_' + Date.now() };
};

const processSquareRefund = async (transactionId, amount) => {
  // Implement Square refund logic here
  // This is a placeholder implementation
  return { status: 'success', refundId: 'square_refund_' + Date.now() };
};

module.exports = {
  PaymentGateway,
  processPayment,
  getPaymentById,
  refundPayment
};

================
File: backend/src/services/permissionService.js
================
const Permission = require('../models/Permission');

exports.createPermission = async (permissionData) => {
  try {
    const permission = await Permission.create(permissionData);
    return permission;
  } catch (error) {
    throw new Error('Error creating permission: ' + error.message);
  }
};

exports.getAllPermissions = async () => {
  try {
    const permissions = await Permission.findAll();
    return permissions;
  } catch (error) {
    throw new Error('Error fetching permissions: ' + error.message);
  }
};

exports.updatePermission = async (permissionId, updatedData) => {
  try {
    const permission = await Permission.findByPk(permissionId);
    if (!permission) throw new Error('Permission not found');

    await permission.update(updatedData);
    return permission;
  } catch (error) {
    throw new Error('Error updating permission: ' + error.message);
  }
};

================
File: backend/src/services/posAlertService.js
================
const { POSAlert } = require '../models/POSAlert';

const createPOSAlert = async (alertData) => {
  return await POSAlert.create(alertData);
};

const getPOSAlerts = async ()[]> => {
  return await POSAlert.findAll({
    order: [['timestamp', 'DESC']],
    limit: 50 // Limit to the most recent 50 alerts
  });
};

================
File: backend/src/services/posIntegrationService.js
================
const axios = require('axios');
const db = require('../models');
const logger = require('../utils/logger');

class PosIntegrationService {
  // Method to sync menus with external POS
  static async syncMenus(locationId, provider) {
    try {
      const menuData = await db.Menu.findAll({
        where: { locationId },
        include: [
          { model: db.MenuGroup, include: [{ model: db.MenuItem }] }
        ],
      });

      const response = await axios.post(`https://api.${provider}.com/sync/menus`, menuData);

      if (response.status === 200) {
        logger.info(`Menu sync successful for provider ${provider} at location ${locationId}`);
      } else {
        logger.error(`Menu sync failed for provider ${provider}: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing menus for provider ${provider}:`, error);
      throw error;
    }
  }

  // Method to sync orders with external POS
  static async syncOrders(locationId, provider) {
    try {
      const orders = await db.Order.findAll({
        where: { locationId, status: 'pending' },
      });

      const response = await axios.post(`https://api.${provider}.com/sync/orders`, orders);

      if (response.status === 200) {
        logger.info(`Order sync successful for provider ${provider} at location ${locationId}`);
      } else {
        logger.error(`Order sync failed for provider ${provider}: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing orders for provider ${provider}:`, error);
      throw error;
    }
  }
}

module.exports = PosIntegrationService;

================
File: backend/src/services/posProfileService.js
================
const db = require('../models');

class PosProfileService {
  async getPosProfileByLocation(locationId) {
    return await db.PosProfile.findOne({ where: { locationId } });
  }

  async updatePosProfile(locationId, posProfileDetails) {
    let posProfile = await this.getPosProfileByLocation(locationId);

    if (posProfile) {
      posProfile = await posProfile.update(posProfileDetails);
    } else {
      posProfile = await db.PosProfile.create({ locationId, ...posProfileDetails });
    }

    return posProfile;
  }
}

module.exports = new PosProfileService();

================
File: backend/src/services/posService.js
================
const { PosProfile } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const createProfile = async (profileData) => {
  try {
    const profile = await PosProfile.create(profileData);
    logger.info(`POS profile created with ID: ${profile.id}`);
    return profile;
  } catch (error) {
    logger.error('Error creating POS profile:', error);
    throw new AppError('Failed to create POS profile', 500);
  }
};

const getProfile = async (id) => {
  try {
    const profile = await PosProfile.findByPk(id);
    if (!profile) {
      throw new AppError('POS profile not found', 404);
    }
    return profile;
  } catch (error) {
    logger.error(`Error fetching POS profile with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch POS profile', 500);
  }
};

const updateProfile = async (id, profileData) => {
  try {
    const profile = await getProfile(id);
    const updatedProfile = await profile.update(profileData);
    logger.info(`POS profile updated with ID: ${id}`);
    return updatedProfile;
  } catch (error) {
    logger.error(`Error updating POS profile with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update POS profile', 500);
  }
};

const deleteProfile = async (id) => {
  try {
    const profile = await getProfile(id);
    await profile.destroy();
    logger.info(`POS profile deleted with ID: ${id}`);
  } catch (error) {
    logger.error(`Error deleting POS profile with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete POS profile', 500);
  }
};

const syncData = async (syncData) => {
  try {
    // Implement your sync logic here
    // This could involve updating multiple models or calling external APIs
    logger.info('POS data sync initiated');
    // Example: await SomeModel.bulkCreate(syncData.someData, { updateOnDuplicate: ['field1', 'field2'] });
    return { message: 'Data synced successfully' };
  } catch (error) {
    logger.error('Error syncing POS data:', error);
    throw new AppError('Failed to sync POS data', 500);
  }
};

const getStatus = async (id) => {
  try {
    const profile = await getProfile(id);
    // Implement logic to determine POS status
    // This could involve checking connection status, last sync time, etc.
    const status = {
      isOnline: true, // Example status
      lastSyncTime: profile.lastSyncTime,
      // Add other relevant status information
    };
    return status;
  } catch (error) {
    logger.error(`Error fetching POS status for profile ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch POS status', 500);
  }
};

module.exports = {
  createProfile,
  getProfile,
  updateProfile,
  deleteProfile,
  syncData,
  getStatus
};

================
File: backend/src/services/posSettingsService.js
================
const POSSettings = require '../models/POSSettings';
const { AppError } = require '../utils/errorHandler';

const getPOSSettings = async (clientId) => {
  const settings = await POSSettings.findOne({ where: { clientId } });
  if (!settings) {
    throw new AppError('POS settings not found', 404);
  }
  return settings;
};

const updatePOSSettings = async (clientId, updates: { modifierSendMethod }) => {
  const settings = await POSSettings.findOne({ where: { clientId } });
  if (!settings) {
    throw new AppError('POS settings not found', 404);
  }
  await settings.update(updates);
  return settings;
};

================
File: backend/src/services/posSyncService.js
================
const axios = require('axios');
const db = require('../models');
const logger = require('./logger');
const { applyRoundingIfNeeded } = require('../utils/pricingUtils');

class PosSyncService {
  async syncMenus(locationPosProfile, corePosProfile) {
    try {
      const menuData = await db.Menu.findAll({
        where: { locationId: locationPosProfile.locationId },
        include: [
          { model: db.MenuGroup, include: [{ model: db.MenuItem, include: [db.Modifier] }] },
        ],
      });

      const formattedMenuData = menuData.map((menu) => ({
        name: menu.name,
        groups: menu.MenuGroups.map((group) => ({
          name: group.name,
          items: group.MenuItems.map((item) => ({
            name: item.name,
            price: applyRoundingIfNeeded(item.basePrice, locationPosProfile.roundingOption),
            pointsPrice: item.pointsPrice || null,
            modifiers: item.Modifiers.map((modifier) => ({
              name: modifier.name,
              price: applyRoundingIfNeeded(modifier.price, locationPosProfile.roundingOption),
            })),
          })),
        })),
      }));

      const response = await axios.post(`${corePosProfile.defaultAPISettings.apiBaseUrl}/menus`, formattedMenuData, {
        headers: {
          Authorization: `Bearer ${corePosProfile.defaultAPISettings.apiKey}`,
          'Content-Type': corePosProfile.defaultAPISettings.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Menu sync successful for location ${locationPosProfile.locationId}`);
      } else {
        logger.error(`Menu sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing menus: ${error.message}`);
      throw error;
    }
  }

  async syncOrders(locationPosProfile, corePosProfile, orderData) {
    try {
      const deconstructedOrder = orderData.items.map((item) => {
        const originalPrice = item.upliftedPrice / (1 + locationPosProfile.flatUpliftPercentage / 100);
        return {
          ...item,
          originalPrice,
          uplift: item.upliftedPrice - originalPrice,
        };
      });

      const orderWithServiceFee = {
        ...orderData,
        serviceFees: deconstructedOrder.reduce((total, item) => total + item.uplift, 0),
        items: deconstructedOrder.map((item) => ({
          ...item,
          price: item.originalPrice,
        })),
      };

      const response = await axios.post(`${corePosProfile.defaultAPISettings.apiBaseUrl}/orders`, orderWithServiceFee, {
        headers: {
          Authorization: `Bearer ${corePosProfile.defaultAPISettings.apiKey}`,
          'Content-Type': corePosProfile.defaultAPISettings.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Order sync successful for location ${locationPosProfile.locationId}`);
      } else {
        logger.error(`Order sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing orders: ${error.message}`);
      throw error;
    }
  }

  async syncInventory(locationPosProfile, corePosProfile) {
    try {
      const inventory = await db.Inventory.findAll({
        where: { locationId: locationPosProfile.locationId },
        attributes: ['itemName', 'quantity', 'sku'],
      });

      const formattedInventory = inventory.map((item) => ({
        itemName: item.itemName,
        quantity: item.quantity,
        sku: item.sku,
      }));

      const response = await axios.post(`${corePosProfile.defaultAPISettings.apiBaseUrl}/inventory`, formattedInventory, {
        headers: {
          Authorization: `Bearer ${corePosProfile.defaultAPISettings.apiKey}`,
          'Content-Type': corePosProfile.defaultAPISettings.contentType || 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Inventory sync successful for location ${locationPosProfile.locationId}`);
      } else {
        logger.error(`Inventory sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing inventory: ${error.message}`);
      throw error;
    }
  }
}

module.exports = new PosSyncService();

================
File: backend/src/services/pricingUtils.js
================
/**
 * Utility functions for pricing-related operations.
 */

/**
 * Applies rounding logic to a price based on the provided options.
 * @param {number} price - The original price before rounding.
 * @param {Object} roundingOption - Rounding options.
 * @param {boolean} roundingOption.enabled - If rounding is enabled.
 * @param {string} roundingOption.type - Type of rounding: "up", "down", or "nearest".
 * @param {number} roundingOption.increment - The increment to round to (e.g., 0.05, 0.10, 0.99).
 * @returns {number} - The rounded price.
 */
function applyRoundingIfNeeded(price, roundingOption) {
  if (!roundingOption || !roundingOption.enabled) {
    return price; // Return the original price if rounding is disabled.
  }

  const { type, increment } = roundingOption;

  switch (type) {
    case 'up':
      return Math.ceil(price / increment) * increment;
    case 'down':
      return Math.floor(price / increment) * increment;
    case 'nearest':
    default:
      return Math.round(price / increment) * increment;
  }
}

module.exports = {
  applyRoundingIfNeeded,
};

================
File: backend/src/services/providerIntegrationService.js
================
const axios = require('axios');
const logger = require('./logger');

class ProviderIntegrationService {
  async syncData(provider) {
    try {
      const apiSettings = provider.apiSettings;
      const response = await axios.post(`${apiSettings.baseUrl}/sync`, {}, {
        headers: {
          Authorization: `Bearer ${apiSettings.apiKey}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.status === 200) {
        logger.info(`Provider data synced successfully for provider ${provider.name}`);
      } else {
        logger.error(`Provider data sync failed: ${response.data.message}`);
      }
    } catch (error) {
      logger.error(`Error syncing provider data: ${error.message}`);
      throw new Error('Error syncing provider data');
    }
  }
}

module.exports = new ProviderIntegrationService();

================
File: backend/src/services/providerService.js
================
const { Provider, ProviderSettings, ProviderIntegration } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllProviders = async (clientId) => {
  try {
    return await Provider.findAll({ where: { clientId } });
  } catch (error) {
    logger.error('Error fetching all providers:', error);
    throw new AppError('Failed to fetch providers', 500);
  }
};

const getProviderById = async (id) => {
  try {
    const provider = await Provider.findByPk(id);
    if (!provider) {
      throw new AppError('Provider not found', 404);
    }
    return provider;
  } catch (error) {
    logger.error(`Error fetching provider with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch provider', 500);
  }
};

const createProvider = async (providerData) => {
  try {
    const newProvider = await Provider.create(providerData);
    logger.info(`New provider created with ID: ${newProvider.id}`);
    return newProvider;
  } catch (error) {
    logger.error('Error creating provider:', error);
    throw new AppError('Failed to create provider', 500);
  }
};

const updateProvider = async (id, providerData) => {
  try {
    const provider = await getProviderById(id);
    const updatedProvider = await provider.update(providerData);
    logger.info(`Provider updated with ID: ${id}`);
    return updatedProvider;
  } catch (error) {
    logger.error(`Error updating provider with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update provider', 500);
  }
};

const deleteProvider = async (id) => {
  try {
    const provider = await getProviderById(id);
    await provider.destroy();
    logger.info(`Provider deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting provider with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete provider', 500);
  }
};

const syncProviderData = async (id) => {
  try {
    const provider = await getProviderById(id);
    // Implement provider-specific sync logic here
    logger.info(`Provider data synced for ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error syncing provider data for ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to sync provider data', 500);
  }
};

const getProviderSettings = async (id) => {
  try {
    const settings = await ProviderSettings.findOne({ where: { providerId: id } });
    if (!settings) {
      throw new AppError('Provider settings not found', 404);
    }
    return settings;
  } catch (error) {
    logger.error(`Error fetching settings for provider ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch provider settings', 500);
  }
};

const updateProviderSettings = async (id, settingsData) => {
  try {
    const [settings, created] = await ProviderSettings.findOrCreate({
      where: { providerId: id },
      defaults: settingsData
    });
    if (!created) {
      await settings.update(settingsData);
    }
    logger.info(`Provider settings updated for ID: ${id}`);
    return settings;
  } catch (error) {
    logger.error(`Error updating settings for provider ${id}:`, error);
    throw new AppError('Failed to update provider settings', 500);
  }
};

const getProviderIntegrations = async (id) => {
  try {
    return await ProviderIntegration.findAll({ where: { providerId: id } });
  } catch (error) {
    logger.error(`Error fetching integrations for provider ${id}:`, error);
    throw new AppError('Failed to fetch provider integrations', 500);
  }
};

const addProviderIntegration = async (id, integrationData) => {
  try {
    const newIntegration = await ProviderIntegration.create({ ...integrationData, providerId: id });
    logger.info(`New integration added for provider ID: ${id}`);
    return newIntegration;
  } catch (error) {
    logger.error(`Error adding integration for provider ${id}:`, error);
    throw new AppError('Failed to add provider integration', 500);
  }
};

const updateProviderIntegration = async (providerId, integrationId, integrationData) => {
  try {
    const integration = await ProviderIntegration.findOne({
      where: { id: integrationId, providerId }
    });
    if (!integration) {
      throw new AppError('Provider integration not found', 404);
    }
    const updatedIntegration = await integration.update(integrationData);
    logger.info(`Integration updated for provider ID: ${providerId}, integration ID: ${integrationId}`);
    return updatedIntegration;
  } catch (error) {
    logger.error(`Error updating integration ${integrationId} for provider ${providerId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update provider integration', 500);
  }
};

const deleteProviderIntegration = async (providerId, integrationId) => {
  try {
    const integration = await ProviderIntegration.findOne({
      where: { id: integrationId, providerId }
    });
    if (!integration) {
      throw new AppError('Provider integration not found', 404);
    }
    await integration.destroy();
    logger.info(`Integration deleted for provider ID: ${providerId}, integration ID: ${integrationId}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting integration ${integrationId} for provider ${providerId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete provider integration', 500);
  }
};

module.exports = {
  getAllProviders,
  getProviderById,
  createProvider,
  updateProvider,
  deleteProvider,
  syncProviderData,
  getProviderSettings,
  updateProviderSettings,
  getProviderIntegrations,
  addProviderIntegration,
  updateProviderIntegration,
  deleteProviderIntegration
};

================
File: backend/src/services/reportingService.js
================
const { Order, OrderItem, Product } = require '../models';
const { Op } = require 'sequelize';

const getSalesByCategory = async (startDate, endDate) => {
  const sales = await OrderItem.findAll({
    include: [
      {
        model,
        where: {
          createdAt: {
            [Op.between]: [startDate, endDate],
          },
        },
      },
      {
        model,
        include: ['Category'],
      },
    ],
    attributes: [
      'Product.Category.name',
      [sequelize.fn('SUM', sequelize.col('OrderItem.quantity')), 'totalQuantity'],
      [sequelize.fn('SUM', sequelize.col('OrderItem.price')), 'totalSales'],
    ],
    group: ['Product.Category.name'],
  });

  return sales;
};

const getTopSellingItems = async (startDate, endDate, limit = 10) => {
  const topItems = await OrderItem.findAll({
    include: [
      {
        model,
        where: {
          createdAt: {
            [Op.between]: [startDate, endDate],
          },
        },
      },
      {
        model,
      },
    ],
    attributes: [
      'Product.name',
      [sequelize.fn('SUM', sequelize.col('OrderItem.quantity')), 'totalQuantity'],
      [sequelize.fn('SUM', sequelize.col('OrderItem.price')), 'totalSales'],
    ],
    group: ['Product.id'],
    order: [[sequelize.fn('SUM', sequelize.col('OrderItem.quantity')), 'DESC']],
    limit,
  });

  return topItems;
};

================
File: backend/src/services/reportService.js
================
const { Report } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const generateReport = async (reportData) => {
  try {
    const newReport = await Report.create(reportData);
    logger.info(`New report generated with ID: ${newReport.id}`);
    return newReport;
  } catch (error) {
    logger.error('Error generating report:', error);
    throw new AppError('Failed to generate report', 500);
  }
};

const getReportById = async (id) => {
  try {
    const report = await Report.findByPk(id);
    if (!report) {
      throw new AppError('Report not found', 404);
    }
    return report;
  } catch (error) {
    logger.error(`Error fetching report with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch report', 500);
  }
};

const getClientReports = async (clientId) => {
  try {
    return await Report.findAll({ where: { clientId } });
  } catch (error) {
    logger.error(`Error fetching reports for client ${clientId}:`, error);
    throw new AppError('Failed to fetch client reports', 500);
  }
};

const updateReport = async (id, reportData) => {
  try {
    const report = await Report.findByPk(id);
    if (!report) {
      throw new AppError('Report not found', 404);
    }
    const updatedReport = await report.update(reportData);
    logger.info(`Report updated with ID: ${id}`);
    return updatedReport;
  } catch (error) {
    logger.error(`Error updating report with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update report', 500);
  }
};

const deleteReport = async (id) => {
  try {
    const report = await Report.findByPk(id);
    if (!report) {
      throw new AppError('Report not found', 404);
    }
    await report.destroy();
    logger.info(`Report deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting report with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete report', 500);
  }
};

module.exports = {
  generateReport,
  getReportById,
  getClientReports,
  updateReport,
  deleteReport
};

================
File: backend/src/services/reviewService.js
================
const { Review, MenuItem } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const createReview = async (reviewData) => {
  try {
    const newReview = await Review.create(reviewData);
    logger.info(`New review created with ID: ${newReview.id}`);
    return newReview;
  } catch (error) {
    logger.error('Error creating review:', error);
    throw new AppError('Failed to create review', 500);
  }
};

const getReviewsForMenuItem = async (menuItemId) => {
  try {
    const reviews = await Review.findAll({
      where: { menuItemId },
      include: [{ model: MenuItem, as: 'menuItem' }]
    });
    return reviews;
  } catch (error) {
    logger.error(`Error fetching reviews for menu item ${menuItemId}:`, error);
    throw new AppError('Failed to fetch reviews for menu item', 500);
  }
};

const getReviewById = async (id) => {
  try {
    const review = await Review.findByPk(id, {
      include: [{ model: MenuItem, as: 'menuItem' }]
    });
    if (!review) {
      throw new AppError('Review not found', 404);
    }
    return review;
  } catch (error) {
    logger.error(`Error fetching review with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch review', 500);
  }
};

const updateReview = async (id, reviewData) => {
  try {
    const review = await Review.findByPk(id);
    if (!review) {
      throw new AppError('Review not found', 404);
    }
    const updatedReview = await review.update(reviewData);
    logger.info(`Review updated with ID: ${id}`);
    return updatedReview;
  } catch (error) {
    logger.error(`Error updating review with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update review', 500);
  }
};

const deleteReview = async (id) => {
  try {
    const review = await Review.findByPk(id);
    if (!review) {
      throw new AppError('Review not found', 404);
    }
    await review.destroy();
    logger.info(`Review deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting review with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete review', 500);
  }
};

const getAverageRatingForMenuItem = async (menuItemId) => {
  try {
    const result = await Review.findAll({
      where: { menuItemId },
      attributes: [
        [Review.sequelize.fn('AVG', Review.sequelize.col('rating')), 'averageRating']
      ]
    });
    return result[0].get('averageRating') || 0;
  } catch (error) {
    logger.error(`Error calculating average rating for menu item ${menuItemId}:`, error);
    throw new AppError('Failed to calculate average rating', 500);
  }
};

module.exports = {
  createReview,
  getReviewsForMenuItem,
  getReviewById,
  updateReview,
  deleteReview,
  getAverageRatingForMenuItem
};

================
File: backend/src/services/roleService.js
================
const Role = require('../models/Role');
const Permission = require('../models/Permission');

exports.createRole = async (roleData) => {
  try {
    const role = await Role.create(roleData);
    return role;
  } catch (error) {
    throw new Error('Error creating role: ' + error.message);
  }
};

exports.assignPermissionsToRole = async (roleId, permissionIds) => {
  try {
    const role = await Role.findByPk(roleId);
    if (!role) throw new Error('Role not found');

    const permissions = await Permission.findAll({ where: { id: permissionIds } });
    await role.setPermissions(permissions);
    return role;
  } catch (error) {
    throw new Error('Error assigning permissions: ' + error.message);
  }
};

================
File: backend/src/services/s3Service.js
================
const AWS = require('aws-sdk');
const { v4: uuidv4 } = require('uuid');

const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
});

const uploadToS3 = async (buffer, originalname, tenantId) => {
  const key = `${tenantId}/${uuidv4()}-${originalname}`;
  const params = {
    Bucket: process.env.S3_BUCKET_NAME,
    Key: key,
    Body: buffer
  };

  const { Location } = await s3.upload(params).promise();
  return Location;
};

const deleteFromS3 = async (url) => {
  const key = url.split('/').slice(-1)[0];
  const params = {
    Bucket: process.env.S3_BUCKET_NAME,
    Key: key
  };

  await s3.deleteObject(params).promise();
};

module.exports = {
  uploadToS3,
  deleteFromS3
};

================
File: backend/src/services/scheduledOrderService.js
================
const { Op } = require 'sequelize';
const ScheduledOrder = require '../models/ScheduledOrder';
const Order = require '../models/Order';
const { sendOrderToPOS } = require '../utils/posIntegration';

const processScheduledOrders = async () => {
  const now = new Date();
  const scheduledOrders = await ScheduledOrder.findAll({
    where: {
      scheduledTime: {
        [Op.lte],
      },
      sentToPOS,
    },
    include: [Order],
  });

  for (const scheduledOrder of scheduledOrders) {
    await sendOrderToPOS(scheduledOrder.Order);
    await scheduledOrder.update({ sentToPOS });
  }
};

================
File: backend/src/services/schedulingService.js
================
const { TimeSlot, Order } = require '../models';
const { Op } = require 'sequelize';

const getAvailableTimeSlots = async (date) => {
  const startOfDay = new Date(date.setHours(0, 0, 0, 0));
  const endOfDay = new Date(date.setHours(23, 59, 59, 999));

  return TimeSlot.findAll({
    where: {
      startTime: {
        [Op.between]: [startOfDay, endOfDay],
      },
      bookedCount: {
        [Op.lt].col('capacity'),
      },
    },
  });
};

const bookTimeSlot = async (timeSlotId, orderId) => {
  const timeSlot = await TimeSlot.findByPk(timeSlotId);
  if (!timeSlot || timeSlot.bookedCount >= timeSlot.capacity) {
    throw new Error('Time slot not available');
  }

  await timeSlot.increment('bookedCount');
  await Order.update({ timeSlotId }, { where: { id } });
};

================
File: backend/src/services/serviceFeeService.js
================
const { ServiceFee } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllServiceFees = async () => {
  try {
    return await ServiceFee.findAll();
  } catch (error) {
    logger.error('Error fetching all service fees:', error);
    throw new AppError('Failed to fetch service fees', 500);
  }
};

const getServiceFeeById = async (id) => {
  try {
    const serviceFee = await ServiceFee.findByPk(id);
    if (!serviceFee) {
      throw new AppError('Service fee not found', 404);
    }
    return serviceFee;
  } catch (error) {
    logger.error(`Error fetching service fee with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch service fee', 500);
  }
};

const createServiceFee = async (serviceFeeData) => {
  try {
    const newServiceFee = await ServiceFee.create(serviceFeeData);
    logger.info(`New service fee created with ID: ${newServiceFee.id}`);
    return newServiceFee;
  } catch (error) {
    logger.error('Error creating service fee:', error);
    throw new AppError('Failed to create service fee', 500);
  }
};

const updateServiceFee = async (id, serviceFeeData) => {
  try {
    const serviceFee = await ServiceFee.findByPk(id);
    if (!serviceFee) {
      throw new AppError('Service fee not found', 404);
    }
    const updatedServiceFee = await serviceFee.update(serviceFeeData);
    logger.info(`Service fee updated with ID: ${id}`);
    return updatedServiceFee;
  } catch (error) {
    logger.error(`Error updating service fee with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update service fee', 500);
  }
};

const deleteServiceFee = async (id) => {
  try {
    const serviceFee = await ServiceFee.findByPk(id);
    if (!serviceFee) {
      throw new AppError('Service fee not found', 404);
    }
    await serviceFee.destroy();
    logger.info(`Service fee deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting service fee with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete service fee', 500);
  }
};

const getServiceFeesByClient = async (clientId) => {
  try {
    return await ServiceFee.findAll({ where: { clientId } });
  } catch (error) {
    logger.error(`Error fetching service fees for client ${clientId}:`, error);
    throw new AppError('Failed to fetch service fees for client', 500);
  }
};

module.exports = {
  getAllServiceFees,
  getServiceFeeById,
  createServiceFee,
  updateServiceFee,
  deleteServiceFee,
  getServiceFeesByClient
};

================
File: backend/src/services/subscriptionService.js
================
const { Subscription, Order } = require '../models';
const { createOrder } = require './orderService';

const createSubscription = async (userId, planId) => {
  const nextBillingDate = new Date();
  nextBillingDate.setMonth(nextBillingDate.getMonth() + 1);

  return await Subscription.create({
    userId,
    planId,
    status: 'active',
    nextBillingDate,
  });
};

const processSubscriptions = async () => {
  const activeSubscriptions = await Subscription.findAll({
    where: {
      status: 'active',
      nextBillingDate: {
        [Op.lte] Date(),
      },
    },
  });

  for (const subscription of activeSubscriptions) {
    await createOrder({
      userId.userId,
      items: [{ id.planId, quantity: 1 }],
      isSubscription,
    });

    const nextBillingDate = new Date(subscription.nextBillingDate);
    nextBillingDate.setMonth(nextBillingDate.getMonth() + 1);
    await subscription.update({ nextBillingDate });
  }
};

================
File: backend/src/services/syncEngine.js
================
const PosSyncService = require('./posSyncService');
const ToastService = require('./toastService');
const db = require('../models');

class SyncEngine {
  static async syncMenus(locationId) {
    try {
      const posProfiles = await db.PosProfile.findAll({ where: { locationId } });

      for (const profile of posProfiles) {
        if (profile.posSystem === 'toast') {
          const toastService = new ToastService();
          await toastService.syncMenus(profile);
        } else {
          await PosSyncService.syncMenus(profile);
        }
      }
      console.log(`Menus synced successfully for location ${locationId}`);
    } catch (error) {
      console.error(`Error syncing menus for location ${locationId}:`, error);
    }
  }

  static async syncMenuGroups(locationId) {
    try {
      const posProfiles = await db.PosProfile.findAll({ where: { locationId } });

      for (const profile of posProfiles) {
        if (profile.posSystem === 'toast') {
          const toastService = new ToastService();
          await toastService.syncMenuGroups(profile);
        } else {
          await PosSyncService.syncMenuGroups(profile);
        }
      }
      console.log(`Menu groups synced successfully for location ${locationId}`);
    } catch (error) {
      console.error(`Error syncing menu groups for location ${locationId}:`, error);
    }
  }

  static async syncMenuItems(locationId) {
    try {
      const posProfiles = await db.PosProfile.findAll({ where: { locationId } });

      for (const profile of posProfiles) {
        if (profile.posSystem === 'toast') {
          const toastService = new ToastService();
          await toastService.syncMenuItems(profile);
        } else {
          await PosSyncService.syncMenuItems(profile);
        }
      }
      console.log(`Menu items synced successfully for location ${locationId}`);
    } catch (error) {
      console.error(`Error syncing menu items for location ${locationId}:`, error);
    }
  }
}

module.exports = SyncEngine;

================
File: backend/src/services/syncService.js
================
const logger = require('../utils/logger'); // Assuming you have a logger utility in place

class SyncService {
  // Method to start all data sync jobs
  static async startDataSyncJobs() {
    try {
      logger.info('Starting data sync jobs...');

      // Run each sync job sequentially
      await this.syncPosData();
      await this.syncProviderData();

      logger.info('Data sync jobs completed successfully.');
    } catch (error) {
      logger.error('Error during data sync jobs:', error);
      throw error; // Re-throw to allow handling at higher levels if needed
    }
  }

  // Example of a method to sync POS data
  static async syncPosData() {
    try {
      logger.info('Syncing POS data...');
      // Placeholder for your POS data sync logic
      // Your sync logic here
      logger.info('POS data sync completed.');
    } catch (error) {
      logger.error('Error syncing POS data:', error);
      throw error;
    }
  }

  // Example of a method to sync provider data
  static async syncProviderData() {
    try {
      logger.info('Syncing provider data...');
      // Placeholder for your provider data sync logic
      // Your sync logic here
      logger.info('Provider data sync completed.');
    } catch (error) {
      logger.error('Error syncing provider data:', error);
      throw error;
    }
  }

  // You can add more sync methods here as needed for different data types
}

module.exports = SyncService;

================
File: backend/src/services/tabletService.js
================
const { Tablet } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllTablets = async () => {
  try {
    return await Tablet.findAll();
  } catch (error) {
    logger.error('Error fetching all tablets:', error);
    throw new AppError('Failed to fetch tablets', 500);
  }
};

const getTabletById = async (id) => {
  try {
    const tablet = await Tablet.findByPk(id);
    if (!tablet) {
      throw new AppError('Tablet not found', 404);
    }
    return tablet;
  } catch (error) {
    logger.error(`Error fetching tablet with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch tablet', 500);
  }
};

const createTablet = async (tabletData) => {
  try {
    const newTablet = await Tablet.create(tabletData);
    logger.info(`New tablet created with ID: ${newTablet.id}`);
    return newTablet;
  } catch (error) {
    logger.error('Error creating tablet:', error);
    throw new AppError('Failed to create tablet', 500);
  }
};

const updateTablet = async (id, tabletData) => {
  try {
    const tablet = await getTabletById(id);
    const updatedTablet = await tablet.update(tabletData);
    logger.info(`Tablet updated with ID: ${id}`);
    return updatedTablet;
  } catch (error) {
    logger.error(`Error updating tablet with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update tablet', 500);
  }
};

const deleteTablet = async (id) => {
  try {
    const tablet = await getTabletById(id);
    await tablet.destroy();
    logger.info(`Tablet deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting tablet with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete tablet', 500);
  }
};

const getTabletsByLocation = async (locationId) => {
  try {
    return await Tablet.findAll({ where: { locationId } });
  } catch (error) {
    logger.error(`Error fetching tablets for location ${locationId}:`, error);
    throw new AppError('Failed to fetch tablets for location', 500);
  }
};

const syncTabletData = async (id) => {
  try {
    const tablet = await getTabletById(id);
    // Implement sync logic here
    logger.info(`Data synced for tablet with ID: ${id}`);
    return { message: 'Tablet data synced successfully' };
  } catch (error) {
    logger.error(`Error syncing data for tablet with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to sync tablet data', 500);
  }
};

module.exports = {
  getAllTablets,
  getTabletById,
  createTablet,
  updateTablet,
  deleteTablet,
  getTabletsByLocation,
  syncTabletData
};

================
File: backend/src/services/taxService.js
================
const { TaxRate, LocationTaxConfig } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const getAllTaxRates = async () => {
  try {
    return await TaxRate.findAll();
  } catch (error) {
    logger.error('Error fetching all tax rates:', error);
    throw new AppError('Failed to fetch tax rates', 500);
  }
};

const getTaxRateById = async (id) => {
  try {
    const taxRate = await TaxRate.findByPk(id);
    if (!taxRate) {
      throw new AppError('Tax rate not found', 404);
    }
    return taxRate;
  } catch (error) {
    logger.error(`Error fetching tax rate with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch tax rate', 500);
  }
};

const createTaxRate = async (taxRateData) => {
  try {
    const newTaxRate = await TaxRate.create(taxRateData);
    logger.info(`New tax rate created with ID: ${newTaxRate.id}`);
    return newTaxRate;
  } catch (error) {
    logger.error('Error creating tax rate:', error);
    throw new AppError('Failed to create tax rate', 500);
  }
};

const updateTaxRate = async (id, taxRateData) => {
  try {
    const taxRate = await getTaxRateById(id);
    const updatedTaxRate = await taxRate.update(taxRateData);
    logger.info(`Tax rate updated with ID: ${id}`);
    return updatedTaxRate;
  } catch (error) {
    logger.error(`Error updating tax rate with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update tax rate', 500);
  }
};

const deleteTaxRate = async (id) => {
  try {
    const taxRate = await getTaxRateById(id);
    await taxRate.destroy();
    logger.info(`Tax rate deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting tax rate with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete tax rate', 500);
  }
};

const getTaxRatesByLocation = async (locationId) => {
  try {
    return await TaxRate.findAll({ where: { locationId } });
  } catch (error) {
    logger.error(`Error fetching tax rates for location ${locationId}:`, error);
    throw new AppError('Failed to fetch tax rates for location', 500);
  }
};

const calculateTax = async (locationId, items) => {
  try {
    const taxRates = await getTaxRatesByLocation(locationId);
    const totalAmount = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const taxAmount = taxRates.reduce((sum, rate) => sum + totalAmount * (rate.percentage / 100), 0);
    return Number(taxAmount.toFixed(2));
  } catch (error) {
    logger.error(`Error calculating tax for location ${locationId}:`, error);
    throw new AppError('Failed to calculate tax', 500);
  }
};

const getApplicableTax = async (locationId, provider, guestId = null) => {
  try {
    const locationTaxConfig = await LocationTaxConfig.findOne({
      where: { locationId, provider },
    });

    if (guestId) {
      const guest = await Guest.findByPk(guestId);
      if (guest && guest.taxExempt) {
        return { rate: 0, taxId: guest.taxIdNumber };
      }
    }

    if (!locationTaxConfig) {
      return { rate: 0, taxId: null };
    }

    return { rate: locationTaxConfig.taxRate, taxId: locationTaxConfig.taxIdNumber };
  } catch (error) {
    logger.error('Error fetching applicable tax:', error);
    throw new AppError('Failed to fetch applicable tax', 500);
  }
};

const updateTaxSettings = async (locationId, provider, taxRate, taxIdNumber = null) => {
  try {
    const [taxConfig, created] = await LocationTaxConfig.findOrCreate({
      where: { locationId, provider },
      defaults: { taxRate, taxIdNumber },
    });

    if (!created) {
      taxConfig.taxRate = taxRate;
      taxConfig.taxIdNumber = taxIdNumber;
      await taxConfig.save();
    }

    return taxConfig;
  } catch (error) {
    logger.error('Error updating tax settings:', error);
    throw new AppError('Failed to update tax settings', 500);
  }
};

module.exports = {
  getAllTaxRates,
  getTaxRateById,
  createTaxRate,
  updateTaxRate,
  deleteTaxRate,
  getTaxRatesByLocation,
  calculateTax,
  getApplicableTax,
  updateTaxSettings
};

================
File: backend/src/services/toastService.js
================
const axios = require('axios');
const logger = require('../utils/logger');
const db = require('../models');

class ToastService {
  async authenticate(clientId, clientSecret) {
    try {
      const response = await axios.post('https://api.toasttab.com/authentication/v1/authentication/login', {
        clientId,
        clientSecret,
        userAccessType: 'TOAST_MACHINE_CLIENT',
      }, {
        headers: { 'Content-Type': 'application/json' },
      });

      return response.data;
    } catch (error) {
      logger.error('Error during Toast authentication:', error);
      throw error;
    }
  }

  async getMenu(token, restaurantId) {
    try {
      const response = await axios.get(`https://api.toasttab.com/menus/v3/menus`, {
        headers: {
          'Toast-Restaurant-External-ID': restaurantId,
          Authorization: `Bearer ${token}`,
        },
      });

      const data = response.data;

      return data.map(menu => ({
        ...menu,
        groups: menu.groups.map(group => ({
          ...group,
          imageUrl: group.images?.[0]?.url || null,
          items: group.items.map(item => ({
            ...item,
            imageUrl: item.images?.[0]?.url || null,
          })),
        })),
      }));
    } catch (error) {
      logger.error('Error fetching menu from Toast:', error);
      throw error;
    }
  }

  async handleMenusUpdated(payload) {
    try {
      const { restaurantGuid, publishedDate } = payload;
      const menuData = await this.getMenu(restaurantGuid); // Fetch menu data

      // Log the received menu data for debugging
      logger.info(`Received menu data: ${JSON.stringify(menuData)}`);

      // Process and store the menu data in the database
      await db.Menu.update({ updatedAt: publishedDate }, {
        where: { restaurantGuid },
      });

      // Additional processing or storage logic for menuData can be added here
      logger.info(`Successfully updated menu for restaurant ${restaurantGuid}`);
    } catch (error) {
      logger.error(`Error handling menus_updated webhook:`, error);
      throw error;
    }
  }
}

module.exports = new ToastService();

================
File: backend/src/services/trackingPixelService.js
================
const { TrackingPixel } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const createPixel = async (pixelData) => {
  try {
    const newPixel = await TrackingPixel.create(pixelData);
    logger.info(`New tracking pixel created with ID: ${newPixel.id}`);
    return newPixel;
  } catch (error) {
    logger.error('Error creating tracking pixel:', error);
    throw new AppError('Failed to create tracking pixel', 500);
  }
};

const getAllPixels = async () => {
  try {
    return await TrackingPixel.findAll();
  } catch (error) {
    logger.error('Error fetching all tracking pixels:', error);
    throw new AppError('Failed to fetch tracking pixels', 500);
  }
};

const getPixelById = async (id) => {
  try {
    const pixel = await TrackingPixel.findByPk(id);
    if (!pixel) {
      throw new AppError('Tracking pixel not found', 404);
    }
    return pixel;
  } catch (error) {
    logger.error(`Error fetching tracking pixel with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to fetch tracking pixel', 500);
  }
};

const updatePixel = async (id, pixelData) => {
  try {
    const pixel = await getPixelById(id);
    const updatedPixel = await pixel.update(pixelData);
    logger.info(`Tracking pixel updated with ID: ${id}`);
    return updatedPixel;
  } catch (error) {
    logger.error(`Error updating tracking pixel with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to update tracking pixel', 500);
  }
};

const deletePixel = async (id) => {
  try {
    const pixel = await getPixelById(id);
    await pixel.destroy();
    logger.info(`Tracking pixel deleted with ID: ${id}`);
    return true;
  } catch (error) {
    logger.error(`Error deleting tracking pixel with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to delete tracking pixel', 500);
  }
};

const triggerPixel = async (id) => {
  try {
    const pixel = await getPixelById(id);
    // Implement pixel triggering logic here
    logger.info(`Tracking pixel triggered with ID: ${id}`);
    return { message: 'Tracking pixel triggered successfully' };
  } catch (error) {
    logger.error(`Error triggering tracking pixel with ID ${id}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to trigger tracking pixel', 500);
  }
};

module.exports = {
  createPixel,
  getAllPixels,
  getPixelById,
  updatePixel,
  deletePixel,
  triggerPixel
};

================
File: backend/src/services/translatorService.js
================
const { Translation } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');
// Import your preferred translation API library here

const translateText = async (text, targetLanguage, sourceLanguage = 'auto') => {
  try {
    // Implement translation logic here using your preferred translation API
    // This is a placeholder implementation
    const translatedText = `Translated: ${text}`;
    
    // Save translation to history
    await Translation.create({
      originalText: text,
      translatedText,
      sourceLanguage,
      targetLanguage
    });

    return translatedText;
  } catch (error) {
    logger.error('Error translating text:', error);
    throw new AppError('Failed to translate text', 500);
  }
};

const getSupportedLanguages = async () => {
  try {
    // Implement logic to fetch supported languages from your translation API
    // This is a placeholder implementation
    return ['en', 'es', 'fr', 'de', 'it'];
  } catch (error) {
    logger.error('Error fetching supported languages:', error);
    throw new AppError('Failed to fetch supported languages', 500);
  }
};

const detectLanguage = async (text) => {
  try {
    // Implement language detection logic here
    // This is a placeholder implementation
    return 'en';
  } catch (error) {
    logger.error('Error detecting language:', error);
    throw new AppError('Failed to detect language', 500);
  }
};

const translateMenu = async (menuId, targetLanguage) => {
  try {
    // Implement menu translation logic here
    // This is a placeholder implementation
    return { menuId, targetLanguage, status: 'translated' };
  } catch (error) {
    logger.error('Error translating menu:', error);
    throw new AppError('Failed to translate menu', 500);
  }
};

const getTranslationHistory = async (query) => {
  try {
    return await Translation.findAll({
      where: query,
      order: [['createdAt', 'DESC']],
      limit: 100
    });
  } catch (error) {
    logger.error('Error fetching translation history:', error);
    throw new AppError('Failed to fetch translation history', 500);
  }
};

module.exports = {
  translateText,
  getSupportedLanguages,
  detectLanguage,
  translateMenu,
  getTranslationHistory
};

================
File: backend/src/services/twoFactorService.js
================
const speakeasy = require('speakeasy');
const { User, ClientSettings, Location } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

const generateSecret = () => {
  return speakeasy.generateSecret({ length: 32 });
};

const verifyToken = (secret, token) => {
  return speakeasy.totp.verify({
    secret,
    encoding: 'base32',
    token,
  });
};

const enableTwoFactor = async (userId) => {
  try {
    const secret = generateSecret();
    await User.update(
      { 
        twoFactorSecret: secret.base32, 
        twoFactorEnabled: true 
      },
      { where: { id: userId } }
    );
    return secret.otpauth_url;
  } catch (error) {
    logger.error(`Error enabling 2FA for user ${userId}:`, error);
    throw new AppError('Failed to enable 2FA', 500);
  }
};

const disableTwoFactor = async (userId) => {
  try {
    await User.update(
      { 
        twoFactorSecret: null, 
        twoFactorEnabled: false 
      },
      { where: { id: userId } }
    );
  } catch (error) {
    logger.error(`Error disabling 2FA for user ${userId}:`, error);
    throw new AppError('Failed to disable 2FA', 500);
  }
};

const isTwoFactorRequired = async (userId, locationId) => {
  try {
    const user = await User.findByPk(userId);
    if (!user) {
      throw new AppError('User not found', 404);
    }

    const clientSettings = await ClientSettings.findOne({ where: { clientId: user.clientId } });
    if (!clientSettings) {
      throw new AppError('Client settings not found', 404);
    }

    const location = await Location.findByPk(locationId);

    if (!clientSettings.twoFactorRequired) {
      return false;
    }

    if (location && location.twoFactorException) {
      return false;
    }

    return true;
  } catch (error) {
    logger.error(`Error checking if 2FA is required for user ${userId} at location ${locationId}:`, error);
    throw error instanceof AppError ? error : new AppError('Failed to check 2FA requirement', 500);
  }
};

const validateTwoFactor = async (userId, token, locationId) => {
  try {
    const user = await User.findByPk(userId);
    if (!user || !user.twoFactorSecret) {
      return false;
    }

    const isRequired = await isTwoFactorRequired(userId, locationId);
    if (!isRequired) {
      return true; // 2FA is not required, so we consider it valid
    }

    return verifyToken(user.twoFactorSecret, token);
  } catch (error) {
    logger.error(`Error validating 2FA for user ${userId}:`, error);
    throw new AppError('Failed to validate 2FA', 500);
  }
};

module.exports = {
  enableTwoFactor,
  disableTwoFactor,
  isTwoFactorRequired,
  validateTwoFactor
};

================
File: backend/src/services/userService.js
================
const { Op } = require('sequelize');
const bcrypt = require('bcrypt');
const { User } = require('../models');
const { UserRole } = require('../types/enums');
const { CreateUserDto, UpdateUserDto } = require('../types/dto/user');
const { NotFoundError, ConflictError } = require('../utils/errors');

const createUser = async (userData) => {
  const existingUser = await User.findOne({
    where: {
      [Op.or]: [{ username: userData.username }, { email: userData.email }],
    },
  });

  if (existingUser) {
    throw new ConflictError('Username or email already exists');
  }

  const hashedPassword = await bcrypt.hash(userData.password, 10);
  const newUser = await User.create({
    ...userData,
    password: hashedPassword,
  });

  return newUser;
};

const getUserById = async (id) => {
  const user = await User.findByPk(id);
  if (!user) {
    throw new NotFoundError('User not found');
  }
  return user;
};

const updateUser = async (id, updateData) => {
  const user = await getUserById(id);
  
  if (updateData.password) {
    updateData.password = await bcrypt.hash(updateData.password, 10);
  }

  await user.update(updateData);
  return user;
};

const deleteUser = async (id) => {
  const user = await getUserById(id);
  await user.destroy();
};

const getUserByUsername = async (username) => {
  return User.findOne({ where: { username } });
};

module.exports = {
  createUser,
  getUserById,
  updateUser,
  deleteUser,
  getUserByUsername,
};

================
File: backend/src/services/walletDropService.js
================
const WalletDrop = require '../models/WalletDrop';
const logger = require '../utils/logger';

const createWalletDrop = async (
  userId,
  type: 'credit' | 'percentage' | 'fixed' | 'item',
  value,
  reason,
  itemId?,
  expirationDate?
) => {
  try {
    const walletDrop = await WalletDrop.create({ userId, type, value, reason, itemId, expirationDate });
    logger.info(`Wallet drop created: ${walletDrop.id}`);
    return walletDrop;
  } catch (error) {
    logger.error('Error creating wallet drop:', error);
    throw error;
  }
};

const getWalletDropsByUser = async (userId) => {
  try {
    return await WalletDrop.findAll({ where: { userId } });
  } catch (error) {
    logger.error('Error fetching wallet drops:', error);
    throw error;
  }
};

// Add more methods  (update, delete, etc.)

================
File: backend/src/services/walletService.js
================
const { Wallet, Guest, Discount, LoyaltyReward, Transaction } = require('../models');
const { AppError } = require('../utils/errorHandler');
const logger = require('../utils/logger');

class WalletService {
  static async getWalletBalance(guestId) {
    try {
      const wallet = await Wallet.findOne({
        where: { guestId },
        include: [Guest, LoyaltyReward],
      });

      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      // Calculate total balance including any unused rewards
      const totalBalance = wallet.balance + wallet.LoyaltyRewards.reduce((sum, reward) => sum + reward.value, 0);

      return totalBalance;
    } catch (error) {
      logger.error(`Error fetching wallet balance for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to fetch wallet balance', 500);
    }
  }

  static async addFunds(guestId, amount) {
    try {
      const wallet = await Wallet.findOne({ where: { guestId } });
      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      wallet.balance += amount;
      await wallet.save();

      await Transaction.create({
        walletId: wallet.id,
        type: 'DEPOSIT',
        amount,
        balance: wallet.balance
      });

      return wallet.balance;
    } catch (error) {
      logger.error(`Error adding funds to wallet for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to add funds to wallet', 500);
    }
  }

  static async withdrawFunds(guestId, amount) {
    try {
      const wallet = await Wallet.findOne({ where: { guestId } });
      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      if (wallet.balance < amount) {
        throw new AppError('Insufficient funds', 400);
      }

      wallet.balance -= amount;
      await wallet.save();

      await Transaction.create({
        walletId: wallet.id,
        type: 'WITHDRAWAL',
        amount: -amount,
        balance: wallet.balance
      });

      return wallet.balance;
    } catch (error) {
      logger.error(`Error withdrawing funds from wallet for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to withdraw funds from wallet', 500);
    }
  }

  static async getTransactionHistory(guestId) {
    try {
      const wallet = await Wallet.findOne({ where: { guestId } });
      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      return Transaction.findAll({
        where: { walletId: wallet.id },
        order: [['createdAt', 'DESC']],
        limit: 50
      });
    } catch (error) {
      logger.error(`Error fetching transaction history for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to fetch transaction history', 500);
    }
  }

  static async transferFunds(senderId, recipientId, amount) {
    try {
      const senderWallet = await Wallet.findOne({ where: { guestId: senderId } });
      const recipientWallet = await Wallet.findOne({ where: { guestId: recipientId } });

      if (!senderWallet || !recipientWallet) {
        throw new AppError('Wallet not found', 404);
      }

      if (senderWallet.balance < amount) {
        throw new AppError('Insufficient funds', 400);
      }

      senderWallet.balance -= amount;
      recipientWallet.balance += amount;

      await senderWallet.save();
      await recipientWallet.save();

      await Transaction.create({
        walletId: senderWallet.id,
        type: 'TRANSFER_OUT',
        amount: -amount,
        balance: senderWallet.balance,
        recipientId
      });

      await Transaction.create({
        walletId: recipientWallet.id,
        type: 'TRANSFER_IN',
        amount,
        balance: recipientWallet.balance,
        senderId
      });

      return { message: 'Funds transferred successfully' };
    } catch (error) {
      logger.error(`Error transferring funds from guest ${senderId} to guest ${recipientId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to transfer funds', 500);
    }
  }

  static async getWalletDetails(guestId) {
    try {
      const wallet = await Wallet.findOne({
        where: { guestId },
        include: [Guest, LoyaltyReward, Discount]
      });

      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      return wallet;
    } catch (error) {
      logger.error(`Error fetching wallet details for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to fetch wallet details', 500);
    }
  }

  static async addDiscountToWallet(guestId, discountId) {
    try {
      const wallet = await Wallet.findOne({ where: { guestId } });
      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      await Discount.update({ walletId: wallet.id }, { where: { id: discountId } });
      return true;
    } catch (error) {
      logger.error(`Error adding discount to wallet for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to add discount to wallet', 500);
    }
  }

  static async getWalletDiscounts(guestId) {
    try {
      const wallet = await Wallet.findOne({ where: { guestId } });
      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      return await Discount.findAll({ where: { walletId: wallet.id } });
    } catch (error) {
      logger.error(`Error fetching wallet discounts for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to fetch wallet discounts', 500);
    }
  }

  static async applyLoyaltyPoints(guestId, points) {
    try {
      const wallet = await Wallet.findOne({ where: { guestId } });
      if (!wallet) {
        throw new AppError('Wallet not found', 404);
      }

      if (wallet.balance < points) {
        throw new AppError('Insufficient points', 400);
      }

      wallet.balance -= points;
      await wallet.save();

      await Transaction.create({
        walletId: wallet.id,
        type: 'LOYALTY_POINTS_USED',
        amount: -points,
        balance: wallet.balance
      });

      return true;
    } catch (error) {
      logger.error(`Error applying loyalty points for guest ${guestId}:`, error);
      throw error instanceof AppError ? error : new AppError('Failed to apply loyalty points', 500);
    }
  }
}

module.exports = WalletService;

================
File: backend/src/ssl/server.cert
================
-----BEGIN CERTIFICATE-----
MIID6TCCAtGgAwIBAgIUBhIEASF8akIwLFOOrR/OLXiPZF8wDQYJKoZIhvcNAQEL
BQAwgYMxCzAJBgNVBAYTAnVzMQ8wDQYDVQQIDAZuZXZhZGExITAfBgNVBAoMGElu
dGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEWMBQGA1UEAwwNNjQuMjMuMTc4LjE5ODEo
MCYGCSqGSIb3DQEJARYZYnJ5Y2UuYXNwaW53YWxsQGdtYWlsLmNvbTAeFw0yNDA4
MTcxNTMwNTJaFw0yNTA4MTcxNTMwNTJaMIGDMQswCQYDVQQGEwJ1czEPMA0GA1UE
CAwGbmV2YWRhMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQxFjAU
BgNVBAMMDTY0LjIzLjE3OC4xOTgxKDAmBgkqhkiG9w0BCQEWGWJyeWNlLmFzcGlu
d2FsbEBnbWFpbC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDF
P9OohjVJkUeuyuKycXQHY2LiI8jMxCgje/RFGPnyuBFe2R+TcUrEvuWi+WtOoWNZ
+p1KfwilpdG+56EwEVKpnNoWFdAXJJXa4Wu0vWxXHQJ+GENvjbCPY7ikfdRe+7Ou
k5UvoAESF9tvBbjF9JYCTlqhocftn1QIjvJOXt49uJMRvW8pdblKB9FMNjCXjDop
2c7ZrWMKGHNG7p7RnNAcWlxL28+JNE1Uh5Z0o6NDtdJ4+StEDccRLqHvfsd8Ol7a
TSDsPRK7mbUJCblhu8wzyAoGYk4Ym0a7FlBpvr+SmmFOKGUkCk8gOYV2JLBbEEsq
2wHYlAVvYSlHoLzNIN0JAgMBAAGjUzBRMB0GA1UdDgQWBBSfg5uBHa3yEKcAV0ZR
msjfw4ErNTAfBgNVHSMEGDAWgBSfg5uBHa3yEKcAV0ZRmsjfw4ErNTAPBgNVHRMB
Af8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQArDRlDSOhZaS9zFSCDy9U0bam8
RMJeXjW3wWRqkg7pl8q7FQXYM2vVmbuBRfsobxcS3jZqXRQXbPEpOewiODyEzru8
b4AvzzOglZHY26SupU1zT6qEPPg20Pjn8PVOAQUhKtv95unAcGc5Bwi1PZgbXfOP
rooTqwfsmoUvjc90U5msA2W4GJTJDgj+hZx6NC9QeyWoLK38L0yZqA6d0mavyj2r
zPLHZ8XfRZIiWvScDx1W152LVRteLlV6gCAjR1on2bszbi5pTQap5BIIQkO2K0Hp
wJx+w35INOVAfwdbpPrIATlnmYUIbnnfKCu7zBxffp+hXgfl4KUM/Jn5X0qH
-----END CERTIFICATE-----

================
File: backend/src/tests/location.test.js
================
const request = require 'supertest';
const app = require '../app';
const { Location } = require '../models/Location';

describe('Location API', () => {
  beforeEach(async () => {
    await Location.deleteMany({});
  });

  it('should create a new location', async () => {
    const res = await request(app)
      .post('/api/locations')
      .send({
        name: 'Test Location',
        address: '123 Test St',
        city: 'Testville',
        state: 'TS',
        zipCode: '12345',
      });
    expect(res.statusCode).toEqual(201);
    expect(res.body).toHaveProperty('name', 'Test Location');
  });

  // Add more tests...
});

================
File: backend/src/translator/providerConfigs.js
================
const providerConfigs = {
  doordash: {
    format: 'JSON',
    apiEndpoint: 'https://api.doordash.com/menus',
    contentType: 'application/json',
  },
  ubereats: {
    format: 'XML',
    apiEndpoint: 'https://api.ubereats.com/menus',
    contentType: 'application/xml',
  },
  // Add more providers as needed
};

module.exports = providerConfigs;

================
File: backend/src/translator/translatorService.js
================
const axios = require('axios');

class TranslatorService {
  constructor(providerConfig) {
    this.providerConfig = providerConfig; // Each provider's config defines how to format the data
  }

  // Function to translate menu data
  translateMenu(menuData) {
    if (this.providerConfig.format === 'JSON') {
      return this.translateToJSON(menuData);
    } else if (this.providerConfig.format === 'XML') {
      return this.translateToXML(menuData);
    }
    // Add more formats as needed
  }

  // Example function to translate to JSON format
  translateToJSON(menuData) {
    return {
      menuName: menuData.name,
      items: menuData.menuItems.map(item => ({
        itemName: item.name,
        price: item.basePrice,
        pointsPrice: item.pointsPrice || null, // Handling points if applicable
        modifiers: item.modifiers,
      })),
    };
  }

  // Example function to translate to XML format (stubbed out for now)
  translateToXML(menuData) {
    // Implement XML translation logic here
    return `<Menu><Name>${menuData.name}</Name></Menu>`;
  }

  // Send the translated data to the provider's API
  async sendDataToProvider(translatedData) {
    try {
      const response = await axios.post(this.providerConfig.apiEndpoint, translatedData, {
        headers: {
          'Content-Type': this.providerConfig.contentType,
        },
      });
      return response.data;
    } catch (error) {
      console.error('Error sending data to provider:', error);
      throw error;
    }
  }
}

module.exports = TranslatorService;

================
File: backend/src/types/dto/user.js
================
class CreateUserDto {
  // Add properties as needed
}

class UpdateUserDto {
  // Add properties as needed
}

module.exports = {
  CreateUserDto,
  UpdateUserDto
};

================
File: backend/src/types/enums.js
================
const UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER',
  // Add other roles as needed
};

module.exports = {
  UserRole
};

================
File: backend/src/utils/cache.js
================
const NodeCache = require 'node-cache';

const cache = new NodeCache({ stdTTL: 600 }); // 10 minutes default TTL

const getOrSetCache = async <T>(
  key,
  cb: () => Promise<T>
) => {
  const value = cache.get<T>(key);
  if (value) {
    return value;
  }

  const result = await cb();
  cache.set(key, result);
  return result;
};

================
File: backend/src/utils/dateUtils.js
================
const moment = require('moment-timezone');

/**
 * Convert date and time based on the location's timezone.
 * @param {Date} date - The date to convert.
 * @param {string} timezone - The location's timezone.
 * @returns {Date} The converted date.
 */
function convertToTimezone(date, timezone) {
  return moment(date).tz(timezone).toDate();
}

/**
 * Calculate the remaining time until a specific date.
 * @param {Date} targetDate - The target date.
 * @returns {string} The formatted remaining time (e.g., '2 hours left').
 */
function getTimeUntil(targetDate) {
  const now = moment();
  const target = moment(targetDate);
  const duration = moment.duration(target.diff(now));

  if (duration.asHours() >= 1) {
    return `${Math.floor(duration.asHours())} hours left`;
  }
  return `${Math.floor(duration.asMinutes())} minutes left`;
}

/**
 * Get the "pretty" time slots in 15-minute intervals.
 * @param {Date} startTime - The starting time.
 * @returns {Array<string>} An array of time slots (e.g., ['1:15 PM', '1:30 PM']).
 */
function getPrettyTimeSlots(startTime) {
  const slots = [];
  const roundedStart = moment(startTime).startOf('minute').add(15 - (startTime.getMinutes() % 15), 'minutes');

  for (let i = 0; i < 24; i++) {
    slots.push(roundedStart.format('h:mm A'));
    roundedStart.add(15, 'minutes');
  }
  return slots;
}

module.exports = {
  convertToTimezone,
  getTimeUntil,
  getPrettyTimeSlots,
};

================
File: backend/src/utils/discountUtils.js
================
const { Discount } = require('../models');

/**
 * Get applicable discounts for an order based on guest and location.
 * @param {Order} order - The order being placed.
 * @param {number} guestId - The ID of the guest placing the order.
 * @returns {Array<Discount>} An array of applicable discounts.
 */
async function getApplicableDiscounts(order, guestId) {
  const discounts = await Discount.findAll({
    where: {
      locationId: order.locationId,
      status: 'active',
    },
  });

  return discounts.filter(discount => discount.isApplicable(order, guestId));
}

/**
 * Apply the best discount to the order.
 * @param {Array<Discount>} discounts - The array of applicable discounts.
 * @param {Order} order - The order to apply the discount to.
 * @returns {Order} The updated order with the best discount applied.
 */
function applyBestDiscount(discounts, order) {
  if (discounts.length === 0) return order;

  const bestDiscount = discounts.reduce((prev, current) => (current.value > prev.value ? current : prev));
  order.discountApplied = bestDiscount.value;
  order.totalAmount -= bestDiscount.value;

  return order.save();
}

module.exports = {
  getApplicableDiscounts,
  applyBestDiscount,
};

================
File: backend/src/utils/emojiUtils.js
================
module.exports.StripEmojis = (str) => {
  if (!str) return str;
  return str.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F780}-\u{1F7FF}\u{1F800}-\u{1F8FF}\u{1F900}-\u{1F9FF}\u{1FA00}-\u{1FA6F}\u{1FA70}-\u{1FAFF}]/gu, '');
};

================
File: backend/src/utils/errorHandler.js
================
const { Request, Response, NextFunction } = require('express');
const logger = require('./logger');

class AppError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

const errorHandler = (err, req, res, next) => {
  // This function is now handled directly in server.js
  next(err);
};

module.exports = {
  AppError,
  errorHandler
};

================
File: backend/src/utils/errors.js
================
class UnauthorizedError extends Error {
  constructor(message) {
    super(message);
    this.name = 'UnauthorizedError';
    this.statusCode = 401;
  }
}

class NotFoundError extends Error {
  constructor(message) {
    super(message);
    this.name = 'NotFoundError';
  }
}

class ConflictError extends Error {
  constructor(message) {
    super(message);
    this.name = 'ConflictError';
  }
}

module.exports = {
  UnauthorizedError,
  NotFoundError,
  ConflictError
};

================
File: backend/src/utils/exportUtils.js
================
const ExcelJS = require 'exceljs';
const PDFDocument = require 'pdfkit';
const { Readable } = require 'stream';

const exportToExcel = async (data[], sheetName) => {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet(sheetName);

  // Add headers
  const headers = Object.keys(data[0]);
  worksheet.addRow(headers);

  // Add data
  data.forEach(item => {
    worksheet.addRow(Object.values(item));
  });

  return await workbook.xlsx.writeBuffer();
};

const exportToPDF = (data[]) => {
  const doc = new PDFDocument();
  const stream = new Readable();
  stream._read = () => {};

  doc.pipe(stream);

  // Add headers
  const headers = Object.keys(data[0]);
  doc.text(headers.join(', '));

  // Add data
  data.forEach(item => {
    doc.text(Object.values(item).join(', '));
  });

  doc.end();

  return stream;
};

================
File: backend/src/utils/invoiceUtils.js
================
const { Invoice } = require('../models'); // Added import for Invoice model

const calculateAccountBalance = async (houseAccountId) => {
  const invoices = await Invoice.findAll({ where: { houseAccountId } });
  const total = invoices.reduce((sum, invoice) => sum + invoice.amount, 0);
  return total;
};

const generateInvoiceNumber = () => {
  return `INV-${Date.now()}`;
};

module.exports = { calculateAccountBalance, generateInvoiceNumber };

================
File: backend/src/utils/locationUtils.js
================
const axios = require('axios');

/**
 * Get coordinates (latitude and longitude) from an address using a geocoding API.
 * @param {string} address - The address to geocode.
 * @returns {Object} An object containing latitude and longitude.
 */
async function getCoordinatesFromAddress(address) {
  try {
    // Use a geocoding API (e.g., Google Geocoding API, OpenStreetMap, etc.)
    const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json`, {
      params: {
        q: address,
        key: process.env.GEOCODING_API_KEY, // Replace with your geocoding API key
      },
    });

    const { lat, lng } = response.data.results[0].geometry;
    return { latitude: lat, longitude: lng };
  } catch (error) {
    console.error('Error fetching coordinates:', error);
    throw new Error('Unable to fetch coordinates for the provided address.');
  }
}

module.exports = { getCoordinatesFromAddress };

================
File: backend/src/utils/logger.js
================
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}

module.exports = logger;

================
File: backend/src/utils/loyaltyUtils.js
================
const { LoyaltyReward, Guest, Order, Wallet } = require('../models');
const moment = require('moment-timezone');

function calculateLoyaltyTier(guest) {
  const totalSpend = guest.totalSpend;
  if (totalSpend >= 1000) return 'Platinum';
  if (totalSpend >= 500) return 'Gold';
  return 'Silver';
}

async function applyLoyaltyReward(order, guestId) {
  const wallet = await Wallet.findOne({ where: { guestId }, include: [LoyaltyReward] });
  if (!wallet) throw new Error('Wallet not found');

  const applicableRewards = wallet.LoyaltyRewards.filter(reward => {
    return (
      reward.status === 'active' &&
      reward.pointsRequired <= wallet.loyaltyPoints
    );
  });

  if (!applicableRewards.length) {
    return order; // No reward applicable
  }

  const rewardToApply = applicableRewards[0];
  wallet.loyaltyPoints -= rewardToApply.pointsRequired;

  const expirationDate = moment().add(30, 'days');

  await wallet.save();

  order.loyaltyPointsUsed = rewardToApply.pointsRequired;
  order.rewardExpirationDate = expirationDate;
  return order;
}

async function updateLoyaltyProgress(order, guestId) {
  const guest = await Guest.findByPk(guestId);
  const pointsEarned = Math.floor(order.subtotal);

  guest.loyaltyPoints += pointsEarned;
  guest.totalSpend += order.subtotal;

  if (guest.loyaltyTier === 'Silver') {
    guest.loyaltyPoints = applyRollingExpiration(guest.loyaltyPoints, 30);
  } else if (guest.loyaltyTier === 'Platinum') {
    guest.loyaltyPoints = applyRollingExpiration(guest.loyaltyPoints, 90);
  }

  await guest.save();
}

function applyRollingExpiration(points, days) {
  const expirationDate = moment().subtract(days, 'days');
  const currentDate = moment();
  
  // Calculate the fraction of a year that has passed since the expiration date
  const yearFraction = currentDate.diff(expirationDate, 'days') / 365;
  
  // Expire points proportional to the time passed, with a maximum of the input points
  const expiredPoints = Math.min(points, Math.floor(points * yearFraction));
  
  return Math.max(points - expiredPoints, 0);
}

async function getOrderHistory(guestId) {
  return await Order.findAll({ where: { guestId } });
}

module.exports = {
  calculateLoyaltyTier,
  applyLoyaltyReward,
  updateLoyaltyProgress,
  getOrderHistory,
};

================
File: backend/src/utils/menuSyncScheduler.js
================
const cron = require 'node-cron';
const { syncMenuForProvider } = require '../services/orderProviderService';

const schedules: { [key].ScheduledTask } = {};

const scheduleMenuSync = (provider) => {
  if (schedules[provider.id]) {
    schedules[provider.id].stop();
  }

  let cronExpression;
  switch (provider.menuSyncFrequency) {
    case 'hourly':
      cronExpression = '0 * * * *';
      break;
    case 'daily':
      cronExpression = '0 0 * * *';
      break;
    case 'weekly':
      cronExpression = '0 0 * * 0';
      break;
    default:
      cronExpression = '0 0 * * *'; // Default to daily
  }

  schedules[provider.id] = cron.schedule(cronExpression, () => {
    syncMenuForProvider(provider.id);
  });
};

const stopMenuSync = (providerId) => {
  if (schedules[providerId]) {
    schedules[providerId].stop();
    delete schedules[providerId];
  }
};

================
File: backend/src/utils/notificationService.js
================
const admin = require('firebase-admin');
const { User } = require('../models');

const sendNotification = async (userId, message) => {
  try {
    const user = await User.findByPk(userId);
    if (user && user.fcmToken) {
      await admin.messaging().send({
        token: user.fcmToken,
        notification: {
          title: 'Order Update',
          body: message,
        },
      });
    }
  } catch (error) {
    console.error('Error sending notification:', error);
  }
};

module.exports = {
  sendNotification
};

================
File: backend/src/utils/orderProviderIntegration.js
================
const axios = require 'axios';
const { Order } = require '../models/Order';
const { Location } = require '../models/Location';

const sendMenuToProvider = async (provider, menuItems[]) => {
  const location = await Location.findByPk(provider.locationId);
  if (!location) {
    throw new Error('Location not found');
  }

  const upliftedMenuItems = menuItems.map((item) => ({
    ...item,
    price.price * (1 + provider.upliftPercentage / 100),
  }));

  try {
    await axios.post(`${provider.apiUrl}/menu`, {
      apiKey.apiKey,
      menu,
    });
  } catch (error) {
    console.error(`Failed to send menu to ${provider.name}:`, error);
    throw error;
  }
};

const handleIncomingOrder = async (provider, orderData) => {
  // Validate the incoming order data
  // Transform the order data to match your internal order structure
  const transformedOrder = transformOrderData(orderData);

  // Apply any necessary business logic (e.g., inventory checks)

  // Create the order in your system
  const order = await Order.create(transformedOrder);

  // Send the order to the POS system
  await sendOrderToPOS(order);

  return order;
};

const transformOrderData = (orderData) => {
  // Implement the logic to transform the order data from the provider's format to your internal format
  // This will depend on the specific structure of the incoming order data and your internal order model
  return {
    // Map the fields accordingly
  };
};

const sendOrderToPOS = async (order) => {
  // Implement the logic to send the order to the POS system
  // This will depend on your POS integration
};

const sendDoordashSSIOUpdate = async (provider, menuItems?[]) => {
  const location = await Location.findByPk(provider.locationId);
  if (!location) {
    throw new Error('Location not found');
  }

  const ssioPayload = {
    external_reference_id.doordashExternalReferenceId,
    store_id.doordashStoreId,
    menu_id.doordashMenuId,
    // Add other required SSIO fields here
  };

  if (menuItems) {
    ssioPayload.items = menuItems.map((item) => ({
      external_id.id,
      name.name,
      description.description,
      price.price * (1 + provider.upliftPercentage / 100),
      // Add other required item fields here
    }));
  }

  try {
    await axios.post('https://api.doordash.com/drive/v2/ssio/update', ssioPayload, {
      headers: {
        'Authorization': `Bearer ${provider.apiKey}`,
        'Content-Type': 'application/json',
      },
    });
  } catch (error) {
    console.error(`Failed to send SSIO update to Doordash:`, error);
    throw error;
  }
};

================
File: backend/src/utils/orderScheduler.js
================
const cron = require('node-cron');
const { Order, Op } = require('../models'); // Added Op import

// Schedule job to process scheduled orders every minute
cron.schedule('* * * * *', async () => {
  console.log('Processing scheduled orders...');
  try {
    const now = new Date();
    const scheduledOrders = await Order.findAll({
      where: {
        status: 'scheduled',
        scheduledFor: { [Op.lte]: now }, // Process orders scheduled for now or earlier
      }
    });

    for (const order of scheduledOrders) {
      order.status = 'processing';
      await order.save();

      // Implement logic to send order to the kitchen or process as needed
      console.log(`Order ${order.id} is now processing.`);
    }
  } catch (error) {
    console.error('Error processing scheduled orders:', error);
  }
});

================
File: backend/src/utils/pricingUtils.js
================
function roundToNext99(price) {
  if (typeof price !== 'number') {
    throw new Error('Price must be a number');
  }
  const roundedPrice = Math.ceil(price) - 0.01;
  return parseFloat(roundedPrice.toFixed(2));
}

// Function to calculate the uplifted price based on the percentage
function calculateUplift(price, upliftPercentage) {
  if (typeof price !== 'number' || typeof upliftPercentage !== 'number') {
    throw new Error('Price and uplift percentage must be numbers');
  }
  const upliftedPrice = price * (1 + upliftPercentage / 100);
  return parseFloat(upliftedPrice.toFixed(2));
}

// Function to apply rounding based on provider settings
function applyRoundingIfNeeded(price, roundingOption) {
  switch (roundingOption) {
    case '.99':
      return roundToNext99(price);
    case 'nearest':
      return Math.round(price * 100) / 100;
    default:
      return price;
  }
}

// Function to calculate provider-specific pricing uplifts with rounding options
function calculateProviderPricing(price, upliftPercentage, roundingOption) {
  let upliftedPrice = calculateUplift(price, upliftPercentage);
  return applyRoundingIfNeeded(upliftedPrice, roundingOption);
}

module.exports = {
  roundToNext99,
  calculateUplift,
  applyRoundingIfNeeded,
  calculateProviderPricing,
};

================
File: backend/src/utils/readyTimeUtils.js
================
const { Location } = require('../models'); // Added import for Location model

const updateReadyTime = async (locationId, orderData) => { // Added async keyword
  const { totalItems, totalAmount, totalOrders } = orderData;

  // Fetch location-specific throttle settings
  const location = await Location.findByPk(locationId);
  const throttleSettings = location.throttleSettings;

  // Apply the scaling logic based on the throttle settings
  let readyTimeIncrement = 0;

  if (totalItems >= throttleSettings.itemThreshold) {
    readyTimeIncrement += throttleSettings.itemIncrement; // e.g., 5 minutes
  }

  if (totalAmount >= throttleSettings.amountThreshold) {
    readyTimeIncrement += throttleSettings.amountIncrement; // e.g., 10 minutes
  }

  if (totalOrders >= throttleSettings.orderThreshold) {
    readyTimeIncrement += throttleSettings.orderIncrement; // e.g., 15 minutes
  }

  // Update the ready time for future orders at this location
  location.currentReadyTime += readyTimeIncrement;
  await location.save();

  return location.currentReadyTime;
};

module.exports = { updateReadyTime };

================
File: backend/src/utils/scheduledOrderCron.js
================
const cron = require 'node-cron';
const { processScheduledOrders } = require '../services/scheduledOrderService';

const startScheduledOrderCron = () => {
  cron.schedule('* * * * *', async () => {
    await processScheduledOrders();
  });
};

================
File: backend/src/utils/timezoneUtils.js
================
const moment = require('moment-timezone');

/**
 * Automatically determine the timezone based on a location's address.
 * @param {string} address - The address of the location.
 * @returns {string} The determined timezone (e.g., 'America/New_York').
 */
function getTimezoneFromAddress(address) {
  // Mocked function to determine timezone based on location address
  if (address.includes('New York')) {
    return 'America/New_York';
  }
  return 'America/Los_Angeles';
}

/**
 * Convert a date to a location's timezone.
 * @param {Date} date - The date to convert.
 * @param {string} timezone - The timezone to convert to.
 * @returns {Date} The converted date.
 */
function convertToLocationTimezone(date, timezone) {
  return moment(date).tz(timezone).toDate();
}

module.exports = {
  getTimezoneFromAddress,
  convertToLocationTimezone,
};

================
File: backend/src/utils/translationEngine.js
================
class TranslationEngine {
  constructor(mapping) {
    this.mapping = mapping;
  }

  translate(internalData) {
    const translatedData = {};

    for (const [internalKey, posKey] of Object.entries(this.mapping)) {
      translatedData[posKey] = internalData[internalKey];
    }

    return translatedData;
  }

  // Add methods to support complex translation scenarios (e.g., nested objects, array mappings)
  translateNestedData(internalData, nestedMappings) {
    const translatedData = {};

    for (const [internalKey, posKey] of Object.entries(nestedMappings)) {
      if (internalData[internalKey] && typeof internalData[internalKey] === 'object') {
        translatedData[posKey] = this.translate(internalData[internalKey]);
      } else {
        translatedData[posKey] = internalData[internalKey];
      }
    }

    return translatedData;
  }
}

module.exports = TranslationEngine;

================
File: backend/src/validators/clientValidator.js
================
const Joi = require 'joi';

const clientSchema = Joi.object({
  name.string().required(),
  domain.string().required(),
  primaryColor.string().required(),
  secondaryColor.string().required(),
  logo.string().uri().required(),
  features.object({
    loyalty.boolean().required(),
    onlineOrdering.boolean().required(),
    tableReservations.boolean().required(),
  }).required(),
});

const validateClientData = (data) => {
  const { error } = clientSchema.validate(data, { abortEarly });
  if (error) {
    return error.details.map((err) => err.message);
  }
  return [];
};

================
File: backend/src/.env
================
DB_NAME=pos
DB_USER=bryce
DB_PASSWORD=1234
DB_HOST=localhost
JWT_SECRET=Lma1i18om2ghPiqGuuNFgI80GCYbyfFJuYoN0p+mIfU=

================
File: backend/src/app.js
================
const express = require 'express';
const { apiLimiter } = require './middleware/rateLimiter';
const { cacheMiddleware } = require './middleware/cache';
const authRoutes = require './routes/authRoutes';
const orderRoutes = require './routes/orderRoutes';
// const subscriptionRoutes = require './routes/subscriptionRoutes';
const paymentRoutes = require './routes/paymentRoutes';
const twoFactorRoutes = require './routes/twoFactorRoutes';
const clientSettingsRoutes = require './routes/clientSettingsRoutes';
const providerRoutes = require './routes/providerRoutes';

const app = express();

if (typeof app.use === 'function') {
  app.use(express.json());
  app.use(apiLimiter);

  app.use('/api/auth', authRoutes);
  app.use('/api/orders', cacheMiddleware(300), orderRoutes); // Cache for 5 minutes
  // app.use('/api/subscriptions', subscriptionRoutes);
} else {
  console.error('app.use is not a function. Make sure express is properly initialized.');
}
app.use('/api/payments', paymentRoutes);
app.use('/api/2fa', twoFactorRoutes);
app.use('/api/client-settings', clientSettingsRoutes);
app.use('/api', providerRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

module.exports = app;

================
File: backend/src/cronJobs.js
================
const cron = require('node-cron');
const CateringService = require('./services/cateringService');
const logger = require('./utils/logger');

// Schedule guest orders based on their scheduled time
cron.schedule('* * * * *', async () => {
  try {
    logger.info('Running scheduled task for guest orders...');
    await CateringService.handleScheduledOrders();
  } catch (error) {
    logger.error('Error handling scheduled guest orders:', error);
  }
});

// Schedule catering orders based on their scheduled time
cron.schedule('* * * * *', async () => {
  try {
    logger.info('Running scheduled task for catering orders...');
    await CateringService.handleScheduledOrders();
  } catch (error) {
    logger.error('Error handling scheduled catering orders:', error);
  }
});

================
File: backend/src/HouseAccountUser.js
================
module.exports = (sequelize, DataTypes) => {
  const HouseAccount = sequelize.define('HouseAccount', {
    accountName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    billingType: {
      type: DataTypes.ENUM('invoice', 'purchase_order'),
      allowNull: false,
    },
    isActive: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
    },
  });

  HouseAccount.associate = (models) => {
    HouseAccount.belongsTo(models.Client, { foreignKey: 'clientId' });
    HouseAccount.hasMany(models.HouseAccountUser, { foreignKey: 'houseAccountId' });
  };

  return HouseAccount;
};

================
File: backend/src/logger.js
================
const winston = require('winston');
const { createLogger, format, transports } = winston;

// Define custom format for logs
const customFormat = format.combine(
  format.timestamp(),
  format.printf(({ timestamp, level, message }) => {
    return `${timestamp} [${level}]: ${message}`;
  })
);

// Create a logger instance
const logger = createLogger({
  level: 'info',
  format: customFormat,
  transports: [
    new transports.Console(),
    new transports.File({ filename: 'logs/application.log' }), // Ensure correct log file path
  ],
});

module.exports = logger;

================
File: backend/src/OrderThrottleService.js
================
const Location = require('../models/Location');

class OrderThrottleService {
  static async adjustReadyTime(locationId) {
    const location = await Location.findByPk(locationId);
    const { throttleSettings } = location;

    // Logic to determine the new ready time based on sales volume, item count, etc.
    if (location.salesVolume > throttleSettings.volumeThreshold) {
      location.readyTime += throttleSettings.increment; // Example adjustment
    }

    await location.save();
    return location.readyTime;
  }
}

module.exports = OrderThrottleService;

================
File: backend/src/seedDatabase.js
================
const { createConnection } = require 'typeorm';
const { seedEnterpriseClient } = require './seeders/enterpriseClientSeeder';

async function runSeed() {
  const connection = await createConnection();
  try {
    await seedEnterpriseClient(connection);
    console.log('Seeding completed successfully');
  } catch (error) {
    console.error('Error seeding data:', error);
  } finally {
    await connection.close();
  }
}

runSeed();

================
File: backend/src/seedGuests.js
================
const { Guest } = require('./models');

async function seedGuests() {
  await Guest.bulkCreate([
    {
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@example.com',
      numberOfOrders: 5,
      averageOrderSize: 24.99,
      favoriteMenuItem: 'Burger',
    },
    {
      firstName: 'Jane',
      lastName: 'Smith',
      email: 'jane.smith@example.com',
      numberOfOrders: 10,
      averageOrderSize: 15.45,
      favoriteMenuItem: 'Pizza',
    },
  ]);
  console.log('Guests seeded successfully');
}

seedGuests();

================
File: backend/src/seedRoles.js
================
const { Role } = require('./models');

async function seedRoles() {
  try {
    await Role.bulkCreate([
      { name: 'Super Admin' },
      { name: 'Admin' },
      { name: 'Manager' },
    ]);

    console.log('Roles seeded successfully!');
    process.exit(0); // Exit the script
  } catch (error) {
    console.error('Error seeding roles:', error);
    process.exit(1); // Exit with error
  }
}

seedRoles();

================
File: backend/src/server.js
================
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const { clientRoutes } = require('./routes/clientRoutes');
const { authRoutes } = require('./routes/authRoutes');
const { errorHandler } = require('./middleware/errorHandler');
const { authMiddleware } = require('./middleware/authMiddleware');
const session = require('express-session');
const RedisStore = require('connect-redis')(session);
const redisClient = require('./services/redisService').redis;

const app = express();

// Middleware
app.use(cors());
app.use(helmet());
app.use(express.json());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/clients', authMiddleware, clientRoutes);

// Error handling
app.use(errorHandler);

// Session management
app.use(
  session({
    store: new RedisStore({ client: redisClient }),
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: process.env.NODE_ENV === 'production',
      httpOnly: true,
      maxAge: 1000 * 60 * 60 * 24, // 1 day
    },
  })
);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

module.exports = app;

================
File: backend/src/socket.js
================
const { Server } = require('socket.io');

let io;

const initializeSocket = (server) => {
  io = new Server(server, {
    cors: {
      origin: process.env.FRONTEND_URL || "http://localhost:3000",
      methods: ["GET", "POST"]
    }
  });

  io.on('connection', (socket) => {
    console.log('A user connected');

    socket.on('disconnect', () => {
      console.log('User disconnected');
    });
  });

  return io;
};

module.exports = {
  initializeSocket,
  getIO: () => {
    if (!io) {
      throw new Error('Socket.io not initialized!');
    }
    return io;
  }
};

================
File: backend/src/websocket.js
================
const WebSocket = require('ws');

const setupWebSocket = (server) => {
  const wss = new WebSocket.Server({ server });

  wss.on('connection', (ws) => {
    console.log('New WebSocket connection');

    ws.on('message', (message) => {
      console.log('Received:', message);
    });

    ws.send('Welcome to the WebSocket server!');
  });

  return wss;
};

module.exports = setupWebSocket;

// Use in app.js
const http = require('http');
const setupWebSocket = require('./websocket');

const server = http.createServer(app);
const wss = setupWebSocket(server);

// frontend/src/services/websocket.ts
export class WebSocketService {
  private socket: WebSocket;

  constructor(url: string) {
    this.socket = new WebSocket(url);

    this.socket.onopen = () => {
      console.log('WebSocket connection established');
    };

    this.socket.onmessage = (event) => {
      console.log('Received message:', event.data);
      // Handle incoming messages
    };

    this.socket.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    this.socket.onclose = () => {
      console.log('WebSocket connection closed');
    };
  }

  sendMessage(message: string) {
    this.socket.send(message);
  }
}

// Use in ExecutiveDashboard.tsx
const websocket = new WebSocketService('ws://localhost:3000');

================
File: backend/ssl/server.cert
================
-----BEGIN CERTIFICATE-----
MIIDmzCCAoOgAwIBAgIUHYtGI00KMYIzKZsM/1/e1QOnJWEwDQYJKoZIhvcNAQEL
BQAwXTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDEWMBQGA1UEAwwNNjQuMjMuMTc4LjE5
ODAeFw0yNDA4MjcxNjIyMDNaFw0yNDA5MjYxNjIyMDNaMF0xCzAJBgNVBAYTAkFV
MRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRz
IFB0eSBMdGQxFjAUBgNVBAMMDTY0LjIzLjE3OC4xOTgwggEiMA0GCSqGSIb3DQEB
AQUAA4IBDwAwggEKAoIBAQCdmZ9Dyv9rWgW+ot6B+05u8tlDEyvhoW1l8TTFSzHK
eEOq653WV5yFTgxLPcEhD2alMJwfqUkAoDYR8Rcelp7VI7gXiePwKPvZS8ijhsbZ
enEdBCM4almMCwhY+r7QAfz87uzXoXEOSu7yTcOEEY4WsojpMyyEd5Rw3u6v/fKO
o7jC+lxJEFfhOcbrg8ltrz/iVz4TPap+Qzc/0iNct5Se12+zjU9AmmjBu7fwbWZB
Nmzvt/XG4wxrIcQVKXo5v3Jg2SsyWunYOXH7WxrI6sYLy87/qUVedIILAcgPvf62
DTkGdv4dqFGztn7GmTUn0BdbfMVIYeMxN1xBPlU+pUNnAgMBAAGjUzBRMB0GA1Ud
DgQWBBQucnL9vh5mqQEOGzc6tUuhLfN52DAfBgNVHSMEGDAWgBQucnL9vh5mqQEO
Gzc6tUuhLfN52DAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAF
sdRBi40zp05PhsfgltBaF88/khkls7t4T+mAzgysobEL4Miz34kVALYfSWlJhtZy
OLOEYUJqbU8ZqNCEj2awSi42ES01F8BfspX19g0fYwh5W7HvoVwv204HxqQ5xR16
GNJJ1Fwjz57OE1M4lMAZjWenw1x/OdXHGqgNeSSPggVJLEtikaiR86de4wCzb/J8
kmRZlrL16EG4ZJfCdURA8o/zzoFEQ2tCE4G8amY6qzHSvcebwZRe86gi3MOT1s6E
IYbb4+qHyMiuL8hMyy8e485mgIM5YKtXT9VqAhPZFGIRCaxtDSynRz3DVZKK9oQL
6Qe5qJuXoJ5iQ1xpOYI+
-----END CERTIFICATE-----

================
File: backend/.babelrc
================
{
  "presets": ["@babel/preset-env"]
}

================
File: backend/.dockerignore
================
node_modules
logs
.git
*.log

================
File: backend/.env
================
DB_NAME=pos
DB_USER=bryce
DB_PASSWORD=1234
DB_HOST=db
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_phone_number
ENCRYPTION_KEY=15e1cf585828a22d4d5830f5856500c32584b994e54bb6d051e921be35a42d75
ENCRYPTION_IV=fe898e38fdcc8c6e879a2dfd1878d14a
SESSION_SECRET=c2052e2375666d6f2df309409bef8c7dd810a06c1b64e4e606e104a5a840b729
JWT_SECRET=your_jwt_secret
REDIS_URL=redis://redis:6379
NODE_ENV=development
PORT=5000
REACT_APP_API_URL=https://64.23.178.198/api
API_URL=https://64.23.178.198

================
File: backend/.eslintrc.js
================
module.exports = {
  root: true,
  env: {
    node: true,
    es2022: true,
  },
  extends: [
    'eslint:recommended',
  ],
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: 'module',
  },
  rules: {
    'no-unused-vars': ['error', { 
      argsIgnorePattern: '^_',
      varsIgnorePattern: '^(Sequelize|queryInterface)$'
    }],
  },
  overrides: [
    {
      files: ['**/*.js'],
      parserOptions: {
        sourceType: 'commonjs',
      },
    },
  ],
};

================
File: backend/.sequelizerc
================
const path = require('path');

module.exports = {
  'config': path.resolve('src/config', 'database.js'),
  'models-path': path.resolve('src', 'models'),
  'seeders-path': path.resolve('src', 'seeders'),
  'migrations-path': path.resolve('src', 'migrations')
};

================
File: backend/checkMigrations.js
================
const { Sequelize } = require('sequelize');
const { Umzug, SequelizeStorage } = require('umzug');

// Log the database connection setup
console.log('Setting up database connection...');

const sequelize = new Sequelize({
  dialect: 'postgres',
  host: 'localhost', // Assuming your DB is hosted locally
  username: 'bryce',
  password: '1234',
  database: 'pos',
  logging: console.log, // Enable Sequelize logging to see SQL queries
});

console.log('Database connection setup completed.');

// Log the Umzug setup
console.log('Setting up Umzug for migrations...');

const umzug = new Umzug({
  migrations: {
    glob: './migrations/*.js', // Path to your migration files
  },
  context: sequelize.getQueryInterface(),
  storage: new SequelizeStorage({ sequelize }),
  logger: console,
});

console.log('Umzug setup completed.');

// Function to validate migrations
async function checkMigrations() {
  try {
    console.log('Checking migrations...');

    const migrations = await umzug.pending(); // Get all pending migrations
    if (migrations.length === 0) {
      console.log('All migrations have already been executed.');
    } else {
      console.log(`Found ${migrations.length} pending migrations.`);

      for (const migration of migrations) {
        console.log(`Testing migration: ${migration.name}`);
        try {
          await umzug.up({ migrations: [migration.name] }); // Run the migration
          console.log(`Migration ${migration.name} executed successfully.`);
          
          // Rollback immediately to keep the database clean
          await umzug.down({ migrations: [migration.name] });
          console.log(`Migration ${migration.name} rolled back successfully.`);
        } catch (error) {
          console.error(`Error executing migration ${migration.name}:`, error);
          return; // Stop further checks if any migration fails
        }
      }

      console.log('All migrations tested successfully.');
    }
  } catch (error) {
    console.error('Error while checking migrations:', error);
  } finally {
    await sequelize.close(); // Close the database connection
  }
}

// Run the migration check
checkMigrations();

================
File: backend/collect-seed-errors.js
================
const { Sequelize } = require('sequelize');
const { exec } = require('child_process');
const fs = require('fs').promises;

const config = require('./config/config.json').development;

const sequelize = new Sequelize(config.database, config.username, config.password, {
  host: config.host,
  dialect: config.dialect
});

async function runSeeders() {
  const seeders = await fs.readdir('./seeders');
  const errors = [];

  for (const seeder of seeders) {
    if (seeder.endsWith('.js')) {
      try {
        console.log(`Running seeder: ${seeder}`);
        await new Promise((resolve) => {
          exec(`npx sequelize-cli db:seed --seed ${seeder}`, (error, stdout) => {
            if (error) {
              console.error(`Error in seeder ${seeder}:`, error.message);
              errors.push({ seeder, error: error.message });
            } else {
              console.log(stdout);
            }
            resolve(); // Continue to next seeder even if there's an error
          });
        });
      } catch (error) {
        console.error(`Error running seeder ${seeder}:`, error);
        errors.push({ seeder, error: error.message });
      }
    }
  }

  return errors;
}

async function main() {
  try {
    await sequelize.authenticate();
    console.log('Connection to the database has been established successfully.');

    const errors = await runSeeders();

    if (errors.length > 0) {
      console.log('Errors encountered during seeding:');
      console.log(JSON.stringify(errors, null, 2));
      await fs.writeFile('seed-errors.json', JSON.stringify(errors, null, 2));
      console.log('Errors have been written to seed-errors.json');
    } else {
      console.log('All seeders completed successfully.');
    }
  } catch (error) {
    console.error('Unable to connect to the database:', error);
  } finally {
    await sequelize.close();
  }
}

main();

================
File: backend/config.json
================
{
  "development": {
    "username": "bryce",
    "password": "1234",
    "database": "pos",
    "host": "db",
    "dialect": "postgres"
  },
  "test": {
    "username": "bryce",
    "password": "1234",
    "database": "pos_test",
    "host": "db",
    "dialect": "postgres"
  },
  "production": {
    "use_env_variable": "DATABASE_URL",
    "dialect": "postgres",
    "dialectOptions": {
      "ssl": {
        "require": true,
        "rejectUnauthorized": false
      }
    }
  }
}

================
File: backend/convert_to_js.sh
================
convert_file() {
    file="$1"
    js_file="${file%.ts}.js"
    
    # Remove type annotations
    sed 's/: [A-Za-z<>|&]\+//g' "$file" > "$js_file"
    
    # Replace import statements
    sed -i 's/import \(.*\) from/const \1 = require/g' "$js_file"
    
    # Replace export statements
    sed -i 's/export const/const/g' "$js_file"
    sed -i 's/export default/module.exports =/g' "$js_file"
    sed -i 's/export {/module.exports = {/g' "$js_file"
    
    # Remove interface and type declarations
    sed -i '/^interface /d' "$js_file"
    sed -i '/^type /d' "$js_file"
    
    # Remove other TypeScript-specific syntax
    sed -i 's/as [A-Za-z]\+//g' "$js_file"
    
    echo "Converted $file to $js_file"
}

# Find and convert all TypeScript files
find src -name "*.ts" | while read file; do
    convert_file "$file"
    # Remove the original .ts file
    rm "$file"
    echo "Deleted original TypeScript file: $file"
done

echo "Conversion complete. All .ts files have been converted to .js and original .ts files have been deleted."

================
File: backend/correctmodel1.js
================
const fs = require('fs');
const path = require('path');

const modelsDir = path.join(__dirname, 'src', 'models');

const updateModelFile = (filePath) => {
  const content = fs.readFileSync(filePath, 'utf8');
  
  // Check if the file already has the new structure
  if (content.includes('static attributes =')) {
    console.log(`Skipping ${filePath} as it already has the new structure.`);
    return;
  }

  const updatedContent = content
    .replace(/const { Model, DataTypes } = require\('sequelize'\);/, "const { DataTypes } = require('sequelize');")
    .replace(/class \w+ extends Model/, "class $& extends BaseModel")
    .replace(/(\w+)\.init\(([\s\S]*?)\);/, (match, className, attributes) => {
      return `${className}.attributes = ${attributes.trim()};`;
    })
    .replace(/sequelize,\s*modelName:[^}]+},?/, '')
    .replace(/(\w+)\.name = ['"](\w+)['"];/, '');

  const baseModelImport = "const BaseModel = require('./BaseModel');\n\n";
  const updatedContentWithImport = baseModelImport + updatedContent;

  fs.writeFileSync(filePath, updatedContentWithImport);
  console.log(`Updated ${filePath}`);
};

fs.readdirSync(modelsDir).forEach(file => {
  if (file.endsWith('.js') && file !== 'index.js' && file !== 'BaseModel.js') {
    const filePath = path.join(modelsDir, file);
    updateModelFile(filePath);
  }
});

console.log('All model files have been updated.');

================
File: backend/correctmodelname.js
================
const fs = require('fs');
const path = require('path');

const modelsDir = path.join(__dirname, 'src', 'models');

fs.readdir(modelsDir, (err, files) => {
  if (err) {
    console.error("Could not list the directory.", err);
    process.exit(1);
  }

  files.forEach((file, index) => {
    if (file.endsWith('.js') && file !== 'index.js' && file !== 'BaseModel.js') {
      const filePath = path.join(modelsDir, file);
      
      fs.readFile(filePath, 'utf8', (err, content) => {
        if (err) {
          console.error(`Error reading file ${file}:`, err);
          return;
        }

        // Remove the line that sets the name property
        const updatedContent = content.replace(/^.*\.name = '.*';$/m, '');

        fs.writeFile(filePath, updatedContent, 'utf8', (err) => {
          if (err) {
            console.error(`Error writing file ${file}:`, err);
          } else {
            console.log(`Successfully updated ${file}`);
          }
        });
      });
    }
  });
});

================
File: backend/docker-compose.yml
================
version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=${NODE_ENV}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/ssl:/app/ssl:ro
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "443:443"
    environment:
      - REACT_APP_API_URL=https://backend:5000/api
    depends_on:
      - backend
    volumes:
      - ./frontend/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

================
File: backend/docker-entrypoint.sh
================
#!/bin/sh

# Run any pre-start commands you need here, e.g., migrations or seeds
echo "Starting backend service..."

# Start the Node.js server
exec "$@"

================
File: backend/Dockerfile
================
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 5000

CMD ["npm", "run", "dev"]

================
File: backend/Dockerfile.migrate
================
FROM node:14

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

CMD ["sh", "-c", "npm run migrate && npm run seed"]

================
File: backend/drop_all_tables.sql
================
DO $$ DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = current_schema()) LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END $$;

================
File: backend/eslint.config.mjs
================
import globals from "globals";
import pluginJs from "@eslint/js";


export default [
  {languageOptions: { globals: globals.node }},
  pluginJs.configs.recommended,
];

================
File: backend/jsconfig.json
================
{
  "compilerOptions": {
    "module": "CommonJS",
    "target": "ES2021",
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "*": ["src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}

================
File: backend/package-lock.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@faker-js/faker": "^8.4.1",
        "@googlemaps/google-maps-services-js": "^3.4.0",
        "aws-sdk": "^2.1687.0",
        "axios": "^1.7.4",
        "bcrypt": "^5.1.1",
        "bcryptjs": "^2.4.3",
        "connect-redis": "^7.1.1",
        "cors": "^2.8.5",
        "crypto": "^1.0.1",
        "dotenv": "^16.4.5",
        "exceljs": "^4.4.0",
        "express": "^4.19.2",
        "express-rate-limit": "^7.4.0",
        "express-session": "^1.18.0",
        "express-validator": "^7.2.0",
        "firebase-admin": "^12.4.0",
        "geo-tz": "^8.0.2",
        "helmet": "^7.1.0",
        "http-proxy-middleware": "^3.0.0",
        "ioredis": "^5.4.1",
        "joi": "^17.13.3",
        "jsonwebtoken": "^9.0.2",
        "moment-timezone": "^0.5.45",
        "mongoose": "^8.5.3",
        "multer": "^1.4.5-lts.1",
        "node-cache": "^5.1.2",
        "node-cron": "^3.0.3",
        "node-schedule": "^2.1.1",
        "pdfkit": "^0.15.0",
        "pg": "^8.12.0",
        "pg-hstore": "^2.3.4",
        "prom-client": "^15.1.3",
        "qrcode": "^1.5.4",
        "sequelize": "^6.37.3",
        "sharp": "^0.33.5",
        "socket.io": "^4.7.5",
        "speakeasy": "^2.0.0",
        "stripe": "^16.8.0",
        "swagger-jsdoc": "^6.2.8",
        "swagger-ui-express": "^5.0.1",
        "twilio": "^5.2.2",
        "umzug": "^3.8.1",
        "uuid": "^10.0.0",
        "winston": "^3.14.2",
        "worldpay": "^0.0.4"
      },
      "devDependencies": {
        "@babel/core": "^7.25.2",
        "@babel/eslint-parser": "^7.25.1",
        "@babel/preset-env": "^7.25.4",
        "@eslint/js": "^9.9.1",
        "@typescript-eslint/eslint-plugin": "^8.3.0",
        "@typescript-eslint/parser": "^8.3.0",
        "eslint": "^8.57.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-recommended": "^4.1.0",
        "eslint-plugin-import": "^2.29.1",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-prettier": "^5.2.1",
        "eslint-plugin-security": "^3.0.1",
        "globals": "^15.9.0",
        "jest": "^29.7.0",
        "prettier": "^3.3.3",
        "sequelize-cli": "^6.6.2",
        "supertest": "^7.0.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@apidevtools/json-schema-ref-parser": {
      "version": "9.1.2",
      "resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.1.2.tgz",
      "integrity": "sha512-r1w81DpR+KyRWd3f+rk6TNqMgedmAxZP5v5KWlXQWlgMUUtyEJch0DKEci1SorPMiSeM8XPl7MZ3miJ60JIpQg==",
      "license": "MIT",
      "dependencies": {
        "@jsdevtools/ono": "^7.1.3",
        "@types/json-schema": "^7.0.6",
        "call-me-maybe": "^1.0.1",
        "js-yaml": "^4.1.0"
      }
    },
    "node_modules/@apidevtools/json-schema-ref-parser/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/@apidevtools/json-schema-ref-parser/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@apidevtools/openapi-schemas": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@apidevtools/openapi-schemas/-/openapi-schemas-2.1.0.tgz",
      "integrity": "sha512-Zc1AlqrJlX3SlpupFGpiLi2EbteyP7fXmUOGup6/DnkRgjP9bgMM/ag+n91rsv0U1Gpz0H3VILA/o3bW7Ua6BQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@apidevtools/swagger-methods": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-methods/-/swagger-methods-3.0.2.tgz",
      "integrity": "sha512-QAkD5kK2b1WfjDS/UQn/qQkbwF31uqRjPTrsCs5ZG9BQGAkjwvqGFjjPqAuzac/IYzpPtRzjCP1WrTuAIjMrXg==",
      "license": "MIT"
    },
    "node_modules/@apidevtools/swagger-parser": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-parser/-/swagger-parser-10.0.3.tgz",
      "integrity": "sha512-sNiLY51vZOmSPFZA5TF35KZ2HbgYklQnTSDnkghamzLb3EkNtcQnrBQEj5AOCxHpTtXpqMCRM1CrmV2rG6nw4g==",
      "license": "MIT",
      "dependencies": {
        "@apidevtools/json-schema-ref-parser": "^9.0.6",
        "@apidevtools/openapi-schemas": "^2.0.4",
        "@apidevtools/swagger-methods": "^3.0.2",
        "@jsdevtools/ono": "^7.1.3",
        "call-me-maybe": "^1.0.1",
        "z-schema": "^5.0.1"
      },
      "peerDependencies": {
        "openapi-types": ">=7"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.24.7.tgz",
      "integrity": "sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/highlight": "^7.24.7",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.25.4.tgz",
      "integrity": "sha512-+LGRog6RAsCJrrrg/IO6LGmpphNe5DiK30dGjCoxxeGv49B10/3XYGxPsAwrDlMFcFEvdAUavDT8r9k/hSyQqQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.25.2.tgz",
      "integrity": "sha512-BBt3opiCOxUr9euZ5/ro/Xv8/V7yJ5bjYMqG/C1YAo8MIKAnumZalCN+msbci3Pigy4lIQfPUpfMM27HMGaYEA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.24.7",
        "@babel/generator": "^7.25.0",
        "@babel/helper-compilation-targets": "^7.25.2",
        "@babel/helper-module-transforms": "^7.25.2",
        "@babel/helpers": "^7.25.0",
        "@babel/parser": "^7.25.0",
        "@babel/template": "^7.25.0",
        "@babel/traverse": "^7.25.2",
        "@babel/types": "^7.25.2",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/eslint-parser": {
      "version": "7.25.1",
      "resolved": "https://registry.npmjs.org/@babel/eslint-parser/-/eslint-parser-7.25.1.tgz",
      "integrity": "sha512-Y956ghgTT4j7rKesabkh5WeqgSFZVFwaPR0IWFm7KFHFmmJ4afbG49SmfW4S+GyRPx0Dy5jxEWA5t0rpxfElWg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nicolo-ribaudo/eslint-scope-5-internals": "5.1.1-v1",
        "eslint-visitor-keys": "^2.1.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || >=14.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.0",
        "eslint": "^7.5.0 || ^8.0.0 || ^9.0.0"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
      "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.25.6.tgz",
      "integrity": "sha512-VPC82gr1seXOpkjAAKoLhP50vx4vGNlF4msF64dSFq1P8RfB+QAuJWGHPXXPc8QyfVWwwB/TNNU4+ayZmHNbZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.25.6",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.24.7.tgz",
      "integrity": "sha512-BaDeOonYvhdKw+JoMVkAixAAJzG2jVPIwWoKBPdYuY9b452e2rPuI9QPYh3KpofZ3pW2akOmwZLOiOsHMiqRAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-builder-binary-assignment-operator-visitor": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-builder-binary-assignment-operator-visitor/-/helper-builder-binary-assignment-operator-visitor-7.24.7.tgz",
      "integrity": "sha512-xZeCVVdwb4MsDBkkyZ64tReWYrLRHlMN72vP7Bdm3OUOuyFZExhsHUUnuWnm2/XOlAJzR0LfPpB56WXZn0X/lA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.2.tgz",
      "integrity": "sha512-U2U5LsSaZ7TAt3cfaymQ8WHh0pxvdHoEk6HVpaexxixjyEquMh0L0YNJNM6CTGKMXV1iksi0iZkGw4AcFkPaaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.25.2",
        "@babel/helper-validator-option": "^7.24.8",
        "browserslist": "^4.23.1",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.25.4.tgz",
      "integrity": "sha512-ro/bFs3/84MDgDmMwbcHgDa8/E6J3QKNTk4xJJnVeFtGE+tL0K26E3pNxhYz2b67fJpt7Aphw5XcploKXuCvCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-member-expression-to-functions": "^7.24.8",
        "@babel/helper-optimise-call-expression": "^7.24.7",
        "@babel/helper-replace-supers": "^7.25.0",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/traverse": "^7.25.4",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.25.2.tgz",
      "integrity": "sha512-+wqVGP+DFmqwFD3EH6TMTfUNeqDehV3E/dl+Sd54eaXqm17tEUNbEIn4sVivVowbvUpOtIGxdo3GoXyDH9N/9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "regexpu-core": "^5.3.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.2.tgz",
      "integrity": "sha512-LV76g+C502biUK6AyZ3LK10vDpDyCzZnhZFXkH1L75zHPj68+qc8Zfpx2th+gzwA2MzyK+1g/3EPl62yFnVttQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.22.6",
        "@babel/helper-plugin-utils": "^7.22.5",
        "debug": "^4.1.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.14.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.24.8.tgz",
      "integrity": "sha512-LABppdt+Lp/RlBxqrh4qgf1oEH/WxdzQNDJIu5gC/W1GyvPVrOBiItmmM8wan2fm4oYqFuFfkXmlGpLQhPY8CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.8",
        "@babel/types": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.24.7.tgz",
      "integrity": "sha512-8AyH3C+74cgCVVXow/myrynrAGv+nTVg5vKu2nZph9x7RcRwzmh0VFallJuFTZ9mx6u4eSdXZfcOzSqTUm0HCA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.25.2.tgz",
      "integrity": "sha512-BjyRAbix6j/wv83ftcVJmBt72QtHI56C7JXZoG2xATiLpmoC7dpd8WnkikExHDVPpi/3qCmO6WY1EaXOluiecQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.24.7",
        "@babel/helper-simple-access": "^7.24.7",
        "@babel/helper-validator-identifier": "^7.24.7",
        "@babel/traverse": "^7.25.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.24.7.tgz",
      "integrity": "sha512-jKiTsW2xmWwxT1ixIdfXUZp+P5yURx2suzLZr5Hi64rURpDYdMW0pv+Uf17EYk2Rd428Lx4tLsnjGJzYKDM/6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.24.8.tgz",
      "integrity": "sha512-FFWx5142D8h2Mgr/iPVGH5G7w6jDn4jUSpZTyDnQO0Yn7Ks2Kuz6Pci8H6MPCoUJegd/UZQ3tAvfLCxQSnWWwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.25.0.tgz",
      "integrity": "sha512-NhavI2eWEIz/H9dbrG0TuOicDhNexze43i5z7lEqwYm0WEZVTwnPpA0EafUTP7+6/W79HWIP2cTe3Z5NiSTVpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-wrap-function": "^7.25.0",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.25.0.tgz",
      "integrity": "sha512-q688zIvQVYtZu+i2PsdIu/uWGRpfxzr5WESsfpShfZECkO+d2o+WROWezCi/Q6kJ0tfPa5+pUGUlfx2HhrA3Bg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-member-expression-to-functions": "^7.24.8",
        "@babel/helper-optimise-call-expression": "^7.24.7",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.24.7.tgz",
      "integrity": "sha512-zBAIvbCMh5Ts+b86r/CjU+4XGYIs+R1j951gxI3KmmxBMhCg4oQMsv6ZXQ64XOm/cvzfU1FmoCyt6+owc5QMYg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.24.7.tgz",
      "integrity": "sha512-IO+DLT3LQUElMbpzlatRASEyQtfhSE0+m465v++3jyyXeBTBUjtVZg28/gHeV5mrTJqvEKhKroBGAvhW+qPHiQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.24.8.tgz",
      "integrity": "sha512-pO9KhhRcuUyGnJWwyEgnRJTSIZHiT+vMD0kPeD+so0l7mxkMT19g3pjY9GTnHySck/hDzq+dtW/4VgnMkippsQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.24.7.tgz",
      "integrity": "sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.24.8.tgz",
      "integrity": "sha512-xb8t9tD1MHLungh/AIoWYN+gVHaB9kwlu8gffXGSt3FFEIT7RjS+xWbc2vUD1UTZdIpKj/ab3rdqJ7ufngyi2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.25.0.tgz",
      "integrity": "sha512-s6Q1ebqutSiZnEjaofc/UKDyC4SbzV5n5SrA2Gq8UawLycr3i04f1dX4OzoQVnexm6aOCh37SQNYlJ/8Ku+PMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.25.0",
        "@babel/traverse": "^7.25.0",
        "@babel/types": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.25.6.tgz",
      "integrity": "sha512-Xg0tn4HcfTijTwfDwYlvVCl43V6h4KyVVX2aEm4qdO/PC6L2YvzLHFdmxhoeSA3eslcE6+ZVXHgWwopXYLNq4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.25.0",
        "@babel/types": "^7.25.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.24.7.tgz",
      "integrity": "sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.24.7",
        "chalk": "^2.4.2",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.25.6.tgz",
      "integrity": "sha512-trGdfBdbD0l1ZPmcJ83eNxB9rbEax4ALFTF7fN386TMYbeCQbyme5cOEXQhbGXKebwGaB/J52w1mrklMcbgy6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.25.6"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key": {
      "version": "7.25.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.25.3.tgz",
      "integrity": "sha512-wUrcsxZg6rqBXG05HG1FPYgsP6EvwF4WpBbxIpWIIYnH8wG0gzx3yZY3dtEHas4sTAOGkbTsc9EGPxwff8lRoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/traverse": "^7.25.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.25.0.tgz",
      "integrity": "sha512-Bm4bH2qsX880b/3ziJ8KD711LT7z4u8CFudmjqle65AZj/HNUFhEf90dqYv6O86buWvSBmeQDjv0Tn2aF/bIBA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.25.0.tgz",
      "integrity": "sha512-lXwdNZtTmeVOOFtwM/WDe7yg1PL8sYhRk/XH0FzbR2HDQ0xC+EnQ/JHeoMYSavtU115tnUk0q9CDyq8si+LMAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.24.7.tgz",
      "integrity": "sha512-+izXIbke1T33mY4MSNnrqhPXDz01WYhEf3yF5NbnUtkiNnm+XBZJl3kNfoK6NKmYlz/D07+l2GWVK/QfDkNCuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/plugin-transform-optional-chaining": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.25.0.tgz",
      "integrity": "sha512-tggFrk1AIShG/RUQbEwt2Tr/E+ObkfwrPjR6BjbRvsx24+PSjK8zrq0GWPNCjo8qpRx4DuJzlcvWJqlm+0h3kw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.0-placeholder-for-preset-env.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz",
      "integrity": "sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-dynamic-import": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-dynamic-import/-/plugin-syntax-dynamic-import-7.8.3.tgz",
      "integrity": "sha512-5gdGbFon+PszYzqs83S3E5mpi7/y/8M9eC90MRTZfduQOYW76ig6SOSPNe41IG5LoP3FGBn2N0RjVDSQiS94kQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-export-namespace-from": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-export-namespace-from/-/plugin-syntax-export-namespace-from-7.8.3.tgz",
      "integrity": "sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.25.6.tgz",
      "integrity": "sha512-aABl0jHw9bZ2karQ/uUD6XP4u0SG22SJrOHFoL6XB1R7dTovOP4TzTlsxOYC5yQ1pdscVK2JTUnF6QL3ARoAiQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.25.6.tgz",
      "integrity": "sha512-sXaDXaJN9SNLymBdlWFA+bjzBhFD617ZaFiY13dGt7TVslVvVgA6fkZOP7Ki3IGElC45lwHdOTrCtKZGVAWeLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.24.7.tgz",
      "integrity": "sha512-6ddciUPe/mpMnOKv/U+RSd2vvVy+Yw/JfBB0ZHYjEZt9NLHmCUylNYlsbqCCS1Bffjlb0fCwC9Vqz+sBz6PsiQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.25.4.tgz",
      "integrity": "sha512-uMOCoHVU52BsSWxPOMVv5qKRdeSlPuImUCB2dlPuBSU+W2/ROE7/Zg8F2Kepbk+8yBa68LlRKxO+xgEVWorsDg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-unicode-sets-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz",
      "integrity": "sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.24.7.tgz",
      "integrity": "sha512-Dt9LQs6iEY++gXUwY03DNFat5C2NbO48jj+j/bSAz6b3HgPs39qcPiYt77fDObIcFwj3/C2ICX9YMwGflUoSHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-generator-functions": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.25.4.tgz",
      "integrity": "sha512-jz8cV2XDDTqjKPwVPJBIjORVEmSGYhdRa8e5k5+vN+uwcjSrSxUaebBRa4ko1jqNF2uxyg8G6XYk30Jv285xzg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-remap-async-to-generator": "^7.25.0",
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/traverse": "^7.25.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.24.7.tgz",
      "integrity": "sha512-SQY01PcJfmQ+4Ash7NE+rpbLFbmqA2GPIgqzxfFTL4t1FKRq4zTms/7htKpoCUI9OcFYgzqfmCdH53s6/jn5fA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-remap-async-to-generator": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.24.7.tgz",
      "integrity": "sha512-yO7RAz6EsVQDaBH18IDJcMB1HnrUn2FJ/Jslc/WtPPWcjhpUJXU/rjbwmluzp7v/ZzWcEhTMXELnnsz8djWDwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.25.0.tgz",
      "integrity": "sha512-yBQjYoOjXlFv9nlXb3f1casSHOZkWr29NX+zChVanLg5Nc157CrbEX9D7hxxtTpuFy7Q0YzmmWfJxzvps4kXrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-properties": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.25.4.tgz",
      "integrity": "sha512-nZeZHyCWPfjkdU5pA/uHiTaDAFUEqkpzf1YoQT2NeSynCGYq9rxfyI3XpQbfx/a0hSnFH6TGlEXvae5Vi7GD8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.25.4",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-static-block": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.24.7.tgz",
      "integrity": "sha512-HMXK3WbBPpZQufbMG4B46A90PkuuhN9vBCb5T8+VAHqvAqvcLi+2cKoukcpmUYkszLhScU3l1iudhrks3DggRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-class-static-block": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.25.4.tgz",
      "integrity": "sha512-oexUfaQle2pF/b6E0dwsxQtAol9TLSO88kQvym6HHBWFliV2lGdrPieX+WgMRLSJDVzdYywk7jXbLPuO2KLTLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-compilation-targets": "^7.25.2",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-replace-supers": "^7.25.0",
        "@babel/traverse": "^7.25.4",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-classes/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.24.7.tgz",
      "integrity": "sha512-25cS7v+707Gu6Ds2oY6tCkUwsJ9YIDbggd9+cu9jzzDgiNq7hR/8dkzxWfKWnTic26vsI3EsCXNd4iEB6e8esQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/template": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.24.8.tgz",
      "integrity": "sha512-36e87mfY8TnRxc7yc6M9g9gOB7rKgSahqkIKwLpz4Ppk2+zC2Cy1is0uwtuSG6AE4zlTOUa+7JGz9jCJGLqQFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.24.7.tgz",
      "integrity": "sha512-ZOA3W+1RRTSWvyqcMJDLqbchh7U4NRGqwRfFSVbOLS/ePIP4vHB5e8T8eXcuqyN1QkgKyj5wuW0lcS85v4CrSw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.24.7.tgz",
      "integrity": "sha512-JdYfXyCRihAe46jUIliuL2/s0x0wObgwwiGxw/UbgJBr20gQBThrokO4nYKgWkD7uBaqM7+9x5TU7NkExZJyzw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.25.0.tgz",
      "integrity": "sha512-YLpb4LlYSc3sCUa35un84poXoraOiQucUTTu8X1j18JV+gNa8E0nyUf/CjZ171IRGr4jEguF+vzJU66QZhn29g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.25.0",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-dynamic-import": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.24.7.tgz",
      "integrity": "sha512-sc3X26PhZQDb3JhORmakcbvkeInvxz+A8oda99lj7J60QRuPZvNAk9wQlTBS1ZynelDrDmTU4pw1tyc5d5ZMUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.24.7.tgz",
      "integrity": "sha512-Rqe/vSc9OYgDajNIK35u7ot+KeCoetqQYFXM4Epf7M7ez3lWlOjrDjrwMei6caCVhfdw+mIKD4cgdGNy5JQotQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-builder-binary-assignment-operator-visitor": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-export-namespace-from": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.24.7.tgz",
      "integrity": "sha512-v0K9uNYsPL3oXZ/7F9NNIbAj2jv1whUEtyA6aujhekLs56R++JDQuzRcP2/z4WX5Vg/c5lE9uWZA0/iUoFhLTA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-export-namespace-from": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.24.7.tgz",
      "integrity": "sha512-wo9ogrDG1ITTTBsy46oGiN1dS9A7MROBTcYsfS8DtsImMkHk9JXJ3EWQM6X2SUw4x80uGPlwj0o00Uoc6nEE3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.25.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.25.1.tgz",
      "integrity": "sha512-TVVJVdW9RKMNgJJlLtHsKDTydjZAbwIsn6ySBPQaEAUU5+gVvlJt/9nRmqVbsV/IBanRjzWoaAQKLoamWVOUuA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.24.8",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/traverse": "^7.25.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-json-strings": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.24.7.tgz",
      "integrity": "sha512-2yFnBGDvRuxAaE/f0vfBKvtnvvqU8tGpMHqMNpTN2oWMKIR3NqFkjaAgGwawhqK/pIN2T3XdjGPdaG0vDhOBGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-json-strings": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.25.2.tgz",
      "integrity": "sha512-HQI+HcTbm9ur3Z2DkO+jgESMAMcYLuN/A7NRw9juzxAezN9AvqvUTnpKP/9kkYANz6u7dFlAyOu44ejuGySlfw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-logical-assignment-operators": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.24.7.tgz",
      "integrity": "sha512-4D2tpwlQ1odXmTEIFWy9ELJcZHqrStlzK/dAOWYyxX3zT0iXQB6banjgeOJQXzEc4S0E0a5A+hahxPaEFYftsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.24.7.tgz",
      "integrity": "sha512-T/hRC1uqrzXMKLQ6UCwMT85S3EvqaBXDGf0FaMf4446Qx9vKwlghvee0+uuZcDUCZU5RuNi4781UQ7R308zzBw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.24.7.tgz",
      "integrity": "sha512-9+pB1qxV3vs/8Hdmz/CulFB8w2tuu6EB94JZFsjdqxQokwGa9Unap7Bo2gGBGIvPmDIVvQrom7r5m/TCDMURhg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.24.8.tgz",
      "integrity": "sha512-WHsk9H8XxRs3JXKWFiqtQebdh9b/pTk4EgueygFzYlTKAg0Ud985mSevdNjdXdFBATSKVJGQXP1tv6aGbssLKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.24.8",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-simple-access": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.25.0.tgz",
      "integrity": "sha512-YPJfjQPDXxyQWg/0+jHKj1llnY5f/R6a0p/vP4lPymxLu7Lvl4k2WMitqi08yxwQcCVUUdG9LCUj4TNEgAp3Jw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.25.0",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-validator-identifier": "^7.24.7",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.24.7.tgz",
      "integrity": "sha512-3aytQvqJ/h9z4g8AsKPLvD4Zqi2qT+L3j7XoFFu1XBlZWEl2/1kWnhmAbxpLgPrHSY0M6UA02jyTiwUVtiKR6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.24.7.tgz",
      "integrity": "sha512-/jr7h/EWeJtk1U/uz2jlsCioHkZk1JJZVcc8oQsJ1dUlaJD83f4/6Zeh2aHt9BIFokHIsSeDfhUmju0+1GPd6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.24.7.tgz",
      "integrity": "sha512-RNKwfRIXg4Ls/8mMTza5oPF5RkOW8Wy/WgMAp1/F1yZ8mMbtwXW+HDoJiOsagWrAhI5f57Vncrmr9XeT4CVapA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-nullish-coalescing-operator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.24.7.tgz",
      "integrity": "sha512-Ts7xQVk1OEocqzm8rHMXHlxvsfZ0cEF2yomUqpKENHWMF4zKk175Y4q8H5knJes6PgYad50uuRmt3UJuhBw8pQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-numeric-separator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.24.7.tgz",
      "integrity": "sha512-e6q1TiVUzvH9KRvicuxdBTUj4AdKSRwzIyFFnfnezpCfP2/7Qmbb8qbU2j7GODbl4JMkblitCQjKYUaX/qkkwA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-rest-spread": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.24.7.tgz",
      "integrity": "sha512-4QrHAr0aXQCEFni2q4DqKLD31n2DL+RxcwnNjDFkSG0eNQ/xCavnRkfCUjsyqGC2OviNJvZOF/mQqZBw7i2C5Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-transform-parameters": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.24.7.tgz",
      "integrity": "sha512-A/vVLwN6lBrMFmMDmPPz0jnE6ZGx7Jq7d6sT/Ev4H65RER6pZ+kczlf1DthF5N0qaPHBsI7UXiE8Zy66nmAovg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-replace-supers": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-catch-binding": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.24.7.tgz",
      "integrity": "sha512-uLEndKqP5BfBbC/5jTwPxLh9kqPWWgzN/f8w6UwAIirAEqiIVJWWY312X72Eub09g5KF9+Zn7+hT7sDxmhRuKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-chaining": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.24.8.tgz",
      "integrity": "sha512-5cTOLSMs9eypEy8JUVvIKOu6NgvbJMnpG62VpIHrTmROdQ+L5mDAaI40g25k5vXti55JWNX5jCkq3HZxXBQANw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.24.7.tgz",
      "integrity": "sha512-yGWW5Rr+sQOhK0Ot8hjDJuxU3XLRQGflvT4lhlSY0DFvdb3TwKaY26CJzHtYllU0vT9j58hc37ndFPsqT1SrzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-methods": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.25.4.tgz",
      "integrity": "sha512-ao8BG7E2b/URaUQGqN3Tlsg+M3KlHY6rJ1O1gXAEUnZoyNQnvKyH87Kfg+FoxSeyWUB8ISZZsC91C44ZuBFytw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.25.4",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-property-in-object": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.24.7.tgz",
      "integrity": "sha512-9z76mxwnwFxMyxZWEgdgECQglF2Q7cFLm0kMf8pGwt+GSJsY0cONKj/UuO4bOH0w/uAel3ekS4ra5CEAyJRmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-create-class-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.24.7.tgz",
      "integrity": "sha512-EMi4MLQSHfd2nrCqQEWxFdha2gBCqU4ZcCng4WBGZ5CJL4bBRW0ptdqqDdeirGZcpALazVVNJqRmsO8/+oNCBA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.24.7.tgz",
      "integrity": "sha512-lq3fvXPdimDrlg6LWBoqj+r/DEWgONuwjuOuQCSYgRroXDH/IdM1C0IZf59fL5cHLpjEH/O6opIRBbqv7ELnuA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "regenerator-transform": "^0.15.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.24.7.tgz",
      "integrity": "sha512-0DUq0pHcPKbjFZCfTss/pGkYMfy3vFWydkUBd9r0GHpIyfs2eCDENvqadMycRS9wZCXR41wucAfJHJmwA0UmoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.24.7.tgz",
      "integrity": "sha512-KsDsevZMDsigzbA09+vacnLpmPH4aWjcZjXdyFKGzpplxhbeB4wYtury3vglQkg6KM/xEPKt73eCjPPf1PgXBA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.24.7.tgz",
      "integrity": "sha512-x96oO0I09dgMDxJaANcRyD4ellXFLLiWhuwDxKZX5g2rWP1bTPkBSwCYv96VDXVT1bD9aPj8tppr5ITIh8hBng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.24.7.tgz",
      "integrity": "sha512-kHPSIJc9v24zEml5geKg9Mjx5ULpfncj0wRpYtxbvKyTtHCYDkVE3aHQ03FrpEo4gEe2vrJJS1Y9CJTaThA52g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.24.7.tgz",
      "integrity": "sha512-AfDTQmClklHCOLxtGoP7HkeMw56k1/bTQjwsfhL6pppo/M4TOBSq+jjBUBLmV/4oeFg4GWMavIl44ZeCtmmZTw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.24.8.tgz",
      "integrity": "sha512-adNTUpDCVnmAE58VEqKlAA6ZBlNkMnWD0ZcW76lyNFN3MJniyGFZfNwERVk8Ap56MCnXztmDr19T4mPTztcuaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.24.7.tgz",
      "integrity": "sha512-U3ap1gm5+4edc2Q/P+9VrBNhGkfnf+8ZqppY71Bo/pzZmXhhLdqgaUl6cuB07O1+AQJtCLfaOmswiNbSQ9ivhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-property-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.24.7.tgz",
      "integrity": "sha512-uH2O4OV5M9FZYQrwc7NdVmMxQJOCCzFeYudlZSzUAHRFeOujQefa92E74TQDVskNHCzOXoigEuoyzHDhaEaK5w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.24.7.tgz",
      "integrity": "sha512-hlQ96MBZSAXUq7ltkjtu3FJCCSMx/j629ns3hA3pXnBXjanNP0LHi+JpPeA81zaWgVK1VGH95Xuy7u0RyQ8kMg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-sets-regex": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.25.4.tgz",
      "integrity": "sha512-qesBxiWkgN1Q+31xUE9RcMk79eOXXDCv6tfyGMRSs4RGlioSg2WVyQAm07k726cSE56pa+Kb0y9epX2qaXzTvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.25.2",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.25.4.tgz",
      "integrity": "sha512-W9Gyo+KmcxjGahtt3t9fb14vFRWvPpu5pT6GBlovAK6BTBcxgjfVMSQCfJl4oi35ODrxP6xx2Wr8LNST57Mraw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.25.4",
        "@babel/helper-compilation-targets": "^7.25.2",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-validator-option": "^7.24.8",
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key": "^7.25.3",
        "@babel/plugin-bugfix-safari-class-field-initializer-scope": "^7.25.0",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.25.0",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.24.7",
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": "^7.25.0",
        "@babel/plugin-proposal-private-property-in-object": "7.21.0-placeholder-for-preset-env.2",
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3",
        "@babel/plugin-syntax-export-namespace-from": "^7.8.3",
        "@babel/plugin-syntax-import-assertions": "^7.24.7",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5",
        "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
        "@babel/plugin-transform-arrow-functions": "^7.24.7",
        "@babel/plugin-transform-async-generator-functions": "^7.25.4",
        "@babel/plugin-transform-async-to-generator": "^7.24.7",
        "@babel/plugin-transform-block-scoped-functions": "^7.24.7",
        "@babel/plugin-transform-block-scoping": "^7.25.0",
        "@babel/plugin-transform-class-properties": "^7.25.4",
        "@babel/plugin-transform-class-static-block": "^7.24.7",
        "@babel/plugin-transform-classes": "^7.25.4",
        "@babel/plugin-transform-computed-properties": "^7.24.7",
        "@babel/plugin-transform-destructuring": "^7.24.8",
        "@babel/plugin-transform-dotall-regex": "^7.24.7",
        "@babel/plugin-transform-duplicate-keys": "^7.24.7",
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex": "^7.25.0",
        "@babel/plugin-transform-dynamic-import": "^7.24.7",
        "@babel/plugin-transform-exponentiation-operator": "^7.24.7",
        "@babel/plugin-transform-export-namespace-from": "^7.24.7",
        "@babel/plugin-transform-for-of": "^7.24.7",
        "@babel/plugin-transform-function-name": "^7.25.1",
        "@babel/plugin-transform-json-strings": "^7.24.7",
        "@babel/plugin-transform-literals": "^7.25.2",
        "@babel/plugin-transform-logical-assignment-operators": "^7.24.7",
        "@babel/plugin-transform-member-expression-literals": "^7.24.7",
        "@babel/plugin-transform-modules-amd": "^7.24.7",
        "@babel/plugin-transform-modules-commonjs": "^7.24.8",
        "@babel/plugin-transform-modules-systemjs": "^7.25.0",
        "@babel/plugin-transform-modules-umd": "^7.24.7",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.24.7",
        "@babel/plugin-transform-new-target": "^7.24.7",
        "@babel/plugin-transform-nullish-coalescing-operator": "^7.24.7",
        "@babel/plugin-transform-numeric-separator": "^7.24.7",
        "@babel/plugin-transform-object-rest-spread": "^7.24.7",
        "@babel/plugin-transform-object-super": "^7.24.7",
        "@babel/plugin-transform-optional-catch-binding": "^7.24.7",
        "@babel/plugin-transform-optional-chaining": "^7.24.8",
        "@babel/plugin-transform-parameters": "^7.24.7",
        "@babel/plugin-transform-private-methods": "^7.25.4",
        "@babel/plugin-transform-private-property-in-object": "^7.24.7",
        "@babel/plugin-transform-property-literals": "^7.24.7",
        "@babel/plugin-transform-regenerator": "^7.24.7",
        "@babel/plugin-transform-reserved-words": "^7.24.7",
        "@babel/plugin-transform-shorthand-properties": "^7.24.7",
        "@babel/plugin-transform-spread": "^7.24.7",
        "@babel/plugin-transform-sticky-regex": "^7.24.7",
        "@babel/plugin-transform-template-literals": "^7.24.7",
        "@babel/plugin-transform-typeof-symbol": "^7.24.8",
        "@babel/plugin-transform-unicode-escapes": "^7.24.7",
        "@babel/plugin-transform-unicode-property-regex": "^7.24.7",
        "@babel/plugin-transform-unicode-regex": "^7.24.7",
        "@babel/plugin-transform-unicode-sets-regex": "^7.25.4",
        "@babel/preset-modules": "0.1.6-no-external-plugins",
        "babel-plugin-polyfill-corejs2": "^0.4.10",
        "babel-plugin-polyfill-corejs3": "^0.10.6",
        "babel-plugin-polyfill-regenerator": "^0.6.1",
        "core-js-compat": "^3.37.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-env/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.6-no-external-plugins",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
      "integrity": "sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/regjsgen": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@babel/regjsgen/-/regjsgen-0.8.0.tgz",
      "integrity": "sha512-x/rqGMdzj+fWZvCOYForTghzbtqPDZ5gPwaoNGHdgDfF2QA/XZbCBp4Moo5scrkAMPhB7z26XM/AaHuIJdgauA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@babel/runtime": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.25.6.tgz",
      "integrity": "sha512-VBj9MYyDb9tuLq7yzqjgzt6Q+IBQLrGZfdjOekyEirZPHxXWoTSGUTMrpsfi58Up73d13NfYLv8HT9vmznjzhQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regenerator-runtime": "^0.14.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.0.tgz",
      "integrity": "sha512-aOOgh1/5XzKvg1jvVz7AVrx2piJ2XBi227DHmbY6y+bM9H2FlN+IfecYu4Xl0cNiiVejlsCri89LUsbj8vJD9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.24.7",
        "@babel/parser": "^7.25.0",
        "@babel/types": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.25.6.tgz",
      "integrity": "sha512-9Vrcx5ZW6UwK5tvqsj0nGpp/XzqthkT0dqIc9g1AdtygFToNtTF67XzYS//dm+SAK9cp3B9R4ZO/46p63SCjlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.24.7",
        "@babel/generator": "^7.25.6",
        "@babel/parser": "^7.25.6",
        "@babel/template": "^7.25.0",
        "@babel/types": "^7.25.6",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.25.6",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.25.6.tgz",
      "integrity": "sha512-/l42B1qxpG6RdfYf343Uw1vmDjeNhneUXtzhojE7pDgfpEypmRhI6j1kr17XCVv4Cgl9HdAiQY2x0GwKm7rWCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.24.8",
        "@babel/helper-validator-identifier": "^7.24.7",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@colors/colors": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@dabh/diagnostics": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
      "license": "MIT",
      "dependencies": {
        "colorspace": "1.1.x",
        "enabled": "2.0.x",
        "kuler": "^2.0.0"
      }
    },
    "node_modules/@emnapi/runtime": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@emnapi/runtime/-/runtime-1.2.0.tgz",
      "integrity": "sha512-bV21/9LQmcQeCPEg3BDFtvwL6cwiTMksYNWQQ4KOxCZikEGalWtenoZ0wCiukJINlGCIi2KXx01g4FoH/LxpzQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.11.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.0.tgz",
      "integrity": "sha512-G/M/tIiMrTAxEWRfLfQJMmGNX28IxBg4PBz8XqQhqUHLFI6TL2htpIB1iQCj144V5ee/JaKyT9/WZ0MGZWfA7A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.9.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.9.1.tgz",
      "integrity": "sha512-xIDQRsfg5hNBqHz04H1R3scSVwmI+KUbqjsQKHKQ1DAUSaUjYPReZZmS/5PNiKu1fUvzDd6H7DEDKACSEhu+TQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@faker-js/faker": {
      "version": "8.4.1",
      "resolved": "https://registry.npmjs.org/@faker-js/faker/-/faker-8.4.1.tgz",
      "integrity": "sha512-XQ3cU+Q8Uqmrbf2e0cIC/QN43sTBSC8KF12u29Mb47tWrt2hAgBXSgpZMj4Ao8Uk0iJcU99QsOCaIL8934obCg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fakerjs"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0",
        "npm": ">=6.14.13"
      }
    },
    "node_modules/@fast-csv/format": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/@fast-csv/format/-/format-4.3.5.tgz",
      "integrity": "sha512-8iRn6QF3I8Ak78lNAa+Gdl5MJJBM5vRHivFtMRUWINdevNo00K7OXxS2PshawLKTejVwieIlPmK5YlLu6w4u8A==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.isboolean": "^3.0.3",
        "lodash.isequal": "^4.5.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0"
      }
    },
    "node_modules/@fast-csv/parse": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/@fast-csv/parse/-/parse-4.3.6.tgz",
      "integrity": "sha512-uRsLYksqpbDmWaSmzvJcuApSEe38+6NQZBUsuAyMZKqHxH0g1wcJgsKUvN3WC8tewaqFjBMMGrkHmC+T7k8LvA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.groupby": "^4.6.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0",
        "lodash.isundefined": "^3.0.1",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/@fastify/busboy": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-3.0.0.tgz",
      "integrity": "sha512-83rnH2nCvclWaPQQKvkJ2pdOjG4TZyEVuFDnlOF6KP08lDaaceVyw/W63mDuafQT+MKHCvXIPpE5uYWeM0rT4w==",
      "license": "MIT"
    },
    "node_modules/@firebase/app-check-interop-types": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.2.tgz",
      "integrity": "sha512-LMs47Vinv2HBMZi49C09dJxp0QT5LwDzFaVGf/+ITHe3BlIhUiLNttkATSXplc89A2lAaeTqjgqVkiRfUGyQiQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-types": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.2.tgz",
      "integrity": "sha512-oMEZ1TDlBz479lmABwWsWjzHwheQKiAgnuKxE0pz0IXCVx7/rtlkx1fQ6GfgK24WCrxDKMplZrT50Kh04iMbXQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.3.tgz",
      "integrity": "sha512-Fc9wuJGgxoxQeavybiuwgyi+0rssr76b+nHpj+eGhXFYAdudMWyfBHvFL/I5fEHniUM/UQdFzi9VXJK2iZF7FQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/component": {
      "version": "0.6.8",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.8.tgz",
      "integrity": "sha512-LcNvxGLLGjBwB0dJUsBGCej2fqAepWyBubs4jt1Tiuns7QLbXHuyObZ4aMeBjZjWx4m8g1LoVI9QFpSaq/k4/g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/util": "1.9.7",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.7.tgz",
      "integrity": "sha512-wjXr5AO8RPxVVg7rRCYffT7FMtBjHRfJ9KMwi19MbOf0vBf0H9YqW3WCgcnLpXI6ehiUcU3z3qgPnnU0nK6SnA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.2",
        "@firebase/auth-interop-types": "0.2.3",
        "@firebase/component": "0.6.8",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.9.7",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.7.tgz",
      "integrity": "sha512-R/3B+VVzEFN5YcHmfWns3eitA8fHLTL03io+FIoMcTYkajFnrBdS3A+g/KceN9omP7FYYYGTQWF9lvbEx6eMEg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.8",
        "@firebase/database": "1.0.7",
        "@firebase/database-types": "1.0.4",
        "@firebase/logger": "0.4.2",
        "@firebase/util": "1.9.7",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.4.tgz",
      "integrity": "sha512-mz9ZzbH6euFXbcBo+enuJ36I5dR5w+enJHHjy9Y5ThCdKUseqfDjW3vCp1YxE9zygFCSjJJ/z1cQ+zodvUcwPQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.2",
        "@firebase/util": "1.9.7"
      }
    },
    "node_modules/@firebase/logger": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.2.tgz",
      "integrity": "sha512-Q1VuA5M1Gjqrwom6I6NUU4lQXdo9IAQieXlujeHZWvRt1b7qQ0KwBaNAjgxG27jgF9/mUwsNmO8ptBCGVYhB0A==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.9.7",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.9.7.tgz",
      "integrity": "sha512-fBVNH/8bRbYjqlbIhZ+lBtdAAS4WqZumx03K06/u7fJSpz1TGjEMm1ImvKD47w+xaFKIP2ori6z8BrbakRfjJA==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@google-cloud/firestore": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-7.9.0.tgz",
      "integrity": "sha512-c4ALHT3G08rV7Zwv8Z2KG63gZh66iKdhCBeDfCpIkLrjX6EAjTD/szMdj14M+FnQuClZLFfW5bAgoOjfNmLtJg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^4.3.3",
        "protobufjs": "^7.2.6"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/paginator": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-5.0.2.tgz",
      "integrity": "sha512-DJS3s0OVH4zFDB1PzjxAsHqJT6sKVbRwwML0ZBP9PbU7Yebtu/7SWMRzvO2J3nUi9pRNITCfu4LJeooM2w4pjg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/projectify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-4.0.0.tgz",
      "integrity": "sha512-MmaX6HeSvyPbWGwFq7mXdo0uQZLGBYCwziiLIGq5JVX+/bdI3SAq6bP98trV5eTWfLuvsMcIC1YJOF2vfteLFA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/promisify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-4.0.0.tgz",
      "integrity": "sha512-Orxzlfb9c67A15cq2JQEyVc7wEsmFBmHjZWZYQMUyJ1qivXyMwdyNOs9odi79hze+2zqdTtu1E19IM/FtqZ10g==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage": {
      "version": "7.12.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-7.12.1.tgz",
      "integrity": "sha512-Z3ZzOnF3YKLuvpkvF+TjQ6lztxcAyTILp+FjKonmVpEwPa9vFvxpZjubLR4sB6bf19i/8HL2AXRjA0YFgHFRmQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@google-cloud/paginator": "^5.0.0",
        "@google-cloud/projectify": "^4.0.0",
        "@google-cloud/promisify": "^4.0.0",
        "abort-controller": "^3.0.0",
        "async-retry": "^1.3.3",
        "duplexify": "^4.1.3",
        "fast-xml-parser": "^4.4.1",
        "gaxios": "^6.0.2",
        "google-auth-library": "^9.6.3",
        "html-entities": "^2.5.2",
        "mime": "^3.0.0",
        "p-limit": "^3.0.1",
        "retry-request": "^7.0.0",
        "teeny-request": "^9.0.0",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage/node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/@google-cloud/storage/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@googlemaps/google-maps-services-js": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/@googlemaps/google-maps-services-js/-/google-maps-services-js-3.4.0.tgz",
      "integrity": "sha512-M1G+Jl4ri9YIODxC+RwvW4UkonTQ+ZFE5gjdIrKP/4/vYG2q2dDN1IgTp03I2MI0eGQs2FmQlxGJ0lBaZ5Ysyw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@googlemaps/url-signature": "^1.0.4",
        "agentkeepalive": "^4.1.0",
        "axios": "^1.5.1",
        "query-string": "<8.x",
        "retry-axios": "<3.x"
      }
    },
    "node_modules/@googlemaps/url-signature": {
      "version": "1.0.36",
      "resolved": "https://registry.npmjs.org/@googlemaps/url-signature/-/url-signature-1.0.36.tgz",
      "integrity": "sha512-BTYFuGr+DRziXiHUR0xok4t2C8apTL2plSi/ouB7yVAPxv5qiHJ05v0gO98kXfhj4r63J1ZDNku65nH/GH9T0A==",
      "license": "Apache-2.0",
      "dependencies": {
        "crypto-js": "^4.2.0"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.11.1.tgz",
      "integrity": "sha512-gyt/WayZrVPH2w/UTLansS7F9Nwld472JxxaETamrM8HNlsa+jSLNyKAZmhxI2Me4c3mQHFiS1wWHDY1g1Kthw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/proto-loader": "^0.7.13",
        "@js-sdsl/ordered-map": "^4.4.2"
      },
      "engines": {
        "node": ">=12.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.13",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.13.tgz",
      "integrity": "sha512-AiXO/bfe9bmxBjxxtYxFAXGZvMaN5s8kO+jBHAJCON8rJoB5YS/D6X7ZNc6XQkuHNmyl4CYaMI1fJ/Gn27RGGw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@hapi/hoek": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
      "integrity": "sha512-/c6rf4UJlmHlC9b5BaNvzAcFv7HZ2QHaV0D4/HNlBdvFnvQq8RI4kYdhyPCl7Xj+oWvTWQ8ujhqS53LIgAe6KQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@hapi/topo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.11.14",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
      "integrity": "sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==",
      "deprecated": "Use @eslint/config-array instead",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.2",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/@img/sharp-darwin-arm64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-arm64/-/sharp-darwin-arm64-0.33.5.tgz",
      "integrity": "sha512-UT4p+iz/2H4twwAoLCqfA9UH5pI6DggwKEGuaPy7nCVQ8ZsiY5PIcrRvD1DzuY3qYL07NtIQcWnBSY/heikIFQ==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-arm64": "1.0.4"
      }
    },
    "node_modules/@img/sharp-darwin-x64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-darwin-x64/-/sharp-darwin-x64-0.33.5.tgz",
      "integrity": "sha512-fyHac4jIc1ANYGRDxtiqelIbdWkIuQaI84Mv45KvGRRxSAa7o7d1ZKAOBaYbnepLC1WqxfpimdeWfvqqSGwR2Q==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-darwin-x64": "1.0.4"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-arm64": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-arm64/-/sharp-libvips-darwin-arm64-1.0.4.tgz",
      "integrity": "sha512-XblONe153h0O2zuFfTAbQYAX2JhYmDHeWikp1LM9Hul9gVPjFY427k6dFEcOL72O01QxQsWi761svJ/ev9xEDg==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-darwin-x64": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-darwin-x64/-/sharp-libvips-darwin-x64-1.0.4.tgz",
      "integrity": "sha512-xnGR8YuZYfJGmWPvmlunFaWJsb9T/AO2ykoP3Fz/0X5XV2aoYBPkX6xqCQvUTKKiLddarLaxpzNe+b1hjeWHAQ==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "darwin"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm/-/sharp-libvips-linux-arm-1.0.5.tgz",
      "integrity": "sha512-gvcC4ACAOPRNATg/ov8/MnbxFDJqf/pDePbBnuBDcjsI8PssmjoKMAz4LtLaVi+OnSb5FK/yIOamqDwGmXW32g==",
      "cpu": [
        "arm"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-arm64": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-arm64/-/sharp-libvips-linux-arm64-1.0.4.tgz",
      "integrity": "sha512-9B+taZ8DlyyqzZQnoeIvDVR/2F4EbMepXMc/NdVbkzsJbzkUjhXv/70GQJ7tdLA4YJgNP25zukcxpX2/SueNrA==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-s390x": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-s390x/-/sharp-libvips-linux-s390x-1.0.4.tgz",
      "integrity": "sha512-u7Wz6ntiSSgGSGcjZ55im6uvTrOxSIS8/dgoVMoiGE9I6JAfU50yH5BoDlYA1tcuGS7g/QNtetJnxA6QEsCVTA==",
      "cpu": [
        "s390x"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linux-x64": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.0.4.tgz",
      "integrity": "sha512-MmWmQ3iPFZr0Iev+BAgVMb3ZyC4KeFc3jFxnNbEPas60e1cIfevbtuyf9nDGIzOaW9PdnDciJm+wFFaTlj5xYw==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-arm64": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-arm64/-/sharp-libvips-linuxmusl-arm64-1.0.4.tgz",
      "integrity": "sha512-9Ti+BbTYDcsbp4wfYib8Ctm1ilkugkA/uscUn6UXK1ldpC1JjiXbLfFZtRlBhjPZ5o1NCLiDbg8fhUPKStHoTA==",
      "cpu": [
        "arm64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-libvips-linuxmusl-x64": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.0.4.tgz",
      "integrity": "sha512-viYN1KX9m+/hGkJtvYYp+CCLgnJXwiQB39damAO7WMdKWlIhmYTfHjwSbQeUK/20vY154mwezd9HflVFM1wVSw==",
      "cpu": [
        "x64"
      ],
      "license": "LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "linux"
      ],
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-linux-arm": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm/-/sharp-linux-arm-0.33.5.tgz",
      "integrity": "sha512-JTS1eldqZbJxjvKaAkxhZmBqPRGmxgu+qFKSInv8moZ2AmT5Yib3EQ1c6gp493HvrvV8QgdOXdyaIBrhvFhBMQ==",
      "cpu": [
        "arm"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm": "1.0.5"
      }
    },
    "node_modules/@img/sharp-linux-arm64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-arm64/-/sharp-linux-arm64-0.33.5.tgz",
      "integrity": "sha512-JMVv+AMRyGOHtO1RFBiJy/MBsgz0x4AWrT6QoEVVTyh1E39TrCUpTRI7mx9VksGX4awWASxqCYLCV4wBZHAYxA==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-arm64": "1.0.4"
      }
    },
    "node_modules/@img/sharp-linux-s390x": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-s390x/-/sharp-linux-s390x-0.33.5.tgz",
      "integrity": "sha512-y/5PCd+mP4CA/sPDKl2961b+C9d+vPAveS33s6Z3zfASk2j5upL6fXVPZi7ztePZ5CuH+1kW8JtvxgbuXHRa4Q==",
      "cpu": [
        "s390x"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-s390x": "1.0.4"
      }
    },
    "node_modules/@img/sharp-linux-x64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.33.5.tgz",
      "integrity": "sha512-opC+Ok5pRNAzuvq1AG0ar+1owsu842/Ab+4qvU879ippJBHvyY5n2mxF1izXqkPYlGuP/M556uh53jRLJmzTWA==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linux-x64": "1.0.4"
      }
    },
    "node_modules/@img/sharp-linuxmusl-arm64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-arm64/-/sharp-linuxmusl-arm64-0.33.5.tgz",
      "integrity": "sha512-XrHMZwGQGvJg2V/oRSUfSAfjfPxO+4DkiRh6p2AFjLQztWUuY/o8Mq0eMQVIY7HJ1CDQUJlxGGZRw1a5bqmd1g==",
      "cpu": [
        "arm64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-arm64": "1.0.4"
      }
    },
    "node_modules/@img/sharp-linuxmusl-x64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.33.5.tgz",
      "integrity": "sha512-WT+d/cgqKkkKySYmqoZ8y3pxx7lx9vVejxW/W4DOFMYVSkErR+w7mf2u8m/y4+xHe7yY9DAXQMWQhpnMuFfScw==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-libvips-linuxmusl-x64": "1.0.4"
      }
    },
    "node_modules/@img/sharp-wasm32": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-wasm32/-/sharp-wasm32-0.33.5.tgz",
      "integrity": "sha512-ykUW4LVGaMcU9lu9thv85CbRMAwfeadCJHRsg2GmeRa/cJxsVY9Rbd57JcMxBkKHag5U/x7TSBpScF4U8ElVzg==",
      "cpu": [
        "wasm32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later AND MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/runtime": "^1.2.0"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-ia32": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-ia32/-/sharp-win32-ia32-0.33.5.tgz",
      "integrity": "sha512-T36PblLaTwuVJ/zw/LaH0PdZkRz5rd3SmMHX8GSmR7vtNSP5Z6bQkExdSK7xGWyxLw4sUknBuugTelgw2faBbQ==",
      "cpu": [
        "ia32"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@img/sharp-win32-x64": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.33.5.tgz",
      "integrity": "sha512-MpY/o8/8kj+EcnxwvrP4aTJSWw/aZ7JIGR4aBeZkZw5B7/Jn+tY9/VNwtcoGmdT7GfggGIU4kygOMSbYnOrAbg==",
      "cpu": [
        "x64"
      ],
      "license": "Apache-2.0 AND LGPL-3.0-or-later",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      }
    },
    "node_modules/@ioredis/commands": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.2.0.tgz",
      "integrity": "sha512-Sx1pU8EM64o2BrqNpEO1CNLtKQwyhuXuqyfH7oGKCk+1a33d2r5saW8zNwm3j6BTExtjrv2BxTgzzkMwts6vGg==",
      "license": "MIT"
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@isaacs/cliui/node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/console/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/console/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/console/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/console/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jest/console/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/reporters": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.7.0",
        "jest-config": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-resolve-dependencies": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/core/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/core/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/core/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/core/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jest/core/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/core/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "expect": "^29.7.0",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^29.6.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/types": "^29.6.3",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^6.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/reporters/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/reporters/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/reporters/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/reporters/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jest/reporters/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/reporters/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/transform/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/transform/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/transform/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jest/transform/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/transform/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/types/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/types/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/types/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jest/types/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/types/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@js-sdsl/ordered-map": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
      "license": "MIT",
      "optional": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/js-sdsl"
      }
    },
    "node_modules/@jsdevtools/ono": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/@jsdevtools/ono/-/ono-7.1.3.tgz",
      "integrity": "sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg==",
      "license": "MIT"
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@mongodb-js/saslprep": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.1.8.tgz",
      "integrity": "sha512-qKwC/M/nNNaKUBMQ0nuzm47b7ZYWQHN3pcXq4IIcoSBc2hOIrflAxJduIvvqmhoz3gR2TacTAs8vlsCVPkiEdQ==",
      "license": "MIT",
      "dependencies": {
        "sparse-bitfield": "^3.0.3"
      }
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals": {
      "version": "5.1.1-v1",
      "resolved": "https://registry.npmjs.org/@nicolo-ribaudo/eslint-scope-5-internals/-/eslint-scope-5-internals-5.1.1-v1.tgz",
      "integrity": "sha512-54/JRvkLIzzDWshCWfuhadfrfZVPiElY8Fcgmg1HroEly/EDSszzhBAsarCux+D/kOslTRquNzuyGSmUSTTHGg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-scope": "5.1.1"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@one-ini/wasm": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/@one-ini/wasm/-/wasm-0.1.1.tgz",
      "integrity": "sha512-XuySG1E38YScSJoMlqovLru4KTUNSjgVTIjyh7qMX6aNN5HY5Ct5LhRJdxO79JtTzKfzV/bnWpz+zquYrISsvw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@opentelemetry/api": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
      "integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@pkgr/core": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/@pkgr/core/-/core-0.1.1.tgz",
      "integrity": "sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/unts"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@rushstack/node-core-library": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@rushstack/node-core-library/-/node-core-library-5.7.0.tgz",
      "integrity": "sha512-Ff9Cz/YlWu9ce4dmqNBZpA45AEya04XaBFIjV7xTVeEf+y/kTjEasmozqFELXlNG4ROdevss75JrrZ5WgufDkQ==",
      "license": "MIT",
      "dependencies": {
        "ajv": "~8.13.0",
        "ajv-draft-04": "~1.0.0",
        "ajv-formats": "~3.0.1",
        "fs-extra": "~7.0.1",
        "import-lazy": "~4.0.0",
        "jju": "~1.4.0",
        "resolve": "~1.22.1",
        "semver": "~7.5.4"
      },
      "peerDependencies": {
        "@types/node": "*"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        }
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/ajv": {
      "version": "8.13.0",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.13.0.tgz",
      "integrity": "sha512-PRA911Blj99jR5RMeTunVbNXMF6Lp4vZXnk5GQjcnUWUTsrXtekg/pnmFFI2u/I36Y/2bITGS30GZCXei6uNkA==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.4.1"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/ajv-draft-04": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/ajv-draft-04/-/ajv-draft-04-1.0.0.tgz",
      "integrity": "sha512-mv00Te6nmYbRp5DCwclxtt7yV/joXJPGS7nM+97GdxvuttCOfgI3K4U25zboyeX0O+myI8ERluxQe5wljMmVIw==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^8.5.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/fs-extra": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-7.0.1.tgz",
      "integrity": "sha512-YJDaCJZEnBmcbw13fvdAM9AwNOJwOzrE4pqMqBq5nFiEqXUqHwlK4B+3pUw6JNvfSPtX05xFHtYy/1ni01eGCw==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/@rushstack/node-core-library/node_modules/jsonfile": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
      "integrity": "sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==",
      "license": "MIT",
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/universalify": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/@rushstack/node-core-library/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/@rushstack/terminal": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@rushstack/terminal/-/terminal-0.14.0.tgz",
      "integrity": "sha512-juTKMAMpTIJKudeFkG5slD8Z/LHwNwGZLtU441l/u82XdTBfsP+LbGKJLCNwP5se+DMCT55GB8x9p6+C4UL7jw==",
      "license": "MIT",
      "dependencies": {
        "@rushstack/node-core-library": "5.7.0",
        "supports-color": "~8.1.1"
      },
      "peerDependencies": {
        "@types/node": "*"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        }
      }
    },
    "node_modules/@rushstack/terminal/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@rushstack/terminal/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/@rushstack/ts-command-line": {
      "version": "4.22.6",
      "resolved": "https://registry.npmjs.org/@rushstack/ts-command-line/-/ts-command-line-4.22.6.tgz",
      "integrity": "sha512-QSRqHT/IfoC5nk9zn6+fgyqOPXHME0BfchII9EUPR19pocsNp/xSbeBCbD3PIR2Lg+Q5qk7OFqk1VhWPMdKHJg==",
      "license": "MIT",
      "dependencies": {
        "@rushstack/terminal": "0.14.0",
        "@types/argparse": "1.0.38",
        "argparse": "~1.0.9",
        "string-argv": "~0.3.1"
      }
    },
    "node_modules/@sideway/address": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.5.tgz",
      "integrity": "sha512-IqO/DUQHUkPeixNQ8n0JA6102hT9CmaljNTPmQ1u8MEhBo/R4Q8eKLN/vGZxuebwOroDB4cbpjheD4+/sKFK4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@hapi/hoek": "^9.0.0"
      }
    },
    "node_modules/@sideway/formula": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.1.tgz",
      "integrity": "sha512-/poHZJJVjx3L+zVD6g9KgHfYnb443oi7wLu/XKojDviHy6HOEOA6z1Trk5aR1dGcmPenJEgb2sK2I80LeS3MIg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@sideway/pinpoint": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@swc/helpers": {
      "version": "0.3.17",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.3.17.tgz",
      "integrity": "sha512-tb7Iu+oZ+zWJZ3HJqwx8oNwSDIU440hmVMDPhpACWQWnrZHK99Bxs70gT1L2dnr5Hg50ZRWEFkQCAnOVVV0z1Q==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@turf/boolean-point-in-polygon": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/@turf/boolean-point-in-polygon/-/boolean-point-in-polygon-6.5.0.tgz",
      "integrity": "sha512-DtSuVFB26SI+hj0SjrvXowGTUCHlgevPAIsukssW6BG5MlNSBQAo70wpICBNJL6RjukXg8d2eXaAWuD/CqL00A==",
      "license": "MIT",
      "dependencies": {
        "@turf/helpers": "^6.5.0",
        "@turf/invariant": "^6.5.0"
      },
      "funding": {
        "url": "https://opencollective.com/turf"
      }
    },
    "node_modules/@turf/helpers": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/@turf/helpers/-/helpers-6.5.0.tgz",
      "integrity": "sha512-VbI1dV5bLFzohYYdgqwikdMVpe7pJ9X3E+dlr425wa2/sMJqYDhTO++ec38/pcPvPE6oD9WEEeU3Xu3gza+VPw==",
      "license": "MIT",
      "funding": {
        "url": "https://opencollective.com/turf"
      }
    },
    "node_modules/@turf/invariant": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/@turf/invariant/-/invariant-6.5.0.tgz",
      "integrity": "sha512-Wv8PRNCtPD31UVbdJE/KVAWKe7l6US+lJItRR/HOEW3eh+U/JwRCSUl/KZ7bmjM/C+zLNoreM2TU6OoLACs4eg==",
      "license": "MIT",
      "dependencies": {
        "@turf/helpers": "^6.5.0"
      },
      "funding": {
        "url": "https://opencollective.com/turf"
      }
    },
    "node_modules/@types/argparse": {
      "version": "1.0.38",
      "resolved": "https://registry.npmjs.org/@types/argparse/-/argparse-1.0.38.tgz",
      "integrity": "sha512-ebDJ9b0e702Yr7pWgB0jzm+CX4Srzz8RcXtLJDJB+BSccqMa36uyH/zUsSYao5+BD1ytv3k3rPYCq4mAE1hsXA==",
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.8",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.6",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.5",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/caseless": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@types/caseless/-/caseless-0.12.5.tgz",
      "integrity": "sha512-hWtVTC2q7hc7xZ/RLbxapMvDMgUnDvKvMOpKal4DrMyfGBUfB1oKaZlIRr6mJL+If3bAP6sV/QneGzF6tJjZDg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q==",
      "license": "MIT"
    },
    "node_modules/@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/debug": {
      "version": "4.1.12",
      "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.12.tgz",
      "integrity": "sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==",
      "license": "MIT",
      "dependencies": {
        "@types/ms": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
      "integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.19.5",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.5.tgz",
      "integrity": "sha512-y6W03tvrACO72aijJ5uF02FRq5cgDR9lUxddQ8vyF+GvmjJQqbzDcJngEjURc+ZsG31VI3hODNZJ2URj86pzmg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
      "license": "MIT"
    },
    "node_modules/@types/http-proxy": {
      "version": "1.17.15",
      "resolved": "https://registry.npmjs.org/@types/http-proxy/-/http-proxy-1.17.15.tgz",
      "integrity": "sha512-25g5atgiVNTIv0LBDTg1H74Hvayx0ajtJPLLcYE3whFv75J0pWNtOBzaXJQgDTmrX1bx5U9YC2w/n65BN1HwRQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.6",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.6.tgz",
      "integrity": "sha512-/5hndP5dCjloafCXns6SZyESp3Ldq7YjH3zwzwczYnjxIT0Fqzk5ROSYVGfFyczIue7IUEj8hkvLbPoLQ18vQw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/long": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
      "integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/ms": {
      "version": "0.7.34",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-0.7.34.tgz",
      "integrity": "sha512-nG96G3Wp6acyAgJqGasjODb+acrI7KltPiRxzHPXnP3NgI28bpQDRv53olbqGXbfcgF5aiiHmO3xpwEpS5Ld9g==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "14.18.63",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.18.63.tgz",
      "integrity": "sha512-fAtCfv4jJg+ExtXhvCkCqUKZ+4ok/JQk01qDKhL5BDDoS3AxKXhV5/MAVUZyQnSEd2GT92fkgZl0pz0Q0AzcIQ==",
      "license": "MIT"
    },
    "node_modules/@types/qs": {
      "version": "6.9.15",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.15.tgz",
      "integrity": "sha512-uXHQKES6DQKKCLh441Xv/dwxOq1TVS3JPUMlEqoEglvlhR6Mxnlew/Xq/LRVHpLyk7iK3zODe1qYHIMltO7XGg==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/request": {
      "version": "2.48.12",
      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.12.tgz",
      "integrity": "sha512-G3sY+NpsA9jnwm0ixhAFQSJ3Q9JkpLZpJbI3GMv0mIAT0y3mRabYeINzal5WOChIiaTEGQYlHOKgkaM9EisWHw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/caseless": "*",
        "@types/node": "*",
        "@types/tough-cookie": "*",
        "form-data": "^2.5.0"
      }
    },
    "node_modules/@types/request/node_modules/form-data": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.1.tgz",
      "integrity": "sha512-m21N3WOmEEURgk6B9GLOE4RuWOFf28Lhh9qGYeNlGq4VDXUlJy2th2slBNU8Gp8EzloYZOibZJ7t5ecIrFSjVA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/@types/send": {
      "version": "0.17.4",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.7",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
      "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/tough-cookie": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/triple-beam": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==",
      "license": "MIT"
    },
    "node_modules/@types/validator": {
      "version": "13.12.1",
      "resolved": "https://registry.npmjs.org/@types/validator/-/validator-13.12.1.tgz",
      "integrity": "sha512-w0URwf7BQb0rD/EuiG12KP0bailHKHP5YVviJG9zw3ykAokL0TuxU2TUqMB7EwZ59bDHYdeTIvjI5m0S7qHfOA==",
      "license": "MIT"
    },
    "node_modules/@types/webidl-conversions": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA==",
      "license": "MIT"
    },
    "node_modules/@types/whatwg-url": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
      "license": "MIT",
      "dependencies": {
        "@types/webidl-conversions": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.3.0.tgz",
      "integrity": "sha512-FLAIn63G5KH+adZosDYiutqkOkYEx0nvcwNNfJAf+c7Ae/H35qWwTYvPZUKFj5AS+WfHG/WJJfWnDnyNUlp8UA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.3.0",
        "@typescript-eslint/type-utils": "8.3.0",
        "@typescript-eslint/utils": "8.3.0",
        "@typescript-eslint/visitor-keys": "8.3.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.3.1",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.3.0.tgz",
      "integrity": "sha512-h53RhVyLu6AtpUzVCYLPhZGL5jzTD9fZL+SYf/+hYOx2bDkyQXztXSc4tbvKYHzfMXExMLiL9CWqJmVz6+78IQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.3.0",
        "@typescript-eslint/types": "8.3.0",
        "@typescript-eslint/typescript-estree": "8.3.0",
        "@typescript-eslint/visitor-keys": "8.3.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.3.0.tgz",
      "integrity": "sha512-mz2X8WcN2nVu5Hodku+IR8GgCOl4C0G/Z1ruaWN4dgec64kDBabuXyPAr+/RgJtumv8EEkqIzf3X2U5DUKB2eg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.3.0",
        "@typescript-eslint/visitor-keys": "8.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.3.0.tgz",
      "integrity": "sha512-wrV6qh//nLbfXZQoj32EXKmwHf4b7L+xXLrP3FZ0GOUU72gSvLjeWUl5J5Ue5IwRxIV1TfF73j/eaBapxx99Lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/typescript-estree": "8.3.0",
        "@typescript-eslint/utils": "8.3.0",
        "debug": "^4.3.4",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.3.0.tgz",
      "integrity": "sha512-y6sSEeK+facMaAyixM36dQ5NVXTnKWunfD1Ft4xraYqxP0lC0POJmIaL/mw72CUMqjY9qfyVfXafMeaUj0noWw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.3.0.tgz",
      "integrity": "sha512-Mq7FTHl0R36EmWlCJWojIC1qn/ZWo2YiWYc1XVtasJ7FIgjo0MVv9rZWXEE7IK2CGrtwe1dVOxWwqXUdNgfRCA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/types": "8.3.0",
        "@typescript-eslint/visitor-keys": "8.3.0",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^1.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.3.0.tgz",
      "integrity": "sha512-F77WwqxIi/qGkIGOGXNBLV7nykwfjLsdauRB/DOFPdv6LTF3BHHkBpq81/b5iMPSF055oO2BiivDJV4ChvNtXA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "@typescript-eslint/scope-manager": "8.3.0",
        "@typescript-eslint/types": "8.3.0",
        "@typescript-eslint/typescript-estree": "8.3.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.3.0.tgz",
      "integrity": "sha512-RmZwrTbQ9QveF15m/Cl28n0LXD6ea2CjkhH5rQ55ewz3H24w+AMCJHPVYaZ8/0HoG8Z3cLLFFycRXxeO2tz9FA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.3.0",
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.2.0.tgz",
      "integrity": "sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "license": "ISC"
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.12.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
      "integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-3.0.1.tgz",
      "integrity": "sha512-8iUql50EUR+uUcdRQ3HDqa6EVyo3docL8g5WJ3FNcWmu62IbkGUue/pEyLBW8VGKKucTPgqeks4fIU1DA4yowQ==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
      "license": "MIT"
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==",
      "license": "ISC"
    },
    "node_modules/archiver": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/archiver/-/archiver-5.3.2.tgz",
      "integrity": "sha512-+25nxyyznAXF7Nef3y0EbBeqmGZgeN/BxHX29Rs39djAfaFalmQ89SE6CWyDCHzGL0yt/ycBtNOmGTW0FyGWNw==",
      "license": "MIT",
      "dependencies": {
        "archiver-utils": "^2.1.0",
        "async": "^3.2.4",
        "buffer-crc32": "^0.2.1",
        "readable-stream": "^3.6.0",
        "readdir-glob": "^1.1.2",
        "tar-stream": "^2.2.0",
        "zip-stream": "^4.1.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/archiver-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-2.1.0.tgz",
      "integrity": "sha512-bEL/yUb/fNNiNTuUz979Z0Yg5L+LzLxGJz8x79lYmR54fmTIb6ob/hNQgkQnIUDWIFjZVQwl9Xs356I6BAMHfw==",
      "license": "MIT",
      "dependencies": {
        "glob": "^7.1.4",
        "graceful-fs": "^4.2.0",
        "lazystream": "^1.0.0",
        "lodash.defaults": "^4.2.0",
        "lodash.difference": "^4.5.0",
        "lodash.flatten": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.union": "^4.6.0",
        "normalize-path": "^3.0.0",
        "readable-stream": "^2.0.0"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/archiver-utils/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/archiver-utils/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/archiver-utils/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/archiver-utils/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.1.tgz",
      "integrity": "sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.5",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.8",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.8.tgz",
      "integrity": "sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "is-string": "^1.0.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-source": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/array-source/-/array-source-0.0.4.tgz",
      "integrity": "sha512-frNdc+zBn80vipY+GdcJkLEbMWj3xmzArYApmUGxoiV8uAu/ygcs9icPdsGdA26h0MkHUMW6EN2piIvVx+M5Mw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.5.tgz",
      "integrity": "sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.2.tgz",
      "integrity": "sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.2.0",
        "es-abstract": "^1.22.1",
        "es-shim-unscopables": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.2.tgz",
      "integrity": "sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.2.0",
        "es-abstract": "^1.22.1",
        "es-shim-unscopables": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.3.tgz",
      "integrity": "sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.5",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.22.3",
        "es-errors": "^1.2.1",
        "get-intrinsic": "^1.2.3",
        "is-array-buffer": "^3.0.4",
        "is-shared-array-buffer": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/astral-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-1.0.0.tgz",
      "integrity": "sha512-+Ryf6g3BKoRc7jfp7ad8tM4TtMiaWvbF/1/sQcZPkkS7ag3D5nMBCe2UfOTONtAkaG0tO0ij3C5Lwmf1EiyjHg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "retry": "0.13.1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/aws-sdk": {
      "version": "2.1687.0",
      "resolved": "https://registry.npmjs.org/aws-sdk/-/aws-sdk-2.1687.0.tgz",
      "integrity": "sha512-Pk7RbIxJ8yDmFJRKzaapiUsAvz5cTPKCz7soomU+lASx1jvO29Z9KAPB6KJR22m7rDDMO/HNNN9OJRzfdvh7xQ==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "buffer": "4.9.2",
        "events": "1.1.1",
        "ieee754": "1.1.13",
        "jmespath": "0.16.0",
        "querystring": "0.2.0",
        "sax": "1.2.1",
        "url": "0.10.3",
        "util": "^0.12.4",
        "uuid": "8.0.0",
        "xml2js": "0.6.2"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/aws-sdk/node_modules/buffer": {
      "version": "4.9.2",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-4.9.2.tgz",
      "integrity": "sha512-xq+q3SRMOxGivLhBNaUdC64hDTQwejJ+H0T/NB1XMtTVEwNTrfFF3gAxiyW0Bu/xWEGhjVKgUcMhCrUy2+uCWg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.0.2",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0"
      }
    },
    "node_modules/aws-sdk/node_modules/ieee754": {
      "version": "1.1.13",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.1.13.tgz",
      "integrity": "sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/aws-sdk/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/aws-sdk/node_modules/uuid": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.0.0.tgz",
      "integrity": "sha512-jOXGuXZAWdsTH7eZLtyXMqUb9EcWMGZNbL9YcGBJl4MH4nrxHmZJhEHvyLFrkxo+28uLb/NYRcStH48fnD0Vzw==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.2.tgz",
      "integrity": "sha512-lHe62zvbTB5eEABUVi/AwVh0ZKY9rMMDhmm+eeyuuUQbQ3+J+fONVQOZyj+DdrvD4BY33uYniyRJ4UJIaSKAfw==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.7.5",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.5.tgz",
      "integrity": "sha512-fZu86yCo+svH3uqJ/yTdQ0QHpQu5oL+/QE+QPSv6BZSkDAoky9vytxp7u5qk83OJFS3kEBcesWni9WTZAv3tSw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/babel-eslint": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/babel-eslint/-/babel-eslint-10.1.0.tgz",
      "integrity": "sha512-ifWaTHQ0ce+448CYop8AdrQiBsGrnC+bMgfyKFdi6EsPLTAWG+QfyDeM6OH+FmWnKvEq5NnBMLvlBUPKQZoDSg==",
      "deprecated": "babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "@babel/parser": "^7.7.0",
        "@babel/traverse": "^7.7.0",
        "@babel/types": "^7.7.0",
        "eslint-visitor-keys": "^1.0.0",
        "resolve": "^1.12.0"
      },
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "eslint": ">= 4.12.1"
      }
    },
    "node_modules/babel-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^29.7.0",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.6.3",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-jest/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/babel-jest/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/babel-jest/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/babel-jest/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/babel-jest/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-jest/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.4.11",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.11.tgz",
      "integrity": "sha512-sMEJ27L0gRHShOh5G54uAAPaiCOygY/5ratXuiyb2G46FmlSpc9eFCzYVyDiPxfNbwzA7mYahmjQc5q+CZQ09Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.22.6",
        "@babel/helper-define-polyfill-provider": "^0.6.2",
        "semver": "^6.3.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.10.6",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.10.6.tgz",
      "integrity": "sha512-b37+KR2i/khY5sKmWNVQAnitvquQbNdWy6lJdsr0kmquCKEEUgMKK4SboVM3HtfnZilfjr4MMQ7vY58FVWDtIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.2",
        "core-js-compat": "^3.38.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.2.tgz",
      "integrity": "sha512-2R25rQZWP63nGwaAswvDazbPXfrM3HwVoBXK6HcqeKrSrL/JqcC/rDcf95l4r7LXLyxDXc8uQDa064GubtCABg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/base32.js": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/base32.js/-/base32.js-0.0.1.tgz",
      "integrity": "sha512-EGHIRiegFa62/SsA1J+Xs2tIzludPdzM064N9wjbiEgHnGnJ1V0WEpA4pEwCYT5nDvZk3ubf0shqaCS7k6xeUQ==",
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "license": "MIT",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/bcrypt": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz",
      "integrity": "sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.11",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
      "license": "MIT"
    },
    "node_modules/big-integer": {
      "version": "1.6.52",
      "resolved": "https://registry.npmjs.org/big-integer/-/big-integer-1.6.52.tgz",
      "integrity": "sha512-QxD8cf2eVqJOOz63z6JIN9BzvVs/dlySa5HGSBH5xtR8dPteIRQnBxxKqkNTiT6jbDTF6jAfrd4oMcND9RGbQg==",
      "license": "Unlicense",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.1.2",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/binary/-/binary-0.3.0.tgz",
      "integrity": "sha512-D4H1y5KYwpJgK8wk1Cue5LLPgmwHKYSChkbspQg5JtVuR5ulGckxfR62H3AE9UDkdMC8yyXlqYihuz3Aqg2XZg==",
      "license": "MIT",
      "dependencies": {
        "buffers": "~0.1.1",
        "chainsaw": "~0.1.0"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/bintrees": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bintrees/-/bintrees-1.0.2.tgz",
      "integrity": "sha512-VOMgTMwjAaUG580SXn3LacVgjurrbMme7ZZNYGSSV7mmtY6QQRh0Eg3pwIcntQ77DErK1L0NxkbetjcoXzVwKw==",
      "license": "MIT"
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/bluebird": {
      "version": "3.4.7",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.4.7.tgz",
      "integrity": "sha512-iD3898SR7sWVRHbiQv+sHUtHnMvC1o3nW5rAcqnq3uOn07DSAppZYUkIGslDz6gXC7HfunPe7YVBgoEJASPcHA==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/brotli": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/brotli/-/brotli-1.3.3.tgz",
      "integrity": "sha512-oTKjJdShmDuGW94SyyaoQvAjf30dZaHnjJ8uAF+u2/vGJkJbJPJAT1gDiOJP5v1Zb6f9KEyW/1HpuaWIXtGHPg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.1.2"
      }
    },
    "node_modules/browserslist": {
      "version": "4.23.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.23.3.tgz",
      "integrity": "sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001646",
        "electron-to-chromium": "^1.5.4",
        "node-releases": "^2.0.18",
        "update-browserslist-db": "^1.1.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/bson": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/bson/-/bson-6.8.0.tgz",
      "integrity": "sha512-iOJg8pr7wq2tg/zSlCCHMi3hMm5JTOxLTagf3zxhcenHsFp+c6uOs6K7W5UE7A4QIJGtqh/ZovFNMP4mOPJynQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=16.20.1"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/buffer-indexof-polyfill": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/buffer-indexof-polyfill/-/buffer-indexof-polyfill-1.0.2.tgz",
      "integrity": "sha512-I7wzHwA3t1/lwXQh+A5PbNvJxgfo5r3xulgpYDB5zckTu/Z9oUK9biouBKQUjEqzaz3HnAT6TYoovmE+GqSf7A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/buffers": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/buffers/-/buffers-0.1.1.tgz",
      "integrity": "sha512-9q/rDEGSb/Qsvv2qvzIzdluL5k7AaJOTrw23z9reQthrbF7is4CtlT0DXyO1oei2DCp4uojjzQ7igaSHp1kAEQ==",
      "engines": {
        "node": ">=0.2.0"
      }
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-me-maybe": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.2.tgz",
      "integrity": "sha512-HpX65o1Hnr9HH25ojC1YGs7HCQLq0GCOibSaWER0eNpgJ/Z1MZv2mTc7+xh6WOPxbRVcmgbv4hGU+uSQ/2xFZQ==",
      "license": "MIT"
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001655",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001655.tgz",
      "integrity": "sha512-jRGVy3iSGO5Uutn2owlb5gR6qsGngTw9ZTb4ali9f3glshcNmJ2noam4Mo9zia5P9Dk3jNNydy7vQjuE5dQmfg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw==",
      "license": "Apache-2.0"
    },
    "node_modules/chainsaw": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/chainsaw/-/chainsaw-0.1.0.tgz",
      "integrity": "sha512-75kWfWt6MEKNC8xYXIdRpDehRYY/tNSgwKaJq+dbbDcxORuVrrQ+SEHoWsniVn9XPYfP4gmdWIeDk/4YNp1rNQ==",
      "license": "MIT/X11",
      "dependencies": {
        "traverse": ">=0.3.0 <0.4"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chardet": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.0.tgz",
      "integrity": "sha512-N1NGmowPlGBLsOZLPvm48StN04V4YvQRL0i6b7ctrVY3epjP/ct7hFLOItz6pDIvRjwpfPxi52a2UWV2ziir8g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cli-color": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/cli-color/-/cli-color-2.0.4.tgz",
      "integrity": "sha512-zlnpg0jNcibNrO7GG9IeHH7maWFeCz+Ja1wx/7tZNU5ASSSSZ+/qZciM0/LHCYxSdqv5h2sdbQ/PXYdOuetXvA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "d": "^1.0.1",
        "es5-ext": "^0.10.64",
        "es6-iterator": "^2.0.3",
        "memoizee": "^0.4.15",
        "timers-ext": "^0.1.7"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/cli-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "restore-cursor": "^3.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cli-width": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-3.0.0.tgz",
      "integrity": "sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/clone": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
      "integrity": "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/cluster-key-slot": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "license": "ISC",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/colorspace": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
      "license": "MIT",
      "dependencies": {
        "color": "^3.1.3",
        "text-hex": "1.0.x"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-10.0.1.tgz",
      "integrity": "sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.1.tgz",
      "integrity": "sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/compress-commons": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/compress-commons/-/compress-commons-4.1.2.tgz",
      "integrity": "sha512-D3uMHtGc/fcO1Gt1/L7i1e33VOvD4A9hfQLP+6ewd+BvG/gQ84Yh4oftEhAdjSMgBgwGL+jsppT7JYNpo6MHHg==",
      "license": "MIT",
      "dependencies": {
        "buffer-crc32": "^0.2.13",
        "crc32-stream": "^4.0.2",
        "normalize-path": "^3.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/concat-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-2.0.0.tgz",
      "integrity": "sha512-MWufYdFw53ccGjCA+Ol7XJYpAlW6/prSMzuPOTRnJGcGzuhLn4Scrz7qf6o8bROZ514ltazcIFJZevcfbo0x7A==",
      "engines": [
        "node >= 6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.0.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/config-chain": {
      "version": "1.1.13",
      "resolved": "https://registry.npmjs.org/config-chain/-/config-chain-1.1.13.tgz",
      "integrity": "sha512-qj+f8APARXHrM0hraqXYb2/bOVSV4PvJQlNZ/DVj0QrmNM2q2euizkeuVckQ57J+W0mRH6Hvi+k50M4Jul2VRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ini": "^1.3.4",
        "proto-list": "~1.2.1"
      }
    },
    "node_modules/connect-redis": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/connect-redis/-/connect-redis-7.1.1.tgz",
      "integrity": "sha512-M+z7alnCJiuzKa8/1qAYdGUXHYfDnLolOGAUjOioB07pP39qxjG+X9ibsud7qUBc4jMV5Mcy3ugGv8eFcgamJQ==",
      "license": "MIT",
      "engines": {
        "node": ">=16"
      },
      "peerDependencies": {
        "express-session": ">=1"
      }
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
      "license": "ISC"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/core-js-compat": {
      "version": "3.38.1",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.38.1.tgz",
      "integrity": "sha512-JRH6gfXxGmrzF3tZ57lFx97YARxCXPaMzPo6jELZhv88pBH5VXpQ+y0znKGlFnzuaihqhLbefxSJxWJMPtfDzw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.23.3"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/crc-32": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
      "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
      "license": "Apache-2.0",
      "bin": {
        "crc32": "bin/crc32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/crc32-stream": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/crc32-stream/-/crc32-stream-4.0.3.tgz",
      "integrity": "sha512-NT7w2JVU7DFroFdYkeq8cywxrgjPHWkdX1wjpRQXPX5Asews3tA+Ght6lddQO5Mkumffp3X7GEqku3epj2toIw==",
      "license": "MIT",
      "dependencies": {
        "crc-32": "^1.2.0",
        "readable-stream": "^3.4.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/create-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "prompts": "^2.0.1"
      },
      "bin": {
        "create-jest": "bin/create-jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/create-jest/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/create-jest/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/create-jest/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/create-jest/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/create-jest/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/create-jest/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cron-parser": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.9.0.tgz",
      "integrity": "sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==",
      "license": "MIT",
      "dependencies": {
        "luxon": "^3.2.1"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz",
      "integrity": "sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==",
      "deprecated": "This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.",
      "license": "ISC"
    },
    "node_modules/crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==",
      "license": "MIT"
    },
    "node_modules/d": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/d/-/d-1.0.2.tgz",
      "integrity": "sha512-MOqHvMWF9/9MX6nza0KgvFH4HpMU0EF5uUDXqX/BtxtU8NfB0QzRtJ8Oe/6SuS4kbhyzVJwjd97EA4PKrzJ8bw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "es5-ext": "^0.10.64",
        "type": "^2.7.2"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.1.tgz",
      "integrity": "sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.1.tgz",
      "integrity": "sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.0.tgz",
      "integrity": "sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/dayjs": {
      "version": "1.11.13",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.13.tgz",
      "integrity": "sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decamelize": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/decode-uri-component": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.2.tgz",
      "integrity": "sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/dedent": {
      "version": "1.5.3",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.3.tgz",
      "integrity": "sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deep-equal": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-2.2.3.tgz",
      "integrity": "sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.0",
        "call-bind": "^1.0.5",
        "es-get-iterator": "^1.1.3",
        "get-intrinsic": "^1.2.2",
        "is-arguments": "^1.1.1",
        "is-array-buffer": "^3.0.2",
        "is-date-object": "^1.0.5",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.2",
        "isarray": "^2.0.5",
        "object-is": "^1.1.5",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.4",
        "regexp.prototype.flags": "^1.5.1",
        "side-channel": "^1.0.4",
        "which-boxed-primitive": "^1.0.2",
        "which-collection": "^1.0.1",
        "which-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
      "license": "MIT"
    },
    "node_modules/denque": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
      "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/dfa": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/dfa/-/dfa-1.2.0.tgz",
      "integrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q==",
      "license": "MIT"
    },
    "node_modules/diff-sequences": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dijkstrajs": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/dijkstrajs/-/dijkstrajs-1.0.3.tgz",
      "integrity": "sha512-qiSlmBq9+BCdCA/L46dw8Uy93mloxsPSbwnm5yrKn2vMPiy8KyAskTF6zuV/j5BMsmOGZDPs7KjU+mjb670kfA==",
      "license": "MIT"
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.4.5",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.5.tgz",
      "integrity": "sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dottie": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/dottie/-/dottie-2.0.6.tgz",
      "integrity": "sha512-iGCHkfUc5kFekGiqhe8B/mdaurD+lakO9txNnTvKtA6PISrw86LgqHvRzWYPyoE2Ph5aMIrCw9/uko6XHTKCwA==",
      "license": "MIT"
    },
    "node_modules/duplexer2": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.4.tgz",
      "integrity": "sha512-asLFVfWWtJ90ZyOUHMqk7/S2w2guQKxUI2itj3d92ADHhxUSbCMGi1f1cBcJ7xM1To+pE/Khbwo1yuNbMEPKeA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "readable-stream": "^2.0.2"
      }
    },
    "node_modules/duplexer2/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/duplexer2/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/duplexer2/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/duplexer2/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/duplexify": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
      "integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.2"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
      "license": "MIT",
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/editorconfig": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/editorconfig/-/editorconfig-1.0.4.tgz",
      "integrity": "sha512-L9Qe08KWTlqYMVvMcTIvMAdl1cDUubzRNYL+WfA4bLDMHe4nemKkpmYzkznE1FwLKu0EEmy6obgQKzMJrg4x9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@one-ini/wasm": "0.1.1",
        "commander": "^10.0.0",
        "minimatch": "9.0.1",
        "semver": "^7.5.3"
      },
      "bin": {
        "editorconfig": "bin/editorconfig"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/editorconfig/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/editorconfig/node_modules/minimatch": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.1.tgz",
      "integrity": "sha512-0jWhJpD/MdhPXwPuiRkCbfYfSKp2qnn2eOc279qI7f+osl/l+prKSrvhg157zSYvx/1nmgn2NqdT6k2Z7zSH9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.13",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.13.tgz",
      "integrity": "sha512-lbBcvtIJ4J6sS4tb5TLp1b4LyfCdMkwStzXPyAgVgTRAsep4bvrAGaBOP7ZJtQMNJpSQ9SqG4brWOroNaQtm7Q==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/enabled": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/engine.io": {
      "version": "6.5.5",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.5.tgz",
      "integrity": "sha512-C5Pn8Wk+1vKBoHghJODM63yk8MvrO9EWZUfkAt5HAqIgPE4/8FF0PEGHXtEd40l223+cE5ABWuPzm38PHFXfMA==",
      "license": "MIT",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.23.3",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.23.3.tgz",
      "integrity": "sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "arraybuffer.prototype.slice": "^1.0.3",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.7",
        "data-view-buffer": "^1.0.1",
        "data-view-byte-length": "^1.0.1",
        "data-view-byte-offset": "^1.0.0",
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-set-tostringtag": "^2.0.3",
        "es-to-primitive": "^1.2.1",
        "function.prototype.name": "^1.1.6",
        "get-intrinsic": "^1.2.4",
        "get-symbol-description": "^1.0.2",
        "globalthis": "^1.0.3",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.0.3",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.2",
        "internal-slot": "^1.0.7",
        "is-array-buffer": "^3.0.4",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.1",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.3",
        "is-string": "^1.0.7",
        "is-typed-array": "^1.1.13",
        "is-weakref": "^1.0.2",
        "object-inspect": "^1.13.1",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.5",
        "regexp.prototype.flags": "^1.5.2",
        "safe-array-concat": "^1.1.2",
        "safe-regex-test": "^1.0.3",
        "string.prototype.trim": "^1.2.9",
        "string.prototype.trimend": "^1.0.8",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.2",
        "typed-array-byte-length": "^1.0.1",
        "typed-array-byte-offset": "^1.0.2",
        "typed-array-length": "^1.0.6",
        "unbox-primitive": "^1.0.2",
        "which-typed-array": "^1.1.15"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-get-iterator": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/es-get-iterator/-/es-get-iterator-1.1.3.tgz",
      "integrity": "sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.1.3",
        "has-symbols": "^1.0.3",
        "is-arguments": "^1.1.1",
        "is-map": "^2.0.2",
        "is-set": "^2.0.2",
        "is-string": "^1.0.7",
        "isarray": "^2.0.5",
        "stop-iteration-iterator": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.0.19",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.0.19.tgz",
      "integrity": "sha512-zoMwbCcH5hwUkKJkT8kDIBZSz9I6mVG//+lDCinLCGov4+r7NIy0ld8o03M0cJxl2spVf6ESYVS6/gpIfq1FFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "globalthis": "^1.0.3",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.0.3",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.7",
        "iterator.prototype": "^1.1.2",
        "safe-array-concat": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.0.0.tgz",
      "integrity": "sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.0.3.tgz",
      "integrity": "sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.4",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.0.2.tgz",
      "integrity": "sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.0"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
      "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.1.4",
        "is-date-object": "^1.0.1",
        "is-symbol": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es5-ext": {
      "version": "0.10.64",
      "resolved": "https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.64.tgz",
      "integrity": "sha512-p2snDhiLaXe6dahss1LddxqEm+SkuDvV8dnIQG0MWjyHpcMNfXKPE+/Cc0y+PhxJX3A4xGNeFCj5oc0BUh6deg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "ISC",
      "dependencies": {
        "es6-iterator": "^2.0.3",
        "es6-symbol": "^3.1.3",
        "esniff": "^2.0.1",
        "next-tick": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/es6-iterator": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.3.tgz",
      "integrity": "sha512-zw4SRzoUkd+cl+ZoE15A9o1oQd920Bb0iOJMQkQhl3jNc03YqVjAhG7scf9C5KWRU/R13Orf588uCC6525o02g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "d": "1",
        "es5-ext": "^0.10.35",
        "es6-symbol": "^3.1.1"
      }
    },
    "node_modules/es6-symbol": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.4.tgz",
      "integrity": "sha512-U9bFFjX8tFiATgtkJ1zg25+KviIXpgRvRHS8sau3GfhVzThRQrOeksPeT0BWW2MNZs1OEWJ1DPXOQMn0KKRkvg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "d": "^1.0.2",
        "ext": "^1.7.0"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/es6-weak-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/es6-weak-map/-/es6-weak-map-2.0.3.tgz",
      "integrity": "sha512-p5um32HOTO1kP+w7PRnB+5lQ43Z6muuMuIMffvDN8ZB4GcnjLBV6zGStpbASIMk4DCAvEaamhe2zhyCb/QXXsA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "d": "1",
        "es5-ext": "^0.10.46",
        "es6-iterator": "^2.0.3",
        "es6-symbol": "^3.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.0.tgz",
      "integrity": "sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.0",
        "@humanwhocodes/config-array": "^0.11.14",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-esnext": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-esnext/-/eslint-config-esnext-4.1.0.tgz",
      "integrity": "sha512-GhfVEXdqYKEIIj7j+Fw2SQdL9qyZMekgXfq6PyXM66cQw0B435ddjz3P3kxOBVihMRJ0xGYjosaveQz5Y6z0uA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "babel-eslint": "^10.0.1",
        "eslint": "^6.8.0",
        "eslint-plugin-babel": "^5.2.1",
        "eslint-plugin-import": "^2.14.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/ansi-regex": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.1.tgz",
      "integrity": "sha512-ILlv4k/3f6vfQ4OoP2AGvirOktlQ98ZEL1k9FaQjxa3L1abBgbuTDAdPOpvbGncC0BTVQrl+OM8xZGK6tWXt7g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/cross-spawn": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      },
      "engines": {
        "node": ">=4.8"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/cross-spawn/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/eslint": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "ajv": "^6.10.0",
        "chalk": "^2.1.0",
        "cross-spawn": "^6.0.5",
        "debug": "^4.0.1",
        "doctrine": "^3.0.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^1.4.3",
        "eslint-visitor-keys": "^1.1.0",
        "espree": "^6.1.2",
        "esquery": "^1.0.1",
        "esutils": "^2.0.2",
        "file-entry-cache": "^5.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^5.0.0",
        "globals": "^12.1.0",
        "ignore": "^4.0.6",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "inquirer": "^7.0.0",
        "is-glob": "^4.0.0",
        "js-yaml": "^3.13.1",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.3.0",
        "lodash": "^4.17.14",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "natural-compare": "^1.4.0",
        "optionator": "^0.8.3",
        "progress": "^2.0.0",
        "regexpp": "^2.0.1",
        "semver": "^6.1.2",
        "strip-ansi": "^5.2.0",
        "strip-json-comments": "^3.0.1",
        "table": "^5.2.3",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/espree": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-jsx": "^5.2.0",
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/file-entry-cache": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^2.0.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/flat-cache": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^2.0.0",
        "rimraf": "2.6.3",
        "write": "1.0.3"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/flatted": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/eslint-config-esnext/node_modules/globals": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
      "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.8.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/ignore": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^4.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint-config-esnext/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/eslint-config-node": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-node/-/eslint-config-node-4.1.0.tgz",
      "integrity": "sha512-Wz17xV5O2WFG8fGdMYEBdbiL6TL7YNJSJvSX9V4sXQownewfYmoqlly7wxqLkOUv/57pq6LnnotMiQQrrPjCqQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "eslint": "^6.8.0",
        "eslint-config-esnext": "^4.1.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/ansi-regex": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.1.tgz",
      "integrity": "sha512-ILlv4k/3f6vfQ4OoP2AGvirOktlQ98ZEL1k9FaQjxa3L1abBgbuTDAdPOpvbGncC0BTVQrl+OM8xZGK6tWXt7g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-node/node_modules/cross-spawn": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      },
      "engines": {
        "node": ">=4.8"
      }
    },
    "node_modules/eslint-config-node/node_modules/cross-spawn/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/eslint-config-node/node_modules/eslint": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "ajv": "^6.10.0",
        "chalk": "^2.1.0",
        "cross-spawn": "^6.0.5",
        "debug": "^4.0.1",
        "doctrine": "^3.0.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^1.4.3",
        "eslint-visitor-keys": "^1.1.0",
        "espree": "^6.1.2",
        "esquery": "^1.0.1",
        "esutils": "^2.0.2",
        "file-entry-cache": "^5.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^5.0.0",
        "globals": "^12.1.0",
        "ignore": "^4.0.6",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "inquirer": "^7.0.0",
        "is-glob": "^4.0.0",
        "js-yaml": "^3.13.1",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.3.0",
        "lodash": "^4.17.14",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "natural-compare": "^1.4.0",
        "optionator": "^0.8.3",
        "progress": "^2.0.0",
        "regexpp": "^2.0.1",
        "semver": "^6.1.2",
        "strip-ansi": "^5.2.0",
        "strip-json-comments": "^3.0.1",
        "table": "^5.2.3",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-node/node_modules/espree": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-jsx": "^5.2.0",
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/file-entry-cache": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^2.0.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-node/node_modules/flat-cache": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^2.0.0",
        "rimraf": "2.6.3",
        "write": "1.0.3"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-node/node_modules/flatted": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/eslint-config-node/node_modules/globals": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
      "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.8.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-config-node/node_modules/ignore": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/eslint-config-node/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-node/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/eslint-config-node/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-config-node/node_modules/shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^4.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-node/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-node/node_modules/type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint-config-node/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/eslint-config-prettier": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-9.1.0.tgz",
      "integrity": "sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "eslint-config-prettier": "bin/cli.js"
      },
      "peerDependencies": {
        "eslint": ">=7.0.0"
      }
    },
    "node_modules/eslint-config-react-native": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-react-native/-/eslint-config-react-native-4.1.0.tgz",
      "integrity": "sha512-kNND+cs+ztawH7wgajf/K6FfNshjlDsFDAkkFZF9HAXDgH1w1sNMIfTfwzufg0hOcSK7rbiL4qbG/gg/oR507Q==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "eslint": "^6.8.0",
        "eslint-config-esnext": "^4.1.0",
        "eslint-plugin-react": "^7.19.0",
        "eslint-plugin-react-native": "^3.8.1"
      },
      "peerDependencies": {
        "eslint": "^6.0.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/ansi-regex": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.1.tgz",
      "integrity": "sha512-ILlv4k/3f6vfQ4OoP2AGvirOktlQ98ZEL1k9FaQjxa3L1abBgbuTDAdPOpvbGncC0BTVQrl+OM8xZGK6tWXt7g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/cross-spawn": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      },
      "engines": {
        "node": ">=4.8"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/cross-spawn/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/eslint": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "ajv": "^6.10.0",
        "chalk": "^2.1.0",
        "cross-spawn": "^6.0.5",
        "debug": "^4.0.1",
        "doctrine": "^3.0.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^1.4.3",
        "eslint-visitor-keys": "^1.1.0",
        "espree": "^6.1.2",
        "esquery": "^1.0.1",
        "esutils": "^2.0.2",
        "file-entry-cache": "^5.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^5.0.0",
        "globals": "^12.1.0",
        "ignore": "^4.0.6",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "inquirer": "^7.0.0",
        "is-glob": "^4.0.0",
        "js-yaml": "^3.13.1",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.3.0",
        "lodash": "^4.17.14",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "natural-compare": "^1.4.0",
        "optionator": "^0.8.3",
        "progress": "^2.0.0",
        "regexpp": "^2.0.1",
        "semver": "^6.1.2",
        "strip-ansi": "^5.2.0",
        "strip-json-comments": "^3.0.1",
        "table": "^5.2.3",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/eslint-plugin-react-native": {
      "version": "3.11.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-native/-/eslint-plugin-react-native-3.11.0.tgz",
      "integrity": "sha512-7F3OTwrtQPfPFd+VygqKA2VZ0f2fz0M4gJmry/TRE18JBb94/OtMxwbL7Oqwu7FGyrdeIOWnXQbBAveMcSTZIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.7.4",
        "eslint-plugin-react-native-globals": "^0.1.1"
      },
      "peerDependencies": {
        "eslint": "^3.17.0 || ^4 || ^5 || ^6 || ^7"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/espree": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-jsx": "^5.2.0",
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/file-entry-cache": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^2.0.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/flat-cache": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^2.0.0",
        "rimraf": "2.6.3",
        "write": "1.0.3"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/flatted": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/eslint-config-react-native/node_modules/globals": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
      "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.8.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/ignore": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^4.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint-config-react-native/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/eslint-config-recommended": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-recommended/-/eslint-config-recommended-4.1.0.tgz",
      "integrity": "sha512-2evA0SX1VqtyFiExmBI2WAO4XQCKlr7wmNELE8rcT5PyZY2ixsY881ofVZWKuI/dywpgLiES1gR/XUQcnVLRzQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "eslint": "^6.8.0",
        "eslint-config-esnext": "^4.1.0",
        "eslint-config-node": "^4.1.0",
        "eslint-config-react-native": "^4.1.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/ansi-regex": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.1.tgz",
      "integrity": "sha512-ILlv4k/3f6vfQ4OoP2AGvirOktlQ98ZEL1k9FaQjxa3L1abBgbuTDAdPOpvbGncC0BTVQrl+OM8xZGK6tWXt7g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/cross-spawn": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      },
      "engines": {
        "node": ">=4.8"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/cross-spawn/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/eslint": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "ajv": "^6.10.0",
        "chalk": "^2.1.0",
        "cross-spawn": "^6.0.5",
        "debug": "^4.0.1",
        "doctrine": "^3.0.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^1.4.3",
        "eslint-visitor-keys": "^1.1.0",
        "espree": "^6.1.2",
        "esquery": "^1.0.1",
        "esutils": "^2.0.2",
        "file-entry-cache": "^5.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^5.0.0",
        "globals": "^12.1.0",
        "ignore": "^4.0.6",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "inquirer": "^7.0.0",
        "is-glob": "^4.0.0",
        "js-yaml": "^3.13.1",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.3.0",
        "lodash": "^4.17.14",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "natural-compare": "^1.4.0",
        "optionator": "^0.8.3",
        "progress": "^2.0.0",
        "regexpp": "^2.0.1",
        "semver": "^6.1.2",
        "strip-ansi": "^5.2.0",
        "strip-json-comments": "^3.0.1",
        "table": "^5.2.3",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^8.10.0 || ^10.13.0 || >=11.10.1"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/espree": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-jsx": "^5.2.0",
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/file-entry-cache": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^2.0.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/flat-cache": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^2.0.0",
        "rimraf": "2.6.3",
        "write": "1.0.3"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/flatted": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/eslint-config-recommended/node_modules/globals": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
      "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.8.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/ignore": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^4.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint-config-recommended/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.8.2.tgz",
      "integrity": "sha512-3XnC5fDyc8M4J2E8pt8pmSVRX2M+5yWMCfI/kDZwauQeFgzQOuhcRBFKjTeJagqgk4sFKxe1mvNVnaWwImx/Tg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-babel/-/eslint-plugin-babel-5.3.1.tgz",
      "integrity": "sha512-VsQEr6NH3dj664+EyxJwO4FCYm/00JhYb3Sk3ft8o+fpKuIfQ9TaW6uVUfvwMXHcf/lsnRIoyFPsLMyiWCSL/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-rule-composer": "^0.3.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": ">=4.0.0"
      }
    },
    "node_modules/eslint-plugin-es": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-es/-/eslint-plugin-es-3.0.1.tgz",
      "integrity": "sha512-GUmAsJaN4Fc7Gbtl8uOBlayo2DqhwWvEzykMHSCZHU3XdJ+NSzzZcVhXh3VxX5icqQ+oQdIEawXX8xkR3mIFmQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-utils": "^2.0.0",
        "regexpp": "^3.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      },
      "peerDependencies": {
        "eslint": ">=4.19.1"
      }
    },
    "node_modules/eslint-plugin-es/node_modules/eslint-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-2.1.0.tgz",
      "integrity": "sha512-w94dQYoauyvlDc43XnGB8lU3Zt713vNChgt4EWwhXAP2XkBvndfxF0AgIqKOOasjPIPzj9JqgwkwbCYD0/V3Zg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/eslint-plugin-es/node_modules/regexpp": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
      "integrity": "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.29.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.29.1.tgz",
      "integrity": "sha512-BbPC0cuExzhiMo4Ff1BTVwHpjjv28C5R+btTOGaCRC7UEz801up0JadwkeSk5Ued6TG34uaczuVuH6qyy5YUxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.7",
        "array.prototype.findlastindex": "^1.2.3",
        "array.prototype.flat": "^1.3.2",
        "array.prototype.flatmap": "^1.3.2",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.8.0",
        "hasown": "^2.0.0",
        "is-core-module": "^2.13.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.7",
        "object.groupby": "^1.0.1",
        "object.values": "^1.1.7",
        "semver": "^6.3.1",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-node": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-node/-/eslint-plugin-node-11.1.0.tgz",
      "integrity": "sha512-oUwtPJ1W0SKD0Tr+wqu92c5xuCeQqB3hSCHasn/ZgjFdA9iDGNkNf2Zi9ztY7X+hNuMib23LNGRm6+uN+KLE3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-plugin-es": "^3.0.0",
        "eslint-utils": "^2.0.0",
        "ignore": "^5.1.1",
        "minimatch": "^3.0.4",
        "resolve": "^1.10.1",
        "semver": "^6.1.0"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "peerDependencies": {
        "eslint": ">=5.16.0"
      }
    },
    "node_modules/eslint-plugin-node/node_modules/eslint-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-2.1.0.tgz",
      "integrity": "sha512-w94dQYoauyvlDc43XnGB8lU3Zt713vNChgt4EWwhXAP2XkBvndfxF0AgIqKOOasjPIPzj9JqgwkwbCYD0/V3Zg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/mysticatea"
      }
    },
    "node_modules/eslint-plugin-node/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-prettier": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-5.2.1.tgz",
      "integrity": "sha512-gH3iR3g4JfF+yYPaJYkN7jEl9QbweL/YfkoRlNnuIEHEz1vHVlCmWOS+eGGiRuzHQXdJFCOTxRgvju9b8VUmrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prettier-linter-helpers": "^1.0.0",
        "synckit": "^0.9.1"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint-plugin-prettier"
      },
      "peerDependencies": {
        "@types/eslint": ">=8.0.0",
        "eslint": ">=8.0.0",
        "eslint-config-prettier": "*",
        "prettier": ">=3.0.0"
      },
      "peerDependenciesMeta": {
        "@types/eslint": {
          "optional": true
        },
        "eslint-config-prettier": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.35.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.35.0.tgz",
      "integrity": "sha512-v501SSMOWv8gerHkk+IIQBkcGRGrO2nfybfj5pLxuJNFTPxxA3PSryhXTK+9pNbtkggheDdsC0E9Q8CuPk6JKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.2",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.0.19",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.8",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.0",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.11",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-native-globals": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-native-globals/-/eslint-plugin-react-native-globals-0.1.2.tgz",
      "integrity": "sha512-9aEPf1JEpiTjcFAmmyw8eiIXmcNZOqaZyHO77wgm0/dWfT/oxC1SrIq8ET38pMxHYrcB6Uew+TzUVsBeczF88g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-security": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-security/-/eslint-plugin-security-3.0.1.tgz",
      "integrity": "sha512-XjVGBhtDZJfyuhIxnQ/WMm385RbX3DBu7H1J7HNNhmB2tnGxMeqVSnYv79oAj992ayvIBZghsymwkYFS6cGH4Q==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "safe-regex": "^2.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-rule-composer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/eslint-rule-composer/-/eslint-rule-composer-0.3.0.tgz",
      "integrity": "sha512-bt+Sh8CtDmn2OajxvNO+BX7Wn4CIWMpTRm3MaiKPCQcnnlm0CS2mhui6QaoeQugs+3Kj2ESKEEGJUdVafwhiCg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/eslint-scope/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/eslint-utils": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-1.4.3.tgz",
      "integrity": "sha512-fbBN5W2xdY45KulGXmLHZ3c3FHfVYmKg0IrAKGOkT/464PQsx2UeIzfz1RmEci+KLm1bBaAzZAh8+/E+XAeZ8Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^1.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.3.0.tgz",
      "integrity": "sha512-6J72N8UNa462wa/KFODt/PJ3IU60SDpC3QXC1Hjc1BXXpfL2C9R5+AU7jhe0F6GREqVMh4Juu+NY7xn+6dipUQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/eslint/node_modules/@eslint/js": {
      "version": "8.57.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
      "integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/eslint/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/eslint/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/eslint/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/eslint/node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/eslint/node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/eslint/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/esniff": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/esniff/-/esniff-2.0.1.tgz",
      "integrity": "sha512-kTUIGKQ/mDPFoJ0oVfcmyJn4iBDRptjNVIzwIFR7tqWXdVI9xfA2RMwY/gbSpJG3lkdWNEjLap/NqVHZiJsdfg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "d": "^1.0.1",
        "es5-ext": "^0.10.62",
        "event-emitter": "^0.3.5",
        "type": "^2.7.2"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true,
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-emitter": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz",
      "integrity": "sha512-D9rRn9y7kLPnJ+hMq7S/nhvoKwwvVJahBi2BPmx3bvbsEdK3W9ii8cBSGjP+72/LnM4n6fo3+dkCX5FeTQruXA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "d": "1",
        "es5-ext": "~0.10.14"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/events/-/events-1.1.1.tgz",
      "integrity": "sha512-kEcvvCBByWXGnZy6JUlgAp2gBIUjfCAV6P6TgT1/aaQKcmuAEC4OZTV1I4EWQLz2gxZw76atuVyvHhTxvi0Flw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.x"
      }
    },
    "node_modules/exceljs": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/exceljs/-/exceljs-4.4.0.tgz",
      "integrity": "sha512-XctvKaEMaj1Ii9oDOqbW/6e1gXknSY4g/aLCDicOXqBE4M0nRWkUu0PTp++UPNzoFY12BNHMfs/VadKIS6llvg==",
      "license": "MIT",
      "dependencies": {
        "archiver": "^5.0.0",
        "dayjs": "^1.8.34",
        "fast-csv": "^4.3.1",
        "jszip": "^3.10.1",
        "readable-stream": "^3.6.0",
        "saxes": "^5.0.1",
        "tmp": "^0.2.0",
        "unzipper": "^0.10.11",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=8.3.0"
      }
    },
    "node_modules/exceljs/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/expect-utils": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.19.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.2",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.6.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "7.4.0",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.4.0.tgz",
      "integrity": "sha512-v1204w3cXu5gCDmAvgvzI6qjzZzoMWKnyVDk3ACgfswTQLYiGen+r8w0VnXnGMmzEN/g8fwIQ4JrFFd4ZP6ssg==",
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://github.com/sponsors/express-rate-limit"
      },
      "peerDependencies": {
        "express": "4 || 5 || ^5.0.0-beta.1"
      }
    },
    "node_modules/express-session": {
      "version": "1.18.0",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.18.0.tgz",
      "integrity": "sha512-m93QLWr0ju+rOwApSsyso838LQwgfs44QtOP/WBiwtAgPIo/SAh1a5c6nn2BR6mFNZehTpqKDESzP+fRHVbxwQ==",
      "license": "MIT",
      "dependencies": {
        "cookie": "0.6.0",
        "cookie-signature": "1.0.7",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie-signature": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.7.tgz",
      "integrity": "sha512-NXdYc3dLr47pBkpUCHtKSwIOQXLVn8dZEuywboCOJY/osA0wFSLlSawr3KN8qXJEyX66FcONTH8EIlVuK0yyFA==",
      "license": "MIT"
    },
    "node_modules/express-session/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express-session/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/express-validator": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.0.tgz",
      "integrity": "sha512-I2ByKD8panjtr8Y05l21Wph9xk7kk64UMyvJCl/fFM/3CTJq8isXYPLeKW/aZBCdb/LYNv63PwhY8khw8VWocA==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.21",
        "validator": "~13.12.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/ext": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/ext/-/ext-1.7.0.tgz",
      "integrity": "sha512-6hxeJYaL110a9b5TEJSj0gojyHQAmA2ch5Os+ySCiA1QGdS697XWY1pzsrSjqA9LDEEgdB/KypIlR59RcLuHYw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "type": "^2.7.2"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/external-editor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chardet": "^0.7.0",
        "iconv-lite": "^0.4.24",
        "tmp": "^0.0.33"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/external-editor/node_modules/tmp": {
      "version": "0.0.33",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "os-tmpdir": "~1.0.2"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT"
    },
    "node_modules/farmhash-modern": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/farmhash-modern/-/farmhash-modern-1.1.0.tgz",
      "integrity": "sha512-6ypT4XfgqJk/F3Yuv4SX26I3doUjt0GTG4a+JgWxXQpxXzTBq8fPUeGHfcYMMDPHJHm3yPOSjaeBwBGAHWXCdA==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/fast-csv": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/fast-csv/-/fast-csv-4.3.6.tgz",
      "integrity": "sha512-2RNSpuwwsJGP0frGsOmTb9oUF+VkFSM4SyLTDgwf2ciHWTarN0lQTC+F2f/t5J9QjW+c65VFIAAu85GsvMIusw==",
      "license": "MIT",
      "dependencies": {
        "@fast-csv/format": "4.3.5",
        "@fast-csv/parse": "4.3.6"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-diff": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.3.0.tgz",
      "integrity": "sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/fast-glob": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-uri": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.1.tgz",
      "integrity": "sha512-MWipKbbYiYI0UC7cl8m/i/IWTqfC8YXsqjzybjddLsFjStroQzsHXkc73JutMvBiXmOvapk+axIl79ig5t55Bw==",
      "license": "MIT"
    },
    "node_modules/fast-xml-parser": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.4.1.tgz",
      "integrity": "sha512-xkjOecfnKGkSsOwtZ5Pz7Us/T6mrbPQrq0nh+aCO5V9nk5NLWmasAHumTKjiPJPWANe+kAZ84Jc8ooJkzZ88Sw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        },
        {
          "type": "paypal",
          "url": "https://paypal.me/naturalintelligence"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "strnum": "^1.0.5"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      }
    },
    "node_modules/fastq": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fecha": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==",
      "license": "MIT"
    },
    "node_modules/figures": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
      "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.5"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/file-source": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/file-source/-/file-source-0.6.1.tgz",
      "integrity": "sha512-1R1KneL7eTXmXfKxC10V/9NeGOdbsAXJ+lQ//fvvcHUgtaZcZDWNJNblxAoVOyV1cj45pOtUrR3vZTBwqcW8XA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "stream-source": "0.3"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/filter-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/filter-obj/-/filter-obj-1.1.0.tgz",
      "integrity": "sha512-8rXg1ZnX7xzy2NGDVkBVaAy+lSlPNwad13BtgSlLuxfIslyt5Vg64U7tFcCt4WS1R0hvtnQybT/IyCkGZ3DpXQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/firebase-admin": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-12.4.0.tgz",
      "integrity": "sha512-3HOHqJxNmFv0JgK3voyMQgmcibhJN4LQfZfhnZGb6pcONnZxejki4nQ1twsoJlGaIvgQWBtO7rc5mh/cqlOJNA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@fastify/busboy": "^3.0.0",
        "@firebase/database-compat": "^1.0.2",
        "@firebase/database-types": "^1.0.0",
        "@types/node": "^22.0.1",
        "farmhash-modern": "^1.1.0",
        "jsonwebtoken": "^9.0.0",
        "jwks-rsa": "^3.1.0",
        "node-forge": "^1.3.1",
        "uuid": "^10.0.0"
      },
      "engines": {
        "node": ">=14"
      },
      "optionalDependencies": {
        "@google-cloud/firestore": "^7.7.0",
        "@google-cloud/storage": "^7.7.0"
      }
    },
    "node_modules/firebase-admin/node_modules/@types/node": {
      "version": "22.5.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.5.1.tgz",
      "integrity": "sha512-KkHsxej0j9IW1KKOOAA/XBA0z08UFSrRQHErzEfA3Vgq57eXIMYboIlHJuYIfd+lwCQjtKqUu3UnmKbtUc9yRw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.19.2"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fn.name": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==",
      "license": "MIT"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.6",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz",
      "integrity": "sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/fontkit": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/fontkit/-/fontkit-1.9.0.tgz",
      "integrity": "sha512-HkW/8Lrk8jl18kzQHvAw9aTHe1cqsyx5sDnxncx652+CIfhawokEPkeM3BoIC+z/Xv7a0yMr0f3pRRwhGH455g==",
      "license": "MIT",
      "dependencies": {
        "@swc/helpers": "^0.3.13",
        "brotli": "^1.3.2",
        "clone": "^2.1.2",
        "deep-equal": "^2.0.5",
        "dfa": "^1.2.0",
        "restructure": "^2.0.1",
        "tiny-inflate": "^1.0.3",
        "unicode-properties": "^1.3.1",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/for-each": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.3.tgz",
      "integrity": "sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.1.3"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/foreground-child/node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formidable": {
      "version": "3.5.1",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-3.5.1.tgz",
      "integrity": "sha512-WJWKelbRHN41m5dumb0/k8TeAx7Id/y3a+Z7QfhxP/htI9Js5zYaEDtG8uMgG0vM0lOlqnmjE99/kfpOYi/0Og==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dezalgo": "^1.0.4",
        "hexoid": "^1.0.0",
        "once": "^1.4.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==",
      "license": "MIT"
    },
    "node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs-minipass/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/fstream": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/fstream/-/fstream-1.0.12.tgz",
      "integrity": "sha512-WvJ193OHa0GHPEL+AycEJgxvBEwyfRkN1vhjca23OaPVMCaLCXTd5qAu82AjTcgP1UJmytkOKb63Ypde7raDIg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "inherits": "~2.0.0",
        "mkdirp": ">=0.5 0",
        "rimraf": "2"
      },
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/fstream/node_modules/rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.6.tgz",
      "integrity": "sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.2.0",
        "es-abstract": "^1.22.1",
        "functions-have-names": "^1.2.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gaxios/node_modules/agent-base": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.1.tgz",
      "integrity": "sha512-H0TSyFNDMomMNJQBn8wFV5YC/2eJ+VXECwOadZJT554xP6cODZHPX3H9QMQECxvrgiSOP1pHjy1sMWQVYJOUOA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/gaxios/node_modules/https-proxy-agent": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.5.tgz",
      "integrity": "sha512-1e4Wqeblerz+tMKPIq2EMGiiWW1dIjZOksyHWSUm1rmuvw/how9hBHZ38lAGj5ID4Ik6EdkOw7NmWPy6LAwalw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "^7.0.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/gaxios/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-5.3.0.tgz",
      "integrity": "sha512-FNTkdNEnBdlqF2oatizolQqNANMrcqJt6AAYt99B3y1aLLC8Hc5IOBb+ZnnzllodEEf6xMBp6wRcBbc16fa65w==",
      "license": "Apache-2.0",
      "optional": true,
      "peer": true,
      "dependencies": {
        "gaxios": "^5.0.0",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/gcp-metadata/node_modules/gaxios": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-5.1.3.tgz",
      "integrity": "sha512-95hVgBRgEIRQQQHIbnxBXeHbW4TqFk4ZDJW7wmVtvYar72FdhRIo1UGOLS2eRAKCPEdPBWu+M7+A33D9CdX9rA==",
      "license": "Apache-2.0",
      "optional": true,
      "peer": true,
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/geo-tz": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/geo-tz/-/geo-tz-8.0.2.tgz",
      "integrity": "sha512-NjEzJBzaMhO9C7lFZIsWDkVED7aLxcES3iEZOWJ97dhnDUGhEB8vhW7MaWR+2y4aWvtFV/VyuDi8Y0rUHvm4tw==",
      "license": "MIT",
      "dependencies": {
        "@turf/boolean-point-in-polygon": "^6.5.0",
        "@turf/helpers": "^6.5.0",
        "geobuf": "^3.0.2",
        "pbf": "^3.2.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/evansiroky"
      }
    },
    "node_modules/geobuf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/geobuf/-/geobuf-3.0.2.tgz",
      "integrity": "sha512-ASgKwEAQQRnyNFHNvpd5uAwstbVYmiTW0Caw3fBb509tNTqXyAAPMyFs5NNihsLZhLxU1j/kjFhkhLWA9djuVg==",
      "license": "ISC",
      "dependencies": {
        "concat-stream": "^2.0.0",
        "pbf": "^3.2.1",
        "shapefile": "~0.6.6"
      },
      "bin": {
        "geobuf2json": "bin/geobuf2json",
        "json2geobuf": "bin/json2geobuf",
        "shp2geobuf": "bin/shp2geobuf"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.0.2.tgz",
      "integrity": "sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "15.9.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.9.0.tgz",
      "integrity": "sha512-SmSKyLLKFbSr6rptvP8izbyxJL4ILwqO9Jg23UA0sDlGlu58V59D1//I3vlc0KJphVdUR7vMjHIplYnzBxorQA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.14.0",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.14.0.tgz",
      "integrity": "sha512-Y/eq+RWVs55Io/anIsm24sDS8X79Tq948zVLGaa7+KlJYYqaGwp1YI37w48nzrNi12RgnzMrQD4NzdmCowT90g==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-auth-library/node_modules/gcp-metadata": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.0.tgz",
      "integrity": "sha512-Jh/AIwwgaxan+7ZUUmRLCjtchyDiqh4KjBJ5tW3plBZb5iL/BPcso8A5DlzeD9qlw0duCamnNdpFjxwaT0KyKg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "gaxios": "^6.0.0",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-auth-library/node_modules/jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/google-auth-library/node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/google-gax": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-4.4.0.tgz",
      "integrity": "sha512-4fkXSbNy85ikO7mkD5lChLL5UfLnRBvg6z3s3THUJKI6OSbISbufMDE4S/ZH+J3mB9A2FdMXBT/hh7wTvpGAow==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/grpc-js": "^1.10.9",
        "@grpc/proto-loader": "^0.7.13",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "google-auth-library": "^9.3.0",
        "node-fetch": "^2.7.0",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.2",
        "protobufjs": "^7.3.2",
        "retry-request": "^7.0.0",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.1.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/gtoken/node_modules/jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/gtoken/node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.0.2.tgz",
      "integrity": "sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
      "license": "ISC"
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/helmet": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-7.1.0.tgz",
      "integrity": "sha512-g+HZqgfbpXdCkme/Cd/mZkV0aV3BZZZSugecH03kl38m/Kmdx8jKjBikpDj2cr+Iynv4KpYEviojNdTJActJAg==",
      "license": "MIT",
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/hexoid": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/html-entities": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.5.2.tgz",
      "integrity": "sha512-K//PSRMQk4FZ78Kyau+mZurHn3FH0Vwr+H36eE0rPbeYkRRi9YxceYPhuN60UwWorxyKHhqoAJl2OFKa4BVtaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.8",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.8.tgz",
      "integrity": "sha512-SGeBX54F94Wgu5RH3X5jsDtf4eHyRogWX1XGT3b4HuW3tQPM4AaBzoUji/4AAJNXCEOWZ5O0DgZmJw1947gD5Q==",
      "license": "MIT"
    },
    "node_modules/http-proxy": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
      "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
      "license": "MIT",
      "dependencies": {
        "eventemitter3": "^4.0.0",
        "follow-redirects": "^1.0.0",
        "requires-port": "^1.0.0"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-middleware": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-middleware/-/http-proxy-middleware-3.0.0.tgz",
      "integrity": "sha512-36AV1fIaI2cWRzHo+rbcxhe3M3jUDCNzc4D5zRl57sEWRAxdXYtw7FSQKYY6PDKssiAKjLYypbssHk+xs/kMXw==",
      "license": "MIT",
      "dependencies": {
        "@types/http-proxy": "^1.17.10",
        "debug": "^4.3.4",
        "http-proxy": "^1.18.1",
        "is-glob": "^4.0.1",
        "is-plain-obj": "^3.0.0",
        "micromatch": "^4.0.5"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==",
      "license": "MIT"
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-lazy": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-4.0.0.tgz",
      "integrity": "sha512-rKtvo6a868b5Hu3heneU+L4yEQ4jYKLtjpnPeUdK7h0yzXGmyBTypknlkCvHFBqfX9YlorEiMM6Dnq/5atfHkw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflection": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/inflection/-/inflection-1.13.4.tgz",
      "integrity": "sha512-6I/HUDeYFfuNCVS3td055BaXBwKYuzw7K3ExVMStBowKo9oOAMJIXIHvdyR3iboTCp1b+1i5DSkIZTcwIktuDw==",
      "engines": [
        "node >= 0.4.0"
      ],
      "license": "MIT"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inquirer": {
      "version": "7.3.3",
      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-7.3.3.tgz",
      "integrity": "sha512-JG3eIAj5V9CwcGvuOmoo6LB9kbAYT8HXffUl6memuszlwDC/qvFAJw49XJ5NROSFNPxp3iQg1GqkFhaY/CR0IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.1.0",
        "cli-cursor": "^3.1.0",
        "cli-width": "^3.0.0",
        "external-editor": "^3.0.3",
        "figures": "^3.0.0",
        "lodash": "^4.17.19",
        "mute-stream": "0.0.8",
        "run-async": "^2.4.0",
        "rxjs": "^6.6.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0",
        "through": "^2.3.6"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/inquirer/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/inquirer/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/inquirer/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/inquirer/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/inquirer/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/inquirer/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/internal-slot": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.7.tgz",
      "integrity": "sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.0",
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ioredis": {
      "version": "5.4.1",
      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.4.1.tgz",
      "integrity": "sha512-2YZsvl7jopIa1gaePkeMtd9rAcSjOOjPtpcLlOeusyO+XH2SK5ZcT+UCrElPP+WVIInh2TzeI4XW9ENaSLVVHA==",
      "license": "MIT",
      "dependencies": {
        "@ioredis/commands": "^1.1.1",
        "cluster-key-slot": "^1.1.0",
        "debug": "^4.3.4",
        "denque": "^2.1.0",
        "lodash.defaults": "^4.2.0",
        "lodash.isarguments": "^3.1.0",
        "redis-errors": "^1.2.0",
        "redis-parser": "^3.0.0",
        "standard-as-callback": "^2.1.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ioredis"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arguments": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.1.1.tgz",
      "integrity": "sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.4.tgz",
      "integrity": "sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-async-function": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.0.0.tgz",
      "integrity": "sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.0.4.tgz",
      "integrity": "sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.1.2.tgz",
      "integrity": "sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz",
      "integrity": "sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.1.tgz",
      "integrity": "sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.5.tgz",
      "integrity": "sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.0.2.tgz",
      "integrity": "sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.0.10.tgz",
      "integrity": "sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.0.7.tgz",
      "integrity": "sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-3.0.0.tgz",
      "integrity": "sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-promise": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-2.2.2.tgz",
      "integrity": "sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.1.4.tgz",
      "integrity": "sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.0.7.tgz",
      "integrity": "sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.4.tgz",
      "integrity": "sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.13",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.13.tgz",
      "integrity": "sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
      "license": "MIT"
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.0.2.tgz",
      "integrity": "sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.3.tgz",
      "integrity": "sha512-LvIm3/KWzS9oRFHugab7d+M/GcBXuXX5xZkzPmN+NxihdQlZUQ4dWuSV1xR/sq6upL1TJEDrfBgRepHFdBtSNQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
      "license": "MIT"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.23.9",
        "@babel/parser": "^7.23.9",
        "@istanbuljs/schema": "^0.1.3",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.2.tgz",
      "integrity": "sha512-DR33HMMr8EzwuRL8Y9D3u2BMj8+RqSE850jfGu59kS7tbmPLzGkZmVSfyCFSDxuZiEY6Rzt3T2NA/qU+NwVj1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "get-intrinsic": "^1.2.1",
        "has-symbols": "^1.0.3",
        "reflect.getprototypeof": "^1.0.4",
        "set-function-name": "^2.0.1"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/types": "^29.6.3",
        "import-local": "^3.0.2",
        "jest-cli": "^29.7.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "execa": "^5.0.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.7.0",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.7.0",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-circus/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-circus/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-circus/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-circus/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "create-jest": "^29.7.0",
        "exit": "^0.1.2",
        "import-local": "^3.0.2",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-cli/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-cli/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-cli/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-cli/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-cli/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-cli/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-config": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-jest": "^29.7.0",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-config/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-config/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-config/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-config/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-config/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-diff": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.6.3",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-diff/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-diff/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-diff/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-diff/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-diff/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-diff/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "jest-util": "^29.7.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-each/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-each/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-each/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-each/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-each/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-matcher-utils/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-message-util/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-message-util/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-message-util/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-message-util/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-message-util/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-regex-util": "^29.6.3",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-resolve/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-resolve/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-resolve/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-resolve/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-resolve/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/environment": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-leak-detector": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-resolve": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "jest-worker": "^29.7.0",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-runner/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-runner/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-runner/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-runner/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runner/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/globals": "^29.7.0",
        "@jest/source-map": "^29.6.3",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-runtime/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-runtime/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-runtime/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-runtime/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runtime/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.7.0",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-snapshot/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-snapshot/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-snapshot/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-snapshot/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-util/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-util/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-util/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-util/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-util/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-util/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-validate/node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-validate/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-validate/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-validate/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-validate/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.7.0",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-watcher/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-watcher/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-watcher/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-watcher/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jest-watcher/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watcher/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.7.0",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jju": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/jju/-/jju-1.4.0.tgz",
      "integrity": "sha512-8wb9Yw966OSxApiCt0K3yNJL8pnNeIv+OEq2YMidz4FKP6nonSRoOXc80iXY4JaN2FC11B9qsNmDsm+ZOfMROA==",
      "license": "MIT"
    },
    "node_modules/jmespath": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/jmespath/-/jmespath-0.16.0.tgz",
      "integrity": "sha512-9FzQjJ7MATs1tSpnco1K6ayiYE3figslrXA72G2HQ/n76RzvYlofyi5QM+iX4YRs/pu3yzxlVQSST23+dMDknw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/joi": {
      "version": "17.13.3",
      "resolved": "https://registry.npmjs.org/joi/-/joi-17.13.3.tgz",
      "integrity": "sha512-otDA4ldcIx+ZXsKHWmp0YizCweVRZG96J10b0FevjfuncLO1oX59THoAmHkNubYJ+9gWsYsp5k8v4ib6oDv1fA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@hapi/hoek": "^9.3.0",
        "@hapi/topo": "^5.1.0",
        "@sideway/address": "^4.1.5",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      }
    },
    "node_modules/jose": {
      "version": "4.15.9",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
      "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/jpeg-exif": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/jpeg-exif/-/jpeg-exif-1.1.4.tgz",
      "integrity": "sha512-a+bKEcCjtuW5WTdgeXFzswSrdqi0jk4XlEtZlx5A94wCoBpFjfFTbo/Tra5SpNCl/YFZPvcV1dJc+TAYeg6ROQ==",
      "license": "MIT"
    },
    "node_modules/js-beautify": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/js-beautify/-/js-beautify-1.15.1.tgz",
      "integrity": "sha512-ESjNzSlt/sWE8sciZH8kBF8BPlwXPwhR6pWKAw8bw4Bwj+iZcnKW6ONWUutJ7eObuBZQpiIb8S7OYspWrKt7rA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "config-chain": "^1.1.13",
        "editorconfig": "^1.0.4",
        "glob": "^10.3.3",
        "js-cookie": "^3.0.5",
        "nopt": "^7.2.0"
      },
      "bin": {
        "css-beautify": "js/bin/css-beautify.js",
        "html-beautify": "js/bin/html-beautify.js",
        "js-beautify": "js/bin/js-beautify.js"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/js-beautify/node_modules/abbrev": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-2.0.0.tgz",
      "integrity": "sha512-6/mh1E2u2YgEsCHdY0Yx5oW+61gZU+1vXaoiHHrpKeuRNNgFvS+/jrwHiQhB5apAf5oB7UB7E19ol2R2LKH8hQ==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/js-beautify/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/js-beautify/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/js-beautify/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/js-beautify/node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/js-beautify/node_modules/nopt": {
      "version": "7.2.1",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-7.2.1.tgz",
      "integrity": "sha512-taM24ViiimT/XntxbPyJQzCG+p4EKOpgD3mxFwW38mGjVUrfERQOeY4EDHjdnptttfHuHQXFx+lTP08Q+mLa/w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "abbrev": "^2.0.0"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/js-cookie": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.5.tgz",
      "integrity": "sha512-cEiJEAEoIbWfCZYKWhVwFuvPX1gETRYPw6LlaTKoxD3s2AkXzkCjnp6h0V77ozyqj0jakteJ4YqDJT830+lVGw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
      "license": "ISC"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "license": "(MIT OR GPL-3.0-or-later)",
      "dependencies": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "node_modules/jszip/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/jszip/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/jszip/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/jszip/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwks-rsa": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-3.1.0.tgz",
      "integrity": "sha512-v7nqlfezb9YfHHzYII3ef2a2j1XnGeSE/bK3WfumaYCqONAIstJbrEGapz4kadScZzEt7zYCN7bucj8C0Mv/Rg==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "^4.17.17",
        "@types/jsonwebtoken": "^9.0.2",
        "debug": "^4.3.4",
        "jose": "^4.14.6",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kareem": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.6.3.tgz",
      "integrity": "sha512-C3iHfuGUXK2u8/ipq9LfjFfXFxAZMQJJq7vLS45r3D9Y2xQ/m4S8zaR4zMLFWh9AsNPXmcFfUDhTEO8UIC/V6Q==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/kuler": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==",
      "license": "MIT"
    },
    "node_modules/lazystream": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lazystream/-/lazystream-1.0.1.tgz",
      "integrity": "sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==",
      "license": "MIT",
      "dependencies": {
        "readable-stream": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.6.3"
      }
    },
    "node_modules/lazystream/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/lazystream/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/lazystream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/lazystream/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "license": "MIT",
      "dependencies": {
        "immediate": "~3.0.5"
      }
    },
    "node_modules/limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "node_modules/linebreak": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/linebreak/-/linebreak-1.1.0.tgz",
      "integrity": "sha512-MHp03UImeVhB7XZtjd0E4n6+3xr5Dq/9xI/5FptGk5FrbDR3zagPa2DS6U8ks/3HjbKWG9Q1M2ufOzxV2qLYSQ==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "0.0.8",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/linebreak/node_modules/base64-js": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz",
      "integrity": "sha512-3XSA2cR/h/73EzlXXdU6YNycmYI7+kicTxks4eJg2g39biHR84slg2+des+p7iHYhbRg/udIS4TD53WabcOUkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/listenercount": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/listenercount/-/listenercount-1.0.1.tgz",
      "integrity": "sha512-3mk/Zag0+IJxeDrxSgaDPy4zZ3w05PRZeJNnlWhzFz5OkX49J4krc+A8X2d2M69vGMBEX0uyl8M+W+8gH+kBqQ==",
      "license": "ISC"
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
      "license": "MIT"
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==",
      "license": "MIT"
    },
    "node_modules/lodash.difference": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.difference/-/lodash.difference-4.5.0.tgz",
      "integrity": "sha512-dS2j+W26TQ7taQBGN8Lbbq04ssV3emRw4NY58WErlTO29pIqS0HmoT5aJ9+TUQ1N3G+JOZSji4eugsWwGp9yPA==",
      "license": "MIT"
    },
    "node_modules/lodash.escaperegexp": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.escaperegexp/-/lodash.escaperegexp-4.1.2.tgz",
      "integrity": "sha512-TM9YBvyC84ZxE3rgfefxUWiQKLilstD6k7PTGt6wfbtXF8ixIJLOL3VYyV/z+ZiPLsVxAsKAFVwWlWeb2Y8Yyw==",
      "license": "MIT"
    },
    "node_modules/lodash.flatten": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz",
      "integrity": "sha512-C5N2Z3DgnnKr0LOpv/hKCgKdb7ZZwafIrsesve6lmzvZIRZRGaZ/l6Q8+2W7NaT+ZwO3fFlSCzCzrDCFdJfZ4g==",
      "license": "MIT"
    },
    "node_modules/lodash.get": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
      "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==",
      "license": "MIT"
    },
    "node_modules/lodash.groupby": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.groupby/-/lodash.groupby-4.6.0.tgz",
      "integrity": "sha512-5dcWxm23+VAoz+awKmBaiBvzox8+RqMgFhi7UvX9DHZr2HdxHXM/Wrf8cfKpsW37RNrvtPn6hSwNqurSILbmJw==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isequal": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
      "integrity": "sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==",
      "license": "MIT"
    },
    "node_modules/lodash.isfunction": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/lodash.isfunction/-/lodash.isfunction-3.0.9.tgz",
      "integrity": "sha512-AirXNj15uRIMMPihnkInB4i3NHeb4iBtNg9WRWuK2o31S+ePwwNmDPaTL3o7dTJ+VXNZim7rFs4rxN4YU1oUJw==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnil": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/lodash.isnil/-/lodash.isnil-4.0.0.tgz",
      "integrity": "sha512-up2Mzq3545mwVnMhTDMdfoG1OurpA/s5t88JmQX809eH3C8491iu2sfKhTfhQtKY78oPNhiaHJUpT/dUDAAtng==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.isundefined": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isundefined/-/lodash.isundefined-3.0.1.tgz",
      "integrity": "sha512-MXB1is3s899/cD8jheYYE2V9qTHwKvt+npCwpD+1Sxm3Q3cECXCiYHjeHWXNwr6Q0SOBPrYUDxendrO6goVTEA==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.mergewith": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.mergewith/-/lodash.mergewith-4.6.2.tgz",
      "integrity": "sha512-GK3g5RPZWTRSeLSpgP8Xhra+pnjBC56q9FZYe1d5RN3TJ35dbkGy3YqBSMbyCrlbi+CM9Z3Jk5yTL7RCsqboyQ==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/lodash.union": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.union/-/lodash.union-4.6.0.tgz",
      "integrity": "sha512-c4pB2CdGrGdjMKYLA+XiRDO7Y0PRQbm/Gzg8qMj+QH+pFVAoTp5sBpO0odL3FjoPCGjK96p6qsP+yQoiLoOBcw==",
      "license": "MIT"
    },
    "node_modules/lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==",
      "license": "MIT"
    },
    "node_modules/logform": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/logform/-/logform-2.6.1.tgz",
      "integrity": "sha512-CdaO738xRapbKIMVn2m4F6KTj4j7ooJ8POVnebSgKo3KBz5axNXRAL7ZdRjIV6NOr2Uf4vjtRkxrFETOioCqSA==",
      "license": "MIT",
      "dependencies": {
        "@colors/colors": "1.6.0",
        "@types/triple-beam": "^1.3.2",
        "fecha": "^4.2.0",
        "ms": "^2.1.1",
        "safe-stable-stringify": "^2.3.1",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/long": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/long/-/long-5.2.3.tgz",
      "integrity": "sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==",
      "license": "Apache-2.0",
      "optional": true
    },
    "node_modules/long-timeout": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/long-timeout/-/long-timeout-0.1.1.tgz",
      "integrity": "sha512-BFRuQUqc7x2NWxfJBCyUrN8iYUYznzL9JROmRz1gZ6KlOIgmoD+njPVbb+VNn2nGMKggMsK79iUNErillsrx7w==",
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lru-memoizer": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.3.0.tgz",
      "integrity": "sha512-GXn7gyHAMhO13WSKrIiNfztwxodVsP8IoZ3XfrJV4yH2x0/OeTO/FIaAHTY5YekdGgW94njfuKmyyt1E0mR6Ug==",
      "license": "MIT",
      "dependencies": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "6.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lru-memoizer/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/lru-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/lru-queue/-/lru-queue-0.1.0.tgz",
      "integrity": "sha512-BpdYkt9EvGl8OfWHDQPISVpcl5xZthb+XPsbELj5AQXxIC8IriDZIQYjBJPEm5rS420sjZ0TLEzRcq5KdBhYrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es5-ext": "~0.10.2"
      }
    },
    "node_modules/luxon": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.5.0.tgz",
      "integrity": "sha512-rh+Zjr6DNfUYR3bPwJEnuwDdqMbxZW7LOQfUN4B54+Cl+0o5zaU9RJ6bcidfDtC1cWCZXQ+nvX8bf6bAji37QQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memoizee": {
      "version": "0.4.17",
      "resolved": "https://registry.npmjs.org/memoizee/-/memoizee-0.4.17.tgz",
      "integrity": "sha512-DGqD7Hjpi/1or4F/aYAspXKNm5Yili0QDAFAY4QYvpqpgiY6+1jOfqpmByzjxbWd/T9mChbCArXAbDAsTm5oXA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "d": "^1.0.2",
        "es5-ext": "^0.10.64",
        "es6-weak-map": "^2.0.3",
        "event-emitter": "^0.3.5",
        "is-promise": "^2.2.2",
        "lru-queue": "^0.1.0",
        "next-tick": "^1.1.0",
        "timers-ext": "^0.1.7"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/memory-pager": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
      "license": "MIT"
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==",
      "license": "MIT"
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/moment": {
      "version": "2.30.1",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.30.1.tgz",
      "integrity": "sha512-uEmtNhbDOrWPFS+hdjFCBfy9f2YoyzRpwcl+DqpC6taX21FzsTLQVbMV/W7PzNSX6x/bhC1zA3c2UQ5NzH6how==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/moment-timezone": {
      "version": "0.5.45",
      "resolved": "https://registry.npmjs.org/moment-timezone/-/moment-timezone-0.5.45.tgz",
      "integrity": "sha512-HIWmqA86KcmCAhnMAN0wuDOARV/525R2+lOLotuGFzn4HO+FH+/645z2wx0Dt3iDv6/p61SIvKnDstISainhLQ==",
      "license": "MIT",
      "dependencies": {
        "moment": "^2.29.4"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mongodb": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.8.0.tgz",
      "integrity": "sha512-HGQ9NWDle5WvwMnrvUxsFYPd3JEbqD3RgABHBQRuoCEND0qzhsd0iH5ypHsf1eJ+sXmvmyKpP+FLOKY8Il7jMw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@mongodb-js/saslprep": "^1.1.5",
        "bson": "^6.7.0",
        "mongodb-connection-string-url": "^3.0.0"
      },
      "engines": {
        "node": ">=16.20.1"
      },
      "peerDependencies": {
        "@aws-sdk/credential-providers": "^3.188.0",
        "@mongodb-js/zstd": "^1.1.0",
        "gcp-metadata": "^5.2.0",
        "kerberos": "^2.0.1",
        "mongodb-client-encryption": ">=6.0.0 <7",
        "snappy": "^7.2.2",
        "socks": "^2.7.1"
      },
      "peerDependenciesMeta": {
        "@aws-sdk/credential-providers": {
          "optional": true
        },
        "@mongodb-js/zstd": {
          "optional": true
        },
        "gcp-metadata": {
          "optional": true
        },
        "kerberos": {
          "optional": true
        },
        "mongodb-client-encryption": {
          "optional": true
        },
        "snappy": {
          "optional": true
        },
        "socks": {
          "optional": true
        }
      }
    },
    "node_modules/mongodb-connection-string-url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.1.tgz",
      "integrity": "sha512-XqMGwRX0Lgn05TDB4PyG2h2kKO/FfWJyCzYQbIhXUxz7ETt0I/FqHjUeqj37irJ+Dl1ZtU82uYyj14u2XsZKfg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@types/whatwg-url": "^11.0.2",
        "whatwg-url": "^13.0.0"
      }
    },
    "node_modules/mongoose": {
      "version": "8.6.0",
      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-8.6.0.tgz",
      "integrity": "sha512-p6VSbYKvD4ZIabqo8C0kS5eKX1Xpji+opTAIJ9wyuPJ8Y/FblgXSMnFRXnB40bYZLKPQT089K5KU8+bqIXtFdw==",
      "license": "MIT",
      "dependencies": {
        "bson": "^6.7.0",
        "kareem": "2.6.3",
        "mongodb": "6.8.0",
        "mpath": "0.9.0",
        "mquery": "5.0.0",
        "ms": "2.1.3",
        "sift": "17.1.3"
      },
      "engines": {
        "node": ">=16.20.1"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mongoose"
      }
    },
    "node_modules/mongoose/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mpath": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/mquery": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
      "license": "MIT",
      "dependencies": {
        "debug": "4.x"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/multer": {
      "version": "1.4.5-lts.1",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.1.tgz",
      "integrity": "sha512-ywPWvcDMeH+z9gQq5qYHCCy+ethsk4goepZ45GLD63fOu0YcNecQxi64nDs3qluZB+murG3/D4dJ7+dGctcCQQ==",
      "license": "MIT",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.0.0",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.4",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/multer/node_modules/concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "engines": [
        "node >= 0.8"
      ],
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/multer/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/multer/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/multer/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/multer/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/mute-stream": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
      "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/next-tick": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/next-tick/-/next-tick-1.1.0.tgz",
      "integrity": "sha512-CXdUiJembsNjuToQvxayPZF9Vqht7hewsvy2sOWafLvi2awflj9mOC6bHIg50orX8IJvWKY9wYQ/zB2kogPslQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/nice-try": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==",
      "license": "MIT"
    },
    "node_modules/node-cache": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/node-cache/-/node-cache-5.1.2.tgz",
      "integrity": "sha512-t1QzWwnk4sjLWaQAS8CHgOJ+RAfmHpxFWmc36IWTiWHQfs0w5JDMBS1b1ZxQteo0vVVuWJvIUKHDkkeK7vIGCg==",
      "license": "MIT",
      "dependencies": {
        "clone": "2.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/node-cron": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/node-cron/-/node-cron-3.0.3.tgz",
      "integrity": "sha512-dOal67//nohNgYWb+nWmg5dkFdIwDm8EpeGYMekPMrngV3637lqnX0lbUcCtgibHTz6SEz7DAIjKvKDFYCnO1A==",
      "license": "ISC",
      "dependencies": {
        "uuid": "8.3.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/node-cron/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-fetch/node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/node-fetch/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/node-fetch/node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz",
      "integrity": "sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-schedule": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/node-schedule/-/node-schedule-2.1.1.tgz",
      "integrity": "sha512-OXdegQq03OmXEjt2hZP33W2YPs/E5BcFQks46+G2gAxs4gHOIVD1u7EqlYLYSKsaIpyKCK9Gbk0ta1/gjRSMRQ==",
      "license": "MIT",
      "dependencies": {
        "cron-parser": "^4.2.0",
        "long-timeout": "0.1.1",
        "sorted-array-functions": "^1.3.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "license": "ISC",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.2.tgz",
      "integrity": "sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-is": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.6.tgz",
      "integrity": "sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.5.tgz",
      "integrity": "sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.5",
        "define-properties": "^1.2.1",
        "has-symbols": "^1.0.3",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.8.tgz",
      "integrity": "sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.0.tgz",
      "integrity": "sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/one-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
      "license": "MIT",
      "dependencies": {
        "fn.name": "1.x.x"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openapi-types": {
      "version": "12.1.3",
      "resolved": "https://registry.npmjs.org/openapi-types/-/openapi-types-12.1.3.tgz",
      "integrity": "sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.0.tgz",
      "integrity": "sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==",
      "dev": true,
      "license": "BlueOak-1.0.0"
    },
    "node_modules/pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
      "license": "(MIT AND Zlib)"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/path-source": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/path-source/-/path-source-0.1.3.tgz",
      "integrity": "sha512-dWRHm5mIw5kw0cs3QZLNmpUWty48f5+5v9nWD2dw3Y0Hf+s01Ag8iJEWV0Sm0kocE8kK27DrIowha03e1YR+Qw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "array-source": "0.0",
        "file-source": "0.6"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==",
      "license": "MIT"
    },
    "node_modules/pbf": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/pbf/-/pbf-3.3.0.tgz",
      "integrity": "sha512-XDF38WCH3z5OV/OVa8GKUNtLAyneuzbCisx7QUCF8Q6Nutx0WnJrQe5O+kOtBlLfRNUws98Y58Lblp+NJG5T4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "ieee754": "^1.1.12",
        "resolve-protobuf-schema": "^2.1.0"
      },
      "bin": {
        "pbf": "bin/pbf"
      }
    },
    "node_modules/pdfkit": {
      "version": "0.15.0",
      "resolved": "https://registry.npmjs.org/pdfkit/-/pdfkit-0.15.0.tgz",
      "integrity": "sha512-Z0dx0sEPKLW2kbThS1SWZ0iSHlRPoFMpP+oSjNrtwRjsfGivwE+r6emyEFwQG/fx1Ri0AGUHmDcGOSMMlLLnSg==",
      "license": "MIT",
      "dependencies": {
        "crypto-js": "^4.2.0",
        "fontkit": "^1.8.1",
        "jpeg-exif": "^1.1.4",
        "linebreak": "^1.0.2",
        "png-js": "^1.0.0"
      }
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT"
    },
    "node_modules/pg": {
      "version": "8.12.0",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.12.0.tgz",
      "integrity": "sha512-A+LHUSnwnxrnL/tZ+OLfqR1SxLN3c/pgDztZ47Rpbsd4jUytsTtwQo/TLPRzPJMp/1pbhYVhH9cuSZLAajNfjQ==",
      "license": "MIT",
      "dependencies": {
        "pg-connection-string": "^2.6.4",
        "pg-pool": "^3.6.2",
        "pg-protocol": "^1.6.1",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "optionalDependencies": {
        "pg-cloudflare": "^1.1.1"
      },
      "peerDependencies": {
        "pg-native": ">=3.0.1"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-cloudflare": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/pg-connection-string": {
      "version": "2.6.4",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.6.4.tgz",
      "integrity": "sha512-v+Z7W/0EO707aNMaAEfiGnGL9sxxumwLl2fJvCQtMn9Fxsg+lPpPkdcyBSv/KFgpGdYkMfn+EI1Or2EHjpgLCA==",
      "license": "MIT"
    },
    "node_modules/pg-hstore": {
      "version": "2.3.4",
      "resolved": "https://registry.npmjs.org/pg-hstore/-/pg-hstore-2.3.4.tgz",
      "integrity": "sha512-N3SGs/Rf+xA1M2/n0JBiXFDVMzdekwLZLAO0g7mpDY9ouX+fDI7jS6kTq3JujmYbtNSJ53TJ0q4G98KVZSM4EA==",
      "license": "MIT",
      "dependencies": {
        "underscore": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.8.x"
      }
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "license": "ISC",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.6.2.tgz",
      "integrity": "sha512-Htjbg8BlwXqSBQ9V8Vjtc+vzf/6fVUuak/3/XXKA9oxZprwW3IMDQTGHP+KDmVL7rtd+R1QjbnCFPuTHm3G4hg==",
      "license": "MIT",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.6.1.tgz",
      "integrity": "sha512-jPIlvgoD63hrEuihvIg+tJhoGjUsLPn6poJY9N5CnlPd91c2T18T/9zBtLxZSb1EhYxBRoZJtzScCaWlYLtktg==",
      "license": "MIT"
    },
    "node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "license": "MIT",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "license": "MIT",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.1.tgz",
      "integrity": "sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/png-js": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/png-js/-/png-js-1.0.0.tgz",
      "integrity": "sha512-k+YsbhpA9e+EFfKjTCH3VW6aoKlyNYI6NYdTfDL4CIvFnvsuO84ttonmZE7rc+v23SLTH8XX+5w/Ak9v0xGY4g=="
    },
    "node_modules/pngjs": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/pngjs/-/pngjs-5.0.0.tgz",
      "integrity": "sha512-40QW5YalBNfQo5yRYmiw7Yz6TKKVr3h6970B2YE+3fQpsWcrbj1PzJgxeJ19DRQjhMbKPIuMY8rFaXc8moolVw==",
      "license": "MIT",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/pony-cause": {
      "version": "2.1.11",
      "resolved": "https://registry.npmjs.org/pony-cause/-/pony-cause-2.1.11.tgz",
      "integrity": "sha512-M7LhCsdNbNgiLYiP4WjsfLUuFmCfnjdF6jKe2R9NKl4WFN+HZPGHJZ9lnLP7f9ZnKe3U9nuWD0szirmj+migUg==",
      "license": "0BSD",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.0.0.tgz",
      "integrity": "sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "license": "MIT",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prettier": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.3.3.tgz",
      "integrity": "sha512-i2tDNA0O5IrMO757lfrdQZCc2jPNDVntV0m/+4whiDfWaTKfMNgR7Qz0NAeGz/nRqF4m5/6CLzbP4/liHt12Ew==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/prettier-linter-helpers": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz",
      "integrity": "sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-diff": "^1.1.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/progress": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/prom-client": {
      "version": "15.1.3",
      "resolved": "https://registry.npmjs.org/prom-client/-/prom-client-15.1.3.tgz",
      "integrity": "sha512-6ZiOBfCywsD4k1BN9IX0uZhF+tJkV8q8llP64G5Hajs4JOeVLPCwpPVcpXy3BwYiUGgyJzsJJQeOIv7+hDSq8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@opentelemetry/api": "^1.4.0",
        "tdigest": "^0.1.1"
      },
      "engines": {
        "node": "^16 || ^18 || >=20"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/proto-list": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/proto-list/-/proto-list-1.2.4.tgz",
      "integrity": "sha512-vtK/94akxsTMhe0/cbfpR+syPuszcuwhqVjJq26CuNDgFGj682oRBXOP5MJpv2r7JtE8MsiepGIqvvOTBwn2vA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/proto3-json-serializer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-2.0.2.tgz",
      "integrity": "sha512-SAzp/O4Yh02jGdRc+uIrGoe87dkN/XtwxfZ4ZyafJHymd79ozp5VG5nyZ7ygqPM5+cpLDjjGnYFUkngonyDPOQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "protobufjs": "^7.2.5"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.4.0",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.4.0.tgz",
      "integrity": "sha512-mRUWCc3KUU4w1jU8sGxICXH/gNS94DvI1gxqDvBzhj1JpcsimQkYiOJfwsPUykUI5ZaspFbSgmBLER8IrQ3tqw==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/protocol-buffers-schema": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/protocol-buffers-schema/-/protocol-buffers-schema-3.6.0.tgz",
      "integrity": "sha512-TdDRD+/QNdrCGCE7v8340QyuXd4kIWIgapsE2+n/SaGiSSbomYl4TjHlvIoCWRpE7wFt02EpB35VVA2ImcBVqw==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/psl": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.9.0.tgz",
      "integrity": "sha512-E/ZsdU4HLs/68gYzgGTkMicWTLPdAftJLfJFlLUAAKZGkStNU72sZjT66SnMDVOfOWY/YAoiD7Jxa9iHvngcag==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pure-rand": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "license": "MIT"
    },
    "node_modules/qrcode": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/qrcode/-/qrcode-1.5.4.tgz",
      "integrity": "sha512-1ca71Zgiu6ORjHqFBDpnSMTR2ReToX4l1Au1VFLyVeBTFavzQnv5JxMFr3ukHVKpSrSA2MCk0lNJSykjUfz7Zg==",
      "license": "MIT",
      "dependencies": {
        "dijkstrajs": "^1.0.1",
        "pngjs": "^5.0.0",
        "yargs": "^15.3.1"
      },
      "bin": {
        "qrcode": "bin/qrcode"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/qrcode/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/qrcode/node_modules/cliui": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^6.2.0"
      }
    },
    "node_modules/qrcode/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/qrcode/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/qrcode/node_modules/wrap-ansi": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/qrcode/node_modules/y18n": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
      "license": "ISC"
    },
    "node_modules/qrcode/node_modules/yargs": {
      "version": "15.4.1",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^6.0.0",
        "decamelize": "^1.2.0",
        "find-up": "^4.1.0",
        "get-caller-file": "^2.0.1",
        "require-directory": "^2.1.1",
        "require-main-filename": "^2.0.0",
        "set-blocking": "^2.0.0",
        "string-width": "^4.2.0",
        "which-module": "^2.0.0",
        "y18n": "^4.0.0",
        "yargs-parser": "^18.1.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/qrcode/node_modules/yargs-parser": {
      "version": "18.1.3",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.0.0",
        "decamelize": "^1.2.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/query-string": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/query-string/-/query-string-7.1.3.tgz",
      "integrity": "sha512-hh2WYhq4fi8+b+/2Kg9CEge4fDPvHS534aOOvOZeQ3+Vf2mCFsaFBYj0i+iXcAq6I9Vzp5fjMFBlONvayDC1qg==",
      "license": "MIT",
      "dependencies": {
        "decode-uri-component": "^0.2.2",
        "filter-obj": "^1.1.0",
        "split-on-first": "^1.0.0",
        "strict-uri-encode": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/querystring": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/querystring/-/querystring-0.2.0.tgz",
      "integrity": "sha512-X/xY82scca2tau62i9mDyU9K+I+djTMUsvwf7xnUX5GLvVzgJybOJf4Y6o9Zx3oJK/LSXg5tTZBjwzqVPaPO2g==",
      "deprecated": "The querystring API is considered Legacy. new code should use the URLSearchParams API instead.",
      "engines": {
        "node": ">=0.4.x"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha512-iv7LhNVO047HzYR3InF6pUcUsPQiHTM1Qal51DcGSuZFBil1aBBWG5eHPNek7bvILMaYJ/8RU1e8w1AMdHmLQQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdir-glob": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/readdir-glob/-/readdir-glob-1.1.3.tgz",
      "integrity": "sha512-v05I2k7xN8zXvPD9N+z/uhXPaj0sUFCe2rcWZIpBsqxfP7xXFQ0tipAd/wjj1YxWyWtUS5IDJpOG82JKt2EAVA==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.1.0"
      }
    },
    "node_modules/readdir-glob/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/readdir-glob/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/redis-errors": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/redis-parser": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
      "license": "MIT",
      "dependencies": {
        "redis-errors": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.6.tgz",
      "integrity": "sha512-fmfw4XgoDke3kdI6h4xcUz1dG8uaiv5q9gcEwLS4Pnth2kxT+GZ7YehS1JTMGBQmtV7Y4GFGbs2re2NqhdozUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.1",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "globalthis": "^1.0.3",
        "which-builtin-type": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.1.1.tgz",
      "integrity": "sha512-X007RyZLsCJVVrjgEFVpLUTZwyOZk3oiL75ZcuYjlIWd6rNJtOjkBwQc5AsRrpbKVkxN6sklw/k/9m2jJYOf8Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.14.1",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/regenerator-transform": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.15.2.tgz",
      "integrity": "sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.4"
      }
    },
    "node_modules/regexp-tree": {
      "version": "0.1.27",
      "resolved": "https://registry.npmjs.org/regexp-tree/-/regexp-tree-0.1.27.tgz",
      "integrity": "sha512-iETxpjK6YoRWJG5o6hXLwvjYAoW+FEZn9os0PD/b6AP6xQwsa/Y7lCVgIixBbUPMfhu+i2LtdeAqVTgGlQarfA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "regexp-tree": "bin/regexp-tree"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.2",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.2.tgz",
      "integrity": "sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "set-function-name": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpp": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-2.0.1.tgz",
      "integrity": "sha512-lv0M6+TkDVniA3aD1Eg0DVpfU/booSu7Eev3TDO/mZKHBfVjgCGTV4t4buppESEYDtkArYFOxTJWv6S5C+iaNw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.5.0"
      }
    },
    "node_modules/regexpu-core": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-5.3.2.tgz",
      "integrity": "sha512-RAM5FlZz+Lhmo7db9L298p2vHP5ZywrVXmVXpmAD9GuL5MPH6t9ROw1iA/wfHkQ76Qe7AaPF0nGuim96/IrQMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/regjsgen": "^0.8.0",
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.1.0",
        "regjsparser": "^0.9.1",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regjsparser": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.9.1.tgz",
      "integrity": "sha512-dQUtn90WanSNl+7mQKcXAgZxvUe7Z0SqXlgzv0za4LwiUhyzBC58yQO3liFoUgu8GiJVInAhJjkj1N0EtQ5nkQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "jsesc": "~0.5.0"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/regjsparser/node_modules/jsesc": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-0.5.0.tgz",
      "integrity": "sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==",
      "dev": true,
      "bin": {
        "jsesc": "bin/jsesc"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "license": "Apache-2.0",
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/request/node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/request/node_modules/qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/request/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "license": "MIT",
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-main-filename": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
      "license": "ISC"
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.8",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
      "integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-cwd/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-protobuf-schema": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/resolve-protobuf-schema/-/resolve-protobuf-schema-2.1.0.tgz",
      "integrity": "sha512-kI5ffTiZWmJaS/huM8wZfEMer1eRd7oJQhDuxeCLe3t7N7mX3z94CN0xPxBQxFYQTSNz9T0i+v6inKqSdK8xrQ==",
      "license": "MIT",
      "dependencies": {
        "protocol-buffers-schema": "^3.3.1"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz",
      "integrity": "sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/restore-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/restructure": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/restructure/-/restructure-2.0.1.tgz",
      "integrity": "sha512-e0dOpjm5DseomnXx2M5lpdZ5zoHqF1+bqdMJUohoYVVQa7cBdnk7fdmeI6byNWP/kiME72EeTiSypTCVnpLiDg==",
      "license": "MIT"
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-as-promised": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/retry-as-promised/-/retry-as-promised-7.0.4.tgz",
      "integrity": "sha512-XgmCoxKWkDofwH8WddD0w85ZfqYz+ZHlr5yo+3YUCfycWawU56T5ckWXsScsj5B8tqUcIG67DxXByo3VUgiAdA==",
      "license": "MIT"
    },
    "node_modules/retry-axios": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/retry-axios/-/retry-axios-2.6.0.tgz",
      "integrity": "sha512-pOLi+Gdll3JekwuFjXO3fTq+L9lzMQGcSq7M5gIjExcl3Gu1hd4XXuf5o3+LuSBsaULQH7DiNbsqPd1chVpQGQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.7.0"
      },
      "peerDependencies": {
        "axios": "*"
      }
    },
    "node_modules/retry-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-7.0.2.tgz",
      "integrity": "sha512-dUOvLMJ0/JJYEn8NrpOaGNE7X3vpI5XlZS/u0ANjqtcZVKnIxP7IgCFwrKTxENw29emmwug53awKtaMm4i9g5w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/request": "^2.48.8",
        "extend": "^3.0.2",
        "teeny-request": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/run-async": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
      "integrity": "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/rxjs": {
      "version": "6.6.7",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^1.9.0"
      },
      "engines": {
        "npm": ">=2.0.0"
      }
    },
    "node_modules/rxjs/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "dev": true,
      "license": "0BSD"
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.2.tgz",
      "integrity": "sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "get-intrinsic": "^1.2.4",
        "has-symbols": "^1.0.3",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-regex": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/safe-regex/-/safe-regex-2.1.1.tgz",
      "integrity": "sha512-rx+x8AMzKb5Q5lQ95Zoi6ZbJqwCLkqi3XuJXp5P3rT8OEc6sZCJG5AE5dU3lsgRr/F4Bs31jSlVN+j5KrsGu9A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "regexp-tree": "~0.1.1"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.0.3.tgz",
      "integrity": "sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "es-errors": "^1.3.0",
        "is-regex": "^1.1.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-stable-stringify": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/sax": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.1.tgz",
      "integrity": "sha512-8I2a3LovHTOpm7NV5yOyO8IHqgVsfK4+UuySrXU8YXkSRX7k6hCV9b3HrkKCr3nMpgj+0bmocaJJWpvp1oc7ZA==",
      "license": "ISC"
    },
    "node_modules/saxes": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz",
      "integrity": "sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/scmp": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/scmp/-/scmp-2.1.0.tgz",
      "integrity": "sha512-o/mRQGk9Rcer/jEEw/yw4mwo3EU/NvYvp577/Btqrym9Qy5/MdWGBqipbALgd2lrdWTJ5/gqDusxfnQBxOxT2Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/semver": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/sequelize": {
      "version": "6.37.3",
      "resolved": "https://registry.npmjs.org/sequelize/-/sequelize-6.37.3.tgz",
      "integrity": "sha512-V2FTqYpdZjPy3VQrZvjTPnOoLm0KudCRXfGWp48QwhyPPp2yW8z0p0sCYZd/em847Tl2dVxJJ1DR+hF+O77T7A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/sequelize"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@types/debug": "^4.1.8",
        "@types/validator": "^13.7.17",
        "debug": "^4.3.4",
        "dottie": "^2.0.6",
        "inflection": "^1.13.4",
        "lodash": "^4.17.21",
        "moment": "^2.29.4",
        "moment-timezone": "^0.5.43",
        "pg-connection-string": "^2.6.1",
        "retry-as-promised": "^7.0.4",
        "semver": "^7.5.4",
        "sequelize-pool": "^7.1.0",
        "toposort-class": "^1.0.1",
        "uuid": "^8.3.2",
        "validator": "^13.9.0",
        "wkx": "^0.5.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependenciesMeta": {
        "ibm_db": {
          "optional": true
        },
        "mariadb": {
          "optional": true
        },
        "mysql2": {
          "optional": true
        },
        "oracledb": {
          "optional": true
        },
        "pg": {
          "optional": true
        },
        "pg-hstore": {
          "optional": true
        },
        "snowflake-sdk": {
          "optional": true
        },
        "sqlite3": {
          "optional": true
        },
        "tedious": {
          "optional": true
        }
      }
    },
    "node_modules/sequelize-cli": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/sequelize-cli/-/sequelize-cli-6.6.2.tgz",
      "integrity": "sha512-V8Oh+XMz2+uquLZltZES6MVAD+yEnmMfwfn+gpXcDiwE3jyQygLt4xoI0zG8gKt6cRcs84hsKnXAKDQjG/JAgg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cli-color": "^2.0.3",
        "fs-extra": "^9.1.0",
        "js-beautify": "^1.14.5",
        "lodash": "^4.17.21",
        "resolve": "^1.22.1",
        "umzug": "^2.3.0",
        "yargs": "^16.2.0"
      },
      "bin": {
        "sequelize": "lib/sequelize",
        "sequelize-cli": "lib/sequelize"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/sequelize-cli/node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/sequelize-cli/node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/sequelize-cli/node_modules/umzug": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/umzug/-/umzug-2.3.0.tgz",
      "integrity": "sha512-Z274K+e8goZK8QJxmbRPhl89HPO1K+ORFtm6rySPhFKfKc5GHhqdzD0SGhSWHkzoXasqJuItdhorSvY7/Cgflw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bluebird": "^3.7.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/sequelize-cli/node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sequelize-cli/node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sequelize-pool": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-7.1.0.tgz",
      "integrity": "sha512-G9c0qlIWQSK29pR/5U2JF5dDQeqqHRragoyahj/Nx4KOOQ3CPPfzxnfqFPCSB7x5UgjOgnZ61nSxz+fjDpRlJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/sequelize/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
      "license": "ISC"
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
      "license": "MIT"
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shapefile": {
      "version": "0.6.6",
      "resolved": "https://registry.npmjs.org/shapefile/-/shapefile-0.6.6.tgz",
      "integrity": "sha512-rLGSWeK2ufzCVx05wYd+xrWnOOdSV7xNUW5/XFgx3Bc02hBkpMlrd2F1dDII7/jhWzv0MSyBFh5uJIy9hLdfuw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "array-source": "0.0",
        "commander": "2",
        "path-source": "0.1",
        "slice-source": "0.4",
        "stream-source": "0.3",
        "text-encoding": "^0.6.4"
      },
      "bin": {
        "dbf2json": "bin/dbf2json",
        "shp2json": "bin/shp2json"
      }
    },
    "node_modules/shapefile/node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT"
    },
    "node_modules/sharp": {
      "version": "0.33.5",
      "resolved": "https://registry.npmjs.org/sharp/-/sharp-0.33.5.tgz",
      "integrity": "sha512-haPVm1EkS9pgvHrQ/F3Xy+hgcuMV0Wm9vfIBSiwZ05k+xgb0PkBQpGsAA/oWdDobNaZTH5ppvHtzCFbnSEwHVw==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "color": "^4.2.3",
        "detect-libc": "^2.0.3",
        "semver": "^7.6.3"
      },
      "engines": {
        "node": "^18.17.0 || ^20.3.0 || >=21.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/libvips"
      },
      "optionalDependencies": {
        "@img/sharp-darwin-arm64": "0.33.5",
        "@img/sharp-darwin-x64": "0.33.5",
        "@img/sharp-libvips-darwin-arm64": "1.0.4",
        "@img/sharp-libvips-darwin-x64": "1.0.4",
        "@img/sharp-libvips-linux-arm": "1.0.5",
        "@img/sharp-libvips-linux-arm64": "1.0.4",
        "@img/sharp-libvips-linux-s390x": "1.0.4",
        "@img/sharp-libvips-linux-x64": "1.0.4",
        "@img/sharp-libvips-linuxmusl-arm64": "1.0.4",
        "@img/sharp-libvips-linuxmusl-x64": "1.0.4",
        "@img/sharp-linux-arm": "0.33.5",
        "@img/sharp-linux-arm64": "0.33.5",
        "@img/sharp-linux-s390x": "0.33.5",
        "@img/sharp-linux-x64": "0.33.5",
        "@img/sharp-linuxmusl-arm64": "0.33.5",
        "@img/sharp-linuxmusl-x64": "0.33.5",
        "@img/sharp-wasm32": "0.33.5",
        "@img/sharp-win32-ia32": "0.33.5",
        "@img/sharp-win32-x64": "0.33.5"
      }
    },
    "node_modules/sharp/node_modules/color": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/color/-/color-4.2.3.tgz",
      "integrity": "sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1",
        "color-string": "^1.9.0"
      },
      "engines": {
        "node": ">=12.5.0"
      }
    },
    "node_modules/sharp/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/sharp/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "object-inspect": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/sift": {
      "version": "17.1.3",
      "resolved": "https://registry.npmjs.org/sift/-/sift-17.1.3.tgz",
      "integrity": "sha512-Rtlj66/b0ICeFzYTuNvX/EF1igRbbnGSvEyT79McoZa/DeGhMyC5pWKOEsZKnpkqtSeovd5FL/bjHWC3CIIvCQ==",
      "license": "MIT"
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-swizzle/node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT"
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/slice-ansi": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-2.1.0.tgz",
      "integrity": "sha512-Qu+VC3EwYLldKa1fCxuuvULvSJOKEgk9pi8dZeCVK7TqBfUNTH4sFkk4joj8afVSfAYgJoSOetjx9QWOJ5mYoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.0",
        "astral-regex": "^1.0.0",
        "is-fullwidth-code-point": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/slice-ansi/node_modules/is-fullwidth-code-point": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/slice-source": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/slice-source/-/slice-source-0.4.1.tgz",
      "integrity": "sha512-YiuPbxpCj4hD9Qs06hGAz/OZhQ0eDuALN0lRWJez0eD/RevzKqGdUx1IOMUnXgpr+sXZLq3g8ERwbAH0bCb8vg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
      "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
      "license": "MIT",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.17.1"
      }
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/sorted-array-functions": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/sorted-array-functions/-/sorted-array-functions-1.3.0.tgz",
      "integrity": "sha512-2sqgzeFlid6N4Z2fUQ1cvFmTOLRi/sEDzSQ0OKYchqgoPmQBVyM3959qYx3fpS6Esef80KjmpgPeEr028dP3OA==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sparse-bitfield": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
      "license": "MIT",
      "dependencies": {
        "memory-pager": "^1.0.2"
      }
    },
    "node_modules/speakeasy": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/speakeasy/-/speakeasy-2.0.0.tgz",
      "integrity": "sha512-lW2A2s5LKi8rwu77ewisuUOtlCydF/hmQSOJjpTqTj1gZLkNgTaYnyvfxy2WBr4T/h+9c4g8HIITfj83OkFQFw==",
      "license": "MIT",
      "dependencies": {
        "base32.js": "0.0.1"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/split-on-first": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/split-on-first/-/split-on-first-1.1.0.tgz",
      "integrity": "sha512-43ZssAJaMusuKWL8sKUBQXHWOpq8d6CfN/u1p4gUzfJkM05C8rxTmYrkIPTXapZpORA6LkkzcUulJ8FqA7Uudw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/split2": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
      "license": "ISC",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/sshpk": {
      "version": "1.18.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
      "license": "MIT",
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/standard-as-callback": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==",
      "license": "MIT"
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.0.0.tgz",
      "integrity": "sha512-iCGQj+0l0HOdZ2AEeBADlsRC+vsnDsZsbdSiH1yNSjcfKM7fdpCMfqAL/dwF5BLiw/XhRft/Wax6zQbhq2BcjQ==",
      "license": "MIT",
      "dependencies": {
        "internal-slot": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
      "integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/stream-source": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/stream-source/-/stream-source-0.3.5.tgz",
      "integrity": "sha512-ZuEDP9sgjiAwUVoDModftG0JtYiLUV8K4ljYD1VyUMRWtbVf92474o4kuuul43iZ8t/hRuiDAx1dIJSvirrK/g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/strict-uri-encode": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strict-uri-encode/-/strict-uri-encode-2.0.0.tgz",
      "integrity": "sha512-QwiXZgpRcKkhTj2Scnn++4PKtWsH0kpzZ62L2R6c/LUVYv7hVnZqcg2+sMuT6R7Jusu1vviK/MFsu6kNJfWlEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-argv": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/string-argv/-/string-argv-0.3.2.tgz",
      "integrity": "sha512-aqD2Q0144Z+/RqG52NeHEkZauTAUWJO8c6yTftGJKO3Tja5tUgIfmIl6kExvhtxSDP7fXB6DvzkfMpCd/F3G+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6.19"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.11",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.11.tgz",
      "integrity": "sha512-NUdh0aDavY2og7IbBPenWqR9exH+E26Sv8e0/eTe1tltDGZL+GtBkDAnnyBtmekfK6/Dq3MkcGtzXFEd1LQrtg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.7",
        "regexp.prototype.flags": "^1.5.2",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.9.tgz",
      "integrity": "sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.8.tgz",
      "integrity": "sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/stripe": {
      "version": "16.9.0",
      "resolved": "https://registry.npmjs.org/stripe/-/stripe-16.9.0.tgz",
      "integrity": "sha512-SgzwdMgWNe1FD1A1WevZ/wuv8b4yWz8SiG/vO7Pf4cBl0qat20Clz8Zself+tcbB+fuMkZJrjJ2WmarIgXfCow==",
      "license": "MIT",
      "dependencies": {
        "@types/node": ">=8.1.0",
        "qs": "^6.11.0"
      },
      "engines": {
        "node": ">=12.*"
      }
    },
    "node_modules/strnum": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/superagent": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-9.0.2.tgz",
      "integrity": "sha512-xuW7dzkUpcJq7QnhOsnNUgtYp3xRwpt2F7abdRYIpCsAt0hhUqia0EdxyXZQQpNmGtsCzYHryaKSV3q3GJnq7w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "component-emitter": "^1.3.0",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.4",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.0",
        "formidable": "^3.5.1",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.0"
      },
      "engines": {
        "node": ">=14.18.0"
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/supertest": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-7.0.0.tgz",
      "integrity": "sha512-qlsr7fIC0lSddmA3tzojvzubYxvlGtzumcdHgPwbFWMISQwL22MhM2Y3LNt+6w9Yyx7559VW5ab70dgphm8qQA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^9.0.1"
      },
      "engines": {
        "node": ">=14.18.0"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/swagger-jsdoc": {
      "version": "6.2.8",
      "resolved": "https://registry.npmjs.org/swagger-jsdoc/-/swagger-jsdoc-6.2.8.tgz",
      "integrity": "sha512-VPvil1+JRpmJ55CgAtn8DIcpBs0bL5L3q5bVQvF4tAW/k/9JYSj7dCpaYCAv5rufe0vcCbBRQXGvzpkWjvLklQ==",
      "license": "MIT",
      "dependencies": {
        "commander": "6.2.0",
        "doctrine": "3.0.0",
        "glob": "7.1.6",
        "lodash.mergewith": "^4.6.2",
        "swagger-parser": "^10.0.3",
        "yaml": "2.0.0-1"
      },
      "bin": {
        "swagger-jsdoc": "bin/swagger-jsdoc.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/swagger-jsdoc/node_modules/commander": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-6.2.0.tgz",
      "integrity": "sha512-zP4jEKbe8SHzKJYQmq8Y9gYjtO/POJLgIdKgV7B9qNmABVFVc+ctqSX6iXh4mCpJfRBOabiZ2YKPg8ciDw6C+Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/swagger-jsdoc/node_modules/glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/swagger-parser": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/swagger-parser/-/swagger-parser-10.0.3.tgz",
      "integrity": "sha512-nF7oMeL4KypldrQhac8RyHerJeGPD1p2xDh900GPvc+Nk7nWP6jX2FcC7WmkinMoAmoO774+AFXcWsW8gMWEIg==",
      "license": "MIT",
      "dependencies": {
        "@apidevtools/swagger-parser": "10.0.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/swagger-ui-dist": {
      "version": "5.17.14",
      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.17.14.tgz",
      "integrity": "sha512-CVbSfaLpstV65OnSjbXfVd6Sta3q3F7Cj/yYuvHMp1P90LztOLs6PfUnKEVAeiIVQt9u2SaPwv0LiH/OyMjHRw==",
      "license": "Apache-2.0"
    },
    "node_modules/swagger-ui-express": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-5.0.1.tgz",
      "integrity": "sha512-SrNU3RiBGTLLmFU8GIJdOdanJTl4TOmT27tt3bWWHppqYmAZ6IDuEuBvMU6nZq0zLEe6b/1rACXCgLZqO6ZfrA==",
      "license": "MIT",
      "dependencies": {
        "swagger-ui-dist": ">=5.0.0"
      },
      "engines": {
        "node": ">= v0.10.32"
      },
      "peerDependencies": {
        "express": ">=4.0.0 || >=5.0.0-beta"
      }
    },
    "node_modules/synckit": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.9.1.tgz",
      "integrity": "sha512-7gr8p9TQP6RAHusBOSLs46F4564ZrjV8xFmw5zCmgmhGUcw2hxsShhJ6CEiHQMgPDwAQ1fWHPM0ypc4RMAig4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@pkgr/core": "^0.1.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/unts"
      }
    },
    "node_modules/table": {
      "version": "5.4.6",
      "resolved": "https://registry.npmjs.org/table/-/table-5.4.6.tgz",
      "integrity": "sha512-wmEc8m4fjnob4gt5riFRtTu/6+4rSe12TpAELNSqHMfF3IqnA+CH37USM6/YR3qRZv7e56kAEAtd6nKZaxe0Ug==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "ajv": "^6.10.2",
        "lodash": "^4.17.14",
        "slice-ansi": "^2.1.0",
        "string-width": "^3.0.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/table/node_modules/ansi-regex": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.1.tgz",
      "integrity": "sha512-ILlv4k/3f6vfQ4OoP2AGvirOktlQ98ZEL1k9FaQjxa3L1abBgbuTDAdPOpvbGncC0BTVQrl+OM8xZGK6tWXt7g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/table/node_modules/emoji-regex": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
      "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/table/node_modules/is-fullwidth-code-point": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
      "integrity": "sha512-VHskAKYM8RfSFXwee5t5cbN5PZeq1Wrh6qd5bkyiXIf6UQcN6w/A0eXM9r6t8d+GYOh+o6ZhiEnb88LN/Y8m2w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/table/node_modules/string-width": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
      "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^7.0.1",
        "is-fullwidth-code-point": "^2.0.0",
        "strip-ansi": "^5.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/table/node_modules/strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^4.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "license": "MIT",
      "dependencies": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/tdigest": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/tdigest/-/tdigest-0.1.2.tgz",
      "integrity": "sha512-+G0LLgjjo9BZX2MfdvPfH+MKLCrxlXSYec5DaPYP1fe6Iyhf0/fSmJ0bFiZ1F8BT6cGXl2LpltQptzjXKWEkKA==",
      "license": "MIT",
      "dependencies": {
        "bintrees": "1.0.2"
      }
    },
    "node_modules/teeny-request": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-9.0.0.tgz",
      "integrity": "sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.9",
        "stream-events": "^1.0.5",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/teeny-request/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-encoding": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.6.4.tgz",
      "integrity": "sha512-hJnc6Qg3dWoOMkqP53F0dzRIgtmsAge09kxUIqGrEUS4qr5rWLckGYaQAVr+opBrIMRErGgy6f5aPnyPpyGRfg==",
      "deprecated": "no longer maintained",
      "license": "Unlicense"
    },
    "node_modules/text-hex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==",
      "license": "MIT"
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/through": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/timers-ext": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/timers-ext/-/timers-ext-0.1.8.tgz",
      "integrity": "sha512-wFH7+SEAcKfJpfLPkrgMPvvwnEtj8W4IurvEyrKsDleXnKLCDw71w8jltvfLa8Rm4qQxxT4jmDBYbJG/z7qoww==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "es5-ext": "^0.10.64",
        "next-tick": "^1.1.0"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/tiny-inflate": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz",
      "integrity": "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==",
      "license": "MIT"
    },
    "node_modules/tmp": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.3.tgz",
      "integrity": "sha512-nZD7m9iCPC5g0pYmcaxogYKggSfLsdxl8of3Q/oIbqCqLLIO9IAF0GWjX1z9NZRHPiXv8Wex4yDCaZsgEw0Y8w==",
      "license": "MIT",
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/toposort-class": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toposort-class/-/toposort-class-1.0.1.tgz",
      "integrity": "sha512-OsLcGGbYF3rMjPUf8oKktyvCiUxSbqMMS39m33MAjLTC1DVIH6x3WSt63/M77ihI09+Sdfk1AXvfhCEeUmC7mg==",
      "license": "MIT"
    },
    "node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tr46": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-4.1.1.tgz",
      "integrity": "sha512-2lv/66T7e5yNyhAAC4NaKe5nVavzuGJQVVtRYLyQ2OI8tsJ61PMLlelehb0wi2Hx6+hT/OJUWZcw8MjlSRnxvw==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/traverse": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz",
      "integrity": "sha512-iawgk0hLP3SxGKDfnDJf8wTz4p2qImnyihM5Hh/sGvQ3K37dPi/w8sRhdNIxYA1TwFwc5mDhIJq+O0RsvXBKdQ==",
      "license": "MIT/X11",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/triple-beam": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==",
      "license": "MIT",
      "engines": {
        "node": ">= 14.0.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
      "integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=16"
      },
      "peerDependencies": {
        "typescript": ">=4.2.0"
      }
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tsconfig-paths/node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tslib": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.7.0.tgz",
      "integrity": "sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==",
      "license": "0BSD"
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA==",
      "license": "Unlicense"
    },
    "node_modules/twilio": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/twilio/-/twilio-5.2.3.tgz",
      "integrity": "sha512-mJRRHdYnNoHLvbFTBGzYgSNe4RMQDQn3vfE8O6NaSbn2GKUPm6n87gfurqB9QHW2G4SZ7Ge3BKM2roqCMqHSbg==",
      "license": "MIT",
      "dependencies": {
        "axios": "^1.6.8",
        "dayjs": "^1.11.9",
        "https-proxy-agent": "^5.0.0",
        "jsonwebtoken": "^9.0.2",
        "qs": "^6.9.4",
        "scmp": "^2.1.0",
        "xmlbuilder": "^13.0.2"
      },
      "engines": {
        "node": ">=14.0"
      }
    },
    "node_modules/type": {
      "version": "2.7.3",
      "resolved": "https://registry.npmjs.org/type/-/type-2.7.3.tgz",
      "integrity": "sha512-8j+1QmAbPvLZow5Qpi6NCaN8FB60p/6x8/vfNqOk/hC+HuvFZhL4+WfekuhQLiqFZXOgQdrs3B+XxEmCc6b3FQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.2.tgz",
      "integrity": "sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.1.tgz",
      "integrity": "sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-proto": "^1.0.3",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.2.tgz",
      "integrity": "sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-proto": "^1.0.3",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.6.tgz",
      "integrity": "sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-proto": "^1.0.3",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
      "license": "MIT"
    },
    "node_modules/typescript": {
      "version": "5.5.4",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.5.4.tgz",
      "integrity": "sha512-Mtq29sKDAEYP7aljRgtPOpTvOfbwRWlS6dPRzwjdE+C0R4brX/GUyhHSecbHMFLNBLcJIPt9nl9yG5TZ1weH+Q==",
      "dev": true,
      "license": "Apache-2.0",
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "license": "MIT",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/umzug": {
      "version": "3.8.1",
      "resolved": "https://registry.npmjs.org/umzug/-/umzug-3.8.1.tgz",
      "integrity": "sha512-k0HjOc3b/s8vH24BUTvnaFiKhfWI9UQAGpqHDG+3866CGlBTB83Xs5wZ1io1mwYLj/GHvQ34AxKhbpYnWtkRJg==",
      "license": "MIT",
      "dependencies": {
        "@rushstack/ts-command-line": "^4.12.2",
        "emittery": "^0.13.0",
        "fast-glob": "^3.3.2",
        "pony-cause": "^2.1.4",
        "type-fest": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/umzug/node_modules/type-fest": {
      "version": "4.26.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.26.0.tgz",
      "integrity": "sha512-OduNjVJsFbifKb57UqZ2EMP1i4u64Xwow3NYXUtBbD4vIwJdQd4+xl8YDou1dlm4DVrtwT/7Ky8z8WyCULVfxw==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.0.2.tgz",
      "integrity": "sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.0.3",
        "which-boxed-primitive": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/underscore": {
      "version": "1.13.7",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.7.tgz",
      "integrity": "sha512-GMXzWtsc57XAtguZgaQViUOzs0KTkk8ojr3/xAxXLITqf/3EMwxC0inyETfDFjH/Krbhuep0HNbbjI9i/q3F3g==",
      "license": "MIT"
    },
    "node_modules/undici-types": {
      "version": "6.19.8",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
      "license": "MIT"
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.0.tgz",
      "integrity": "sha512-yY5PpDlfVIU5+y/BSCxAJRBIS1Zc2dDG3Ujq+sR0U+JjUevW2JhocOF+soROYDSaAezOzOKuyyixhD6mBknSmQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.1.0.tgz",
      "integrity": "sha512-qxkjQt6qjg/mYscYMC0XKRn3Rh0wFPlfxB0xkt9CfyTvpX1Ra0+rAmdX2QyAobptSEvuy4RtpPRui6XkV+8wjA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-properties": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/unicode-properties/-/unicode-properties-1.4.1.tgz",
      "integrity": "sha512-CLjCCLQ6UuMxWnbIylkisbRj31qxHPAurvena/0iwSVbQ2G1VY5/HjV0IRabOEbDHlzZlRdCrD4NhB0JtU40Pg==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.0",
        "unicode-trie": "^2.0.0"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz",
      "integrity": "sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-trie": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
      "integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
      "license": "MIT",
      "dependencies": {
        "pako": "^0.2.5",
        "tiny-inflate": "^1.0.0"
      }
    },
    "node_modules/unicode-trie/node_modules/pako": {
      "version": "0.2.9",
      "resolved": "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz",
      "integrity": "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==",
      "license": "MIT"
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unzipper": {
      "version": "0.10.14",
      "resolved": "https://registry.npmjs.org/unzipper/-/unzipper-0.10.14.tgz",
      "integrity": "sha512-ti4wZj+0bQTiX2KmKWuwj7lhV+2n//uXEotUmGuQqrbVZSEGFMbI68+c6JCQ8aAmUWYvtHEz2A8K6wXvueR/6g==",
      "license": "MIT",
      "dependencies": {
        "big-integer": "^1.6.17",
        "binary": "~0.3.0",
        "bluebird": "~3.4.1",
        "buffer-indexof-polyfill": "~1.0.0",
        "duplexer2": "~0.1.4",
        "fstream": "^1.0.12",
        "graceful-fs": "^4.2.2",
        "listenercount": "~1.0.1",
        "readable-stream": "~2.3.6",
        "setimmediate": "~1.0.4"
      }
    },
    "node_modules/unzipper/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/unzipper/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/unzipper/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/unzipper/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.0.tgz",
      "integrity": "sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.1.2",
        "picocolors": "^1.0.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url": {
      "version": "0.10.3",
      "resolved": "https://registry.npmjs.org/url/-/url-0.10.3.tgz",
      "integrity": "sha512-hzSUW2q06EqL1gKM/a+obYHLIO6ct2hwPuviqTTOcfFVc61UbfJ2Q32+uGL/HCPxKqrdGB5QUwIe7UqlDgwsOQ==",
      "license": "MIT",
      "dependencies": {
        "punycode": "1.3.2",
        "querystring": "0.2.0"
      }
    },
    "node_modules/url/node_modules/punycode": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.3.2.tgz",
      "integrity": "sha512-RofWgt/7fL5wP1Y7fxE7/EmTLzQVnB0ycyibJ0OOHIlJqTNzglYFxVwETOcIoJqJmpDXJ9xImDv+Fq34F/d4Dw==",
      "license": "MIT"
    },
    "node_modules/util": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/util/-/util-0.12.5.tgz",
      "integrity": "sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "is-arguments": "^1.0.4",
        "is-generator-function": "^1.0.7",
        "is-typed-array": "^1.1.3",
        "which-typed-array": "^1.1.2"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.4.0.tgz",
      "integrity": "sha512-ocyWc3bAHBB/guyqJQVI5o4BZkPhznPYUG2ea80Gond/BgNWpap8TOmLSeeQG7bnh2KMISxskdADG59j7zruhw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^2.0.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/validator": {
      "version": "13.12.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
      "integrity": "sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "13.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-13.0.0.tgz",
      "integrity": "sha512-9WWbymnqj57+XEuqADHrCJ2eSXzn8WXIW/YSGaZtb2WKAInQ6CHfaUUcTyyver0p8BDg5StLQq8h1vtZuwmOig==",
      "license": "MIT",
      "dependencies": {
        "tr46": "^4.1.1",
        "webidl-conversions": "^7.0.0"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz",
      "integrity": "sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.0.1",
        "is-boolean-object": "^1.1.0",
        "is-number-object": "^1.0.4",
        "is-string": "^1.0.5",
        "is-symbol": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.1.4.tgz",
      "integrity": "sha512-bppkmBSsHFmIMSl8BO9TbsyzsvGjVoppt8xUiGzwiu/bhDCGxnpOKCxgqj6GuyHE0mINMDecBFPlOm2hzY084w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.0.5",
        "is-finalizationregistry": "^1.0.2",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.1.4",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.0.2",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.15"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-module": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.1.tgz",
      "integrity": "sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==",
      "license": "ISC"
    },
    "node_modules/which-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.15.tgz",
      "integrity": "sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/winston": {
      "version": "3.14.2",
      "resolved": "https://registry.npmjs.org/winston/-/winston-3.14.2.tgz",
      "integrity": "sha512-CO8cdpBB2yqzEf8v895L+GNKYJiEq8eKlHU38af3snQBQ+sdAIUepjMSguOIJC7ICbzm0ZI+Af2If4vIJrtmOg==",
      "license": "MIT",
      "dependencies": {
        "@colors/colors": "^1.6.0",
        "@dabh/diagnostics": "^2.0.2",
        "async": "^3.2.3",
        "is-stream": "^2.0.0",
        "logform": "^2.6.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.7.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/winston-transport": {
      "version": "4.7.1",
      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.7.1.tgz",
      "integrity": "sha512-wQCXXVgfv/wUPOfb2x0ruxzwkcZfxcktz6JIMUaPLmcNhO4bZTwA/WtDWK74xV3F2dKu8YadrFv0qhwYjVEwhA==",
      "license": "MIT",
      "dependencies": {
        "logform": "^2.6.1",
        "readable-stream": "^3.6.2",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/wkx": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/wkx/-/wkx-0.5.0.tgz",
      "integrity": "sha512-Xng/d4Ichh8uN4l0FToV/258EjMGU9MGcA0HV2d9B/ZpZB3lqQm7nkOdZdm5GhKtLLhAE7PiVQwN4eN+2YJJUg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/worldpay": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/worldpay/-/worldpay-0.0.4.tgz",
      "integrity": "sha512-tnNR5XYkTc3Wgu+oDi5DEfUce6YY3ksHUht7J/GY5ELMDM5AtXeYIUQTvX6iaQzSSAOi/ECbo/adyKRNE0Y+jA==",
      "dependencies": {
        "lodash": "2.*",
        "request": "^2.45.0"
      }
    },
    "node_modules/worldpay/node_modules/lodash": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-2.4.2.tgz",
      "integrity": "sha512-Kak1hi6/hYHGVPmdyiZijoQyz5x2iGVzs6w9GYB/HiXEtylY7tIoYEROMjvM1d9nXJqPOrG2MNPMn01bJ+S0Rw==",
      "engines": [
        "node",
        "rhino"
      ],
      "license": "MIT"
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/write": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/write/-/write-1.0.3.tgz",
      "integrity": "sha512-/lg70HAjtkUgWPVZhZcm+T4hkL8Zbtp1nFNOn3lRrxnlv50SRBv7cR7RqR+GMsd3hUXy9hWBo4CHTbFTcOYwig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mkdirp": "^0.5.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml2js": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.6.2.tgz",
      "integrity": "sha512-T4rieHaC1EXcES0Kxxj4JWgaUQHDk+qwHcYOCFHfiwKz7tOVPLq7Hjq9dM1WCMhylqMEfP7hMcOIChvotiZegA==",
      "license": "MIT",
      "dependencies": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~11.0.0"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/xml2js/node_modules/xmlbuilder": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/xmlbuilder": {
      "version": "13.0.2",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-13.0.2.tgz",
      "integrity": "sha512-Eux0i2QdDYKbdbA6AM6xE4m6ZTZr4G4xF9kahI2ukSEMCzwce2eX9WlTI5J3s+NU7hpasFsr8hWIONae7LluAQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
      "license": "MIT"
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "devOptional": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "2.0.0-1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.0.0-1.tgz",
      "integrity": "sha512-W7h5dEhywMKenDJh2iX/LABkbFnBxasD27oyXWDS/feDsxiw0dD5ncXdYXgkvAsXIY2MpW/ZKkr9IU30DBdMNQ==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "devOptional": true,
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/z-schema": {
      "version": "5.0.5",
      "resolved": "https://registry.npmjs.org/z-schema/-/z-schema-5.0.5.tgz",
      "integrity": "sha512-D7eujBWkLa3p2sIpJA0d1pr7es+a7m0vFAnZLlCEKq/Ij2k0MLi9Br2UPxoxdYystm5K1yeBGzub0FlYUEWj2Q==",
      "license": "MIT",
      "dependencies": {
        "lodash.get": "^4.4.2",
        "lodash.isequal": "^4.5.0",
        "validator": "^13.7.0"
      },
      "bin": {
        "z-schema": "bin/z-schema"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "optionalDependencies": {
        "commander": "^9.4.1"
      }
    },
    "node_modules/z-schema/node_modules/commander": {
      "version": "9.5.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-9.5.0.tgz",
      "integrity": "sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "^12.20.0 || >=14"
      }
    },
    "node_modules/zip-stream": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/zip-stream/-/zip-stream-4.1.1.tgz",
      "integrity": "sha512-9qv4rlDiopXg4E69k+vMHjNN63YFMe9sZMrdlvKnCjlCRWeCBswPPMPUfx+ipsAWq1LXHe70RcbaHdJJpS6hyQ==",
      "license": "MIT",
      "dependencies": {
        "archiver-utils": "^3.0.4",
        "compress-commons": "^4.1.2",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/zip-stream/node_modules/archiver-utils": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-3.0.4.tgz",
      "integrity": "sha512-KVgf4XQVrTjhyWmx6cte4RxonPLR9onExufI1jhvw/MQ4BB6IsZD5gT8Lq+u/+pRkWna/6JoHpiQioaqFP5Rzw==",
      "license": "MIT",
      "dependencies": {
        "glob": "^7.2.3",
        "graceful-fs": "^4.2.0",
        "lazystream": "^1.0.0",
        "lodash.defaults": "^4.2.0",
        "lodash.difference": "^4.5.0",
        "lodash.flatten": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.union": "^4.6.0",
        "normalize-path": "^3.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    }
  }
}

================
File: backend/package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node src/server.js",
    "test": "jest",
    "migrate": "sequelize-cli db:migrate",
    "seed": "sequelize-cli db:seed:all",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@faker-js/faker": "^8.4.1",
    "@googlemaps/google-maps-services-js": "^3.4.0",
    "aws-sdk": "^2.1687.0",
    "axios": "^1.7.4",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^2.4.3",
    "connect-redis": "^7.1.1",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "dotenv": "^16.4.5",
    "exceljs": "^4.4.0",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.0",
    "express-session": "^1.18.0",
    "express-validator": "^7.2.0",
    "firebase-admin": "^12.4.0",
    "geo-tz": "^8.0.2",
    "helmet": "^7.1.0",
    "http-proxy-middleware": "^3.0.0",
    "ioredis": "^5.4.1",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "moment-timezone": "^0.5.45",
    "mongoose": "^8.5.3",
    "multer": "^1.4.5-lts.1",
    "node-cache": "^5.1.2",
    "node-cron": "^3.0.3",
    "node-schedule": "^2.1.1",
    "pdfkit": "^0.15.0",
    "pg": "^8.12.0",
    "pg-hstore": "^2.3.4",
    "prom-client": "^15.1.3",
    "qrcode": "^1.5.4",
    "sequelize": "^6.37.3",
    "sharp": "^0.33.5",
    "socket.io": "^4.7.5",
    "speakeasy": "^2.0.0",
    "stripe": "^16.8.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "twilio": "^5.2.2",
    "umzug": "^3.8.1",
    "uuid": "^10.0.0",
    "winston": "^3.14.2",
    "worldpay": "^0.0.4"
  },
  "description": "",
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/eslint-parser": "^7.25.1",
    "@babel/preset-env": "^7.25.4",
    "@eslint/js": "^9.9.1",
    "@typescript-eslint/eslint-plugin": "^8.3.0",
    "@typescript-eslint/parser": "^8.3.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-config-recommended": "^4.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-security": "^3.0.1",
    "globals": "^15.9.0",
    "jest": "^29.7.0",
    "prettier": "^3.3.3",
    "sequelize-cli": "^6.6.2",
    "supertest": "^7.0.0"
  }
}

================
File: backend/removeExtraBaseModels.js
================
const fs = require('fs');
const path = require('path');

const modelsDir = path.join(__dirname, 'src', 'models');

const updateModelFile = (filePath) => {
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Remove duplicate BaseModel imports
  content = content.replace(/const BaseModel = require\(['"]\.\/BaseModel['"]\);?\n/g, '');
  
  // Add BaseModel import if it doesn't exist
  if (!content.includes("const BaseModel = require('./BaseModel');")) {
    content = "const BaseModel = require('./BaseModel');\n\n" + content;
  }

  // Update the class declaration
  content = content.replace(/class (\w+) extends (Model|BaseModel)/, 'class $1 extends BaseModel');

  // Remove ModelName.init call
  content = content.replace(/\w+\.init\([^)]+\);?\n/, '');

  // Update attributes definition
  content = content.replace(/(\w+)\.attributes = ({[\s\S]+?});/, (match, className, attributes) => {
    return `${className}.attributes = ${attributes};`;
  });

  // Update module exports
  content = content.replace(/module\.exports = \w+;/, (match, className) => {
    return `module.exports = (sequelize) => {
  ${className}.init(${className}.attributes, {
    sequelize,
    modelName: '${className}',
    tableName: '${className.toLowerCase()}s', // Adjust this to match your table naming convention
  });
  return ${className};
};`;
  });

  fs.writeFileSync(filePath, content);
  console.log(`Updated ${filePath}`);
};

fs.readdirSync(modelsDir).forEach(file => {
  if (file.endsWith('.js') && file !== 'index.js' && file !== 'BaseModel.js') {
    const filePath = path.join(modelsDir, file);
    updateModelFile(filePath);
  }
});

console.log('All model files have been updated.');

================
File: backend/route-check.js
================
const fs = require('fs');
const path = require('path');

const modelsDir = path.join(__dirname, 'src', 'models');
const routesDir = path.join(__dirname, 'src', 'routes');
const controllersDir = path.join(__dirname, 'src', 'controllers');

function getFiles(dir) {
  return fs.readdirSync(dir).filter(file => file.endsWith('.js') && file !== 'index.js');
}

function checkRoutesMethods(routeFile) {
  const content = fs.readFileSync(path.join(routesDir, routeFile), 'utf8');
  const methods = ['get', 'post', 'put', 'patch', 'delete'].filter(method => content.includes(`router.${method}`));
  return methods;
}

function checkControllerMethods(controllerFile) {
  const content = fs.readFileSync(path.join(controllersDir, controllerFile), 'utf8');
  const methods = ['index', 'show', 'create', 'update', 'destroy'].filter(method => content.includes(`${method}:`));
  return methods;
}

const models = getFiles(modelsDir);
const routes = getFiles(routesDir);
const controllers = getFiles(controllersDir);

console.log('Model Check Report:');
console.log('==================');

models.forEach(model => {
  const modelName = path.parse(model).name.toLowerCase();
  console.log(`\nModel: ${modelName}`);
  
  const routeFile = routes.find(route => route.toLowerCase().includes(modelName));
  if (routeFile) {
    console.log(`  Route file: ${routeFile}`);
    const routeMethods = checkRoutesMethods(routeFile);
    console.log(`  Route methods: ${routeMethods.join(', ')}`);
  } else {
    console.log(`  Route file: Missing`);
  }
  
  const controllerFile = controllers.find(controller => controller.toLowerCase().includes(modelName));
  if (controllerFile) {
    console.log(`  Controller file: ${controllerFile}`);
    const controllerMethods = checkControllerMethods(controllerFile);
    console.log(`  Controller methods: ${controllerMethods.join(', ')}`);
  } else {
    console.log(`  Controller file: Missing`);
  }
});

console.log('\nMissing Routes or Controllers:');
console.log('==============================');
models.forEach(model => {
  const modelName = path.parse(model).name.toLowerCase();
  if (!routes.some(route => route.toLowerCase().includes(modelName))) {
    console.log(`Missing route for model: ${modelName}`);
  }
  if (!controllers.some(controller => controller.toLowerCase().includes(modelName))) {
    console.log(`Missing controller for model: ${modelName}`);
  }
});

console.log('\nUnused Routes or Controllers:');
console.log('==============================');
routes.forEach(route => {
  const routeName = path.parse(route).name.toLowerCase();
  if (!models.some(model => routeName.includes(path.parse(model).name.toLowerCase()))) {
    console.log(`Potential unused route: ${route}`);
  }
});
controllers.forEach(controller => {
  const controllerName = path.parse(controller).name.toLowerCase();
  if (!models.some(model => controllerName.includes(path.parse(model).name.toLowerCase()))) {
    console.log(`Potential unused controller: ${controller}`);
  }
});

================
File: backend/search_role_template_assignments.sh
================
#!/bin/bash

# Navigate to the backend directory
cd ~/pos-system/backend

# Use grep to search for the specific text
grep -r -i "RoleTemplateAssignments" \
    --exclude-dir=node_modules \
    --exclude-dir=.* \
    .

# Also search for any 'as' aliases that might be conflicting
grep -r -i "as: ['\"]\?RoleTemplateAssignments" \
    --exclude-dir=node_modules \
    --exclude-dir=.* \
    .

echo "Search completed."

================
File: backend/seed-errors.json
================
[
  {
    "seeder": "20240821-create-client-profile.js",
    "error": "Command failed: npx sequelize-cli db:seed --seed 20240821-create-client-profile.js\n\u001b[31mERROR:\u001b[39m column \"clientSettings\" of relation \"Clients\" does not exist\n"
  },
  {
    "seeder": "20240821-create-guest-profiles.js",
    "error": "Command failed: npx sequelize-cli db:seed --seed 20240821-create-guest-profiles.js\n\u001b[31mERROR:\u001b[39m Cannot read properties of undefined (reading 'id')\n"
  },
  {
    "seeder": "20240821-create-locations.js",
    "error": "Command failed: npx sequelize-cli db:seed --seed 20240821-create-locations.js\n\u001b[31mERROR:\u001b[39m column \"latitude\" of relation \"Locations\" does not exist\n"
  },
  {
    "seeder": "20240821-create-orders.js",
    "error": "Command failed: npx sequelize-cli db:seed --seed 20240821-create-orders.js\n\u001b[31mERROR:\u001b[39m Cannot read properties of undefined (reading 'id')\n"
  },
  {
    "seeder": "20240821-create-test-pos-profile.js",
    "error": "Command failed: npx sequelize-cli db:seed --seed 20240821-create-test-pos-profile.js\n\u001b[31mERROR:\u001b[39m column \"posProvider\" of relation \"PosProfiles\" does not exist\n"
  },
  {
    "seeder": "20240822000400-seed-global-settings.js",
    "error": "Command failed: npx sequelize-cli db:seed --seed 20240822000400-seed-global-settings.js\n\u001b[31mERROR:\u001b[39m Cannot read properties of undefined (reading 'map')\n"
  }
]

================
File: backend/ts_to_js_converter.py
================
import os
import re

def ts_to_js(content):
    # Remove type annotations
    content = re.sub(r': \w+', '', content)
    content = re.sub(r'<\w+>', '', content)
    
    # Convert imports
    content = re.sub(r'import (.*) from ["\'](.*)["\'](;?)', r'const \1 = require("\2")\3', content)
    
    # Convert exports
    content = re.sub(r'export const', 'exports.', content)
    content = re.sub(r'export default', 'module.exports =', content)
    
    # Convert interface to JSDoc
    content = re.sub(r'interface (\w+) {([^}]*)}', r'/**\n * @typedef {Object} \1\n\2 */', content)
    
    # Convert type to JSDoc
    content = re.sub(r'type (\w+) =', r'/** @typedef', content)
    
    # Add basic JSDoc for functions
    content = re.sub(r'(async )?function (\w+)\((.*?)\)', r'/**\n * @param {Object} params\n */\n\1function \2(\3)', content)
    
    return content

def process_directory(directory):
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('.ts'):
                file_path = os.path.join(root, file)
                new_file_path = file_path[:-3] + '.js'
                
                with open(file_path, 'r') as f:
                    content = f.read()
                
                new_content = ts_to_js(content)
                
                with open(new_file_path, 'w') as f:
                    f.write(new_content)
                
                os.remove(file_path)
                print(f"Converted {file_path} to {new_file_path}")

# Replace 'path/to/your/backend' with the actual path to your backend directory
backend_path = 'pos-system/backend'
process_directory(backend_path)

print("Conversion complete!")

================
File: backend/updateModels.js
================
const fs = require('fs');
const path = require('path');

const modelsDir = path.join(__dirname, 'src', 'models');

const updateModelFile = (filePath) => {
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Remove unexpected semicolons
  content = content.replace(/;\s*\};/g, '\n};');
  
  fs.writeFileSync(filePath, content);
  console.log(`Updated ${filePath}`);
};

fs.readdirSync(modelsDir).forEach(file => {
  if (file.endsWith('.js') && file !== 'index.js' && file !== 'BaseModel.js') {
    const filePath = path.join(modelsDir, file);
    updateModelFile(filePath);
  }
});

console.log('All model files have been updated.');

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="description" content="POS System for efficient business management">
    <title>POS System</title>
    <link rel="stylesheet" href="%PUBLIC_URL%/index.css" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

================
File: frontend/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: frontend/src/api/abTestApi.ts
================
import { ABTest } from '../types/abTestTypes';
import apiClient from './apiClient';

export const abTestApi = {
  getABTests: async (): Promise<ABTest[]> => {
    try {
      const response = await apiClient.get<ABTest[]>('/ab-tests');
      return response.data;
    } catch (error) {
      console.error('Error fetching AB tests:', error);
      throw error;
    }
  },

  getABTest: async (id: number): Promise<ABTest> => {
    try {
      const response = await apiClient.get<ABTest>(`/ab-tests/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching AB test with id ${id}:`, error);
      throw error;
    }
  },

  createABTest: async (abTest: Omit<ABTest, 'id'>): Promise<ABTest> => {
    try {
      const response = await apiClient.post<ABTest>('/ab-tests', abTest);
      return response.data;
    } catch (error) {
      console.error('Error creating AB test:', error);
      throw error;
    }
  },

  updateABTest: async (abTest: ABTest): Promise<ABTest> => {
    try {
      const response = await apiClient.put<ABTest>(`/ab-tests/${abTest.id}`, abTest);
      return response.data;
    } catch (error) {
      console.error(`Error updating AB test with id ${abTest.id}:`, error);
      throw error;
    }
  },

  deleteABTest: async (id: number): Promise<void> => {
    try {
      await apiClient.delete(`/ab-tests/${id}`);
    } catch (error) {
      console.error(`Error deleting AB test with id ${id}:`, error);
      throw error;
    }
  },

  getABTestResults: async (id: number): Promise<any> => {
    try {
      const response = await apiClient.get(`/ab-tests/${id}/results`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching results for AB test with id ${id}:`, error);
      throw error;
    }
  },
};

================
File: frontend/src/api/apiClient.ts
================
import axios, {
  AxiosInstance,
  InternalAxiosRequestConfig,
  AxiosResponse,
} from 'axios';

const apiClient: AxiosInstance = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL || '/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    // You can add auth token here
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers = config.headers || {};
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor
apiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401) {
      // Handle unauthorized access
      // e.g., redirect to login page
    }
    return Promise.reject(error);
  }
);

export default apiClient;

================
File: frontend/src/api/authApi.ts
================
import apiClient from './apiClient';
import { User } from '../types/authTypes';

export const authApi = {
  login: async (email: string, password: string): Promise<{ token: string; user: User }> => {
    const response = await apiClient.post('/auth/login', { email, password });
    return response.data;
  },

  getCurrentUser: async (): Promise<User> => {
    const response = await apiClient.get('/auth/me');
    return response.data;
  },
};

================
File: frontend/src/api/axios.ts
================
import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios';
import { store } from '../redux/store';
import refreshTokenAction, { logout } from '../redux/slices/authSlice'; // Corrected import
import { handleApiError } from '../utils/errorHandler';

const axiosInstance = axios.create({
  baseURL: process.env.REACT_APP_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

axiosInstance.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    const token = store.getState().auth.token; // Ensure auth state has 'token' property
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error: AxiosError) => {
    handleApiError(error);
    return Promise.reject(error);
  }
);

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as InternalAxiosRequestConfig & {
      _retry?: boolean;
    };

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        const action = await store.dispatch(refreshTokenAction({}));
        if (refreshTokenAction.fulfilled.match(action)) {
          return axiosInstance(originalRequest);
        }
      } catch (refreshError) {
        store.dispatch(logout());
        if (refreshError instanceof Error || axios.isAxiosError(refreshError)) {
          handleApiError(refreshError);
        } else {
          console.error('Unknown refresh token error:', refreshError);
        }
        return Promise.reject(refreshError);
      }
    }

    handleApiError(error);
    return Promise.reject(error);
  }
);

export default axiosInstance;

================
File: frontend/src/api/axiosInstance.ts
================
import axios from 'axios';
import { getSubdomain } from '../utils/subdomain';

const axiosInstance = axios.create({
  baseURL: process.env.REACT_APP_API_URL,
});

axiosInstance.interceptors.request.use((config) => {
  const subdomain = getSubdomain();
  if (subdomain) {
    config.headers['X-Subdomain'] = subdomain;
  }
  return config;
});

export default axiosInstance;

================
File: frontend/src/api/brandingApi.ts
================
import axios from './axios';
import { BrandingProfile, Wallet, Discount, LoyaltyReward } from '../types';

export const fetchBrandingProfiles = async (
  clientId: number
): Promise<BrandingProfile[]> => {
  const response = await axios.get(`/branding/client/${clientId}`);
  return response.data;
};

export const saveBrandingProfile = async (
  profile: BrandingProfile
): Promise<BrandingProfile> => {
  const response = profile.id
    ? await axios.put(`/branding/client/${profile.clientId}`, profile)
    : await axios.post(`/branding/client/${profile.clientId}`, profile);
  return response.data;
};

export const uploadLogo = async (
  clientId: number,
  file: File
): Promise<string> => {
  const formData = new FormData();
  formData.append('file', file);
  formData.append('clientId', clientId.toString());

  const response = await axios.post('/branding/upload-logo', formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  });

  return response.data.url;
};

export const getWalletDetails = (clientId: number): Promise<Wallet> => {
  return axios.get(`/wallet/${clientId}`).then((response) => response.data);
};

export const getClientDiscounts = (clientId: number): Promise<Discount[]> => {
  return axios.get(`/discounts/${clientId}`).then((response) => response.data);
};

export const getLoyaltyRewards = (
  clientId: number
): Promise<LoyaltyReward[]> => {
  return axios
    .get(`/loyalty-rewards/${clientId}`)
    .then((response) => response.data);
};

================
File: frontend/src/api/cateringOrderApi.ts
================
import apiClient from './apiClient';
import { OrderStatistics } from '../types/cateringOrderTypes';

export const cateringOrderApi = {
  // ... other methods

  getOrderStatistics: async (clientId: string, startDate: string, endDate: string): Promise<OrderStatistics> => {
    const response = await apiClient.get(`/catering-orders/statistics/${clientId}`, {
      params: { startDate, endDate },
    });
    return response.data;
  },
};

================
File: frontend/src/api/challengeApi.ts
================
import apiClient from './axios';
import { Challenge } from '../types/challengeTypes';

export const getChallenges = async (): Promise<Challenge[]> => {
  const response = await apiClient.get<Challenge[]>('/api/challenges');
  return response.data;
};

export const createChallenge = async (
  challengeData: Omit<Challenge, 'id' | 'createdAt' | 'updatedAt'>
): Promise<Challenge> => {
  const response = await apiClient.post<Challenge>(
    '/api/challenges',
    challengeData
  );
  return response.data;
};

export const updateChallenge = async (
  id: number,
  challengeData: Partial<Challenge>
): Promise<Challenge> => {
  const response = await apiClient.put<Challenge>(
    `/api/challenges/${id}`,
    challengeData
  );
  return response.data;
};

export const deleteChallenge = async (id: number): Promise<void> => {
  await apiClient.delete(`/api/challenges/${id}`);
};

export const getChallengesByLocation = async (
  locationId: number
): Promise<Challenge[]> => {
  const response = await apiClient.get<Challenge[]>(
    `/api/challenges/location/${locationId}`
  );
  return response.data;
};

export const getChallengesByClient = async (
  clientId: number
): Promise<Challenge[]> => {
  const response = await apiClient.get<Challenge[]>(
    `/api/challenges/client/${clientId}`
  );
  return response.data;
};

================
File: frontend/src/api/clientApi.ts
================
import axios from 'axios';
import {
  Client,
  ClientPreferences,
  ClientBranding,
} from '../types/clientTypes';

const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || 'https://api.eatsuite.net';

// Use API_BASE_URL in your axios calls
const apiClient = axios.create({
  baseURL: API_BASE_URL,
});

// Replace all axios calls with apiClient
export const fetchClientId = async (): Promise<number | null> => {
  try {
    const response = await apiClient.get<number>('/api/clients/get-client-id');
    return response.data;
  } catch (error) {
    console.error('Error fetching client ID:', error);
    return null;
  }
};

export const updateClientDetails = async (
  clientId: number,
  clientData: Partial<Client>
): Promise<Client | null> => {
  try {
    const response = await apiClient.put<Client>(
      `/api/clients/${clientId}`,
      clientData
    );
    return response.data;
  } catch (error) {
    console.error('Error updating client details:', error);
    return null;
  }
};

export const deleteClient = async (clientId: number): Promise<boolean> => {
  try {
    await apiClient.delete(`/api/clients/${clientId}`);
    return true;
  } catch (error) {
    console.error('Error deleting client:', error);
    return false;
  }
};

export const fetchClientBranding = async (): Promise<ClientBranding> => {
  try {
    const response = await apiClient.get('/api/client-branding');
    return response.data;
  } catch (error) {
    throw new Error('Failed to fetch client branding');
  }
};

export const updateClientBranding = async (
  brandingData: ClientBranding
): Promise<ClientBranding> => {
  try {
    const response = await apiClient.put('/api/client-branding', brandingData);
    return response.data;
  } catch (error) {
    throw new Error('Failed to update client branding');
  }
};

export const createClient = async (clientData: Partial<Client>) => {
  try {
    const response = await apiClient.post<Client>('/api/clients', clientData);
    return response.data;
  } catch (error) {
    throw new Error('Failed to create client');
  }
};

export const updateClientPreferences = async (
  clientId: string,
  preferences: Partial<ClientPreferences>
): Promise<Client> => {
  const response = await apiClient.put<Client>(
    `/api/clients/${clientId}/preferences`,
    preferences
  );
  return response.data;
};

export const fetchClientBySubdomain = async (
  subdomain: string
): Promise<Client> => {
  try {
    const response = await apiClient.get<Client>(
      `/api/clients/subdomain/${subdomain}`
    );
    return response.data;
  } catch (error) {
    console.error('Error fetching client by subdomain:', error);
    throw error;
  }
};

================
File: frontend/src/api/dashboardApi.ts
================
import axiosInstance from './axios';
import { DashboardStat } from '../types';

export const fetchDashboardStats = async (): Promise<DashboardStat[]> => {
  try {
    const response = await axiosInstance.get<DashboardStat[]>(
      '/api/dashboard/stats'
    );
    return response.data;
  } catch (error) {
    throw new Error('Failed to fetch dashboard stats');
  }
};

================
File: frontend/src/api/discountApi.ts
================
import { apiCall } from '../services/api';
import { Discount } from '../types';

export const getDiscounts = () =>
  apiCall<Discount[]>({ url: '/discounts', method: 'GET' });

export const createDiscount = (discount: Omit<Discount, 'id' | 'usageCount'>) =>
  apiCall<Discount>({ url: '/discounts', method: 'POST', data: discount });

export const updateDiscount = (id: number, discount: Partial<Discount>) =>
  apiCall<Discount>({ url: `/discounts/${id}`, method: 'PUT', data: discount });

export const deleteDiscount = (id: number) =>
  apiCall<void>({ url: `/discounts/${id}`, method: 'DELETE' });

export const applyDiscount = (code: string, cartTotal: number) =>
  apiCall<{ discountedTotal: number; appliedDiscount: Discount }>({
    url: '/discounts/apply',
    method: 'POST',
    data: { code, cartTotal },
  });

export const syncDiscountsFromPOS = (locationId: number) =>
  apiCall<void>({
    url: '/discounts/sync-from-pos',
    method: 'POST',
    data: { locationId },
  });

export const syncDiscountsForAllLocations = () =>
  apiCall<void>({ url: '/discounts/sync-all-locations', method: 'POST' });

export const fetchDiscountsByLocation = (clientId: number) =>
  apiCall<Discount[]>({
    url: `/discounts/by-location/${clientId}`,
    method: 'GET',
  });

================
File: frontend/src/api/guestApi.ts
================
import apiClient from './apiClient';
import { Reward, CartItem } from '../types';

export const fetchGuestRewards = async (guestId: number): Promise<Reward[]> => {
  try {
    const response = await apiClient.get(`/api/guests/${guestId}/rewards`);
    return response.data;
  } catch (error) {
    throw new Error('Failed to fetch guest rewards');
  }
};

export const checkInventory = async (cartItems: CartItem[]): Promise<boolean> => {
  try {
    const response = await apiClient.post('/api/check-inventory', {
      items: cartItems,
    });
    return response.data.inStock;
  } catch (error) {
    throw new Error('Failed to check inventory');
  }
};

export const getEstimatedPrepTime = async (cartItems: CartItem[]): Promise<string> => {
  try {
    const response = await apiClient.post('/api/estimated-prep-time', {
      items: cartItems,
    });
    return response.data.estimatedTime;
  } catch (error) {
    throw new Error('Failed to get estimated prep time');
  }
};

================
File: frontend/src/api/inventoryApi.ts
================
import axios from 'axios';
import { InventoryItem } from '../types';

const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';

export const fetchInventoryItems = async (): Promise<InventoryItem[]> => {
  try {
    const response = await axios.get<InventoryItem[]>(
      `${API_BASE_URL}/inventory`
    );
    return response.data;
  } catch (error) {
    console.error('Error fetching inventory items:', error);
    throw error;
  }
};

export const getInventoryItemById = async (
  id: number
): Promise<InventoryItem> => {
  try {
    const response = await axios.get<InventoryItem>(
      `${API_BASE_URL}/inventory/${id}`
    );
    return response.data;
  } catch (error) {
    console.error(`Error fetching inventory item with id ${id}:`, error);
    throw error;
  }
};

export const createInventoryItem = async (
  itemData: Partial<InventoryItem>
): Promise<InventoryItem> => {
  try {
    const response = await axios.post<InventoryItem>(
      `${API_BASE_URL}/inventory`,
      itemData
    );
    return response.data;
  } catch (error) {
    console.error('Error creating inventory item:', error);
    throw error;
  }
};

export const updateInventoryItem = async (
  id: number,
  itemData: Partial<InventoryItem>
): Promise<InventoryItem> => {
  try {
    const response = await axios.put<InventoryItem>(
      `${API_BASE_URL}/inventory/${id}`,
      itemData
    );
    return response.data;
  } catch (error) {
    console.error(`Error updating inventory item with id ${id}:`, error);
    throw error;
  }
};

export const deleteInventoryItem = async (id: number): Promise<void> => {
  try {
    await axios.delete(`${API_BASE_URL}/inventory/${id}`);
  } catch (error) {
    console.error(`Error deleting inventory item with id ${id}:`, error);
    throw error;
  }
};

export const updateInventoryQuantity = async (
  id: number,
  quantity: number
): Promise<InventoryItem> => {
  try {
    const response = await axios.patch<InventoryItem>(
      `${API_BASE_URL}/inventory/${id}/quantity`,
      { quantity }
    );
    return response.data;
  } catch (error) {
    console.error(
      `Error updating quantity for inventory item with id ${id}:`,
      error
    );
    throw error;
  }
};

================
File: frontend/src/api/locationApi.ts
================
import { Location, LocationCreateData } from '../types/locationTypes';
import apiClient from './apiClient';

export const locationApi = {
  getLocations: async (): Promise<Location[]> => {
    try {
      const response = await apiClient.get<Location[]>('/locations');
      return response.data;
    } catch (error) {
      console.error('Error fetching locations:', error);
      throw error;
    }
  },

  getLocation: async (id: number): Promise<Location> => {
    try {
      const response = await apiClient.get<Location>(`/locations/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching location with id ${id}:`, error);
      throw error;
    }
  },

  createLocation: async (location: LocationCreateData): Promise<Location> => {
    try {
      const response = await apiClient.post<Location>('/locations', location);
      return response.data;
    } catch (error) {
      console.error('Error creating location:', error);
      throw error;
    }
  },

  updateLocation: async (location: Location): Promise<Location> => {
    try {
      const response = await apiClient.put<Location>(`/locations/${location.id}`, location);
      return response.data;
    } catch (error) {
      console.error(`Error updating location with id ${location.id}:`, error);
      throw error;
    }
  },

  deleteLocation: async (id: number): Promise<void> => {
    try {
      await apiClient.delete(`/locations/${id}`);
    } catch (error) {
      console.error(`Error deleting location with id ${id}:`, error);
      throw error;
    }
  },

  getLocationMenu: async (id: number): Promise<any> => {
    try {
      const response = await apiClient.get(`/locations/${id}/menu`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching menu for location with id ${id}:`, error);
      throw error;
    }
  },

  getLocationOrders: async (id: number): Promise<any> => {
    try {
      const response = await apiClient.get(`/locations/${id}/orders`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching orders for location with id ${id}:`, error);
      throw error;
    }
  },
};

================
File: frontend/src/api/loyaltyApi.ts
================
import apiClient from './axios';
import { LoyaltyReward } from '../types';

interface LoyaltyProgramData {
  tiers: { name: string; pointThreshold: number }[];
  pointsPerDollar: number;
}

interface LoyaltyChallengeData {
  name: string;
  description: string;
  pointReward: number;
  startDate: string;
  endDate: string;
}

// Fetch loyalty rewards by guest ID
export const fetchLoyaltyRewards = async (
  guestId: number
): Promise<LoyaltyReward[]> => {
  const response = await apiClient.get<LoyaltyReward[]>(
    `/api/loyalty/${guestId}`
  );
  return response.data;
};

// Update loyalty program
export const updateLoyaltyProgram = async (
  clientId: number,
  data: LoyaltyProgramData
): Promise<void> => {
  await apiClient.put(`/api/loyalty/${clientId}`, data);
};

export const upsertLoyaltyChallenge = async (
  challengeData: LoyaltyChallengeData
): Promise<void> => {
  await apiClient.post('/api/loyalty/challenge', challengeData);
};

// Delete a loyalty challenge
export const deleteLoyaltyChallenge = async (
  challengeId: number
): Promise<void> => {
  await apiClient.delete(`/api/loyalty/challenge/${challengeId}`);
};

================
File: frontend/src/api/loyaltyChallengeApi.ts
================
import apiClient from './axios';
import { LoyaltyChallenge, LoyaltyChallengeProgress } from '../types/loyaltyTypes';

export const getLoyaltyChallenges = async (): Promise<LoyaltyChallenge[]> => {
  const response = await apiClient.get('/api/loyalty-challenges');
  return response.data;
};

export const createLoyaltyChallenge = async (
  challenge: Omit<LoyaltyChallenge, 'id'>
): Promise<LoyaltyChallenge> => {
  const response = await apiClient.post('/api/loyalty-challenges', challenge);
  return response.data;
};

export const updateLoyaltyChallenge = async (
  id: number,
  challenge: Partial<LoyaltyChallenge>
): Promise<LoyaltyChallenge> => {
  const response = await apiClient.put(
    `/api/loyalty-challenges/${id}`,
    challenge
  );
  return response.data;
};

export const deleteLoyaltyChallenge = async (id: number): Promise<void> => {
  await apiClient.delete(`/api/loyalty-challenges/${id}`);
};

export const getGuestChallengeProgress = async (
  guestId: number
): Promise<LoyaltyChallengeProgress[]> => {
  const response = await apiClient.get(
    `/api/loyalty-challenges/progress/${guestId}`
  );
  return response.data;
};

================
File: frontend/src/api/menuApi.ts
================
import apiClient from './apiClient';
import { Menu, MenuStatistics } from '../types/menuTypes';

export const menuApi = {
  getMenu: async (clientId: string): Promise<Menu> => {
    try {
      const response = await apiClient.get(`/menus/${clientId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching menu for client ${clientId}:`, error);
      throw error;
    }
  },

  getMenuStatistics: async (clientId: string): Promise<MenuStatistics> => {
    try {
      const response = await apiClient.get(`/menus/statistics/${clientId}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching menu statistics for client ${clientId}:`, error);
      throw error;
    }
  },

  // Add other API methods as needed
};

================
File: frontend/src/api/metricsApi.ts
================
import axios from 'axios';
import { RealtimeMetrics } from '../types';

export const fetchRealtimeMetrics = async (
  clientId: string
): Promise<{ data: RealtimeMetrics }> => {
  const response = await axios.get(`/api/clients/${clientId}/realtime-metrics`);
  return response.data;
};

================
File: frontend/src/api/orderApi.ts
================
import api from './axios';
import { Order, OrderItem } from '../types';

export const createOrder = async (orderData: Partial<Order>) => {
  try {
    return await api.post<Order>('/orders', orderData);
  } catch (error) {
    throw new Error('Failed to create order');
  }
};

export const getActiveOrders = async () => {
  try {
    return await api.get<Order[]>('/orders/active');
  } catch (error) {
    throw new Error('Failed to fetch active orders');
  }
};

export const cancelOrder = async (orderId: string) => {
  try {
    return await api.post<Order>(`/orders/${orderId}/cancel`);
  } catch (error) {
    throw new Error(`Failed to cancel order ${orderId}`);
  }
};

export const markItemOutOfStock = async (orderId: string, itemId: string) => {
  try {
    return await api.post<OrderItem>(
      `/orders/${orderId}/items/${itemId}/out-of-stock`
    );
  } catch (error) {
    throw new Error(`Failed to mark item ${itemId} out of stock for order ${orderId}`);
  }
};

// Add other order-related API calls as needed

================
File: frontend/src/api/posIntegrationApi.ts
================
import apiClient from './apiClient';

export const fetchPOSIntegrations = async () => {
  return await apiClient.get('/api/pos-integrations');
};

================
File: frontend/src/api/posSettingsApi.ts
================
import axios from 'axios';

export const fetchPOSSettings = async () => {
  try {
    const response = await axios.get('/api/pos-settings');
    return response.data;
  } catch (error) {
    throw new Error('Failed to fetch POS settings');
  }
};

export const updatePOSSettings = async (settings: {
  modifierSendMethod: string;
}) => {
  try {
    const response = await axios.put('/api/pos-settings', settings);
    return response.data;
  } catch (error) {
    throw new Error('Failed to update POS settings');
  }
};

================
File: frontend/src/api/revenueApi.ts
================
import api from '../services/api';

export const fetchRevenueData = async (dateRange: { startDate: string; endDate: string }) => {
  const response = await api.get('/revenue', { params: dateRange });
  return response.data;
};

================
File: frontend/src/api/reviewApi.ts
================
import axios from 'axios';
import { Review, ReviewCreateData } from '../types/reviewTypes';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';

export const createReview = async (
  reviewData: ReviewCreateData
): Promise<Review> => {
  const response = await axios.post<Review>('/api/reviews', reviewData);
  return response.data;
};

export const getReviewsForMenuItem = async (menuItemId: number) => {
  const response = await axios.get(`${API_URL}/reviews/menuItem/${menuItemId}`);
  return response.data;
};

export const getPendingReviews = async () => {
  const response = await axios.get(`${API_URL}/reviews/pending`);
  return response.data;
};

export const approveReview = async (reviewId: number) => {
  const response = await axios.put(`${API_URL}/reviews/approve/${reviewId}`);
  return response.data;
};

export const deleteReview = async (reviewId: number) => {
  await axios.delete(`${API_URL}/reviews/${reviewId}`);
};

================
File: frontend/src/api/serviceFeeApi.ts
================
import api from './axios';
import { ServiceFee } from '../types/serviceFeeTypes';
import logger from '../utils/logger';

export const ServiceFeeApi = {
  async getServiceFees(clientId: string): Promise<ServiceFee[]> {
    try {
      const response = await api.get<ServiceFee[]>(
        `/clients/${clientId}/service-fees`
      );
      logger.info('Fetched service fees successfully', { clientId });
      return response.data;
    } catch (error) {
      logger.error('Error fetching service fees', { clientId, error });
      throw error;
    }
  },

  async createServiceFee(
    clientId: string,
    serviceFee: Omit<ServiceFee, 'id'>
  ): Promise<ServiceFee> {
    try {
      const response = await api.post<ServiceFee>(
        `/clients/${clientId}/service-fees`,
        serviceFee
      );
      logger.info('Created service fee successfully', {
        clientId,
        serviceFeeId: response.data.id,
      });
      return response.data;
    } catch (error) {
      logger.error('Error creating service fee', { clientId, error });
      throw error;
    }
  },

  async updateServiceFee(
    clientId: string,
    serviceFeeId: string,
    serviceFee: Partial<ServiceFee>
  ): Promise<ServiceFee> {
    try {
      const response = await api.put<ServiceFee>(
        `/clients/${clientId}/service-fees/${serviceFeeId}`,
        serviceFee
      );
      logger.info('Updated service fee successfully', {
        clientId,
        serviceFeeId,
      });
      return response.data;
    } catch (error) {
      logger.error('Error updating service fee', {
        clientId,
        serviceFeeId,
        error,
      });
      throw error;
    }
  },

  async deleteServiceFee(
    clientId: string,
    serviceFeeId: string
  ): Promise<void> {
    try {
      await api.delete(`/clients/${clientId}/service-fees/${serviceFeeId}`);
      logger.info('Deleted service fee successfully', {
        clientId,
        serviceFeeId,
      });
    } catch (error) {
      logger.error('Error deleting service fee', {
        clientId,
        serviceFeeId,
        error,
      });
      throw error;
    }
  },
};

export default ServiceFeeApi;

================
File: frontend/src/api/settingsApi.ts
================
import axios from 'axios';
import { Settings } from '../types/settingsTypes';

const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';

export const fetchSettings = async (clientId: number): Promise<Settings> => {
  const response = await axios.get(`${API_BASE_URL}/settings/${clientId}`);
  return response.data;
};

export const updateSettings = async (
  clientId: number,
  settings: Partial<Settings>
): Promise<Settings> => {
  const response = await axios.put(
    `${API_BASE_URL}/settings/${clientId}`,
    settings
  );
  return response.data;
};

export const fetchSettingsByKey = async (
  clientId: number,
  key: string
): Promise<any> => {
  const response = await axios.get(
    `${API_BASE_URL}/settings/${clientId}/${key}`
  );
  return response.data;
};

export const updateSettingByKey = async (
  clientId: number,
  key: string,
  value: any
): Promise<any> => {
  const response = await axios.put(
    `${API_BASE_URL}/settings/${clientId}/${key}`,
    { value }
  );
  return response.data;
};

================
File: frontend/src/api/walletApi.ts
================
import apiClient from './axios';
import { Wallet, Discount, LoyaltyReward } from '../types';

// Fetch wallet balance
export const fetchWalletBalance = async (): Promise<{ balance: number }> => {
  const response = await apiClient.get<{ balance: number }>(
    '/api/wallet/balance'
  );
  return response.data;
};

// Fetch wallet discounts
export const fetchWalletDiscounts = async (): Promise<Discount[]> => {
  const response = await apiClient.get<Discount[]>('/api/wallet/discounts');
  return response.data;
};

// Fetch loyalty rewards
export const fetchLoyaltyRewards = async (): Promise<LoyaltyReward[]> => {
  const response = await apiClient.get<LoyaltyReward[]>(
    '/api/wallet/loyalty-rewards'
  );
  return response.data;
};

// Add a discount to the wallet
export const addDiscountToWallet = async (
  discountId: number
): Promise<void> => {
  await apiClient.post('/api/wallet/add-discount', { discountId });
};

// Fetch all wallet data (balance, discounts, rewards)
export const fetchWalletData = async (): Promise<Wallet> => {
  const response = await apiClient.get<Wallet>('/api/wallet');
  return response.data;
};

================
File: frontend/src/api/walletDropApi.ts
================
import apiClient from './axios';
import { WalletDrop } from '../types/walletTypes';

export const getWalletDropsByUser = async (
  userId: number
): Promise<WalletDrop[]> => {
  const response = await apiClient.get(`/api/wallet-drops/user/${userId}`);
  return response.data;
};

export const createWalletDrop = async (
  userId: number,
  type: 'credit' | 'percentage' | 'fixed' | 'item',
  value: number,
  reason: string,
  itemId?: number,
  expirationDate?: Date
): Promise<WalletDrop> => {
  const response = await apiClient.post('/api/wallet-drops', {
    userId,
    type,
    value,
    reason,
    itemId,
    expirationDate,
  });
  return response.data;
};

================
File: frontend/src/components/admin/AdminPanel.tsx
================
import React from 'react';
import {
  Grid,
  Paper,
  Typography,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import { Link } from 'react-router-dom';

const AdminPanel: React.FC = () => {
  return (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h4">Global Admin Dashboard</Typography>
      </Grid>
      <Grid item xs={12} md={6}>
        <Paper>
          <List>
            <ListItem button component={Link} to="/admin/clients">
              <ListItemText primary="Client Management" />
            </ListItem>
            <ListItem button component={Link} to="/admin/users">
              <ListItemText primary="User Management" />
            </ListItem>
            <ListItem button component={Link} to="/admin/roles">
              <ListItemText primary="Role Management" />
            </ListItem>
            <ListItem button component={Link} to="/admin/permissions">
              <ListItemText primary="Permission Management" />
            </ListItem>
            <ListItem button component={Link} to="/admin/pos-integrations">
              <ListItemText primary="POS Integrations" />
            </ListItem>
          </List>
        </Paper>
      </Grid>
      <Grid item xs={12} md={6}>
        <Paper>
          <Typography variant="h6" padding={2}>
            Quick Stats
          </Typography>
          {/* Add quick statistics here */}
        </Paper>
      </Grid>
    </Grid>
  );
};

export default AdminPanel;

================
File: frontend/src/components/admin/BrandingManagement.css
================
.branding-management {
  padding: 20px;
  background-color: #f9f9f9;
}

.profile-selector {
  margin-bottom: 20px;
}

.color-picker-group {
  margin-bottom: 15px;
}

.color-picker-group label {
  font-weight: bold;
}

.color-picker-group input {
  margin-top: 5px;
  padding: 5px;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.logo-upload input {
  margin-top: 10px;
}

.schedule-section {
  margin-top: 20px;
}

.save-profile-btn,
.schedule-profile-btn {
  margin-top: 20px;
  padding: 10px 15px;
  font-size: 16px;
  cursor: pointer;
  border: none;
  border-radius: 5px;
}

.save-profile-btn {
  background-color: #007bff;
  color: white;
}

.schedule-profile-btn {
  background-color: #28a745;
  color: white;
  margin-left: 10px;
}

================
File: frontend/src/components/admin/ClientBrandingManager.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import {
  updateClientBranding,
  fetchClientBranding,
} from '../../redux/slices/clientBrandingSlice';
import {
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Box,
  Typography,
  SelectChangeEvent,
} from '@mui/material';
import { SketchPicker, ColorResult } from 'react-color';
import { ClientBranding } from '../../types/clientTypes';

const ClientBrandingManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { branding, status } = useSelector(
    (state: RootState) => state.clientBranding
  );
  const [localBranding, setLocalBranding] = useState<ClientBranding | null>(
    branding
  );

  useEffect(() => {
    dispatch(fetchClientBranding());
  }, [dispatch]);

  useEffect(() => {
    if (branding) {
      setLocalBranding(branding);
    }
  }, [branding]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (localBranding) {
      setLocalBranding({ ...localBranding, [e.target.name]: e.target.value });
    }
  };

  const handleColorChange = (
    color: ColorResult,
    colorType: keyof ClientBranding
  ) => {
    if (localBranding) {
      setLocalBranding({ ...localBranding, [colorType]: color.hex });
    }
  };

  const handleSelectChange = (e: SelectChangeEvent<string>) => {
    const { name, value } = e.target;
    if (localBranding) {
      setLocalBranding({ ...localBranding, [name]: value });
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (localBranding) {
      dispatch(updateClientBranding(localBranding));
    }
  };

  if (status === 'loading') return <Typography>Loading...</Typography>;
  if (!localBranding)
    return <Typography>No branding data available</Typography>;

  return (
    <Box component="form" onSubmit={handleSubmit}>
      <Typography variant="h6" gutterBottom>
        Client Branding Manager
      </Typography>
      <TextField
        name="logo"
        label="Logo URL"
        value={localBranding.logo}
        onChange={handleInputChange}
        fullWidth
        margin="normal"
      />
      <TextField
        name="favicon"
        label="Favicon URL"
        value={localBranding.favicon}
        onChange={handleInputChange}
        fullWidth
        margin="normal"
      />
      <FormControl fullWidth margin="normal">
        <InputLabel>Font Family</InputLabel>
        <Select
          name="fontFamily"
          value={localBranding.fontFamily}
          onChange={handleSelectChange}
        >
          <MenuItem value="Arial">Arial</MenuItem>
          <MenuItem value="Helvetica">Helvetica</MenuItem>
          <MenuItem value="Times New Roman">Times New Roman</MenuItem>
        </Select>
      </FormControl>
      <FormControl fullWidth margin="normal">
        <InputLabel>Button Style</InputLabel>
        <Select
          name="buttonStyle"
          value={localBranding.buttonStyle}
          onChange={handleSelectChange}
        >
          <MenuItem value="rounded">Rounded</MenuItem>
          <MenuItem value="square">Square</MenuItem>
        </Select>
      </FormControl>
      <FormControl fullWidth margin="normal">
        <InputLabel>Header Style</InputLabel>
        <Select
          name="headerStyle"
          value={localBranding.headerStyle}
          onChange={handleSelectChange}
        >
          <MenuItem value="centered">Centered</MenuItem>
          <MenuItem value="left-aligned">Left Aligned</MenuItem>
        </Select>
      </FormControl>
      <TextField
        name="footerContent"
        label="Footer Content"
        value={localBranding.footerContent}
        onChange={handleInputChange}
        fullWidth
        margin="normal"
        multiline
        rows={4}
      />
      <Box mt={2}>
        <Typography>Accent Color</Typography>
        <SketchPicker
          color={localBranding.accentColor}
          onChangeComplete={(color) => handleColorChange(color, 'accentColor')}
        />
      </Box>
      <Button type="submit" variant="contained" color="primary" sx={{ mt: 2 }}>
        Save Branding
      </Button>
    </Box>
  );
};

export default ClientBrandingManager;

================
File: frontend/src/components/admin/ClientBuilderWizard.tsx
================
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { createClientAsync } from '../../redux/slices/clientSlice';
import {
  TextField,
  Button,
  Stepper,
  Step,
  StepLabel,
  Box,
  Checkbox,
  FormControlLabel,
  Typography,
} from '@mui/material';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { AppDispatch } from '../../redux/store';
import { ClientData } from '../../types/clientTypes';

const ClientBuilderWizard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [activeStep, setActiveStep] = useState(0);

  const validationSchema = Yup.object({
    name: Yup.string().required('Client name is required'),
    domain: Yup.string().required('Domain is required'),
    primaryColor: Yup.string().required('Primary color is required'),
    secondaryColor: Yup.string().required('Secondary color is required'),
    logo: Yup.string()
      .url('Must be a valid URL')
      .required('Logo URL is required'),
    features: Yup.object({
      loyalty: Yup.boolean(),
      onlineOrdering: Yup.boolean(),
      tableReservations: Yup.boolean(),
    }),
  });

  const formik = useFormik<ClientData>({
    initialValues: {
      name: '',
      domain: '',
      primaryColor: '#000000',
      secondaryColor: '#ffffff',
      logo: '',
      features: {
        loyalty: false,
        onlineOrdering: false,
        tableReservations: false,
      },
    },
    validationSchema,
    onSubmit: (values) => {
      dispatch(createClientAsync(values));
    },
  });

  const steps = ['Basic Info', 'Branding', 'Features', 'Confirmation'];

  const handleNext = () => {
    setActiveStep((prevActiveStep) => prevActiveStep + 1);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return (
          <>
            <TextField
              name="name"
              label="Client Name"
              value={formik.values.name}
              onChange={formik.handleChange}
              error={formik.touched.name && Boolean(formik.errors.name)}
              helperText={formik.touched.name && formik.errors.name}
              fullWidth
              margin="normal"
            />
            <TextField
              name="domain"
              label="Domain"
              value={formik.values.domain}
              onChange={formik.handleChange}
              error={formik.touched.domain && Boolean(formik.errors.domain)}
              helperText={formik.touched.domain && formik.errors.domain}
              fullWidth
              margin="normal"
            />
          </>
        );
      case 1:
        return (
          <>
            <TextField
              name="primaryColor"
              label="Primary Color"
              type="color"
              value={formik.values.primaryColor}
              onChange={formik.handleChange}
              error={formik.touched.primaryColor && Boolean(formik.errors.primaryColor)}
              helperText={formik.touched.primaryColor && formik.errors.primaryColor}
              fullWidth
              margin="normal"
            />
            <TextField
              name="secondaryColor"
              label="Secondary Color"
              type="color"
              value={formik.values.secondaryColor}
              onChange={formik.handleChange}
              error={formik.touched.secondaryColor && Boolean(formik.errors.secondaryColor)}
              helperText={formik.touched.secondaryColor && formik.errors.secondaryColor}
              fullWidth
              margin="normal"
            />
            <TextField
              name="logo"
              label="Logo URL"
              value={formik.values.logo}
              onChange={formik.handleChange}
              error={formik.touched.logo && Boolean(formik.errors.logo)}
              helperText={formik.touched.logo && formik.errors.logo}
              fullWidth
              margin="normal"
            />
          </>
        );
      case 2:
        return (
          <>
            <Typography variant="h6">Activate Features</Typography>
            <FormControlLabel
              control={
                <Checkbox
                  checked={formik.values.features.loyalty}
                  onChange={formik.handleChange}
                  name="features.loyalty"
                />
              }
              label="Loyalty Program"
            />
            <FormControlLabel
              control={
                <Checkbox
                  checked={formik.values.features.onlineOrdering}
                  onChange={formik.handleChange}
                  name="features.onlineOrdering"
                />
              }
              label="Online Ordering"
            />
            <FormControlLabel
              control={
                <Checkbox
                  checked={formik.values.features.tableReservations}
                  onChange={formik.handleChange}
                  name="features.tableReservations"
                />
              }
              label="Table Reservations"
            />
          </>
        );
      case 3:
        return (
          <Box>
            <Typography variant="h6">Confirm Client Details</Typography>
            <Typography>Name: {formik.values.name}</Typography>
            <Typography>Domain: {formik.values.domain}</Typography>
            <Typography>Primary Color: {formik.values.primaryColor}</Typography>
            <Typography>Secondary Color: {formik.values.secondaryColor}</Typography>
            <Typography>Logo: {formik.values.logo}</Typography>
            <Typography>Features:</Typography>
            <Typography>- Loyalty: {formik.values.features.loyalty ? 'Yes' : 'No'}</Typography>
            <Typography>- Online Ordering: {formik.values.features.onlineOrdering ? 'Yes' : 'No'}</Typography>
            <Typography>- Table Reservations: {formik.values.features.tableReservations ? 'Yes' : 'No'}</Typography>
          </Box>
        );
      default:
        return null;
    }
  };

  return (
    <Box sx={{ width: '100%' }}>
      <Stepper activeStep={activeStep}>
        {steps.map((label) => (
          <Step key={label}>
            <StepLabel>{label}</StepLabel>
          </Step>
        ))}
      </Stepper>
      <form onSubmit={formik.handleSubmit}>
        {renderStepContent(activeStep)}
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
          {activeStep > 0 && (
            <Button onClick={handleBack} sx={{ mr: 1 }}>
              Back
            </Button>
          )}
          {activeStep < steps.length - 1 ? (
            <Button variant="contained" onClick={handleNext}>
              Next
            </Button>
          ) : (
            <Button type="submit" variant="contained" color="primary">
              Create Client
            </Button>
          )}
        </Box>
      </form>
    </Box>
  );
};

export default ClientBuilderWizard;

================
File: frontend/src/components/admin/DoordashMarketplaceSettings.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { updateOrderProvider } from '../../redux/slices/orderProviderSlice';
import {
  TextField,
  Button,
  Typography,
  Box,
  Switch,
  FormControlLabel,
} from '@mui/material';

interface DoordashMarketplaceSettingsProps {
  providerId: number;
}

const DoordashMarketplaceSettings: React.FC<
  DoordashMarketplaceSettingsProps
> = ({ providerId }) => {
  const dispatch = useDispatch<AppDispatch>();
  const orderProvider = useSelector((state: RootState) =>
    state.orderProviders.providers.find(
      (provider) => provider.id === providerId
    )
  );

  const [storeId, setStoreId] = useState(orderProvider?.doordashStoreId || '');
  const [merchantId, setMerchantId] = useState(
    orderProvider?.doordashMerchantId || ''
  );
  const [apiKey, setApiKey] = useState(orderProvider?.doordashApiKey || '');
  const [isMenuSyncEnabled, setIsMenuSyncEnabled] = useState(
    orderProvider?.isDoordashMenuSyncEnabled || false
  );
  const [isAutoAcceptEnabled, setIsAutoAcceptEnabled] = useState(
    orderProvider?.isDoordashAutoAcceptEnabled || false
  );
  const [handleScheduledOrders, setHandleScheduledOrders] = useState(
    orderProvider?.handleScheduledOrders || false
  );
  const [scheduledOrderLeadTime, setScheduledOrderLeadTime] = useState(
    orderProvider?.scheduledOrderLeadTime || 30
  );

  useEffect(() => {
    if (orderProvider) {
      setStoreId(orderProvider.doordashStoreId || '');
      setMerchantId(orderProvider.doordashMerchantId || '');
      setApiKey(orderProvider.doordashApiKey || '');
      setIsMenuSyncEnabled(orderProvider.isDoordashMenuSyncEnabled || false);
      setIsAutoAcceptEnabled(
        orderProvider.isDoordashAutoAcceptEnabled || false
      );
      setHandleScheduledOrders(orderProvider.handleScheduledOrders || false);
      setScheduledOrderLeadTime(orderProvider.scheduledOrderLeadTime || 30);
    }
  }, [orderProvider]);

  const handleSave = () => {
    dispatch(
      updateOrderProvider({
        id: providerId,
        doordashStoreId: storeId,
        doordashMerchantId: merchantId,
        doordashApiKey: apiKey,
        isDoordashMenuSyncEnabled: isMenuSyncEnabled,
        isDoordashAutoAcceptEnabled: isAutoAcceptEnabled,
        handleScheduledOrders,
        scheduledOrderLeadTime,
      })
    );
  };

  if (!orderProvider) {
    return <Typography>Order provider not found</Typography>;
  }

  return (
    <Box>
      <Typography variant="h6">Doordash Marketplace Settings</Typography>
      <TextField
        fullWidth
        margin="normal"
        label="Doordash Store ID"
        value={storeId}
        onChange={(e) => setStoreId(e.target.value)}
      />
      <TextField
        fullWidth
        margin="normal"
        label="Doordash Merchant ID"
        value={merchantId}
        onChange={(e) => setMerchantId(e.target.value)}
      />
      <TextField
        fullWidth
        margin="normal"
        label="Doordash API Key"
        type="password"
        value={apiKey}
        onChange={(e) => setApiKey(e.target.value)}
      />
      <FormControlLabel
        control={
          <Switch
            checked={isMenuSyncEnabled}
            onChange={(e) => setIsMenuSyncEnabled(e.target.checked)}
          />
        }
        label="Enable Menu Sync"
      />
      <FormControlLabel
        control={
          <Switch
            checked={isAutoAcceptEnabled}
            onChange={(e) => setIsAutoAcceptEnabled(e.target.checked)}
          />
        }
        label="Enable Auto-Accept Orders"
      />
      <FormControlLabel
        control={
          <Switch
            checked={handleScheduledOrders}
            onChange={(e) => setHandleScheduledOrders(e.target.checked)}
          />
        }
        label="Handle Scheduled Orders"
      />
      <TextField
        fullWidth
        margin="normal"
        label="Scheduled Order Lead Time (minutes)"
        type="number"
        value={scheduledOrderLeadTime}
        onChange={(e) => setScheduledOrderLeadTime(parseInt(e.target.value))}
        disabled={!handleScheduledOrders}
      />
      <Button onClick={handleSave} variant="contained" color="primary">
        Save Doordash Marketplace Settings
      </Button>
    </Box>
  );
};

export default DoordashMarketplaceSettings;

================
File: frontend/src/components/admin/DoordashSSIOSettings.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { updateOrderProvider } from '../../redux/slices/orderProviderSlice';
import { TextField, Button, Typography, Box } from '@mui/material';

interface DoordashSSIOSettingsProps {
  providerId: number;
}

const DoordashSSIOSettings: React.FC<DoordashSSIOSettingsProps> = ({
  providerId,
}) => {
  const dispatch = useDispatch<AppDispatch>();
  const orderProvider = useSelector((state: RootState) =>
    state.orderProviders.providers.find(
      (provider) => provider.id === providerId
    )
  );

  const [storeId, setStoreId] = useState(orderProvider?.doordashStoreId || '');
  const [menuId, setMenuId] = useState(orderProvider?.doordashMenuId || '');
  const [externalReferenceId, setExternalReferenceId] = useState(
    orderProvider?.doordashExternalReferenceId || ''
  );

  useEffect(() => {
    if (orderProvider) {
      setStoreId(orderProvider.doordashStoreId || '');
      setMenuId(orderProvider.doordashMenuId || '');
      setExternalReferenceId(orderProvider.doordashExternalReferenceId || '');
    }
  }, [orderProvider]);

  const handleSave = () => {
    dispatch(
      updateOrderProvider({
        id: providerId,
        doordashStoreId: storeId,
        doordashMenuId: menuId,
        doordashExternalReferenceId: externalReferenceId,
      })
    );
  };

  if (!orderProvider) {
    return <Typography>Order provider not found</Typography>;
  }

  return (
    <Box>
      <Typography variant="h6">Doordash SSIO Settings</Typography>
      <TextField
        fullWidth
        margin="normal"
        label="Doordash Store ID"
        value={storeId}
        onChange={(e) => setStoreId(e.target.value)}
      />
      <TextField
        fullWidth
        margin="normal"
        label="Doordash Menu ID"
        value={menuId}
        onChange={(e) => setMenuId(e.target.value)}
      />
      <TextField
        fullWidth
        margin="normal"
        label="External Reference ID"
        value={externalReferenceId}
        onChange={(e) => setExternalReferenceId(e.target.value)}
      />
      <Button onClick={handleSave} variant="contained" color="primary">
        Save Doordash SSIO Settings
      </Button>
    </Box>
  );
};

export default DoordashSSIOSettings;

================
File: frontend/src/components/admin/ExecutiveDashboard.tsx
================
import React, { useEffect, useState } from 'react';
import { Typography, Grid, CircularProgress } from '@mui/material';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { fetchClients } from '../../redux/slices/clientSlice';
import {
  dashboardService,
  DashboardData,
} from '../../services/dashboardService';
import { useAuth } from '../../hooks/useAuth'; // Add this import
import 'jspdf-autotable';

const ExecutiveDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [selectedClientId, setSelectedClientId] = useState<string | 'all'>(
    'all'
  );
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);
  const { user, isGlobalAdmin, authToken } = useAuth(); // Add this line

  useEffect(() => {
    if (isGlobalAdmin) {
      dispatch(fetchClients());
    }
    if (authToken) {
      dashboardService.setAuthToken(authToken);
    }
  }, [dispatch, isGlobalAdmin, authToken]);

  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      try {
        const data = await dashboardService.getDashboardData(selectedClientId);
        if (selectedClientId !== 'all') {
          const locationData =
            await dashboardService.getLocationData(selectedClientId);
          data.totalLocations = locationData.totalLocations;
        }
        setDashboardData(data);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchDashboardData();
  }, [selectedClientId]);

  const handleRefresh = () => {
    fetchDashboardData();
  };

  if (isLoading) {
    return <CircularProgress />;
  }

  if (!dashboardData) {
    return <Typography>Loading...</Typography>;
  }

  return (
    <div role="main" aria-label="Executive Dashboard">
      <h1 tabIndex={0}>Executive Dashboard</h1>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6} lg={4}>
          {/* Dashboard item */}
        </Grid>
        {/* ... more grid items ... */}
      </Grid>
      <button aria-label="Refresh dashboard data" onClick={handleRefresh}>
        Refresh
      </button>
    </div>
  );
};

export default ExecutiveDashboard;

================
File: frontend/src/components/admin/ItemBuilder.css
================
.item-builder {
  position: fixed;
  right: 0;
  top: 0;
  bottom: 0;
  width: 400px;
  background: white;
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 20px;
  overflow-y: auto;
  transform: translateX(100%);
  transition: transform 0.3s ease-in-out;
}

.item-builder.show {
  transform: translateX(0);
}

.item-builder-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ddd;
  margin-bottom: 10px;
}

.item-builder-body {
  padding: 10px 0;
}

.modifier-group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.modifier-group select {
  width: 100%;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
  margin-bottom: 15px;
}

.modifier-group select.required {
  border-color: red;
}

.quantity-selector {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 15px 0;
}

.quantity-selector button {
  background: #007bff;
  color: white;
  padding: 5px 10px;
  border: none;
  cursor: pointer;
  font-size: 18px;
}

.add-to-cart-btn {
  display: block;
  width: 100%;
  background: #28a745;
  color: white;
  padding: 10px;
  border: none;
  cursor: pointer;
  font-size: 18px;
  border-radius: 5px;
  text-align: center;
}

.add-to-cart-btn:hover {
  background: #218838;
}

================
File: frontend/src/components/admin/LocationBuilder.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { updateLocation, fetchLocationProfiles } from '../../redux/slices/locationSlice';
import { fetchPosIntegrations } from '../../redux/slices/posIntegrationSlice';
import { Location, PosIntegration, LocationProfile } from '../../types';
import { AppDispatch, RootState } from '../../redux/store';
import { TextField, Button, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import { SelectChangeEvent } from '@mui/material/Select';
import ProviderList from '../ProviderList';

interface ProviderListProps {
  locationId: string | undefined;
  providers: string[];
}

const ProviderList: React.FC<ProviderListProps> = ({ locationId, providers }) => {
  // ... component implementation
};

const LocationBuilder: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locationProfiles = useSelector((state: RootState) => state.location.locationProfiles);
  const posIntegrations = useSelector((state: RootState) => state.posIntegration.integrations);

  const [location, setLocation] = useState<Omit<Location, 'id'>>({
    name: '',
    address: '',
    gpsCoordinates: '',
    city: '',
    state: '',
    zipCode: '',
    phoneNumber: '',
    email: '',
    latitude: 0,
    longitude: 0,
    posIntegrationId: '',
    customSettings: {},
  });

  useEffect(() => {
    dispatch(fetchLocationProfiles());
    dispatch(fetchPosIntegrations());
  }, [dispatch]);

  const handleSave = () => {
    if (location.name && location.address) {
      dispatch(updateLocation(location as Location));
    }
  };

  const handlePosIntegrationChange = (event: SelectChangeEvent<string>) => {
    setLocation((prev) => ({ ...prev, posIntegrationId: event.target.value }));
  };

  const handleLocationProfileChange = (event: SelectChangeEvent<string>) => {
    const profileId = event.target.value;
    const selectedProfile = locationProfiles.find((profile: LocationProfile) => profile.id === profileId);
    if (selectedProfile) {
      setLocation((prev) => ({ ...prev, ...selectedProfile }));
    }
  };

  return (
    <div>
      <h2>Location Builder</h2>
      <form>
        <FormControl fullWidth margin="normal">
          <InputLabel>Location Profile</InputLabel>
          <Select value={location.posIntegrationId} onChange={handleLocationProfileChange}>
            {locationProfiles.map((profile: LocationProfile) => (
              <MenuItem key={profile.id} value={profile.id}>{profile.name}</MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl fullWidth margin="normal">
          <InputLabel>POS Integration</InputLabel>
          <Select value={location.posIntegrationId} onChange={handlePosIntegrationChange}>
            {posIntegrations.map((integration: PosIntegration) => (
              <MenuItem key={integration.id} value={integration.id}>{integration.name}</MenuItem>
            ))}
          </Select>
        </FormControl>

        <TextField
          fullWidth
          margin="normal"
          label="Name"
          value={location.name}
          onChange={(e) => setLocation((prev) => ({ ...prev, name: e.target.value }))}
        />
        <TextField
          fullWidth
          margin="normal"
          label="Address"
          value={location.address}
          onChange={(e) => setLocation((prev) => ({ ...prev, address: e.target.value }))}
        />
        {/* Add other fields similarly */}

        <ProviderList locationId={undefined} providers={[]} />

        <Button variant="contained" color="primary" onClick={handleSave}>
          Save Location
        </Button>
      </form>
    </div>
  );
};

export default LocationBuilder;

================
File: frontend/src/components/admin/LocationExceptions.tsx
================
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../../redux/store';
import { Typography, List, ListItem, ListItemText } from '@mui/material';

interface LocationExceptionsProps {
  locationId: number;
}

const LocationExceptions: React.FC<LocationExceptionsProps> = ({
  locationId,
}) => {
  const menuItems = useSelector((state: RootState) =>
    state.menuItems.items.filter(
      (item) => item.locationId === locationId && item.prepTime > 0
    )
  );

  return (
    <div>
      <Typography variant="h6">Exceptions</Typography>
      <List>
        {menuItems.map((item) => (
          <ListItem key={item.id}>
            <ListItemText
              primary={item.name}
              secondary={`Prep Time: ${item.prepTime} minutes`}
            />
          </ListItem>
        ))}
      </List>
    </div>
  );
};

export default LocationExceptions;

================
File: frontend/src/components/admin/LocationManager.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import {
  fetchLocations,
  updateLocation,
} from '../../redux/slices/locationSlice';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Checkbox,
  FormControlLabel,
  FormGroup,
} from '@mui/material';
import { PaymentGateway } from '../../types';
import LocationBuilder from './LocationBuilder';

const LocationManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector(
    (state: RootState) => state.locations.locations
  );
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);

  useEffect(() => {
    dispatch(fetchLocations());
  }, [dispatch]);

  const handleEdit = (location) => {
    setSelectedLocation(location);
    setOpenDialog(true);
  };

  const handleClose = () => {
    setOpenDialog(false);
    setSelectedLocation(null);
  };

  const handleSave = () => {
    dispatch(updateLocation(selectedLocation));
    handleClose();
  };

  const handleExceptionChange = (field: string) => {
    setSelectedLocation({
      ...selectedLocation,
      [field]: !selectedLocation[field],
    });
  };

  const handlePaymentGatewayChange = (gateway: PaymentGateway) => {
    const updatedGateways = selectedLocation.paymentGatewayExceptions.includes(
      gateway
    )
      ? selectedLocation.paymentGatewayExceptions.filter((g) => g !== gateway)
      : [...selectedLocation.paymentGatewayExceptions, gateway];
    setSelectedLocation({
      ...selectedLocation,
      paymentGatewayExceptions: updatedGateways,
    });
  };

  return (
    <Box>
      <Typography variant="h5">Location Manager</Typography>
      <List>
        {locations.map((location) => (
          <ListItem key={location.id}>
            <ListItemText
              primary={location.name}
              secondary={location.address}
            />
            <Button onClick={() => handleEdit(location)}>Edit</Button>
          </ListItem>
        ))}
      </List>
      <LocationBuilder />
      <Dialog open={openDialog} onClose={handleClose}>
        <DialogTitle>Edit Location</DialogTitle>
        <DialogContent>
          {selectedLocation && (
            <>
              <FormGroup>
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={selectedLocation.twoFactorException}
                      onChange={() =>
                        handleExceptionChange('twoFactorException')
                      }
                    />
                  }
                  label="Two-Factor Authentication Exception"
                />
              </FormGroup>
              <Typography variant="h6">Payment Gateway Exceptions</Typography>
              <FormGroup>
                {Object.values(PaymentGateway).map((gateway) => (
                  <FormControlLabel
                    key={gateway}
                    control={
                      <Checkbox
                        checked={selectedLocation.paymentGatewayExceptions.includes(
                          gateway
                        )}
                        onChange={() => handlePaymentGatewayChange(gateway)}
                      />
                    }
                    label={gateway}
                  />
                ))}
              </FormGroup>
            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleSave}>Save</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default LocationManager;

================
File: frontend/src/components/admin/LocationSettings.tsx
================
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../../redux/store';
import { updateLocation } from '../../redux/slices/locationSlice';
import { Location } from '../../types';

const LocationSettings: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();

  const [selectedLocation, setSelectedLocation] = useState('');
  const [selectedProvider, setSelectedProvider] = useState('');

  const handleUpdateSettings = () => {
    const locationUpdate: Partial<Location> & { id: number } = {
      id: parseInt(selectedLocation),
      // Add any other fields you want to update
    };
    dispatch(updateLocation(locationUpdate));
  };

  return (
    <div>
      <h2>Location Settings</h2>
      <select
        value={selectedLocation}
        onChange={(e) => setSelectedLocation(e.target.value)}
      >
        <option value="">Select Location</option>
        {/* Add location options dynamically */}
      </select>
      <select
        value={selectedProvider}
        onChange={(e) => setSelectedProvider(e.target.value)}
      >
        <option value="">Select Provider</option>
        {/* Add provider options dynamically */}
      </select>
      <button onClick={handleUpdateSettings}>Update Settings</button>
    </div>
  );
};

export default LocationSettings;

================
File: frontend/src/components/admin/MenuBuilder.tsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { MenuService } from '../../services/MenuService';
import { Menu, MenuGroup } from '../../types/menuTypes';
import { updateLocationMenu } from '../../redux/slices/menuSlice';
import {
  Box,
  Typography,
  Button,
  TextField,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';

const MenuBuilder: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locationId = useSelector(
    (state: RootState) => state.location.currentLocation?.id
  );
  const menu = useSelector((state: RootState) => state.menu.locationMenu);

  const [isAddingGroup, setIsAddingGroup] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const [editingGroup, setEditingGroup] = useState<MenuGroup | null>(null);

  const menuService = React.useMemo(() => new MenuService(), []);

  const fetchMenu = useCallback(async () => {
    if (locationId) {
      try {
        const fetchedMenu: Menu = await menuService.getLocationMenu(locationId);
        dispatch(updateLocationMenu(fetchedMenu));
      } catch (error) {
        console.error('Failed to fetch menu:', error);
      }
    }
  }, [locationId, menuService, dispatch]);

  useEffect(() => {
    fetchMenu();
  }, [fetchMenu]);

  const handleAddGroup = useCallback(async () => {
    if (locationId && newGroupName.trim()) {
      try {
        const updatedMenu: Menu = await menuService.addMenuGroup(
          locationId,
          newGroupName
        );
        dispatch(updateLocationMenu(updatedMenu));
        setNewGroupName('');
        setIsAddingGroup(false);
      } catch (error) {
        console.error('Failed to add menu group:', error);
      }
    }
  }, [locationId, newGroupName, menuService, dispatch]);

  const handleEditGroup = useCallback(async () => {
    if (locationId && editingGroup) {
      try {
        const updatedMenu: Menu = await menuService.updateMenuGroup(
          locationId,
          editingGroup.id,
          editingGroup.name
        );
        dispatch(updateLocationMenu(updatedMenu));
        setEditingGroup(null);
      } catch (error) {
        console.error('Failed to update menu group:', error);
      }
    }
  }, [locationId, editingGroup, menuService, dispatch]);

  const handleDeleteGroup = useCallback(
    async (groupId: number) => {
      if (locationId) {
        try {
          const updatedMenu: Menu = await menuService.deleteMenuGroup(
            locationId,
            groupId
          );
          dispatch(updateLocationMenu(updatedMenu));
        } catch (error) {
          console.error('Failed to delete menu group:', error);
        }
      }
    },
    [locationId, menuService, dispatch]
  );

  return (
    <Box>
      <Typography variant="h4">Menu Builder</Typography>
      <Button startIcon={<AddIcon />} onClick={() => setIsAddingGroup(true)}>
        Add Menu Group
      </Button>
      <List>
        {menu?.groups.map((group) => (
          <ListItem key={group.id}>
            <ListItemText primary={group.name} />
            <IconButton onClick={() => setEditingGroup(group)}>
              <EditIcon />
            </IconButton>
            <IconButton onClick={() => handleDeleteGroup(group.id)}>
              <DeleteIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>

      <Dialog open={isAddingGroup} onClose={() => setIsAddingGroup(false)}>
        <DialogTitle>Add Menu Group</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Group Name"
            fullWidth
            value={newGroupName}
            onChange={(e) => setNewGroupName(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsAddingGroup(false)}>Cancel</Button>
          <Button onClick={handleAddGroup}>Add</Button>
        </DialogActions>
      </Dialog>

      <Dialog open={!!editingGroup} onClose={() => setEditingGroup(null)}>
        <DialogTitle>Edit Menu Group</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Group Name"
            fullWidth
            value={editingGroup?.name || ''}
            onChange={(e) =>
              setEditingGroup(
                editingGroup ? { ...editingGroup, name: e.target.value } : null
              )
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditingGroup(null)}>Cancel</Button>
          <Button onClick={handleEditGroup}>Save</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MenuBuilder;

================
File: frontend/src/components/admin/MenuManager.tsx
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { fetchMenuItems } from '../../redux/slices/menuSlice';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Button,
} from '@mui/material';
import MenuBuilder from './MenuBuilder';

const MenuManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const menuItems = useSelector((state: RootState) => state.menu.items);

  useEffect(() => {
    dispatch(fetchMenuItems());
  }, [dispatch]);

  return (
    <Box>
      <Typography variant="h5">Menu Manager</Typography>
      <List>
        {menuItems.map((item) => (
          <ListItem key={item.id}>
            <ListItemText primary={item.name} secondary={`$${item.price}`} />
            <Button>Edit</Button>
          </ListItem>
        ))}
      </List>
      <MenuBuilder />
    </Box>
  );
};

export default MenuManager;

================
File: frontend/src/components/admin/OrderManager.tsx
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { fetchOrders } from '../../redux/slices/orderSlice';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Button,
} from '@mui/material';

const OrderManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const orders = useSelector((state: RootState) => state.orders.orders);

  useEffect(() => {
    dispatch(fetchOrders());
  }, [dispatch]);

  return (
    <Box>
      <Typography variant="h5">Order Manager</Typography>
      <List>
        {orders.map((order) => (
          <ListItem key={order.id}>
            <ListItemText
              primary={`Order #${order.id}`}
              secondary={`Total: $${order.total}`}
            />
            <Button>View Details</Button>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default OrderManager;

================
File: frontend/src/components/admin/OrderProvider.tsx
================
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { updateOrderProvider } from '../../redux/slices/orderProviderSlice';
import DoordashMarketplaceSettings from './DoordashMarketplaceSettings';
import {
  TextField,
  Button,
  Switch,
  FormControlLabel,
  Typography,
  Box,
} from '@mui/material';

interface OrderProviderProps {
  providerId: number;
}

const OrderProvider: React.FC<OrderProviderProps> = ({ providerId }) => {
  const dispatch = useDispatch<AppDispatch>();
  const provider = useSelector((state: RootState) =>
    state.orderProviders.providers.find((p) => p.id === providerId)
  );

  const [handleScheduledOrders, setHandleScheduledOrders] = useState(
    provider?.handleScheduledOrders || false
  );
  const [scheduledOrderLeadTime, setScheduledOrderLeadTime] = useState(
    provider?.scheduledOrderLeadTime || 30
  );

  if (!provider) {
    return <div>Provider not found</div>;
  }

  const handleSave = () => {
    dispatch(
      updateOrderProvider({
        id: providerId,
        handleScheduledOrders,
        scheduledOrderLeadTime,
      })
    );
  };

  return (
    <Box>
      <Typography variant="h5">{provider.name}</Typography>
      <FormControlLabel
        control={
          <Switch
            checked={handleScheduledOrders}
            onChange={(e) => setHandleScheduledOrders(e.target.checked)}
          />
        }
        label="Handle Scheduled Orders"
      />
      <TextField
        fullWidth
        margin="normal"
        label="Scheduled Order Lead Time (minutes)"
        type="number"
        value={scheduledOrderLeadTime}
        onChange={(e) => setScheduledOrderLeadTime(parseInt(e.target.value))}
        disabled={!handleScheduledOrders}
      />
      <Button onClick={handleSave} variant="contained" color="primary">
        Save General Settings
      </Button>

      {/* Provider-specific settings */}
      {provider.type === 'doordash' && (
        <DoordashMarketplaceSettings providerId={providerId} />
      )}
      {/* Add other provider-specific settings components here */}
    </Box>
  );
};

export default OrderProvider;

================
File: frontend/src/components/admin/POSSettingsForm.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import {
  updatePOSSettings,
  fetchPOSSettings,
} from '../../redux/slices/posSettingsSlice';

const POSSettingsForm: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const posSettings = useSelector((state: RootState) => state.posSettings);
  const [modifierSendMethod, setModifierSendMethod] = useState('');

  useEffect(() => {
    dispatch(fetchPOSSettings());
  }, [dispatch]);

  useEffect(() => {
    if (posSettings.modifierSendMethod) {
      setModifierSendMethod(posSettings.modifierSendMethod);
    }
  }, [posSettings]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    dispatch(updatePOSSettings({ modifierSendMethod }));
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>POS Settings</h2>
      <div>
        <label htmlFor="modifierSendMethod">Modifier Send Method:</label>
        <select
          id="modifierSendMethod"
          value={modifierSendMethod}
          onChange={(e) => setModifierSendMethod(e.target.value)}
        >
          <option value="list">Send as List</option>
          <option value="individual">Send Individually</option>
        </select>
      </div>
      <button type="submit">Save Settings</button>
    </form>
  );
};

export default POSSettingsForm;

================
File: frontend/src/components/admin/ReviewManager.tsx
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import {
  fetchPendingReviews,
  approveReview,
  deleteReview,
} from '../../redux/slices/reviewSlice';
import {
  Typography,
  List,
  ListItem,
  ListItemText,
  Button,
  Box,
  Rating,
} from '@mui/material';

const ReviewManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const pendingReviews = useSelector(
    (state: RootState) => state.reviews.pendingReviews
  );

  useEffect(() => {
    dispatch(fetchPendingReviews());
  }, [dispatch]);

  const handleApprove = (reviewId: number) => {
    dispatch(approveReview(reviewId));
  };

  const handleDelete = (reviewId: number) => {
    dispatch(deleteReview(reviewId));
  };

  return (
    <Box>
      <Typography variant="h5">Pending Reviews</Typography>
      <List>
        {pendingReviews.map((review) => (
          <ListItem key={review.id}>
            <ListItemText
              primary={`${review.firstName} ${review.lastInitial}. - ${review.MenuItem.name}`}
              secondary={
                <>
                  <Rating value={review.rating} readOnly size="small" />
                  <Typography variant="body2">{review.comment}</Typography>
                </>
              }
            />
            <Button onClick={() => handleApprove(review.id)}>Approve</Button>
            <Button onClick={() => handleDelete(review.id)}>Delete</Button>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default ReviewManager;

================
File: frontend/src/components/admin/RoleManagement.tsx
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Checkbox,
  FormControlLabel,
} from '@mui/material';

interface Role {
  id: string;
  name: string;
  permissions: string[];
}

const RoleManagement: React.FC = () => {
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  useEffect(() => {
    // Fetch roles from API
    // setRoles(fetchedRoles);
  }, []);

  const handleEditRole = (role: Role) => {
    setSelectedRole(role);
    setIsDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setSelectedRole(null);
    setIsDialogOpen(false);
  };

  const handleUpdateRole = () => {
    // Implement role update logic here
    handleCloseDialog();
  };

  const handleAddRole = () => {
    setSelectedRole({ id: '', name: '', permissions: [] });
    setIsDialogOpen(true);
  };

  return (
    <Box>
      <Typography variant="h5">Role Management</Typography>
      <List>
        {roles.map((role) => (
          <ListItem key={role.id}>
            <ListItemText
              primary={role.name}
              secondary={`Permissions: ${role.permissions.join(', ')}`}
            />
            <Button onClick={() => handleEditRole(role)}>Edit</Button>
          </ListItem>
        ))}
      </List>
      <Button variant="contained" color="primary" onClick={handleAddRole}>
        Add New Role
      </Button>
      <Dialog open={isDialogOpen} onClose={handleCloseDialog}>
        <DialogTitle>
          {selectedRole?.id ? 'Edit Role' : 'Add New Role'}
        </DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Role Name"
            type="text"
            fullWidth
            value={selectedRole?.name || ''}
            onChange={(e) =>
              setSelectedRole({ ...selectedRole!, name: e.target.value })
            }
          />
          <Typography variant="subtitle1">Permissions:</Typography>
          {/* Add checkboxes for permissions */}
          <FormControlLabel
            control={
              <Checkbox
                checked={selectedRole?.permissions.includes('read') || false}
                onChange={(e) => {
                  const newPermissions = e.target.checked
                    ? [...selectedRole!.permissions, 'read']
                    : selectedRole!.permissions.filter((p) => p !== 'read');
                  setSelectedRole({
                    ...selectedRole!,
                    permissions: newPermissions,
                  });
                }}
              />
            }
            label="Read"
          />
          {/* Add more permission checkboxes as needed */}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button onClick={handleUpdateRole} color="primary">
            {selectedRole?.id ? 'Update' : 'Add'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default RoleManagement;

================
File: frontend/src/components/admin/SettingsManager.tsx
================
import React, { useState, useEffect, useMemo } from 'react';
import { TextField, Button, Typography, Box } from '@mui/material';
import { SettingsService } from '../../services/SettingsService';
import { useAuth } from '../../contexts/AuthContext';
import { Settings } from '../../types/settingsTypes';

const SettingsManager: React.FC = () => {
  const [settings, setSettings] = useState<Settings | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth();

  const settingsService = useMemo(() => new SettingsService(), []);

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        setIsLoading(true);
        const fetchedSettings = await settingsService.getSettings(
          user.clientId
        );
        setSettings(fetchedSettings);
        setError(null);
      } catch (err) {
        setError('Failed to fetch settings');
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchSettings();
  }, [settingsService, user.clientId]);

  const handleSettingChange = (
    key: keyof Settings,
    value: string | number | boolean
  ) => {
    if (settings) {
      setSettings({ ...settings, [key]: value });
    }
  };

  const handleSaveSettings = async () => {
    if (settings) {
      try {
        await settingsService.updateSettings(user.clientId, settings);
        setError(null);
      } catch (err) {
        setError('Failed to save settings');
        console.error(err);
      }
    }
  };

  if (isLoading) return <Typography>Loading settings...</Typography>;
  if (error) return <Typography color="error">{error}</Typography>;
  if (!settings) return <Typography>No settings found</Typography>;

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Settings Manager
      </Typography>
      {Object.entries(settings).map(([key, value]) => (
        <TextField
          key={key}
          label={key}
          value={value}
          onChange={(e) =>
            handleSettingChange(key as keyof Settings, e.target.value)
          }
          fullWidth
          margin="normal"
        />
      ))}
      <Button variant="contained" color="primary" onClick={handleSaveSettings}>
        Save Settings
      </Button>
    </Box>
  );
};

export default SettingsManager;

================
File: frontend/src/components/admin/UserManager.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { fetchUsers } from '../../redux/slices/userSlice';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
} from '@mui/material';

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  clientId?: string;
}

const UserManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const users = useSelector((state: RootState) => state.users.users);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  useEffect(() => {
    dispatch(fetchUsers());
  }, [dispatch]);

  const handleEditUser = (user: User) => {
    setSelectedUser(user);
    setIsDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setSelectedUser(null);
    setIsDialogOpen(false);
  };

  const handleUpdateUser = () => {
    // Implement user update logic here
    handleCloseDialog();
  };

  const handleAddUser = () => {
    setSelectedUser({ id: '', name: '', email: '', role: '' });
    setIsDialogOpen(true);
  };

  return (
    <Box>
      <Typography variant="h5">User Manager</Typography>
      <List>
        {users.map((user) => (
          <ListItem key={user.id}>
            <ListItemText primary={user.name} secondary={user.email} />
            <Button onClick={() => handleEditUser(user)}>Edit</Button>
          </ListItem>
        ))}
      </List>
      <Button variant="contained" color="primary" onClick={handleAddUser}>
        Add New User
      </Button>
      <Dialog open={isDialogOpen} onClose={handleCloseDialog}>
        <DialogTitle>
          {selectedUser?.id ? 'Edit User' : 'Add New User'}
        </DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Name"
            type="text"
            fullWidth
            value={selectedUser?.name || ''}
            onChange={(e) =>
              setSelectedUser({ ...selectedUser!, name: e.target.value })
            }
          />
          <TextField
            margin="dense"
            label="Email"
            type="email"
            fullWidth
            value={selectedUser?.email || ''}
            onChange={(e) =>
              setSelectedUser({ ...selectedUser!, email: e.target.value })
            }
          />
          <Select
            margin="dense"
            fullWidth
            value={selectedUser?.role || ''}
            onChange={(e) =>
              setSelectedUser({ ...selectedUser!, role: e.target.value })
            }
          >
            <MenuItem value="admin">Admin</MenuItem>
            <MenuItem value="user">User</MenuItem>
          </Select>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button onClick={handleUpdateUser} color="primary">
            {selectedUser?.id ? 'Update' : 'Add'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default UserManager;

================
File: frontend/src/components/guest/Checkout.js
================
import React, { useState, useEffect } from 'react';
import { useCart } from '../../contexts/CartContext';
import { useAuth } from '../../contexts/AuthContext';
import PaymentForm from './PaymentForm';
import { apiCall } from '../../services/api';
import { handleApiError } from '../../utils/errorHandler';

const Checkout = () => {
  const { cart, total, clearCart } = useCart();
  const { user } = useAuth();
  const [orderPlaced, setOrderPlaced] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (cart.length === 0) {
      // Redirect to cart page or show a message
      console.log('Cart is empty');
    }
  }, [cart]);

  const handleCheckout = async (paymentDetails) => {
    try {
      const response = await apiCall({
        method: 'POST',
        url: '/orders',
        data: {
          userId: user.id,
          items: cart,
          total: total,
          paymentDetails: paymentDetails,
        },
      });

      if (response.success) {
        setOrderPlaced(true);
        clearCart();
      } else {
        setError('Failed to place order. Please try again.');
      }
    } catch (err) {
      handleApiError(err);
      setError('An error occurred. Please try again later.');
    }
  };

  if (orderPlaced) {
    return <div>Thank you for your order!</div>;
  }

  return (
    <div>
      <h1>Checkout</h1>
      {error && <div className="error">{error}</div>}
      <div className="cart-summary">
        <h2>Order Summary</h2>
        {cart.map((item) => (
          <div key={item.id}>
            {item.name} - ${item.price} x {item.quantity}
          </div>
        ))}
        <div>
          <strong>Total: ${total}</strong>
        </div>
      </div>
      <PaymentForm onSubmit={handleCheckout} />
    </div>
  );
};

export default Checkout;

================
File: frontend/src/components/guest/ItemBuilder.css
================
.item-builder {
  position: fixed;
  right: 0;
  top: 0;
  bottom: 0;
  width: 400px;
  background: white;
  box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 20px;
  overflow-y: auto;
  transform: translateX(100%);
  transition: transform 0.3s ease-in-out;
}

.item-builder.show {
  transform: translateX(0);
}

.item-builder-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ddd;
  margin-bottom: 10px;
}

.item-builder-body {
  padding: 10px 0;
}

.modifier-group label {
  display: block;
  font-weight: bold;
  margin-bottom: 5px;
}

.modifier-group select {
  width: 100%;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
  margin-bottom: 15px;
}

.modifier-group select.required {
  border-color: red;
}

.quantity-selector {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 15px 0;
}

.quantity-selector button {
  background: #007bff;
  color: white;
  padding: 5px 10px;
  border: none;
  cursor: pointer;
  font-size: 18px;
}

.add-to-cart-btn {
  display: block;
  width: 100%;
  background: #28a745;
  color: white;
  padding: 10px;
  border: none;
  cursor: pointer;
  font-size: 18px;
  border-radius: 5px;
  text-align: center;
}

.add-to-cart-btn:hover {
  background: #218838;
}

================
File: frontend/src/components/guest/ItemReviews.tsx
================
import React from 'react';
import { Typography, Box, Rating } from '@mui/material';

interface Review {
  id: number;
  firstName: string;
  lastInitial: string;
  rating: number;
  comment?: string;
  orderAgainPercentage?: number;
}

interface ItemReviewsProps {
  reviews: Review[];
}

const ItemReviews: React.FC<ItemReviewsProps> = ({ reviews }) => {
  const averageRating =
    reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
  const orderAgainPercentage =
    reviews.reduce(
      (sum, review) => sum + (review.orderAgainPercentage || 0),
      0
    ) / reviews.length;

  return (
    <Box>
      <Typography variant="h6">Customer Reviews</Typography>
      <Box display="flex" alignItems="center">
        <Rating value={averageRating} readOnly precision={0.1} />
        <Typography variant="body2" ml={1}>
          ({averageRating.toFixed(1)})
        </Typography>
      </Box>
      {orderAgainPercentage > 0 && (
        <Typography variant="body2">
          {orderAgainPercentage.toFixed(0)}% of customers would order this again
        </Typography>
      )}
      {reviews.map((review) => (
        <Box key={review.id} mt={2}>
          <Typography variant="subtitle2">
            {review.firstName} {review.lastInitial}.
          </Typography>
          <Rating value={review.rating} readOnly size="small" />
          {review.comment && (
            <Typography variant="body2">{review.comment}</Typography>
          )}
        </Box>
      ))}
    </Box>
  );
};

export default ItemReviews;

================
File: frontend/src/components/guest/Menu.tsx
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { fetchMenu } from '../../api/guestApi';
import { MenuItem } from '../../types';
import { useSocket } from '../../context/SocketContext';

const Menu: React.FC = () => {
  const { locationId } = useParams<{ locationId: string }>();
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const socket = useSocket();

  useEffect(() => {
    const loadMenu = async () => {
      const items = await fetchMenu(locationId);
      setMenuItems(items);
    };
    loadMenu();

    if (socket) {
      socket.emit('join-location', locationId);

      socket.on('inventory-update', (update) => {
        setMenuItems((prevItems) =>
          prevItems.map((item) =>
            item.id === update.menuItemId
              ? { ...item, onlineInventoryOffset: update.newInventory }
              : item
          )
        );
      });
    }

    return () => {
      if (socket) {
        socket.off('inventory-update');
      }
    };
  }, [locationId, socket]);

  return (
    <div>
      <h2>Menu</h2>
      {menuItems.map((item) => (
        <div key={item.id}>
          <h3>{item.name}</h3>
          <p>{item.description}</p>
          <p>Price: ${item.price}</p>
          {item.isAvailable ? (
            <button>Add to Cart</button>
          ) : (
            <span>Out of Stock</span>
          )}
        </div>
      ))}
    </div>
  );
};

export default Menu;

================
File: frontend/src/components/guest/MenuItem.tsx
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import { fetchReviewsForMenuItem } from '../../redux/slices/reviewSlice';
import { Typography, Box, Button } from '@mui/material';
import ItemReviews from './ItemReviews';
import SubmitReview from './SubmitReview';

interface MenuItemProps {
  id: number;
  name: string;
  description: string;
  price: number;
  addToCart: (itemId: number) => void;
}

const MenuItem: React.FC<MenuItemProps> = ({
  id,
  name,
  description,
  price,
  addToCart,
}) => {
  const dispatch = useDispatch<AppDispatch>();
  const reviews = useSelector(
    (state: RootState) => state.reviews.itemReviews[id] || []
  );

  useEffect(() => {
    dispatch(fetchReviewsForMenuItem(id));
  }, [dispatch, id]);

  return (
    <Box>
      <Typography variant="h6">{name}</Typography>
      <Typography variant="body1">{description}</Typography>
      <Typography variant="body2">${price.toFixed(2)}</Typography>
      <Button onClick={() => addToCart(id)}>Add to Cart</Button>
      <ItemReviews reviews={reviews} />
      <SubmitReview menuItemId={id} />
    </Box>
  );
};

export default MenuItem;

================
File: frontend/src/components/guest/PaymentForm.js
================
import React, { useState } from 'react';

const PaymentForm = ({ onSubmit }) => {
  const [cardNumber, setCardNumber] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [cvv, setCvv] = useState('');
  const [name, setName] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit({ cardNumber, expiryDate, cvv, name });
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name on Card</label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
        />
      </div>
      <div>
        <label htmlFor="cardNumber">Card Number</label>
        <input
          type="text"
          id="cardNumber"
          value={cardNumber}
          onChange={(e) => setCardNumber(e.target.value)}
          required
        />
      </div>
      <div>
        <label htmlFor="expiryDate">Expiry Date</label>
        <input
          type="text"
          id="expiryDate"
          value={expiryDate}
          onChange={(e) => setExpiryDate(e.target.value)}
          placeholder="MM/YY"
          required
        />
      </div>
      <div>
        <label htmlFor="cvv">CVV</label>
        <input
          type="text"
          id="cvv"
          value={cvv}
          onChange={(e) => setCvv(e.target.value)}
          required
        />
      </div>
      <button type="submit">Pay Now</button>
    </form>
  );
};

export default PaymentForm;

================
File: frontend/src/components/guest/SubmitReview.tsx
================
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../../redux/store';
import { createReview } from '../../api/reviewApi';
import { fetchReviewsForMenuItem } from '../../redux/slices/reviewSlice';
import { TextField, Button, Rating, Box, Typography } from '@mui/material';

interface SubmitReviewProps {
  menuItemId: number;
}

const SubmitReview: React.FC<SubmitReviewProps> = ({ menuItemId }) => {
  const dispatch = useDispatch<AppDispatch>();
  const [firstName, setFirstName] = useState('');
  const [lastInitial, setLastInitial] = useState('');
  const [rating, setRating] = useState<number | null>(null);
  const [comment, setComment] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (rating === null) return;

    try {
      await createReview({
        menuItemId,
        firstName,
        lastInitial,
        rating,
        comment,
      });
      dispatch(fetchReviewsForMenuItem(menuItemId));
      // Reset form
      setFirstName('');
      setLastInitial('');
      setRating(null);
      setComment('');
    } catch (error) {
      console.error('Error submitting review:', error);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit}>
      <Typography variant="h6">Submit a Review</Typography>
      <TextField
        label="First Name"
        value={firstName}
        onChange={(e) => setFirstName(e.target.value)}
        required
        fullWidth
        margin="normal"
      />
      <TextField
        label="Last Initial"
        value={lastInitial}
        onChange={(e) => setLastInitial(e.target.value)}
        required
        fullWidth
        margin="normal"
      />
      <Box my={2}>
        <Typography component="legend">Rating</Typography>
        <Rating
          name="rating"
          value={rating}
          onChange={(_, newValue) => setRating(newValue)}
        />
      </Box>
      <TextField
        label="Comment"
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        multiline
        rows={4}
        fullWidth
        margin="normal"
      />
      <Button type="submit" variant="contained" color="primary">
        Submit Review
      </Button>
    </Box>
  );
};

export default SubmitReview;

================
File: frontend/src/components/layout/Footer.tsx
================
import React from 'react';

const Footer: React.FC = () => {
  return (
    <footer className="footer bg-gray-800 text-white py-4 mt-8">
      <div className="container mx-auto text-center">
        <p>
          &copy; {new Date().getFullYear()} Client Brand. All rights reserved.
        </p>
        <ul className="flex justify-center space-x-4 mt-2">
          <li>
            <a href="/terms" className="hover:underline">
              Terms & Conditions
            </a>
          </li>
          <li>
            <a href="/privacy" className="hover:underline">
              Privacy Policy
            </a>
          </li>
          <li>
            <a href="/support" className="hover:underline">
              Support
            </a>
          </li>
        </ul>
      </div>
    </footer>
  );
};

export default Footer;

================
File: frontend/src/components/layout/Navbar.tsx
================
import React, { useMemo } from 'react';
import { Link } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { AppBar, Toolbar, Button, Typography } from '@mui/material';
import { RootState, AppDispatch } from '../../redux/store';
import { logout } from '../../redux/slices/authSlice';

const Navbar: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { isAuthenticated, user } = useSelector(
    (state: RootState) => state.auth
  );

  const handleLogout = () => {
    dispatch(logout());
  };

  const menuItems = useMemo(() => {
    const items = [
      { label: 'Dashboard', path: '/' },
      { label: 'Locations', path: '/admin/locations' },
      { label: 'Loyalty', path: '/admin/loyalty' },
      { label: 'Branding', path: '/admin/branding' },
      { label: 'AB Tests', path: '/admin/ab-tests' },
      { label: 'Reporting', path: '/admin/reporting' },
    ];

    if (user?.role === 'admin') {
      items.push({ label: 'Global Admin', path: '/global-admin' });
    }

    return items;
  }, [user?.role]);

  if (!isAuthenticated) return null;

  return (
    <AppBar position="static">
      <Toolbar>
        <Typography variant="h6" style={{ flexGrow: 1 }}>
          POS Admin
        </Typography>
        {menuItems.map((item) => (
          <Button
            key={item.path}
            color="inherit"
            component={Link}
            to={item.path}
          >
            {item.label}
          </Button>
        ))}
        <Button color="inherit" onClick={handleLogout}>
          Logout
        </Button>
      </Toolbar>
    </AppBar>
  );
};

export default React.memo(Navbar);

================
File: frontend/src/components/tablet/TabletOrderManager.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../../redux/store';
import {
  fetchActiveOrders,
  cancelOrder,
  markItemOutOfStock,
} from '../../redux/slices/orderSlice';
import { Order, OrderItem } from '../../types';
import { View, Text, FlatList, TouchableOpacity, StyleSheet } from 'react-native-web';

const TabletOrderManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const activeOrders = useSelector(
    (state: RootState) => state.orders.activeOrders
  );
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);

  useEffect(() => {
    dispatch(fetchActiveOrders());
    const interval = setInterval(() => {
      dispatch(fetchActiveOrders());
    }, 30000); // Refresh every 30 seconds

    return () => clearInterval(interval);
  }, [dispatch]);

  const handleCancelOrder = (orderId: string) => {
    dispatch(cancelOrder(orderId));
  };

  const handleMarkItemOutOfStock = (itemId: string) => {
    dispatch(markItemOutOfStock(itemId));
  };

  const renderOrderItem = ({ item }: { item: OrderItem }) => (
    <View style={styles.orderItem}>
      <Text>{item.name}</Text>
      <Text>Quantity: {item.quantity}</Text>
      {item.modifications &&
        item.modifications.map((mod: string, index: number) => (
          <Text key={index} style={styles.modification}>
            {mod}
          </Text>
        ))}
      <TouchableOpacity onPress={() => handleMarkItemOutOfStock(item.id)}>
        <Text style={styles.outOfStockButton}>Mark Out of Stock</Text>
      </TouchableOpacity>
    </View>
  );

  const renderOrder = ({ item }: { item: Order }) => (
    <TouchableOpacity
      onPress={() => setSelectedOrder(item)}
      style={styles.orderCard}
    >
      <Text style={styles.orderNumber}>Order #{item.id}</Text>
      <Text>Promise Time: {item.promiseTime}</Text>
      <Text>Total Items: {item.items.length}</Text>
      <TouchableOpacity onPress={() => handleCancelOrder(item.id)}>
        <Text style={styles.cancelButton}>Cancel Order</Text>
      </TouchableOpacity>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.orderList}>
        <Text style={styles.title}>Active Orders</Text>
        <FlatList
          data={activeOrders}
          renderItem={renderOrder}
          keyExtractor={(item) => item.id}
        />
      </View>
      {selectedOrder && (
        <View style={styles.orderDetails}>
          <Text style={styles.title}>Order Details</Text>
          <Text>Order #{selectedOrder.id}</Text>
          <Text>Promise Time: {selectedOrder.promiseTime}</Text>
          <FlatList
            data={selectedOrder.items}
            renderItem={renderOrderItem}
            keyExtractor={(item) => item.id}
          />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
  },
  orderList: {
    flex: 1,
    padding: 10,
  },
  orderDetails: {
    flex: 2,
    padding: 10,
    backgroundColor: '#f0f0f0',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  orderCard: {
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  orderNumber: {
    fontWeight: 'bold',
  },
  cancelButton: {
    color: 'red',
    marginTop: 5,
  },
  orderItem: {
    backgroundColor: 'white',
    padding: 10,
    marginBottom: 5,
    borderRadius: 5,
  },
  modification: {
    fontStyle: 'italic',
  },
  outOfStockButton: {
    color: 'orange',
    marginTop: 5,
  },
});

export default TabletOrderManager;

================
File: frontend/src/components/ABTestManager.tsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { Typography, Button, TextField, Select, MenuItem } from '@mui/material';
import { ABTestService } from '../services/ABTestService';
import { ABTest } from '../types/abTestTypes';

const ABTestManager: React.FC = () => {
  const [tests, setTests] = useState<ABTest[]>([]);
  const [newTest, setNewTest] = useState<Partial<ABTest>>({
    name: '',
    description: '',
    status: 'draft',
  });

  const abTestService = React.useMemo(() => new ABTestService(), []);

  const fetchTests = useCallback(async () => {
    try {
      const fetchedTests = await abTestService.getABTests();
      setTests(fetchedTests);
    } catch (error) {
      console.error('Failed to fetch A/B tests:', error);
    }
  }, [abTestService]);

  useEffect(() => {
    fetchTests();
  }, [fetchTests]);

  const handleCreateTest = async () => {
    try {
      await abTestService.createABTest(newTest as ABTest);
      fetchTests();
      setNewTest({ name: '', description: '', status: 'draft' });
    } catch (error) {
      console.error('Failed to create A/B test:', error);
    }
  };

  const handleUpdateTest = async (updatedTest: ABTest) => {
    try {
      await abTestService.updateABTest(updatedTest);
      fetchTests();
    } catch (error) {
      console.error('Failed to update A/B test:', error);
    }
  };

  return (
    <div>
      <Typography variant="h4">A/B Test Manager</Typography>
      <div>
        <TextField
          label="Test Name"
          value={newTest.name}
          onChange={(e) => setNewTest({ ...newTest, name: e.target.value })}
        />
        <TextField
          label="Description"
          value={newTest.description}
          onChange={(e) =>
            setNewTest({ ...newTest, description: e.target.value })
          }
        />
        <Select
          value={newTest.status}
          onChange={(e) =>
            setNewTest({
              ...newTest,
              status: e.target.value as ABTest['status'],
            })
          }
        >
          <MenuItem value="draft">Draft</MenuItem>
          <MenuItem value="active">Active</MenuItem>
          <MenuItem value="completed">Completed</MenuItem>
        </Select>
        <Button onClick={handleCreateTest}>Create Test</Button>
      </div>
      <div>
        {tests.map((test) => (
          <div key={test.id}>
            <Typography>{test.name}</Typography>
            <Typography>{test.description}</Typography>
            <Typography>{test.status}</Typography>
            <Button
              onClick={() => handleUpdateTest({ ...test, status: 'active' })}
            >
              Activate
            </Button>
            <Button
              onClick={() => handleUpdateTest({ ...test, status: 'completed' })}
            >
              Complete
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ABTestManager;

================
File: frontend/src/components/AnalyticsOverview.tsx
================
import React from 'react';
import { RevenueData, CustomerMetrics } from '../types/analyticsTypes';

interface Props {
  revenue: RevenueData[];
  customerMetrics: CustomerMetrics;
}

const AnalyticsOverview: React.FC<Props> = ({ revenue, customerMetrics }) => {
  const totalRevenue = revenue.reduce((sum, item) => sum + item.amount, 0);
  const averageRevenue = totalRevenue / revenue.length;

  return (
    <div className="analytics-overview">
      <div className="metric">
        <h4>Total Revenue</h4>
        <p>${totalRevenue.toFixed(2)}</p>
      </div>
      <div className="metric">
        <h4>Average Daily Revenue</h4>
        <p>${averageRevenue.toFixed(2)}</p>
      </div>
      <div className="metric">
        <h4>Total Customers</h4>
        <p>{customerMetrics.totalCustomers}</p>
      </div>
      <div className="metric">
        <h4>New Customers</h4>
        <p>{customerMetrics.newCustomers}</p>
      </div>
    </div>
  );
};

export default AnalyticsOverview;

================
File: frontend/src/components/AuditLogViewer.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchAuditLogsAsync } from '../redux/slices/auditLogSlice';

const AuditLogViewer: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { logs, totalPages, currentPage, status, error } = useSelector(
    (state: RootState) => state.auditLog
  );

  useEffect(() => {
    dispatch(fetchAuditLogsAsync(currentPage));
  }, [dispatch, currentPage]);

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  if (status === 'failed') {
    return <div>Error: {error}</div>;
  }

  return (
    <div>
      <h3>Audit Logs</h3>
      <table>
        <thead>
          <tr>
            <th>User</th>
            <th>Action</th>
            <th>Details</th>
            <th>Timestamp</th>
          </tr>
        </thead>
        <tbody>
          {logs.map((log) => (
            <tr key={log.id}>
              <td>{log.userId}</td>
              <td>{log.action}</td>
              <td>{log.details}</td>
              <td>{new Date(log.createdAt).toLocaleString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <div>
        <button
          onClick={() =>
            dispatch(fetchAuditLogsAsync(Math.max(1, currentPage - 1)))
          }
          disabled={currentPage === 1}
        >
          Previous
        </button>
        <span>
          Page {currentPage} of {totalPages}
        </span>
        <button
          onClick={() =>
            dispatch(fetchAuditLogsAsync(Math.min(totalPages, currentPage + 1)))
          }
          disabled={currentPage === totalPages}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default AuditLogViewer;

================
File: frontend/src/components/BrandingSettings.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  selectBrandingProfiles,
  addBrandingProfile,
  updateBrandingProfile,
  fetchBrandingProfiles,
} from '../redux/slices/brandingSlice';
import { BrandingProfile, AppDispatch, RootState } from '../types';
import { useClientContext } from '../context/ClientContext';
import { TextField, Button, Select, MenuItem, Box, Typography, CircularProgress } from '@mui/material';
import { SketchPicker } from 'react-color';

const BrandingSettings: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const brandingProfiles = useSelector(selectBrandingProfiles);
  const [currentProfile, setCurrentProfile] = useState<BrandingProfile>(
    brandingProfiles[0] || {
      id: 0,
      name: '',
      logoUrl: '',
      primaryColor: '#ffffff',
      secondaryColor: '#000000',
      fontColor: '#000000',
      secondaryFontColor: '#ffffff',
      fontFamily: 'Arial',
      logo: '',
    }
  );
  const [activeColor, setActiveColor] = useState<string | null>(null);

  const { clientId, isLoading, error } = useClientContext();

  useEffect(() => {
    if (clientId !== null) {
      dispatch(fetchBrandingProfiles(clientId));
    }
  }, [dispatch, clientId]);

  useEffect(() => {
    if (brandingProfiles.length > 0 && currentProfile.id === 0) {
      setCurrentProfile(brandingProfiles[0]);
    }
  }, [brandingProfiles, currentProfile.id]);

  const handleSave = () => {
    if (currentProfile.id === 0) {
      dispatch(addBrandingProfile(currentProfile));
    } else {
      dispatch(updateBrandingProfile(currentProfile));
    }
  };

  const handleColorChange = (color: string, field: keyof BrandingProfile) => {
    setCurrentProfile(prev => ({ ...prev, [field]: color }));
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setCurrentProfile(prev => ({ ...prev, logo: reader.result as string }));
      };
      reader.readAsDataURL(file);
    }
  };

  if (isLoading) return <CircularProgress className="m-4" />;
  if (error) return <Typography color="error" className="m-4">{error}</Typography>;
  if (clientId === null) return <Typography className="m-4">No client ID available</Typography>;

  return (
    <Box className="p-4 max-w-2xl mx-auto">
      <Typography variant="h4" className="mb-4">Branding Settings</Typography>
      <Select
        value={currentProfile.id}
        onChange={(e) => setCurrentProfile(brandingProfiles.find(p => p.id === e.target.value) || currentProfile)}
        className="mb-4 w-full"
      >
        {brandingProfiles.map((profile) => (
          <MenuItem key={profile.id} value={profile.id}>{profile.name}</MenuItem>
        ))}
      </Select>
      <form className="space-y-4">
        <TextField
          fullWidth
          label="Profile Name"
          value={currentProfile.name}
          onChange={(e) => setCurrentProfile(prev => ({ ...prev, name: e.target.value }))}
        />
        <TextField
          fullWidth
          label="Logo URL"
          value={currentProfile.logoUrl}
          onChange={(e) => setCurrentProfile(prev => ({ ...prev, logoUrl: e.target.value }))}
        />
        <Box>
          <Typography>Logo Upload</Typography>
          <input type="file" accept="image/*" onChange={handleFileUpload} className="mt-1" />
        </Box>
        {['primaryColor', 'secondaryColor', 'fontColor', 'secondaryFontColor'].map((color) => (
          <Box key={color}>
            <Typography>{color}</Typography>
            <Button
              onClick={() => setActiveColor(activeColor === color ? null : color)}
              style={{ backgroundColor: currentProfile[color as keyof BrandingProfile] as string }}
              className="w-full h-10"
            />
            {activeColor === color && (
              <SketchPicker
                color={currentProfile[color as keyof BrandingProfile] as string}
                onChange={(c) => handleColorChange(c.hex, color as keyof BrandingProfile)}
              />
            )}
          </Box>
        ))}
        <TextField
          fullWidth
          label="Font Family"
          value={currentProfile.fontFamily}
          onChange={(e) => setCurrentProfile(prev => ({ ...prev, fontFamily: e.target.value }))}
        />
        <Button variant="contained" color="primary" onClick={handleSave} className="w-full">
          Save
        </Button>
      </form>
      <Box className="mt-8 p-4 border rounded" style={{
        backgroundColor: currentProfile.primaryColor,
        color: currentProfile.fontColor,
        fontFamily: currentProfile.fontFamily,
      }}>
        <Typography>Preview</Typography>
        <p>This is how your branding will look.</p>
        <Button style={{ backgroundColor: currentProfile.secondaryColor, color: currentProfile.secondaryFontColor }}>
          Sample Button
        </Button>
      </Box>
    </Box>
  );
};

export default BrandingSettings;

================
File: frontend/src/components/ChallengeManager.tsx
================
import React, { useState, useEffect } from 'react';
import { Typography, Button, TextField, Select, MenuItem, SelectChangeEvent } from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchChallenges,
  createChallenge,
  updateChallenge,
  Challenge,
  ChallengeType
} from '../redux/slices/challengeSlice';

const ChallengeManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const challenges = useSelector((state: RootState) => state.challenge.challenges);
  const [newChallenge, setNewChallenge] = useState<Partial<Challenge>>({
    name: '',
    description: '',
    challengeType: 'purchase' as ChallengeType,
    targetValue: 0,
    reward: 0,
  });

  useEffect(() => {
    dispatch(fetchChallenges());
  }, [dispatch]);

  const handleCreate = () => {
    dispatch(createChallenge(newChallenge as Challenge));
    setNewChallenge({
      name: '',
      description: '',
      challengeType: 'purchase' as ChallengeType,
      targetValue: 0,
      reward: 0,
    });
  };

  const handleUpdate = (updatedChallenge: Challenge) => {
    dispatch(updateChallenge(updatedChallenge));
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = event.target;
    setNewChallenge(prev => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (event: SelectChangeEvent<ChallengeType>) => {
    setNewChallenge(prev => ({ ...prev, challengeType: event.target.value as ChallengeType }));
  };

  return (
    <div>
      <Typography variant="h4">Challenge Manager</Typography>
      <div>
        <TextField
          name="name"
          label="Challenge Name"
          value={newChallenge.name}
          onChange={handleInputChange}
        />
        <TextField
          name="description"
          label="Description"
          value={newChallenge.description}
          onChange={handleInputChange}
        />
        <Select
          value={newChallenge.challengeType}
          onChange={handleSelectChange}
          label="Challenge Type"
        >
          <MenuItem value="purchase">Purchase</MenuItem>
          <MenuItem value="visit">Visit</MenuItem>
          <MenuItem value="referral">Referral</MenuItem>
        </Select>
        <TextField
          name="targetValue"
          label="Target Value"
          type="number"
          value={newChallenge.targetValue}
          onChange={handleInputChange}
        />
        <TextField
          name="reward"
          label="Reward"
          type="number"
          value={newChallenge.reward}
          onChange={handleInputChange}
        />
        <Button onClick={handleCreate}>Create Challenge</Button>
      </div>
      <div>
        {challenges.map((challenge) => (
          <div key={challenge.id}>
            <Typography>{challenge.name}</Typography>
            <Typography>{challenge.description}</Typography>
            <Typography>Type: {challenge.challengeType}</Typography>
            <Typography>Target: {challenge.targetValue}</Typography>
            <Typography>Reward: {challenge.reward}</Typography>
            <Button onClick={() => handleUpdate({ ...challenge, status: 'active' })}>
              Activate
            </Button>
            <Button onClick={() => handleUpdate({ ...challenge, status: 'inactive' })}>
              Deactivate
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ChallengeManager;

================
File: frontend/src/components/ClientAdminHub.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { Typography, Button, Grid } from '@mui/material';
import {
  fetchLocations,
  updateLocationStatus,
} from '../redux/slices/locationSlice';
import LocationCard from './LocationCard';
import { Location } from '../types/locationTypes';
import { LocationService } from '../services/LocationService';

const ClientAdminHub: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector((state: RootState) => state.location.locations);
  const loading = useSelector((state: RootState) => state.location.loading);
  const error = useSelector((state: RootState) => state.location.error);
  const [selectedLocation, setSelectedLocation] = useState<Location | null>(
    null
  );
  const locationService = new LocationService();

  useEffect(() => {
    dispatch(fetchLocations());
  }, [dispatch]);

  const handleLocationSelect = (location: Location) => {
    setSelectedLocation(location);
  };

  const handleStatusUpdate = async (locationId: string, newStatus: string) => {
    try {
      await locationService.updateLocation(locationId, { status: newStatus });
      dispatch(updateLocationStatus({ locationId, status: newStatus }));
    } catch (error) {
      console.error('Failed to update location status:', error);
    }
  };

  if (loading) return <Typography>Loading...</Typography>;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <div>
      <Typography variant="h4">Client Admin Hub</Typography>
      <Grid container spacing={2}>
        {locations.map((location) => (
          <Grid item xs={12} sm={6} md={4} key={location.id}>
            <LocationCard location={location} onSelect={handleLocationSelect} />
            <Button onClick={() => handleStatusUpdate(location.id, 'active')}>
              Activate
            </Button>
            <Button onClick={() => handleStatusUpdate(location.id, 'inactive')}>
              Deactivate
            </Button>
          </Grid>
        ))}
      </Grid>
      {selectedLocation && (
        <div>
          <Typography variant="h5">
            Selected Location: {selectedLocation.name}
          </Typography>
          {/* Add more details or actions for the selected location */}
        </div>
      )}
    </div>
  );
};

export default ClientAdminHub;

================
File: frontend/src/components/ClientBrandingProvider.tsx
================
import React, { useEffect, useState, useMemo } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { ClientBrandingService } from '../services/ClientBrandingService';
import { ClientBranding } from '../types/clientTypes';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

const ClientBrandingProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [branding, setBranding] = useState<ClientBranding | null>(null);
  const clientId = useSelector(
    (state: RootState) => state.client.currentClient?.id
  );
  const clientBrandingService = useMemo(() => new ClientBrandingService(), []);

  useEffect(() => {
    const fetchBranding = async () => {
      if (clientId) {
        try {
          const fetchedBranding =
            await clientBrandingService.getClientBranding(clientId);
          setBranding(fetchedBranding);
        } catch (error) {
          console.error('Failed to fetch client branding:', error);
        }
      }
    };

    fetchBranding();
  }, [clientId, clientBrandingService]);

  const theme = useMemo(() => {
    if (!branding) return createTheme();

    return createTheme({
      palette: {
        primary: {
          main: branding.primaryColor,
        },
        secondary: {
          main: branding.secondaryColor,
        },
        text: {
          primary: branding.fontColor,
          secondary: branding.secondaryFontColor,
        },
      },
      typography: {
        fontFamily: branding.fontFamily,
      },
    });
  }, [branding]);

  if (!branding) {
    return null; // Or a loading component
  }

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div className="min-h-screen" style={{ backgroundColor: branding.primaryColor }}>
        {children}
      </div>
    </ThemeProvider>
  );
};

export default ClientBrandingProvider;

================
File: frontend/src/components/CorePOSProfileManager.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  fetchCorePOSProfiles,
  createCorePOSProfile,
  updateCorePOSProfile,
  deleteCorePOSProfile,
  syncPOSProfile,
} from '../redux/slices/corePOSProfileSlice';
import { CorePOSProfile } from '../types/posTypes';
import { AppDispatch, RootState } from '../redux/store';

const CorePOSProfileManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const profiles = useSelector((state: RootState) => state.corePOSProfile.profiles);
  const status = useSelector((state: RootState) => state.corePOSProfile.status);
  const error = useSelector((state: RootState) => state.corePOSProfile.error);

  const [selectedProfile, setSelectedProfile] = useState<CorePOSProfile | null>(
    null
  );
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchCorePOSProfiles());
    }
  }, [status, dispatch]);

  const handleCreateProfile = (profile: Omit<CorePOSProfile, 'id'>) => {
    dispatch(createCorePOSProfile(profile));
  };

  const handleUpdateProfile = (
    id: string,
    profile: Partial<CorePOSProfile>
  ) => {
    dispatch(updateCorePOSProfile({ id, profile }));
    setIsEditing(false);
    setSelectedProfile(null);
  };

  const handleDeleteProfile = (id: string) => {
    dispatch(deleteCorePOSProfile(id));
  };

  const handleSyncProfile = (id: string) => {
    dispatch(syncPOSProfile(id));
  };

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  if (status === 'failed') {
    return <div>Error: {error}</div>;
  }

  return (
    <div>
      <h2>Core POS Profiles</h2>
      <ul>
        {profiles.map((profile) => (
          <li key={profile.id}>
            {profile.name} - {profile.apiEndpoint}
            <button onClick={() => setSelectedProfile(profile)}>Edit</button>
            <button onClick={() => handleDeleteProfile(profile.id)}>
              Delete
            </button>
            <button onClick={() => handleSyncProfile(profile.id)}>Sync</button>
          </li>
        ))}
      </ul>
      {selectedProfile && (
        <div>
          <h3>{isEditing ? 'Edit Profile' : 'Profile Details'}</h3>
          {/* Add form fields for editing/viewing profile details */}
          {isEditing ? (
            <button
              onClick={() =>
                handleUpdateProfile(selectedProfile.id, selectedProfile)
              }
            >
              Save
            </button>
          ) : (
            <button onClick={() => setIsEditing(true)}>Edit</button>
          )}
        </div>
      )}
      <div>
        <h3>Create New Profile</h3>
        {/* Add form for creating new profile */}
        <button
          onClick={() =>
            handleCreateProfile({
              name: 'New Profile',
              apiEndpoint: 'https://api.example.com',
              apiKey: 'your-api-key',
              // Add other necessary fields
            })
          }
        >
          Create Profile
        </button>
      </div>
    </div>
  );
};

export default CorePOSProfileManager;

================
File: frontend/src/components/CustomerMetricsDisplay.tsx
================
import React from 'react';
import { CustomerMetrics } from '../types/analyticsTypes';

interface Props {
  metrics: CustomerMetrics;
}

const CustomerMetricsDisplay: React.FC<Props> = ({ metrics }) => {
  return (
    <div className="customer-metrics-display">
      <div className="metric">
        <h4>Total Customers</h4>
        <p>{metrics.totalCustomers}</p>
      </div>
      <div className="metric">
        <h4>New Customers</h4>
        <p>{metrics.newCustomers}</p>
      </div>
      <div className="metric">
        <h4>Repeat Customers</h4>
        <p>{metrics.repeatCustomers}</p>
      </div>
      <div className="metric">
        <h4>Average Order Value</h4>
        <p>${metrics.averageOrderValue.toFixed(2)}</p>
      </div>
    </div>
  );
};

export default CustomerMetricsDisplay;

================
File: frontend/src/components/DatePickerComponent.tsx
================
import React from 'react';
import { DatePicker } from 'antd';
import { Dayjs } from 'dayjs';

interface DatePickerComponentProps {
  onChange: (
    dates: [Dayjs, Dayjs] | null,
    dateStrings: [string, string]
  ) => void;
}

const DatePickerComponent: React.FC<DatePickerComponentProps> = ({
  onChange,
}) => {
  return (
    <DatePicker.RangePicker
      onChange={(dates, dateStrings) =>
        onChange(dates as [Dayjs, Dayjs] | null, dateStrings)
      }
      format="YYYY-MM-DD HH:mm"
      showTime
    />
  );
};

export default DatePickerComponent;

================
File: frontend/src/components/DetailedInventoryView.tsx
================
import React, { useState } from 'react';
import { InventoryItem } from '../types';

interface Props {
  inventory: InventoryItem[];
}

const DetailedInventoryView: React.FC<Props> = ({ inventory }) => {
  const [filter, setFilter] = useState('');

  const filteredInventory = inventory.filter((item) =>
    item.name.toLowerCase().includes(filter.toLowerCase())
  );

  return (
    <div className="detailed-inventory-view">
      <h3>Detailed Inventory View</h3>
      <input
        type="text"
        placeholder="Filter items..."
        value={filter}
        onChange={(e) => setFilter(e.target.value)}
      />
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th>Reorder Point</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {filteredInventory.map((item) => (
            <tr key={item.id}>
              <td>{item.name}</td>
              <td>{item.quantity}</td>
              <td>{item.reorderPoint}</td>
              <td>{item.quantity <= item.reorderPoint ? 'Low Stock' : 'OK'}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DetailedInventoryView;

================
File: frontend/src/components/DetailedLocationView.tsx
================
import React from 'react';
import { Location } from '../types/locationTypes';

interface Props {
  locations: Location[];
  onStatusChange: (locationId: number, isOpen: boolean) => void;
}

const DetailedLocationView: React.FC<Props> = ({
  locations,
  onStatusChange,
}) => {
  return (
    <div className="detailed-location-view">
      <h3>Detailed Location View</h3>
      {locations.map((location) => (
        <div key={location.id} className="location-card">
          <h4>{location.name}</h4>
          <p>Address: {location.address}</p>
          <p>Status: {location.isOpen ? 'Open' : 'Closed'}</p>
          <button onClick={() => onStatusChange(location.id, !location.isOpen)}>
            {location.isOpen ? 'Close' : 'Open'}
          </button>
          {location.isUsingNonStandardHours && <p>Using non-standard hours</p>}
          <p>Phone: {location.phoneNumber}</p>
          <p>Email: {location.email}</p>
          <p>City: {location.city}</p>
          <p>State: {location.state}</p>
          <p>Zip Code: {location.zipCode}</p>
          <p>Latitude: {location.latitude}</p>
          <p>Longitude: {location.longitude}</p>
        </div>
      ))}
    </div>
  );
};

export default DetailedLocationView;

================
File: frontend/src/components/DiscountApplier.tsx
================
import React, { useState } from 'react';
import { applyDiscount } from '../api/discountApi';

interface Props {
  cartTotal: number;
  onDiscountApplied: (discountedTotal: number) => void;
}

const DiscountApplier: React.FC<Props> = ({ cartTotal, onDiscountApplied }) => {
  const [code, setCode] = useState('');
  const [error, setError] = useState('');

  const handleApplyDiscount = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    try {
      const { discountedTotal, appliedDiscount } = await applyDiscount(
        code,
        cartTotal
      );
      onDiscountApplied(discountedTotal);
      setCode('');
      alert(`Discount applied: ${appliedDiscount.name}`);
    } catch (error) {
      setError('Invalid or expired discount code');
    }
  };

  return (
    <div>
      <form onSubmit={handleApplyDiscount}>
        <input
          type="text"
          value={code}
          onChange={(e) => setCode(e.target.value)}
          placeholder="Enter discount code"
        />
        <button type="submit">Apply Discount</button>
      </form>
      {error && <p style={{ color: 'red' }}>{error}</p>}
    </div>
  );
};

export default DiscountApplier;

================
File: frontend/src/components/DiscountBuilder.tsx
================
import React, { useState, useEffect } from 'react';
import {
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Typography,
  Box,
} from '@mui/material';
import { DiscountService } from '../services/DiscountService';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { Discount } from '../types/discountTypes';

const DiscountBuilder: React.FC = () => {
  const [name, setName] = useState('');
  const [type, setType] = useState('');
  const [value, setValue] = useState('');
  const [code, setCode] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [minPurchaseAmount, setMinPurchaseAmount] = useState('');
  const [maxUses, setMaxUses] = useState('');

  const locationId = useSelector(
    (state: RootState) => state.location.currentLocation?.id
  );
  const discountService = new DiscountService();

  useEffect(() => {
    console.log('Current location ID:', locationId);
  }, [locationId]);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      if (locationId) {
        const newDiscount: Omit<Discount, 'id'> = {
          name,
          type,
          value: parseFloat(value),
          code,
          locationId,
          startDate: new Date(startDate),
          endDate: new Date(endDate),
          minPurchaseAmount: parseFloat(minPurchaseAmount),
          maxUses: parseInt(maxUses, 10),
          isActive: true,
        };
        await discountService.createDiscount(newDiscount);
        console.log('Discount created successfully');
        // Reset form or show success message
      } else {
        console.error('No location selected');
      }
    } catch (error) {
      console.error('Failed to create discount:', error);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit} sx={{ maxWidth: 400, margin: 'auto' }}>
      <Typography variant="h4" gutterBottom>
        Create New Discount
      </Typography>
      <TextField
        label="Discount Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
        fullWidth
        margin="normal"
        required
      />
      <FormControl fullWidth margin="normal" required>
        <InputLabel>Discount Type</InputLabel>
        <Select
          value={type}
          onChange={(e) => setType(e.target.value as string)}
        >
          <MenuItem value="percentage">Percentage</MenuItem>
          <MenuItem value="fixed">Fixed Amount</MenuItem>
        </Select>
      </FormControl>
      <TextField
        label="Discount Value"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        fullWidth
        margin="normal"
        type="number"
        required
      />
      <TextField
        label="Discount Code"
        value={code}
        onChange={(e) => setCode(e.target.value)}
        fullWidth
        margin="normal"
        required
      />
      <TextField
        label="Start Date"
        type="date"
        value={startDate}
        onChange={(e) => setStartDate(e.target.value)}
        fullWidth
        margin="normal"
        InputLabelProps={{ shrink: true }}
        required
      />
      <TextField
        label="End Date"
        type="date"
        value={endDate}
        onChange={(e) => setEndDate(e.target.value)}
        fullWidth
        margin="normal"
        InputLabelProps={{ shrink: true }}
        required
      />
      <TextField
        label="Minimum Purchase Amount"
        value={minPurchaseAmount}
        onChange={(e) => setMinPurchaseAmount(e.target.value)}
        fullWidth
        margin="normal"
        type="number"
      />
      <TextField
        label="Maximum Uses"
        value={maxUses}
        onChange={(e) => setMaxUses(e.target.value)}
        fullWidth
        margin="normal"
        type="number"
      />
      <Button type="submit" variant="contained" color="primary" fullWidth sx={{ mt: 2 }}>
        Create Discount
      </Button>
    </Box>
  );
};

export default DiscountBuilder;

================
File: frontend/src/components/DiscountManager.tsx
================
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { addDiscount, updateDiscount } from '../redux/slices/discountSlice';

const DiscountManager: React.FC = () => {
  const [discountName, setDiscountName] = useState('');
  const [discountValue, setDiscountValue] = useState<number>(0);
  const dispatch = useDispatch();

  const handleAddDiscount = () => {
    dispatch(
      addDiscount({
        id: '1',
        name: discountName,
        value: parseFloat(discountValue.toString()),
      })
    );
  };

  const handleUpdateDiscount = () => {
    dispatch(
      updateDiscount({ id: '1', value: parseFloat(discountValue.toString()) })
    );
  };

  return (
    <div>
      <h1>Discount Manager</h1>
      <input
        type="text"
        value={discountName}
        onChange={(e) => setDiscountName(e.target.value)}
        placeholder="Discount Name"
      />
      <input
        type="number"
        value={discountValue}
        onChange={(e) => setDiscountValue(parseFloat(e.target.value))}
        placeholder="Discount Value"
      />
      <button onClick={handleAddDiscount}>Add Discount</button>
      <button onClick={handleUpdateDiscount}>Update Discount</button>
    </div>
  );
};

export default DiscountManager;

================
File: frontend/src/components/DiscountSelector.tsx
================
import React from 'react';

interface Discount {
  id: number;
  name: string;
  vanityName?: string;
}

interface DiscountSelectorProps {
  discounts: Discount[];
  selectedDiscountId: number;
  onSelect: (id: number) => void;
}

const DiscountSelector: React.FC<DiscountSelectorProps> = ({
  discounts,
  selectedDiscountId,
  onSelect,
}) => {
  return (
    <select
      value={selectedDiscountId}
      onChange={(e) => onSelect(Number(e.target.value))}
    >
      {discounts.map((discount) => (
        <option key={discount.id} value={discount.id}>
          {discount.vanityName || discount.name}
        </option>
      ))}
    </select>
  );
};

export default DiscountSelector;

================
File: frontend/src/components/DropOffLocationManager.tsx
================
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Typography,
  Button,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from '@mui/material';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { DropOffLocationService } from '../services/DropOffLocationService';
import { DropOffLocation } from '../types/locationTypes';

const DropOffLocationManager: React.FC = () => {
  const [locations, setLocations] = useState<DropOffLocation[]>([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [editingLocation, setEditingLocation] = useState<DropOffLocation | null>(null);
  const [newLocation, setNewLocation] = useState<Partial<DropOffLocation>>({
    name: '',
    address: '',
    latitude: 0,
    longitude: 0,
  });

  const dropOffLocationService = useMemo(
    () => new DropOffLocationService(),
    []
  );

  const fetchLocations = useCallback(async () => {
    try {
      const fetchedLocations =
        await dropOffLocationService.getDropOffLocations();
      setLocations(fetchedLocations);
    } catch (error) {
      console.error('Failed to fetch drop-off locations:', error);
    }
  }, [dropOffLocationService]);

  useEffect(() => {
    fetchLocations();
  }, [fetchLocations]);

  const handleEdit = (location: DropOffLocation) => {
    setEditingLocation(location);
    setNewLocation(location);
    setOpenDialog(true);
  };

  const handleDelete = async (locationId: string) => {
    try {
      await dropOffLocationService.deleteDropOffLocation(locationId);
      fetchLocations();
    } catch (error) {
      console.error('Failed to delete drop-off location:', error);
    }
  };

  const handleDialogClose = () => {
    setOpenDialog(false);
    setEditingLocation(null);
    setNewLocation({
      name: '',
      address: '',
      latitude: 0,
      longitude: 0,
    });
  };

  const handleSave = async () => {
    try {
      if (editingLocation) {
        await dropOffLocationService.updateDropOffLocation(editingLocation.id, newLocation as DropOffLocation);
      } else {
        await dropOffLocationService.createDropOffLocation(newLocation as DropOffLocation);
      }
      fetchLocations();
      handleDialogClose();
    } catch (error) {
      console.error('Failed to save drop-off location:', error);
    }
  };

  return (
    <div>
      <Typography variant="h6">Drop-off Locations</Typography>
      <List>
        {locations.map((location) => (
          <ListItem key={location.id}>
            <ListItemText
              primary={location.name}
              secondary={location.address}
            />
            <IconButton onClick={() => handleEdit(location)}>
              <EditIcon />
            </IconButton>
            <IconButton onClick={() => handleDelete(location.id)}>
              <DeleteIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>
      <Button variant="contained" color="primary" onClick={() => setOpenDialog(true)}>
        Add New Location
      </Button>

      <Dialog open={openDialog} onClose={handleDialogClose}>
        <DialogTitle>{editingLocation ? 'Edit Location' : 'Add New Location'}</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Name"
            fullWidth
            value={newLocation.name}
            onChange={(e) => setNewLocation({ ...newLocation, name: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Address"
            fullWidth
            value={newLocation.address}
            onChange={(e) => setNewLocation({ ...newLocation, address: e.target.value })}
          />
          <TextField
            margin="dense"
            label="Latitude"
            fullWidth
            type="number"
            value={newLocation.latitude}
            onChange={(e) => setNewLocation({ ...newLocation, latitude: parseFloat(e.target.value) })}
          />
          <TextField
            margin="dense"
            label="Longitude"
            fullWidth
            type="number"
            value={newLocation.longitude}
            onChange={(e) => setNewLocation({ ...newLocation, longitude: parseFloat(e.target.value) })}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDialogClose}>Cancel</Button>
          <Button onClick={handleSave} color="primary">Save</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default DropOffLocationManager;

================
File: frontend/src/components/ErrorBoundary.tsx
================
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(_: Error): State {
    return { hasError: true };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return <h1>Sorry.. there was an error</h1>;
    }

    return this.props.children;
  }
}

================
File: frontend/src/components/errorHandler.ts
================
import { toast } from 'react-toastify';

export const logError = (message: string, error: Error, info?: unknown) => {
  console.error(message, error, info);
  // Here you can add logic to send error reports to your server or a service like Sentry
};

export const handleApiError = (error: unknown) => {
  if (error instanceof Error && 'response' in error && error.response) {
    // The request was made and the server responded with a status code
    toast.error(
      `Error: ${
        (error.response as { data?: { message?: string } })?.data?.message ||
        'An unexpected error occurred'
      }`
    );
    logError('API error', error, error.response);
  } else if (error instanceof Error && 'request' in error && error.request) {
    // The request was made but no response was received
    toast.error('Network error. Please check your connection.');
    logError('Network error', error);
  } else {
    // Something happened in setting up the request that triggered an Error
    toast.error('An unexpected error occurred');
    logError('Unexpected error', error as Error);
  }
};

================
File: frontend/src/components/ExecutiveDashboard.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchRevenue,
  fetchCustomerMetrics,
  fetchSalesByCategory,
  fetchTopSellingItems,
  fetchRealtimeMetrics
} from '../redux/slices/dashboardSlice';
import RevenueChart from './RevenueChart';
import CustomerMetricsDisplay from './CustomerMetricsDisplay';
import SalesByCategoryChart from './SalesByCategoryChart';
import TopSellingItemsChart from './TopSellingItemsChart';
import InventoryAlerts from './InventoryAlerts';
import RealtimeMetricsTicker from './RealtimeMetricsTicker';
import { DateRange } from '../types/dateTypes';

const ExecutiveDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { revenue, customerMetrics, inventory, salesReport, realtimeMetrics } = useSelector((state: RootState) => state.dashboard);

  const [dateRange, setDateRange] = useState<DateRange>({
    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
    end: new Date(),
  });

  useEffect(() => {
    dispatch(fetchRevenue(dateRange));
    dispatch(fetchCustomerMetrics());
    dispatch(fetchSalesByCategory(dateRange));
    dispatch(fetchTopSellingItems(dateRange));
  }, [dispatch, dateRange]);

  useEffect(() => {
    const interval = setInterval(() => {
      dispatch(fetchRealtimeMetrics());
    }, 60000); // Fetch realtime metrics every minute

    return () => clearInterval(interval);
  }, [dispatch]);

  return (
    <div>
      <h1>Executive Dashboard</h1>
      <RevenueChart data={revenue} dateRange={dateRange} setDateRange={setDateRange} />
      <CustomerMetricsDisplay metrics={customerMetrics} />
      <SalesByCategoryChart data={salesReport.salesByCategory} />
      <TopSellingItemsChart data={salesReport.topSellingItems} />
      <InventoryAlerts inventory={inventory} />
      <RealtimeMetricsTicker metrics={realtimeMetrics} />
    </div>
  );
};

export default ExecutiveDashboard;

================
File: frontend/src/components/ExportData.tsx
================
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { exportToCSV } from '../utils/exportUtils';
import { Button, Typography, Box } from '@mui/material';
import { InventoryItem, Order, RevenueData } from '../types';

const ExportData: React.FC = () => {
  const inventory = useSelector((state: RootState) => state.inventory.items);
  const orders = useSelector((state: RootState) => state.orders.orders);
  const revenue = useSelector((state: RootState) => state.revenue.data);

  const handleExport = (dataType: 'inventory' | 'orders' | 'revenue') => {
    switch (dataType) {
      case 'inventory':
        exportToCSV(inventory as InventoryItem[], 'inventory_report');
        break;
      case 'orders':
        exportToCSV(orders as Order[], 'orders_report');
        break;
      case 'revenue':
        exportToCSV(revenue as RevenueData[], 'revenue_report');
        break;
    }
  };

  return (
    <Box className="export-data">
      <Typography variant="h3" gutterBottom>Export Data</Typography>
      <Box display="flex" flexDirection="column" gap={2}>
        <Button variant="contained" color="primary" onClick={() => handleExport('inventory')}>
          Export Inventory
        </Button>
        <Button variant="contained" color="primary" onClick={() => handleExport('orders')}>
          Export Orders
        </Button>
        <Button variant="contained" color="primary" onClick={() => handleExport('revenue')}>
          Export Revenue
        </Button>
      </Box>
    </Box>
  );
};

export default ExportData;

================
File: frontend/src/components/GuestProfile.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchGuestProfile } from '../redux/slices/guestSlice';
import { GuestProfile as GuestProfileType } from '../types/guestTypes';
import { Typography, Box, CircularProgress } from '@mui/material';

const GuestProfile: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const guestProfile = useSelector((state: RootState) => state.guest.profile as GuestProfileType);
  const loading = useSelector((state: RootState) => state.guest.loading);
  const error = useSelector((state: RootState) => state.guest.error);

  useEffect(() => {
    dispatch(fetchGuestProfile());
  }, [dispatch]);

  if (loading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  if (!guestProfile) {
    return <Typography>No guest profile found.</Typography>;
  }

  return (
    <Box>
      <Typography variant="h2">Guest Profile</Typography>
      <Typography variant="body1">
        Name: {guestProfile.firstName} {guestProfile.lastName}
      </Typography>
      <Typography variant="body1">
        Email: {guestProfile.email}
      </Typography>
      <Typography variant="body1">
        Phone: {guestProfile.phoneNumber}
      </Typography>
      <Typography variant="body1">
        Loyalty Points: {guestProfile.loyaltyPoints}
      </Typography>
      {guestProfile.loyaltyTier && (
        <Typography variant="body1">
          Loyalty Tier: {guestProfile.loyaltyTier}
        </Typography>
      )}
    </Box>
  );
};

export default GuestProfile;

================
File: frontend/src/components/Home.tsx
================
import React from 'react';

const Home: React.FC = () => {
  return (
    <div>
      <h1>Welcome to the Home Page</h1>
      {/* Add more content as needed */}
    </div>
  );
};

export default Home;

================
File: frontend/src/components/InventoryAlerts.tsx
================
import React from 'react';
import { InventoryItem } from '../types/inventoryTypes';
import { Typography, List, ListItem, ListItemText, Box } from '@mui/material';

interface Props {
  items: InventoryItem[];
}

const InventoryAlerts: React.FC<Props> = ({ items }) => {
  const outOfStockItems = items.filter(item => item.quantity <= 0);
  const lowStockItems = items.filter(item => item.quantity > 0 && item.quantity <= item.lowStockThreshold);

  return (
    <Box className="inventory-alerts">
      <Typography variant="h4">Inventory Alerts</Typography>
      <Box>
        <Typography variant="h5">Out of Stock Items</Typography>
        {outOfStockItems.length === 0 ? (
          <Typography>No items are currently out of stock.</Typography>
        ) : (
          <List>
            {outOfStockItems.map((item) => (
              <ListItem key={item.id}>
                <ListItemText
                  primary={item.name}
                  secondary={`Out of stock for ${item.outOfStockDuration} hours`}
                />
              </ListItem>
            ))}
          </List>
        )}
      </Box>
      <Box>
        <Typography variant="h5">Low Stock Items</Typography>
        {lowStockItems.length === 0 ? (
          <Typography>No items are currently low in stock.</Typography>
        ) : (
          <List>
            {lowStockItems.map((item) => (
              <ListItem key={item.id}>
                <ListItemText
                  primary={item.name}
                  secondary={`Current quantity: ${item.quantity}, Low stock threshold: ${item.lowStockThreshold}`}
                />
              </ListItem>
            ))}
          </List>
        )}
      </Box>
    </Box>
  );
};

export default InventoryAlerts;

================
File: frontend/src/components/Layout.tsx
================
import React, { FC, ReactNode } from 'react';

interface LayoutProps {
  children: ReactNode; // Accept children as a prop
}

const Layout: FC<LayoutProps> = ({ children }) => {
  return <div>{children}</div>; // Render children within the layout
};

export default Layout;

================
File: frontend/src/components/LazyBarChart.tsx
================
import React from 'react';
import { Bar } from 'react-chartjs-2';
import { ChartData } from '../types/dashboardTypes';

interface LazyBarChartProps {
  data: ChartData;
  title: string;
}

const LazyBarChart: React.FC<LazyBarChartProps> = ({ data, title }) => {
  // ... (component implementation)
};

export default LazyBarChart;

================
File: frontend/src/components/LazyLineChart.tsx
================
import React from 'react';

interface LazyLineChartProps {
  data: any; // Replace 'any' with the appropriate type for your chart data
}

const LazyLineChart: React.FC<LazyLineChartProps> = ({ data }) => {
  // Implement your line chart logic here
  return (
    <div>
      {/* Your line chart UI */}
    </div>
  );
};

export default LazyLineChart;

================
File: frontend/src/components/LazyLocationComparisonChart.tsx
================
import React from 'react';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ChartOptions,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface LocationComparisonData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor: string;
  }[];
}

interface LazyLocationComparisonChartProps {
  data: LocationComparisonData;
}

const LazyLocationComparisonChart: React.FC<LazyLocationComparisonChartProps> = ({ data }) => {
  const options: ChartOptions<'bar'> = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Location Comparison',
      },
    },
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  return <Bar options={options} data={data} />;
};

export default LazyLocationComparisonChart;

================
File: frontend/src/components/LoadingSpinner.tsx
================
import React from 'react';
import { CircularProgress } from '@mui/material';

const LoadingSpinner: React.FC = () => (
  <div
    style={{
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      height: '100vh',
    }}
  >
    <CircularProgress />
  </div>
);

export default LoadingSpinner;

================
File: frontend/src/components/LocationBuilder.tsx
================
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { createLocation } from '../redux/slices/locationSlice';
import { Location } from '../types/locationTypes';
import { AppDispatch } from '../redux/store';
import { TextField, Button, Box, Typography } from '@mui/material';

const LocationBuilder: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [location, setLocation] = useState<Omit<Location, 'id'>>({
    name: '',
    address: '',
    city: '',
    state: '',
    zipCode: '',
    phoneNumber: '',
    email: '',
    latitude: 0,
    longitude: 0,
    isActive: true,
    clientId: '',
    taxRate: 0,
    timezone: '',
  });
  const [errors, setErrors] = useState<Partial<Record<keyof Location, string>>>({});

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setLocation((prev) => ({ ...prev, [name]: value }));
    setErrors((prev) => ({ ...prev, [name]: '' }));
  };

  const validateForm = () => {
    const newErrors: Partial<Record<keyof Location, string>> = {};
    if (!location.name) newErrors.name = 'Name is required';
    if (!location.address) newErrors.address = 'Address is required';
    if (!location.city) newErrors.city = 'City is required';
    if (!location.state) newErrors.state = 'State is required';
    if (!location.zipCode) newErrors.zipCode = 'Zip Code is required';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = () => {
    if (validateForm()) {
      dispatch(createLocation(location));
    }
  };

  return (
    <Box>
      <Typography variant="h2">Location Builder</Typography>
      <Box component="form" display="flex" flexDirection="column" gap={2}>
        <TextField
          name="name"
          label="Name"
          value={location.name}
          onChange={handleInputChange}
          error={!!errors.name}
          helperText={errors.name}
          required
        />
        <TextField
          name="address"
          label="Address"
          value={location.address}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="city"
          label="City"
          value={location.city}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="state"
          label="State"
          value={location.state}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="zipCode"
          label="Zip Code"
          value={location.zipCode}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="phoneNumber"
          label="Phone Number"
          value={location.phoneNumber}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="email"
          label="Email"
          type="email"
          value={location.email}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="latitude"
          label="Latitude"
          type="number"
          value={location.latitude}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="longitude"
          label="Longitude"
          type="number"
          value={location.longitude}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="taxRate"
          label="Tax Rate"
          type="number"
          value={location.taxRate}
          onChange={handleInputChange}
          required
        />
        <TextField
          name="timezone"
          label="Timezone"
          value={location.timezone}
          onChange={handleInputChange}
          required
        />
        <Button variant="contained" color="primary" onClick={handleSave}>
          Save Location
        </Button>
      </Box>
    </Box>
  );
};

export default LocationBuilder;

================
File: frontend/src/components/LocationCard.tsx
================
import React from 'react';
import { Location } from '../types';

interface LocationCardProps {
  location: Location;
}

const LocationCard: React.FC<LocationCardProps> = ({ location }) => {
  return (
    <div>
      <h2>{location.name}</h2>
      <p>{location.address}</p>
      {/* Add more fields as necessary */}
    </div>
  );
};

export default LocationCard;

================
File: frontend/src/components/LocationList.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  List,
  ListItem,
  ListItemText,
  Typography,
  CircularProgress,
  Box,
  Button,
} from '@mui/material';
import {
  fetchLocations,
  selectLocations,
  selectLocationStatus,
  selectLocationError,
} from '../redux/slices/locationSlice';
import { Location, RootState, AppDispatch } from '../types';
import { Link } from 'react-router-dom';

const LocationList: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector((state: RootState) => selectLocations(state));
  const status = useSelector((state: RootState) => selectLocationStatus(state));
  const error = useSelector((state: RootState) => selectLocationError(state));

  useEffect(() => {
    if (status === 'idle') {
      dispatch(fetchLocations());
    }
  }, [status, dispatch]);

  if (status === 'loading') {
    return <CircularProgress />;
  }

  if (status === 'failed') {
    return (
      <Typography color="error">Failed to load locations: {error}</Typography>
    );
  }

  return (
    <Box>
      <Typography variant="h2">Locations</Typography>
      <List>
        {locations.map((location: Location) => (
          <ListItem key={location.id}>
            <ListItemText
              primary={location.name}
              secondary={`${location.address}, ${location.city}, ${location.state} ${location.zipCode}`}
            />
            <Button component={Link} to={`/locations/${location.id}`} variant="outlined">
              View Details
            </Button>
          </ListItem>
        ))}
      </List>
      <Button component={Link} to="/locations/new" variant="contained" color="primary">
        Add New Location
      </Button>
    </Box>
  );
};

export default LocationList;

================
File: frontend/src/components/LocationManager.tsx
================
import React, { useEffect, useState, useCallback, useMemo } from 'react';
import { useDispatch } from 'react-redux';
import { LocationService } from '../services/LocationService';
import { updateLocation } from '../redux/slices/locationSlice';
import { Location, LocationUpdateData } from '../types/locationTypes';

const LocationManager: React.FC = () => {
  const [locations, setLocations] = useState<Location[]>([]);
  const dispatch = useDispatch();
  const locationService = useMemo(() => new LocationService(), []);

  const fetchLocations = useCallback(async () => {
    try {
      const fetchedLocations = await locationService.getLocations();
      setLocations(fetchedLocations);
    } catch (error) {
      console.error('Failed to fetch locations:', error);
    }
  }, [locationService]);

  useEffect(() => {
    fetchLocations();
  }, [fetchLocations]);

  const handleUpdateLocation = useCallback(
    async (locationId: string, updateData: LocationUpdateData) => {
      try {
        const updatedLocation = await locationService.updateLocation(
          locationId,
          updateData
        );
        dispatch(updateLocation({ locationId, updateData: updatedLocation }));
        setLocations((prevLocations) =>
          prevLocations.map((loc) =>
            loc.id === locationId ? { ...loc, ...updatedLocation } : loc
          )
        );
      } catch (error) {
        console.error('Failed to update location:', error);
      }
    },
    [locationService, dispatch]
  );

  return (
    <div>
      <h2>Location Manager</h2>
      {locations.map((location) => (
        <div key={location.id}>
          <h3>{location.name}</h3>
          <p>{location.address}</p>
          <button
            onClick={() =>
              handleUpdateLocation(location.id, { status: 'active' })
            }
          >
            Activate
          </button>
          <button
            onClick={() =>
              handleUpdateLocation(location.id, { status: 'inactive' })
            }
          >
            Deactivate
          </button>
        </div>
      ))}
    </div>
  );
};

export default LocationManager;

================
File: frontend/src/components/LocationMap.tsx
================
import React, { useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { Location } from '../types';

interface LocationMapProps {
  locations: Location[];
}

const SetViewOnClick: React.FC<{ center: [number, number]; zoom: number }> = ({
  center,
  zoom,
}) => {
  const map = useMap();
  useEffect(() => {
    map.setView(center, zoom);
  }, [center, zoom, map]);
  return null;
};

const LocationMap: React.FC<LocationMapProps> = ({ locations }) => {
  const defaultPosition: [number, number] = [51.505, -0.09]; // Default to London if no locations

  const mapCenter: [number, number] =
    locations.length > 0
      ? [locations[0].latitude, locations[0].longitude]
      : defaultPosition;

  return (
    <MapContainer style={{ height: '400px', width: '100%' }}>
      <SetViewOnClick center={mapCenter} zoom={13} />
      <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
      {locations.map((location) => (
        <Marker
          key={location.id}
          position={[location.latitude, location.longitude]}
        >
          <Popup>
            <b>{location.name}</b>
            <br />
            {location.address}
          </Popup>
        </Marker>
      ))}
    </MapContainer>
  );
};

export default LocationMap;

================
File: frontend/src/components/LocationSelector.tsx
================
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { setSelectedLocations } from '../redux/slices/userSlice';
import { FormControl, InputLabel, Select, MenuItem, Checkbox, ListItemText } from '@mui/material';

const LocationSelector: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector((state: RootState) => state.locations.locations);
  const selectedLocations = useSelector((state: RootState) => state.user.selectedLocations);

  const handleLocationChange = (event: React.ChangeEvent<{ value: unknown }>) => {
    const locationIds = event.target.value as string[];
    dispatch(setSelectedLocations(locationIds));
  };

  return (
    <FormControl fullWidth>
      <InputLabel id="location-select-label">Locations</InputLabel>
      <Select
        labelId="location-select-label"
        id="location-select"
        multiple
        value={selectedLocations}
        onChange={handleLocationChange}
        renderValue={(selected) => (selected as string[]).join(', ')}
      >
        {locations.map((location) => (
          <MenuItem key={location.id} value={location.id}>
            <Checkbox checked={selectedLocations.indexOf(location.id) > -1} />
            <ListItemText primary={location.name} />
          </MenuItem>
        ))}
      </Select>
    </FormControl>
  );
};

export default LocationSelector;

================
File: frontend/src/components/Login.tsx
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Typography, Button, Box } from '@mui/material';
import { useClientContext } from '../context/ClientContext';
import { UserRole } from '../types/userTypes';
import LoginForm from './LoginForm';

const Login: React.FC = () => {
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { client, subdomain } = useClientContext();

  if (!client) {
    return <div>Loading...</div>;
  }

  const handleLoginSuccess = (user: any) => {
    if (user.roles.includes(UserRole.CLIENT_ADMIN)) {
      navigate('/admin/dashboard');
    } else if (user.roles.includes(UserRole.GUEST)) {
      navigate('/guest/dashboard');
    } else {
      navigate('/');
    }
  };

  const handleLoginError = (err: any) => {
    setError('Invalid email or password');
    console.error(err);
  };

  return (
    <Box sx={{ maxWidth: 400, margin: 'auto', mt: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Login to {client.name}
      </Typography>
      <LoginForm onSuccess={handleLoginSuccess} onError={handleLoginError} />
      {error && (
        <Typography color="error" sx={{ mt: 2 }}>
          {error}
        </Typography>
      )}
      <Box sx={{ mt: 2 }}>
        <Button
          fullWidth
          variant="outlined"
          color="secondary"
          onClick={() => navigate('/register')}
          sx={{ mb: 1 }}
        >
          Register
        </Button>
        <Button
          fullWidth
          variant="text"
          onClick={() => navigate('/forgot-password')}
        >
          Forgot Password?
        </Button>
      </Box>
    </Box>
  );
};

export default Login;

================
File: frontend/src/components/LoginForm.tsx
================
import React, { useEffect, useRef } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { loginUser } from '../redux/slices/authSlice';
import {
  Button,
  TextField,
  Typography,
  Box,
  CircularProgress,
} from '@mui/material';
import { AppDispatch, RootState } from '../redux/store';
import { unwrapResult } from '@reduxjs/toolkit';

export interface LoginFormInputs {
  email: string;
  password: string;
}

interface LoginFormProps {
  onSuccess?: (user: any) => void;
  onError?: (error: any) => void;
}

const LoginForm: React.FC<LoginFormProps> = ({ onSuccess, onError }) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginFormInputs>();
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const emailRef = useRef<HTMLInputElement>(null);

  const authStatus = useSelector((state: RootState) => state.auth.status);
  const isLoading = authStatus === 'loading';

  const onSubmit: SubmitHandler<LoginFormInputs> = async (data) => {
    try {
      const actionResult = await dispatch(loginUser(data));
      const user = unwrapResult(actionResult);
      if (onSuccess) {
        onSuccess(user);
      } else {
        if (user.role === 'admin') {
          navigate('/admin/dashboard');
        } else {
          navigate('/');
        }
      }
    } catch (error) {
      console.error('Login failed', error);
      if (onError) {
        onError(error);
      } else {
        alert('Login failed. Please try again.');
      }
    }
  };

  useEffect(() => {
    if (emailRef.current) {
      emailRef.current.focus();
    }
  }, []);

  return (
    <Box component="form" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ mt: 1 }}>
      <TextField
        margin="normal"
        required
        fullWidth
        label="Email Address"
        autoComplete="email"
        inputRef={emailRef}
        {...register('email', { required: 'Email is required' })}
        error={!!errors.email}
        helperText={errors.email ? errors.email.message : ''}
        disabled={isLoading}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        label="Password"
        type="password"
        autoComplete="current-password"
        {...register('password', { required: 'Password is required' })}
        error={!!errors.password}
        helperText={errors.password ? errors.password.message : ''}
        disabled={isLoading}
      />
      <Button
        type="submit"
        fullWidth
        variant="contained"
        color="primary"
        sx={{ mt: 3, mb: 2 }}
        disabled={isLoading}
      >
        {isLoading ? <CircularProgress size={24} /> : 'Sign In'}
      </Button>
    </Box>
  );
};

export default LoginForm;

================
File: frontend/src/components/LoginModal.tsx
================
import React from 'react';
import { Dialog, DialogTitle, DialogContent } from '@mui/material';
import LoginForm, { LoginFormInputs } from './LoginForm';

interface LoginModalProps {
  isOpen: boolean;
  onClose: () => void;
  onLogin: (data: LoginFormInputs) => void;
}

const LoginModal: React.FC<LoginModalProps> = ({ isOpen, onClose, onLogin }) => {
  return (
    <Dialog open={isOpen} onClose={onClose}>
      <DialogTitle>Login</DialogTitle>
      <DialogContent>
        <LoginForm onSuccess={onLogin} onError={() => {}} />
      </DialogContent>
    </Dialog>
  );
};

export default LoginModal;

================
File: frontend/src/components/LoyaltyChallengeManager.tsx
================
import React, { useState, useEffect } from 'react';
import {
  getLoyaltyChallenges,
  createLoyaltyChallenge,
  updateLoyaltyChallenge,
  deleteLoyaltyChallenge,
} from '../api/loyaltyChallengeApi';
import { LoyaltyChallenge, MenuItem, MenuGroup } from '../types';
import { getMenuItems, getMenuGroups } from '../api/menuApi';
import {
  Typography,
  Button,
  TextField,
  Select,
  MenuItem as MuiMenuItem,
  FormControl,
  InputLabel,
  Box,
  Grid,
  Paper,
} from '@mui/material';

const LoyaltyChallengeManager: React.FC = () => {
  const [challenges, setChallenges] = useState<LoyaltyChallenge[]>([]);
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [menuGroups, setMenuGroups] = useState<MenuGroup[]>([]);
  const [newChallenge, setNewChallenge] = useState<Omit<LoyaltyChallenge, 'id'>>({
    name: '',
    description: '',
    conditions: {
      itemCount: 0,
      timeframe: '',
      minSpend: 0,
      frequency: 'unlimited',
      restrictedMenuItems: [],
      restrictedMenuGroups: [],
    },
    rewardConfig: {
      reward: '',
      points: 0,
      discount: 0,
    },
    challengeType: 'purchase-based',
    startDate: new Date(),
    endDate: new Date(),
    status: 'active',
    participantCount: 0,
    locationId: 0,
    clientId: 0,
  });

  useEffect(() => {
    fetchChallenges();
    fetchMenuItems();
    fetchMenuGroups();
  }, []);

  const fetchChallenges = async () => {
    try {
      const fetchedChallenges = await getLoyaltyChallenges();
      setChallenges(fetchedChallenges);
    } catch (error) {
      console.error('Error fetching loyalty challenges:', error);
    }
  };

  const fetchMenuItems = async () => {
    try {
      const items = await getMenuItems();
      setMenuItems(items);
    } catch (error) {
      console.error('Error fetching menu items:', error);
    }
  };

  const fetchMenuGroups = async () => {
    try {
      const groups = await getMenuGroups();
      setMenuGroups(groups);
    } catch (error) {
      console.error('Error fetching menu groups:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createLoyaltyChallenge(newChallenge);
      setNewChallenge({
        name: '',
        description: '',
        conditions: {
          itemCount: 0,
          timeframe: '',
          minSpend: 0,
          frequency: 'unlimited',
          restrictedMenuItems: [],
          restrictedMenuGroups: [],
        },
        rewardConfig: {
          reward: '',
          points: 0,
          discount: 0,
        },
        challengeType: 'purchase-based',
        startDate: new Date(),
        endDate: new Date(),
        status: 'active',
        participantCount: 0,
        locationId: 0,
        clientId: 0,
      });
      fetchChallenges();
    } catch (error) {
      console.error('Error creating loyalty challenge:', error);
    }
  };

  const handleUpdate = async (
    id: number,
    updatedChallenge: Partial<LoyaltyChallenge>
  ) => {
    try {
      await updateLoyaltyChallenge(id, updatedChallenge);
      fetchChallenges();
    } catch (error) {
      console.error('Error updating loyalty challenge:', error);
    }
  };

  const handleDelete = async (id: number) => {
    try {
      await deleteLoyaltyChallenge(id);
      fetchChallenges();
    } catch (error) {
      console.error('Error deleting loyalty challenge:', error);
    }
  };

  return (
    <Box>
      <Typography variant="h2">Loyalty Challenge Manager</Typography>
      <Paper component="form" onSubmit={handleSubmit} sx={{ p: 2, mt: 2 }}>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Challenge Name"
              value={newChallenge.name}
              onChange={(e) =>
                setNewChallenge({ ...newChallenge, name: e.target.value })
              }
              required
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Description"
              value={newChallenge.description}
              onChange={(e) =>
                setNewChallenge({ ...newChallenge, description: e.target.value })
              }
              required
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Challenge Type</InputLabel>
              <Select
                value={newChallenge.challengeType}
                onChange={(e) =>
                  setNewChallenge({ ...newChallenge, challengeType: e.target.value as 'purchase-based' | 'engagement-based' })
                }
                required
              >
                <MuiMenuItem value="purchase-based">Purchase-based</MuiMenuItem>
                <MuiMenuItem value="engagement-based">Engagement-based</MuiMenuItem>
              </Select>
            </FormControl>
          </Grid>
          {/* Add more form fields for other properties */}
          <Grid item xs={12}>
            <Button type="submit" variant="contained" color="primary">
              Create Loyalty Challenge
            </Button>
          </Grid>
        </Grid>
      </Paper>
      <Box mt={4}>
        <Typography variant="h3">Existing Challenges</Typography>
        {challenges.map((challenge) => (
          <Paper key={challenge.id} sx={{ p: 2, mt: 2 }}>
            <Typography variant="h4">{challenge.name}</Typography>
            <Typography>Type: {challenge.challengeType}</Typography>
            <Typography>Status: {challenge.status}</Typography>
            <Typography>
              Conditions: Item Count: {challenge.conditions.itemCount},
              Timeframe: {challenge.conditions.timeframe}, Min Spend: $
              {challenge.conditions.minSpend}, Frequency:{' '}
              {challenge.conditions.frequency.replace(/_/g, ' ')}
            </Typography>
            <Typography>Reward: {JSON.stringify(challenge.rewardConfig)}</Typography>
            <Typography>Start Date: {challenge.startDate.toLocaleDateString()}</Typography>
            <Typography>End Date: {challenge.endDate.toLocaleDateString()}</Typography>
            <Typography>Participants: {challenge.participantCount}</Typography>
            <Typography>
              Restricted Menu Items:{' '}
              {challenge.conditions.restrictedMenuItems?.join(', ') || 'None'}
            </Typography>
            <Typography>
              Restricted Menu Groups:{' '}
              {challenge.conditions.restrictedMenuGroups?.join(', ') || 'None'}
            </Typography>
            <Button onClick={() => handleDelete(challenge.id)} color="secondary">
              Delete
            </Button>
            <Button
              onClick={() =>
                handleUpdate(challenge.id, {
                  status: challenge.status === 'active' ? 'inactive' : 'active',
                })
              }
              color="primary"
            >
              {challenge.status === 'active' ? 'Deactivate' : 'Activate'}
            </Button>
          </Paper>
        ))}
      </Box>
    </Box>
  );
};

export default LoyaltyChallengeManager;

================
File: frontend/src/components/LoyaltyChallengeProgress.tsx
================
import React from 'react';
import { Typography, LinearProgress, Box } from '@mui/material';
import { LoyaltyChallenge } from '../types/loyaltyTypes';

interface LoyaltyChallengeProgressProps {
  challenge: LoyaltyChallenge;
  currentProgress: number;
}

const LoyaltyChallengeProgress: React.FC<LoyaltyChallengeProgressProps> = ({
  challenge,
  currentProgress,
}) => {
  const progressPercentage = (currentProgress / challenge.targetValue) * 100;

  return (
    <Box>
      <Typography variant="h6">{challenge.name}</Typography>
      <Typography variant="body2">{challenge.description}</Typography>
      <Box display="flex" alignItems="center">
        <Box width="100%" mr={1}>
          <LinearProgress variant="determinate" value={progressPercentage} />
        </Box>
        <Box minWidth={35}>
          <Typography variant="body2" color="textSecondary">
            {`${Math.round(progressPercentage)}%`}
          </Typography>
        </Box>
      </Box>
      <Typography variant="body2">
        Progress: {currentProgress} / {challenge.targetValue} {challenge.unit}
      </Typography>
    </Box>
  );
};

export default LoyaltyChallengeProgress;

================
File: frontend/src/components/LoyaltyRewards.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchLoyaltyRewards,
  createLoyaltyReward,
  updateLoyaltyReward,
  deleteLoyaltyReward,
} from '../redux/slices/loyaltySlice';
import { LoyaltyReward } from '../types';
import {
  TextField,
  Button,
  List,
  ListItem,
  IconButton,
  Typography,
  Box,
  Paper,
  Grid,
  CircularProgress,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';

const LoyaltyRewards: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { rewards, status, error } = useSelector(
    (state: RootState) => state.loyalty
  );
  const [newReward, setNewReward] = useState<Partial<LoyaltyReward>>({
    name: '',
    pointsRequired: 0,
    isActive: true,
  });
  const [editingReward, setEditingReward] = useState<LoyaltyReward | null>(null);

  useEffect(() => {
    dispatch(fetchLoyaltyRewards());
  }, [dispatch]);

  const handleCreateReward = () => {
    if (newReward.name && newReward.pointsRequired) {
      dispatch(createLoyaltyReward(newReward as LoyaltyReward));
      setNewReward({ name: '', pointsRequired: 0, isActive: true });
    }
  };

  const handleUpdateReward = (reward: LoyaltyReward) => {
    dispatch(updateLoyaltyReward(reward));
    setEditingReward(null);
  };

  const handleDeleteReward = (id: number) => {
    if (window.confirm('Are you sure you want to delete this reward?')) {
      dispatch(deleteLoyaltyReward(id));
    }
  };

  if (status === 'loading') return <CircularProgress />;
  if (status === 'failed') return <Typography color="error">Error: {error}</Typography>;

  return (
    <Box>
      <Typography variant="h2" gutterBottom>
        Loyalty Rewards
      </Typography>
      <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={4}>
            <TextField
              fullWidth
              label="Reward Name"
              value={newReward.name}
              onChange={(e) => setNewReward({ ...newReward, name: e.target.value })}
            />
          </Grid>
          <Grid item xs={12} sm={4}>
            <TextField
              fullWidth
              label="Points Required"
              type="number"
              value={newReward.pointsRequired}
              onChange={(e) =>
                setNewReward({
                  ...newReward,
                  pointsRequired: parseInt(e.target.value, 10),
                })
              }
            />
          </Grid>
          <Grid item xs={12} sm={4}>
            <Button fullWidth variant="contained" color="primary" onClick={handleCreateReward}>
              Add Reward
            </Button>
          </Grid>
        </Grid>
      </Paper>

      <List>
        {rewards.map((reward) => (
          <ListItem key={reward.id} component={Paper} elevation={2} sx={{ mb: 1, p: 2 }}>
            {editingReward?.id === reward.id ? (
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={4}>
                  <TextField
                    fullWidth
                    value={editingReward.name}
                    onChange={(e) =>
                      setEditingReward({ ...editingReward, name: e.target.value })
                    }
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <TextField
                    fullWidth
                    type="number"
                    value={editingReward.pointsRequired}
                    onChange={(e) =>
                      setEditingReward({
                        ...editingReward,
                        pointsRequired: parseInt(e.target.value, 10),
                      })
                    }
                  />
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Button onClick={() => handleUpdateReward(editingReward)}>
                    Save
                  </Button>
                  <Button onClick={() => setEditingReward(null)}>
                    Cancel
                  </Button>
                </Grid>
              </Grid>
            ) : (
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={4}>
                  <Typography variant="body1">{reward.name}</Typography>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Typography variant="body2">{reward.pointsRequired} points</Typography>
                </Grid>
                <Grid item xs={12} sm={4}>
                  <Button
                    onClick={() =>
                      handleUpdateReward({ ...reward, isActive: !reward.isActive })
                    }
                  >
                    {reward.isActive ? 'Deactivate' : 'Activate'}
                  </Button>
                  <IconButton onClick={() => setEditingReward(reward)}>
                    <EditIcon />
                  </IconButton>
                  <IconButton onClick={() => handleDeleteReward(reward.id)}>
                    <DeleteIcon />
                  </IconButton>
                </Grid>
              </Grid>
            )}
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default LoyaltyRewards;

================
File: frontend/src/components/LoyaltyRewardSelector.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useParams } from 'react-router-dom';
import {
  fetchLoyaltyConfig,
  fetchLoyaltyRewards,
  selectLoyaltyRewards,
  selectLoyaltyStatus,
} from '../redux/slices/loyaltySlice';
import { AppDispatch, RootState } from '../types';
import { Typography, List, ListItem, ListItemText, CircularProgress } from '@mui/material';

const LoyaltyRewardSelector: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { clientId } = useParams<{ clientId: string }>();

  const loyaltyRewards = useSelector((state: RootState) =>
    selectLoyaltyRewards(state)
  );
  const status = useSelector((state: RootState) => selectLoyaltyStatus(state));

  useEffect(() => {
    if (status === 'idle' && clientId) {
      dispatch(fetchLoyaltyConfig(Number(clientId)));
      dispatch(fetchLoyaltyRewards(Number(clientId)));
    }
  }, [status, clientId, dispatch]);

  if (status === 'loading') {
    return <CircularProgress />;
  }

  if (status === 'failed') {
    return <Typography color="error">Failed to load loyalty rewards. Please try again later.</Typography>;
  }

  return (
    <div>
      <Typography variant="h2">Select Loyalty Reward</Typography>
      <List>
        {loyaltyRewards.map((reward) => (
          <ListItem key={reward.id}>
            <ListItemText 
              primary={reward.name} 
              secondary={`${reward.pointsRequired} points`} 
            />
          </ListItem>
        ))}
      </List>
    </div>
  );
};

export default LoyaltyRewardSelector;

================
File: frontend/src/components/LoyaltyTiers.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchLoyaltyConfig,
  updateLoyaltyConfig,
} from '../redux/slices/loyaltySlice';
import { LoyaltyConfig, LoyaltyTier } from '../types';
import {
  TextField,
  Button,
  List,
  ListItem,
  IconButton,
  Typography,
  Box,
  Paper,
  CircularProgress,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';

const LoyaltyTiers: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { config, status, error } = useSelector(
    (state: RootState) => state.loyalty
  );
  const [editingConfig, setEditingConfig] = useState<LoyaltyConfig | null>(
    null
  );

  useEffect(() => {
    dispatch(fetchLoyaltyConfig());
  }, [dispatch]);

  useEffect(() => {
    if (config) {
      setEditingConfig(config);
    }
  }, [config]);

  const handleUpdateConfig = () => {
    if (editingConfig) {
      dispatch(updateLoyaltyConfig(editingConfig));
    }
  };

  const handleAddTier = () => {
    if (editingConfig) {
      const newTier: LoyaltyTier = { 
        tierName: '',
        pointThreshold: 0,
        benefits: [],
      };
      setEditingConfig({
        ...editingConfig,
        tiers: [...editingConfig.tiers, newTier],
      });
    }
  };

  const handleRemoveTier = (index: number) => {
    if (editingConfig) {
      const newTiers = editingConfig.tiers.filter((_, i) => i !== index);
      setEditingConfig({ ...editingConfig, tiers: newTiers });
    }
  };

  const handleTierChange = (index: number, field: keyof LoyaltyTier, value: string | number) => {
    if (editingConfig) {
      const newTiers = [...editingConfig.tiers];
      newTiers[index] = { ...newTiers[index], [field]: value };
      setEditingConfig({ ...editingConfig, tiers: newTiers });
    }
  };

  if (status === 'loading') return <CircularProgress />;
  if (status === 'failed') return <Typography color="error">Error: {error}</Typography>;

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Loyalty Tiers
      </Typography>
      {editingConfig && (
        <Paper elevation={3} sx={{ p: 2 }}>
          <List>
            {editingConfig.tiers.map((tier, index) => (
              <ListItem key={index} sx={{ mb: 2 }}>
                <TextField
                  label="Tier Name"
                  value={tier.tierName}
                  onChange={(e) => handleTierChange(index, 'tierName', e.target.value)}
                  sx={{ mr: 2 }}
                />
                <TextField
                  label="Point Threshold"
                  type="number"
                  value={tier.pointThreshold}
                  onChange={(e) => handleTierChange(index, 'pointThreshold', parseInt(e.target.value))}
                  sx={{ mr: 2 }}
                />
                <IconButton onClick={() => handleRemoveTier(index)}>
                  <DeleteIcon />
                </IconButton>
              </ListItem>
            ))}
          </List>
          <Button startIcon={<AddIcon />} onClick={handleAddTier} sx={{ mt: 2 }}>
            Add Tier
          </Button>
          <Button variant="contained" color="primary" onClick={handleUpdateConfig} sx={{ mt: 2, ml: 2 }}>
            Save Configuration
          </Button>
        </Paper>
      )}
    </Box>
  );
};

export default LoyaltyTiers;

================
File: frontend/src/components/MarketingCampaigns.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '../redux/store';
import {
  fetchCampaigns,
  createCampaign,
  updateCampaign,
  deleteCampaign,
} from '../redux/slices/marketingSlice';
import {
  Box,
  Typography,
  Button,
  List,
  ListItem,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';

const MarketingCampaigns: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const campaigns = useSelector((state: RootState) => state.marketing.campaigns);
  const [open, setOpen] = useState(false);
  const [editingCampaign, setEditingCampaign] = useState<any>(null);

  useEffect(() => {
    dispatch(fetchCampaigns());
  }, [dispatch]);

  const handleOpen = (campaign: any = null) => {
    setEditingCampaign(campaign);
    setOpen(true);
  };

  const handleClose = () => {
    setEditingCampaign(null);
    setOpen(false);
  };

  const handleSave = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const campaignData = {
      name: formData.get('name') as string,
      description: formData.get('description') as string,
      startDate: formData.get('startDate') as string,
      endDate: formData.get('endDate') as string,
    };

    if (editingCampaign) {
      dispatch(updateCampaign({ id: editingCampaign.id, ...campaignData }));
    } else {
      dispatch(createCampaign(campaignData));
    }
    handleClose();
  };

  const handleDelete = (id: string) => {
    if (window.confirm('Are you sure you want to delete this campaign?')) {
      dispatch(deleteCampaign(id));
    }
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Marketing Campaigns
      </Typography>
      <Button startIcon={<AddIcon />} onClick={() => handleOpen()} sx={{ mb: 2 }}>
        Create Campaign
      </Button>
      <List>
        {campaigns.map((campaign) => (
          <ListItem key={campaign.id} sx={{ border: '1px solid #ddd', mb: 1, borderRadius: 1 }}>
            <Box sx={{ flexGrow: 1 }}>
              <Typography variant="h6">{campaign.name}</Typography>
              <Typography variant="body2">{campaign.description}</Typography>
              <Typography variant="caption">
                {new Date(campaign.startDate).toLocaleDateString()} - {new Date(campaign.endDate).toLocaleDateString()}
              </Typography>
            </Box>
            <IconButton onClick={() => handleOpen(campaign)}>
              <EditIcon />
            </IconButton>
            <IconButton onClick={() => handleDelete(campaign.id)}>
              <DeleteIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>
      <Dialog open={open} onClose={handleClose}>
        <form onSubmit={handleSave}>
          <DialogTitle>{editingCampaign ? 'Edit Campaign' : 'Create Campaign'}</DialogTitle>
          <DialogContent>
            <TextField
              autoFocus
              margin="dense"
              name="name"
              label="Campaign Name"
              fullWidth
              defaultValue={editingCampaign?.name || ''}
            />
            <TextField
              margin="dense"
              name="description"
              label="Description"
              fullWidth
              multiline
              rows={4}
              defaultValue={editingCampaign?.description || ''}
            />
            <TextField
              margin="dense"
              name="startDate"
              label="Start Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              defaultValue={editingCampaign?.startDate || ''}
            />
            <TextField
              margin="dense"
              name="endDate"
              label="End Date"
              type="date"
              fullWidth
              InputLabelProps={{ shrink: true }}
              defaultValue={editingCampaign?.endDate || ''}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button type="submit">{editingCampaign ? 'Update' : 'Create'}</Button>
          </DialogActions>
        </form>
      </Dialog>
    </Box>
  );
};

export default MarketingCampaigns;

================
File: frontend/src/components/MarketingDashboard.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchMarketingMetricsAsync } from '../redux/slices/marketingSlice';
import ABTestManager from './ABTestManager';
import MarketingCampaigns from './MarketingCampaigns';
import {
  Typography,
  Grid,
  Paper,
  Box,
  CircularProgress,
} from '@mui/material';

const MarketingDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { metrics, status, error } = useSelector(
    (state: RootState) => state.marketing
  );

  useEffect(() => {
    dispatch(fetchMarketingMetricsAsync());
  }, [dispatch]);

  if (status === 'loading') return <CircularProgress />;
  if (status === 'failed') return <Typography color="error">Error: {error}</Typography>;

  return (
    <Box className="marketing-dashboard">
      <Typography variant="h4" gutterBottom>Marketing Dashboard</Typography>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6} lg={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Customer Acquisition Cost</Typography>
            <Typography variant="h4">${metrics.customerAcquisitionCost.toFixed(2)}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6} lg={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Customer Lifetime Value</Typography>
            <Typography variant="h4">${metrics.customerLifetimeValue.toFixed(2)}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6} lg={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Conversion Rate</Typography>
            <Typography variant="h4">{(metrics.conversionRate * 100).toFixed(2)}%</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6} lg={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Average Order Value</Typography>
            <Typography variant="h4">${metrics.averageOrderValue.toFixed(2)}</Typography>
          </Paper>
        </Grid>
      </Grid>
      <Box mt={4}>
        <Typography variant="h5" gutterBottom>A/B Testing</Typography>
        <ABTestManager />
      </Box>
      <Box mt={4}>
        <Typography variant="h5" gutterBottom>Marketing Campaigns</Typography>
        <MarketingCampaigns />
      </Box>
    </Box>
  );
};

export default MarketingDashboard;

================
File: frontend/src/components/MenuBuilder.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';
import { RootState, AppDispatch, Menu, MenuGroup } from '../types';
import { fetchMenus, updateMenu } from '../redux/slices/menuSlice';
import MenuGroupComponent from './MenuGroupComponent';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Typography,
  Box,
  CircularProgress,
} from '@mui/material';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import { useClientContext } from '../context/ClientContext';

const MenuBuilder: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const menus = useSelector((state: RootState) => state.menu.menus);
  const loading = useSelector((state: RootState) => state.menu.loading);
  const error = useSelector((state: RootState) => state.menu.error);
  const [activeMenu, setActiveMenu] = useState<Menu | null>(null);
  const [isAddGroupDialogOpen, setIsAddGroupDialogOpen] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const { clientId } = useClientContext();

  useEffect(() => {
    if (clientId) {
      dispatch(fetchMenus(clientId.toString()));
    }
  }, [dispatch, clientId]);

  const handleDragEnd = (result: DropResult) => {
    if (!result.destination || !activeMenu) {
      return;
    }

    const newGroups = Array.from(activeMenu.groups);
    const [reorderedGroup] = newGroups.splice(result.source.index, 1);
    newGroups.splice(result.destination.index, 0, reorderedGroup);

    const updatedMenu: Menu = {
      ...activeMenu,
      groups: newGroups,
    };

    setActiveMenu(updatedMenu);
    dispatch(updateMenu({ clientId: clientId.toString(), menuId: activeMenu.id, menuData: updatedMenu }));
  };

  const handleAddGroup = () => {
    if (activeMenu && newGroupName.trim()) {
      const updatedMenu: Menu = {
        ...activeMenu,
        groups: [
          ...activeMenu.groups,
          { id: Date.now().toString(), name: newGroupName.trim(), items: [] },
        ],
      };
      dispatch(updateMenu({ clientId: clientId.toString(), menuId: activeMenu.id, menuData: updatedMenu }));
      setIsAddGroupDialogOpen(false);
      setNewGroupName('');
    }
  };

  if (loading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Menu Builder
      </Typography>
      <Box display="flex" flexWrap="wrap" gap={2} mb={2}>
        {menus.map((menu) => (
          <Button
            key={menu.id}
            variant={activeMenu?.id === menu.id ? 'contained' : 'outlined'}
            onClick={() => setActiveMenu(menu)}
          >
            {menu.name}
          </Button>
        ))}
      </Box>
      {activeMenu && (
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="menu">
            {(provided) => (
              <Box {...provided.droppableProps} ref={provided.innerRef}>
                {activeMenu.groups.map((group, index) => (
                  <Draggable key={group.id} draggableId={group.id} index={index}>
                    {(provided) => (
                      <Box
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                      >
                        <MenuGroupComponent
                          group={group}
                          index={index}
                          menuId={activeMenu.id}
                        />
                      </Box>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </Box>
            )}
          </Droppable>
        </DragDropContext>
      )}
      <Button
        startIcon={<AddCircleOutlineIcon />}
        onClick={() => setIsAddGroupDialogOpen(true)}
        variant="contained"
        color="primary"
        style={{ marginTop: '16px' }}
      >
        Add Group
      </Button>
      <Dialog open={isAddGroupDialogOpen} onClose={() => setIsAddGroupDialogOpen(false)}>
        <DialogTitle>Add New Group</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Group Name"
            fullWidth
            value={newGroupName}
            onChange={(e) => setNewGroupName(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsAddGroupDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleAddGroup} color="primary">
            Add
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MenuBuilder;

================
File: frontend/src/components/MenuGroupComponent.tsx
================
import React from 'react';
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../redux/store';
import { updateMenu } from '../redux/slices/menuSlice';
import { Menu, MenuGroup, MenuItem } from '../types/menuTypes';

interface MenuGroupComponentProps {
  menu: Menu;
  group: MenuGroup;
}

const MenuGroupComponent: React.FC<MenuGroupComponentProps> = ({ menu, group }) => {
  const dispatch = useDispatch<AppDispatch>();

  const handleAddItem = (newItem: Omit<MenuItem, 'id' | 'isModified'>) => {
    const updatedGroup = {
      ...group,
      items: [...group.items, { ...newItem, id: Date.now().toString(), isModified: true }],
      isModified: true,
    };
    const updatedMenu = {
      ...menu,
      groups: menu.groups.map((g: MenuGroup) => g.id === group.id ? updatedGroup : g),
      isModified: true,
    };
    dispatch(updateMenu({
      locationId: menu.locationId,
      menuId: menu.id,
      menuData: updatedMenu,
    }));
  };

  const handleUpdateItem = (updatedItem: MenuItem) => {
    const updatedGroup = {
      ...group,
      items: group.items.map((item: MenuItem) => 
        item.id === updatedItem.id ? { ...updatedItem, isModified: true } : item
      ),
      isModified: true,
    };
    const updatedMenu = {
      ...menu,
      groups: menu.groups.map((g: MenuGroup) => g.id === group.id ? updatedGroup : g),
      isModified: true,
    };
    dispatch(updateMenu({
      locationId: menu.locationId,
      menuId: menu.id,
      menuData: updatedMenu,
    }));
  };

  const handleRemoveItem = (itemId: string) => {
    const updatedGroup = {
      ...group,
      items: group.items.filter((item: MenuItem) => item.id !== itemId),
      isModified: true,
    };
    const updatedMenu = {
      ...menu,
      groups: menu.groups.map((g: MenuGroup) => g.id === group.id ? updatedGroup : g),
      isModified: true,
    };
    dispatch(updateMenu({
      locationId: menu.locationId,
      menuId: menu.id,
      menuData: updatedMenu,
    }));
  };

  return (
    <div>
      <h2>{group.name}</h2>
      {group.items.map((item) => (
        <div key={item.id}>
          <span>{item.name} - ${item.price}</span>
          {item.isModified && <span> (Modified)</span>}
          <button onClick={() => handleUpdateItem({ ...item, price: item.price + 1 })}>
            Increase Price
          </button>
          <button onClick={() => handleRemoveItem(item.id)}>Remove</button>
        </div>
      ))}
      <button onClick={() => handleAddItem({ name: 'New Item', price: 9.99 })}>
        Add New Item
      </button>
    </div>
  );
};

export default MenuGroupComponent;

================
File: frontend/src/components/MenuItemCard.tsx
================
import React from 'react';
import { Card, CardContent, CardMedia, Typography, Button, Box } from '@mui/material';
import { MenuItem } from '../types/menuTypes';

interface MenuItemCardProps {
  item: MenuItem;
  onSelect: (item: MenuItem) => void;
}

const MenuItemCard: React.FC<MenuItemCardProps> = ({ item, onSelect }) => {
  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter' || event.key === ' ') {
      onSelect(item);
    }
  };

  return (
    <Card 
      sx={{ 
        maxWidth: 345, 
        m: 2, 
        display: 'flex', 
        flexDirection: 'column',
        height: '100%',
        '&:hover': {
          boxShadow: 6,
        },
      }}
    >
      <CardMedia
        component="img"
        height="140"
        image={item.image || '/placeholder-image.jpg'}
        alt={item.name}
      />
      <CardContent sx={{ flexGrow: 1 }}>
        <Typography gutterBottom variant="h5" component="div">
          {item.name}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {item.description}
        </Typography>
        <Typography variant="h6" color="primary" sx={{ mt: 2 }}>
          ${item.price.toFixed(2)}
        </Typography>
      </CardContent>
      <Box sx={{ p: 2 }}>
        <Button
          variant="contained"
          color="primary"
          onClick={() => onSelect(item)}
          onKeyPress={handleKeyPress}
          fullWidth
          aria-label={`Add ${item.name} to cart`}
        >
          Add to Cart
        </Button>
      </Box>
    </Card>
  );
};

export default MenuItemCard;

================
File: frontend/src/components/MenuItemComponent.tsx
================
import React from 'react';

interface Modifier {
  id: number;
  name: string;
  price: number;
}

interface MenuItem {
  id: number;
  name: string;
  price: number;
  modifiers: Modifier[];
}

interface Props {
  item: MenuItem;
}

const MenuItemComponent: React.FC<Props> = ({ item }) => {
  return (
    <div className="border p-4 rounded">
      <h4 className="text-md font-semibold">{item.name}</h4>
      <p className="text-sm text-gray-600">${item.price.toFixed(2)}</p>
      <div className="mt-2">
        <h5 className="text-sm font-bold">Modifiers:</h5>
        <ul className="list-disc ml-4">
          {item.modifiers.map((modifier) => (
            <li key={modifier.id}>
              {modifier.name} (+${modifier.price.toFixed(2)})
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default MenuItemComponent;

================
File: frontend/src/components/MenuItemDisplay.tsx
================
import React, { useState, KeyboardEvent } from 'react';
import { Typography, Box, Button, Collapse, Paper } from '@mui/material';
import { MenuItem } from '../types/menuTypes';

interface MenuItemDisplayProps {
  item: MenuItem;
  onAddToCart: (item: MenuItem) => void;
}

const MenuItemDisplay: React.FC<MenuItemDisplayProps> = ({
  item,
  onAddToCart,
}) => {
  const [expanded, setExpanded] = useState(false);

  const toggleExpanded = () => {
    setExpanded(!expanded);
  };

  const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {
    if (event.key === 'Enter' || event.key === ' ') {
      toggleExpanded();
    }
  };

  return (
    <Paper
      elevation={3}
      sx={{
        border: '1px solid #ddd',
        borderRadius: '4px',
        padding: '16px',
        marginBottom: '16px',
        cursor: 'pointer',
        '&:hover': {
          boxShadow: 6,
        },
      }}
      onClick={toggleExpanded}
      onKeyDown={handleKeyDown}
      tabIndex={0}
      role="button"
      aria-expanded={expanded}
    >
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Typography variant="h6">{item.name}</Typography>
        <Typography variant="h6" color="primary">${item.price.toFixed(2)}</Typography>
      </Box>
      <Typography variant="body2" color="text.secondary">{item.description}</Typography>
      <Collapse in={expanded}>
        <Box mt={2}>
          {item.calories && (
            <Typography variant="body2">Calories: {item.calories}</Typography>
          )}
          {item.allergens && item.allergens.length > 0 && (
            <Typography variant="body2">
              Allergens: {item.allergens.join(', ')}
            </Typography>
          )}
          {item.nutritionalInfo && (
            <Typography variant="body2">
              Nutritional Info: {item.nutritionalInfo}
            </Typography>
          )}
          <Button
            variant="contained"
            color="primary"
            onClick={(e) => {
              e.stopPropagation();
              onAddToCart(item);
            }}
            sx={{ mt: 2 }}
          >
            Add to Cart
          </Button>
        </Box>
      </Collapse>
    </Paper>
  );
};

export default MenuItemDisplay;

================
File: frontend/src/components/MenuItemModal.tsx
================
import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  TextField,
  Box,
} from '@mui/material';
import { MenuItem } from '../types/menuTypes';

interface MenuItemModalProps {
  item: MenuItem;
  onClose: () => void;
  onAddToCart: (item: MenuItem, quantity: number) => void;
}

const MenuItemModal: React.FC<MenuItemModalProps> = ({ item, onClose, onAddToCart }) => {
  const [quantity, setQuantity] = useState(1);

  const handleQuantityChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setQuantity(Math.max(1, parseInt(event.target.value) || 1));
  };

  const handleAddToCart = () => {
    onAddToCart(item, quantity);
    onClose();
  };

  return (
    <Dialog open={true} onClose={onClose} maxWidth="sm" fullWidth>
      <DialogTitle>{item.name}</DialogTitle>
      <DialogContent>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
          <img src={item.image} alt={item.name} style={{ maxWidth: '100%', height: 'auto' }} />
          <Typography variant="body1">{item.description}</Typography>
          <Typography variant="h6" color="primary">
            ${item.price.toFixed(2)}
          </Typography>
          <TextField
            label="Quantity"
            type="number"
            value={quantity}
            onChange={handleQuantityChange}
            InputProps={{ inputProps: { min: 1 } }}
          />
        </Box>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button onClick={handleAddToCart} variant="contained" color="primary">
          Add to Cart
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default MenuItemModal;

================
File: frontend/src/components/MultiLocationMenuManager.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchMenus, updateMenuItem, addMenuItem, removeMenuItem } from '../redux/slices/menuSlice';
import { selectSelectedLocations, selectCurrentUser } from '../redux/slices/userSlice';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, TextField, Typography, Box } from '@mui/material';
import LocationSelector from './LocationSelector';

const MenuDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const selectedLocations = useSelector(selectSelectedLocations);
  const user = useSelector(selectCurrentUser);
  const menus = useSelector((state: RootState) => state.menu.menus);
  const [editingItem, setEditingItem] = useState<string | null>(null);

  useEffect(() => {
    if (selectedLocations.length > 0) {
      dispatch(fetchMenus(selectedLocations));
    }
  }, [dispatch, selectedLocations]);

  // ... (rest of the implementation)

  return (
    <Box>
      <Typography variant="h4" gutterBottom>Menu Dashboard</Typography>
      {user?.role === 'admin' && <LocationSelector />}
      
      <TableContainer component={Paper}>
        {/* ... (table implementation) */}
      </TableContainer>
    </Box>
  );
};

export default MenuDashboard;

================
File: frontend/src/components/OrderDashboard.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchOrders, updateOrderStatus } from '../redux/slices/orderSlice';
import { selectSelectedLocations, selectCurrentUser } from '../redux/slices/userSlice';
import { 
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, 
  Select, MenuItem, Typography, CircularProgress, Box, Tabs, Tab
} from '@mui/material';
import LocationSelector from './LocationSelector';

const OrderDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { orders, status, error } = useSelector((state: RootState) => state.orders);
  const selectedLocations = useSelector(selectSelectedLocations);
  const user = useSelector(selectCurrentUser);
  const [activeTab, setActiveTab] = useState(0);

  useEffect(() => {
    if (selectedLocations.length > 0) {
      dispatch(fetchOrders(selectedLocations));
    }
  }, [dispatch, selectedLocations]);

  const handleStatusChange = (orderId: string, newStatus: string) => {
    dispatch(updateOrderStatus({ orderId, status: newStatus }));
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  if (status === 'loading') return <CircularProgress />;
  if (status === 'failed') return <Typography color="error">Error: {error}</Typography>;

  return (
    <Box>
      <Typography variant="h4" gutterBottom>Order Dashboard</Typography>
      {user?.role === 'admin' && <LocationSelector />}
      
      <Tabs value={activeTab} onChange={handleTabChange} sx={{ mb: 2 }}>
        <Tab label="All Orders" />
        <Tab label="Pending" />
        <Tab label="In Progress" />
        <Tab label="Completed" />
      </Tabs>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Order ID</TableCell>
              <TableCell>Location</TableCell>
              <TableCell>Customer</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>Total</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {orders
              .filter(order => {
                if (activeTab === 0) return true;
                if (activeTab === 1) return order.status === 'pending';
                if (activeTab === 2) return order.status === 'in_progress';
                if (activeTab === 3) return order.status === 'completed';
                return true;
              })
              .map((order) => (
                <TableRow key={order.id}>
                  <TableCell>{order.id}</TableCell>
                  <TableCell>{order.locationName}</TableCell>
                  <TableCell>{order.customerName}</TableCell>
                  <TableCell>{new Date(order.orderDate).toLocaleString()}</TableCell>
                  <TableCell>${order.totalAmount.toFixed(2)}</TableCell>
                  <TableCell>{order.status}</TableCell>
                  <TableCell>
                    <Select
                      value={order.status}
                      onChange={(e) => handleStatusChange(order.id, e.target.value as string)}
                    >
                      <MenuItem value="pending">Pending</MenuItem>
                      <MenuItem value="in_progress">In Progress</MenuItem>
                      <MenuItem value="completed">Completed</MenuItem>
                      <MenuItem value="cancelled">Cancelled</MenuItem>
                    </Select>
                  </TableCell>
                </TableRow>
              ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

export default OrderDashboard;

================
File: frontend/src/components/OrderManagement.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchOrders, updateOrderStatus } from '../redux/slices/orderSlice';
import { selectSelectedLocations } from '../redux/slices/userSlice';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Select, MenuItem } from '@mui/material';

const OrderManagement: React.FC = () => {
  // ... (implementation as provided in the previous response)
};

export default OrderManagement;

================
File: frontend/src/components/Orders.tsx
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchOrders } from '../redux/slices/orderSlice';
import { RootState, AppDispatch } from '../types';
import { 
  Typography, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow, 
  Paper,
  CircularProgress,
} from '@mui/material';

const Orders: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { orders, status, error } = useSelector((state: RootState) => state.orders);

  useEffect(() => {
    dispatch(fetchOrders());
  }, [dispatch]);

  if (status === 'loading') {
    return <CircularProgress />;
  }

  if (status === 'failed') {
    return <Typography color="error">Error: {error}</Typography>;
  }

  return (
    <div>
      <Typography variant="h4" gutterBottom>Orders</Typography>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Order ID</TableCell>
              <TableCell>Customer</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>Total</TableCell>
              <TableCell>Status</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {orders.map((order) => (
              <TableRow key={order.id}>
                <TableCell>{order.id}</TableCell>
                <TableCell>{order.customerName}</TableCell>
                <TableCell>{new Date(order.orderDate).toLocaleString()}</TableCell>
                <TableCell>${order.totalAmount.toFixed(2)}</TableCell>
                <TableCell>{order.status}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </div>
  );
};

export default Orders;

================
File: frontend/src/components/POSAlerts.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { POSAlert } from '../types';
import { fetchPOSAlerts } from '../redux/slices/posAlertsSlice';
import { Typography, List, ListItem, ListItemText, Paper, Box } from '@mui/material';

const POSAlerts: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { alerts, status, error } = useSelector((state: RootState) => state.posAlerts);
  const posProfiles = useSelector((state: RootState) => state.posProfiles.profiles);

  useEffect(() => {
    dispatch(fetchPOSAlerts());
  }, [dispatch]);

  const getAlertSeverity = (errorCode: string, posProfileId: number) => {
    const profile = posProfiles.find((p) => p.id === posProfileId);
    if (!profile) return 'unknown';

    switch (profile.provider) {
      case 'Toast':
        return errorCode.startsWith('E') ? 'high' : 'medium';
      case 'Revel':
        return errorCode.startsWith('ERR') ? 'high' : 'low';
      default:
        return 'unknown';
    }
  };

  if (status === 'loading') {
    return <Typography>Loading POS alerts...</Typography>;
  }

  if (status === 'failed') {
    return <Typography color="error">Error: {error}</Typography>;
  }

  return (
    <Paper elevation={3}>
      <Box p={2}>
        <Typography variant="h5" gutterBottom>POS Alerts</Typography>
        {alerts.length === 0 ? (
          <Typography>No active alerts</Typography>
        ) : (
          <List>
            {alerts.map((alert) => (
              <ListItem
                key={alert.id}
                sx={{
                  bgcolor: getAlertSeverity(alert.errorCode, alert.posProfileId) === 'high' ? 'error.light' :
                    getAlertSeverity(alert.errorCode, alert.posProfileId) === 'medium' ? 'warning.light' : 'info.light',
                  mb: 1,
                  borderRadius: 1,
                }}
              >
                <ListItemText
                  primary={
                    <Typography variant="subtitle1">
                      <strong>{alert.errorCode}</strong>: {alert.message}
                    </Typography>
                  }
                  secondary={
                    <>
                      <Typography variant="body2" component="span">
                        POS Profile: {posProfiles.find((p) => p.id === alert.posProfileId)?.name}
                      </Typography>
                      <br />
                      <Typography variant="body2" component="span">
                        Time: {new Date(alert.timestamp).toLocaleString()}
                      </Typography>
                    </>
                  }
                />
              </ListItem>
            ))}
          </List>
        )}
      </Box>
    </Paper>
  );
};

export default POSAlerts;

================
File: frontend/src/components/POSDiscountSync.tsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { Button, Typography, CircularProgress, Paper, Box } from '@mui/material';
import { POSIntegrationService } from '../services/POSIntegrationService';
import { useAuth } from '../contexts/AuthContext';
import { User } from '../types/userTypes';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { syncDiscounts, fetchLastSyncTime } from '../redux/slices/posDiscountSlice';

const POSDiscountSync: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { isSyncing, lastSyncTime, error } = useSelector((state: RootState) => state.posDiscount);
  const { user } = useAuth();

  const posIntegrationService = React.useMemo(
    () => new POSIntegrationService(),
    []
  );

  const fetchLastSync = useCallback(() => {
    if (user && (user as User).clientId) {
      dispatch(fetchLastSyncTime((user as User).clientId));
    }
  }, [user, dispatch]);

  useEffect(() => {
    fetchLastSync();
  }, [fetchLastSync]);

  const handleSync = async () => {
    if (user && (user as User).clientId) {
      dispatch(syncDiscounts((user as User).clientId));
    }
  };

  return (
    <Paper elevation={3}>
      <Box p={2}>
        <Typography variant="h6" gutterBottom>POS Discount Sync</Typography>
        <Typography variant="body1" gutterBottom>
          Last sync: {lastSyncTime ? new Date(lastSyncTime).toLocaleString() : 'Never'}
        </Typography>
        <Button
          variant="contained"
          color="primary"
          onClick={handleSync}
          disabled={isSyncing}
          startIcon={isSyncing ? <CircularProgress size={20} color="inherit" /> : null}
        >
          {isSyncing ? 'Syncing...' : 'Sync Discounts'}
        </Button>
        {error && <Typography color="error" mt={2}>{error}</Typography>}
      </Box>
    </Paper>
  );
};

export default POSDiscountSync;

================
File: frontend/src/components/POSIntegrationSelector.tsx
================
import React, { useState, useEffect } from 'react';
import {
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Button,
  TextField,
  Grid,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Paper,
  Box,
} from '@mui/material';
import SyncIcon from '@mui/icons-material/Sync';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import { useDispatch, useSelector } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchProfiles,
  createProfile,
  updateProfile,
  deleteProfile,
  syncProfile,
} from '../redux/slices/posIntegrationSlice';
import { POSType, POSProfile } from '../types/posIntegrationTypes';

const POSIntegrationSelector: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { profiles, status, error } = useSelector((state: RootState) => state.posIntegration);
  const [newProfile, setNewProfile] = useState<Partial<POSProfile>>({
    name: '',
    posType: POSType.TOAST,
    apiEndpoint: '',
    apiKey: '',
  });
  const [editingProfile, setEditingProfile] = useState<POSProfile | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  useEffect(() => {
    dispatch(fetchProfiles());
  }, [dispatch]);

  const handleProfileInputChange = (
    event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>
  ) => {
    const { name, value } = event.target;
    setNewProfile((prev) => ({ ...prev, [name as string]: value }));
  };

  const handleCreateProfile = async () => {
    dispatch(createProfile(newProfile as POSProfile));
    setNewProfile({
      name: '',
      posType: POSType.TOAST,
      apiEndpoint: '',
      apiKey: '',
    });
  };

  const handleEditProfile = (profile: POSProfile) => {
    setEditingProfile(profile);
    setIsDialogOpen(true);
  };

  const handleUpdateProfile = async () => {
    if (editingProfile) {
      dispatch(updateProfile(editingProfile));
      setIsDialogOpen(false);
    }
  };

  const handleDeleteProfile = async (profileId: number) => {
    if (window.confirm('Are you sure you want to delete this profile?')) {
      dispatch(deleteProfile(profileId));
    }
  };

  const handleSyncProfile = async (profileId: number) => {
    dispatch(syncProfile(profileId));
  };

  if (status === 'loading') {
    return <Typography>Loading POS profiles...</Typography>;
  }

  if (status === 'failed') {
    return <Typography color="error">Error: {error}</Typography>;
  }

  return (
    <Paper elevation={3}>
      <Box p={2}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <Typography variant="h4" gutterBottom>POS Integration Manager</Typography>
          </Grid>
          <Grid item xs={12}>
            <Typography variant="h5" gutterBottom>Create New POS Profile</Typography>
            <TextField
              name="name"
              label="Profile Name"
              value={newProfile.name}
              onChange={handleProfileInputChange}
              fullWidth
              margin="normal"
            />
            <FormControl fullWidth margin="normal">
              <InputLabel id="pos-type-select-label">POS Type</InputLabel>
              <Select
                labelId="pos-type-select-label"
                name="posType"
                value={newProfile.posType}
                onChange={handleProfileInputChange}
              >
                {Object.values(POSType).map((type) => (
                  <MenuItem key={type} value={type}>
                    {type}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <TextField
              name="apiEndpoint"
              label="API Endpoint"
              value={newProfile.apiEndpoint}
              onChange={handleProfileInputChange}
              fullWidth
              margin="normal"
            />
            <TextField
              name="apiKey"
              label="API Key"
              value={newProfile.apiKey}
              onChange={handleProfileInputChange}
              fullWidth
              margin="normal"
            />
            <Button
              onClick={handleCreateProfile}
              variant="contained"
              color="primary"
            >
              Create Profile
            </Button>
          </Grid>
          <Grid item xs={12}>
            <Typography variant="h5" gutterBottom>Existing POS Profiles</Typography>
            <List>
              {profiles.map((profile) => (
                <ListItem key={profile.id}>
                  <ListItemText
                    primary={profile.name}
                    secondary={`${profile.posType} - ${profile.apiEndpoint}`}
                  />
                  <ListItemSecondaryAction>
                    <IconButton
                      edge="end"
                      aria-label="edit"
                      onClick={() => handleEditProfile(profile)}
                    >
                      <EditIcon />
                    </IconButton>
                    <IconButton
                      edge="end"
                      aria-label="delete"
                      onClick={() => handleDeleteProfile(profile.id)}
                    >
                      <DeleteIcon />
                    </IconButton>
                    <IconButton
                      edge="end"
                      aria-label="sync"
                      onClick={() => handleSyncProfile(profile.id)}
                    >
                      <SyncIcon />
                    </IconButton>
                  </ListItemSecondaryAction>
                </ListItem>
              ))}
            </List>
          </Grid>
        </Grid>
      </Box>
      <Dialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)}>
        <DialogTitle>Edit POS Profile</DialogTitle>
        <DialogContent>
          {editingProfile && (
            <>
              <TextField
                name="name"
                label="Profile Name"
                value={editingProfile.name}
                onChange={(event) =>
                  setEditingProfile({
                    ...editingProfile,
                    name: event.target.value,
                  })
                }
                fullWidth
                margin="normal"
              />
              <FormControl fullWidth margin="normal">
                <InputLabel id="pos-type-select-label">POS Type</InputLabel>
                <Select
                  labelId="pos-type-select-label"
                  name="posType"
                  value={editingProfile.posType}
                  onChange={(event) =>
                    setEditingProfile({
                      ...editingProfile,
                      posType: event.target.value as POSType,
                    })
                  }
                >
                  {Object.values(POSType).map((type) => (
                    <MenuItem key={type} value={type}>
                      {type}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <TextField
                name="apiEndpoint"
                label="API Endpoint"
                value={editingProfile.apiEndpoint}
                onChange={(event) =>
                  setEditingProfile({
                    ...editingProfile,
                    apiEndpoint: event.target.value,
                  })
                }
                fullWidth
                margin="normal"
              />
              <TextField
                name="apiKey"
                label="API Key"
                value={editingProfile.apiKey}
                onChange={(event) =>
                  setEditingProfile({
                    ...editingProfile,
                    apiKey: event.target.value,
                  })
                }
                fullWidth
                margin="normal"
              />
            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsDialogOpen(false)}>Cancel</Button>
          <Button
            onClick={handleUpdateProfile}
            variant="contained"
            color="primary"
          >
            Update
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default POSIntegrationSelector;

================
File: frontend/src/components/PrivateRoute.tsx
================
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { useClientContext } from '../context/ClientContext';
import { UserRole } from '../types/userTypes';
import { CircularProgress, Box } from '@mui/material';

interface PrivateRouteProps {
  allowedRoles: UserRole[];
}

const PrivateRoute: React.FC<PrivateRouteProps> = ({ allowedRoles }) => {
  const { isAuthenticated, user } = useSelector((state: RootState) => state.auth);
  const { client, isLoading } = useClientContext();

  if (isLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
        <CircularProgress />
      </Box>
    );
  }

  if (!client) {
    return <Navigate to="/login" replace />;
  }

  if (!isAuthenticated || !user) {
    return <Navigate to="/login" replace />;
  }

  const hasAllowedRole = user.roles.some((role) => allowedRoles.includes(role as UserRole));

  if (!hasAllowedRole) {
    return <Navigate to="/" replace />;
  }

  return <Outlet />;
};

export default PrivateRoute;

================
File: frontend/src/components/ProtectedRoute.tsx
================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { CircularProgress, Box } from '@mui/material';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { user, isAuthenticated, loading } = useSelector((state: RootState) => state.auth);
  const location = useLocation();

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
        <CircularProgress />
      </Box>
    );
  }

  if (!isAuthenticated || !user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

================
File: frontend/src/components/ProviderList.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchProviders } from '../redux/slices/providerSlice';
import { Provider } from '../types/providerTypes';
import { AppDispatch, RootState } from '../redux/store';
import { Typography, List, ListItem, ListItemText, Paper, Box, CircularProgress } from '@mui/material';

const ProviderList: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { providers, loading, error } = useSelector((state: RootState) => state.provider);

  useEffect(() => {
    dispatch(fetchProviders());
  }, [dispatch]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Typography color="error" align="center">
        Error: {error}
      </Typography>
    );
  }

  return (
    <Paper elevation={3}>
      <Box p={3}>
        <Typography variant="h4" gutterBottom>
          Providers
        </Typography>
        <List>
          {providers.map((provider: Provider) => (
            <ListItem key={provider.id}>
              <ListItemText
                primary={provider.name}
                secondary={`Type: ${provider.type} | Status: ${provider.status}`}
              />
            </ListItem>
          ))}
        </List>
      </Box>
    </Paper>
  );
};

export default ProviderList;

================
File: frontend/src/components/RealtimeMetricsTicker.tsx
================
import React, { useEffect, useState } from 'react';
import { Typography, Box, Paper } from '@mui/material';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchRealtimeMetrics } from '../redux/slices/realtimeMetricsSlice';

const RealtimeMetricsTicker: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const realtimeMetrics = useSelector((state: RootState) => state.realtimeMetrics.metrics);
  const [currentMetricIndex, setCurrentMetricIndex] = useState(0);

  useEffect(() => {
    const fetchMetrics = () => {
      dispatch(fetchRealtimeMetrics());
    };

    fetchMetrics();
    const interval = setInterval(fetchMetrics, 60000); // Fetch every minute

    return () => clearInterval(interval);
  }, [dispatch]);

  useEffect(() => {
    const rotateMetrics = setInterval(() => {
      setCurrentMetricIndex((prevIndex) => (prevIndex + 1) % Object.keys(realtimeMetrics).length);
    }, 5000);

    return () => clearInterval(rotateMetrics);
  }, [realtimeMetrics]);

  const currentMetric = Object.entries(realtimeMetrics)[currentMetricIndex];

  return (
    <Paper elevation={3}>
      <Box p={2}>
        <Typography variant="h6">Real-time Metrics</Typography>
        {currentMetric && (
          <Typography variant="h5">
            {currentMetric[0]}: {currentMetric[1]}
          </Typography>
        )}
        <Typography variant="caption">
          Data updates every minute. Metric rotates every 5 seconds. Check the dashboard for more metrics.
        </Typography>
      </Box>
    </Paper>
  );
};

export default RealtimeMetricsTicker;

================
File: frontend/src/components/RevenueChart.tsx
================
import React from 'react';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { RevenueData } from '../types/revenueTypes';
import { Box, Paper, Typography, TextField } from '@mui/material';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface Props {
  data: RevenueData[];
  dateRange: { start: Date; end: Date };
  setDateRange: (dateRange: { start: Date; end: Date }) => void;
}

const RevenueChart: React.FC<Props> = ({ data, dateRange, setDateRange }) => {
  const chartData = {
    labels: data.map((item) => new Date(item.date).toLocaleDateString()),
    datasets: [
      {
        label: 'Revenue',
        data: data.map((item) => item.amount),
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Revenue Over Time',
      },
    },
  };

  const handleDateChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: 'start' | 'end'
  ) => {
    setDateRange({
      ...dateRange,
      [type]: new Date(e.target.value),
    });
  };

  return (
    <Paper elevation={3}>
      <Box p={3}>
        <Typography variant="h5" gutterBottom>
          Revenue Chart
        </Typography>
        <Box display="flex" justifyContent="space-between" mb={2}>
          <TextField
            label="Start Date"
            type="date"
            value={dateRange.start.toISOString().split('T')[0]}
            onChange={(e) => handleDateChange(e, 'start')}
            InputLabelProps={{
              shrink: true,
            }}
          />
          <TextField
            label="End Date"
            type="date"
            value={dateRange.end.toISOString().split('T')[0]}
            onChange={(e) => handleDateChange(e, 'end')}
            InputLabelProps={{
              shrink: true,
            }}
          />
        </Box>
        <Box height={400}>
          <Line data={chartData} options={options} />
        </Box>
      </Box>
    </Paper>
  );
};

export default RevenueChart;

================
File: frontend/src/components/RoleManagement.tsx
================
import React from 'react';

const RoleManagement: React.FC = () => {
  return (
    <div>
      <h1>Role Management Page</h1>
      {/* Add role management interface here */}
    </div>
  );
};

export default RoleManagement;

================
File: frontend/src/components/SalesByCategoryChart.tsx
================
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Typography, Box, Paper } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  Legend,
  Tooltip,
} from 'recharts';
import { format } from 'date-fns';
import { useDispatch, useSelector } from 'react-redux';
import { fetchSalesByCategory } from '../redux/slices/analyticsSlice';
import { AppDispatch, RootState } from '../redux/store';
import { SalesByCategory } from '../types/analyticsTypes';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

const SalesByCategoryChart: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { salesByCategory, loading, error } = useSelector((state: RootState) => state.analytics);
  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([
    new Date(new Date().setDate(new Date().getDate() - 30)),
    new Date(),
  ]);

  const fetchSalesData = useCallback(() => {
    const [startDate, endDate] = dateRange;
    if (startDate && endDate) {
      const formattedStartDate = format(startDate, 'yyyy-MM-dd');
      const formattedEndDate = format(endDate, 'yyyy-MM-dd');
      dispatch(fetchSalesByCategory({ startDate: formattedStartDate, endDate: formattedEndDate }));
    }
  }, [dateRange, dispatch]);

  useEffect(() => {
    fetchSalesData();
  }, [fetchSalesData]);

  const chartData = useMemo(() => {
    return salesByCategory.map((item: SalesByCategory) => ({
      name: item.category,
      value: item.sales,
    }));
  }, [salesByCategory]);

  if (loading) return <Typography>Loading sales data...</Typography>;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <Paper elevation={3}>
      <Box p={3}>
        <Typography variant="h5" gutterBottom>
          Sales by Category
        </Typography>
        <LocalizationProvider dateAdapter={AdapterDateFns}>
          <Box display="flex" justifyContent="space-between" mb={2}>
            <DatePicker
              label="Start Date"
              value={dateRange[0]}
              onChange={(newValue: Date | null) => setDateRange([newValue, dateRange[1]])}
            />
            <DatePicker
              label="End Date"
              value={dateRange[1]}
              onChange={(newValue: Date | null) => setDateRange([dateRange[0], newValue])}
            />
          </Box>
        </LocalizationProvider>
        <ResponsiveContainer width="100%" height={400}>
          <PieChart>
            <Pie
              data={chartData}
              cx="50%"
              cy="50%"
              labelLine={false}
              outerRadius={80}
              fill="#8884d8"
              dataKey="value"
            >
              {chartData.map((entry: any, index: number) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      </Box>
    </Paper>
  );
};

export default SalesByCategoryChart;

================
File: frontend/src/components/ServiceFeeBuilder.tsx
================
import React, { useState, useEffect } from 'react';
import { TextField, Button, Typography, Box, Paper, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { fetchServiceFees, createServiceFee } from '../redux/slices/serviceFeeSlice';
import { ServiceFee } from '../types/serviceFeeTypes';
import { AppDispatch, RootState } from '../redux/store';

const ServiceFeeBuilder: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { serviceFees, loading, error } = useSelector((state: RootState) => state.serviceFee);
  const [newFee, setNewFee] = useState<Omit<ServiceFee, 'id'>>({
    name: '',
    amount: 0,
    type: 'FIXED',
    clientId: '',
  });

  useEffect(() => {
    dispatch(fetchServiceFees());
  }, [dispatch]);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
    const { name, value } = event.target;
    setNewFee((prev) => ({
      ...prev,
      [name as string]: name === 'amount' ? parseFloat(value as string) : value,
    }));
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await dispatch(createServiceFee(newFee));
      setNewFee({ name: '', amount: 0, type: 'FIXED', clientId: '' });
    } catch (error) {
      console.error('Failed to create service fee:', error);
    }
  };

  if (loading) {
    return <Typography>Loading service fees...</Typography>;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <Paper elevation={3}>
      <Box p={3}>
        <Typography variant="h5" gutterBottom>
          Service Fee Builder
        </Typography>
        <form onSubmit={handleSubmit}>
          <TextField
            name="name"
            label="Fee Name"
            value={newFee.name}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            required
          />
          <TextField
            name="amount"
            label="Fee Amount"
            type="number"
            value={newFee.amount}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            required
          />
          <FormControl fullWidth margin="normal">
            <InputLabel id="fee-type-label">Fee Type</InputLabel>
            <Select
              labelId="fee-type-label"
              name="type"
              value={newFee.type}
              onChange={handleInputChange}
              required
            >
              <MenuItem value="FIXED">Fixed</MenuItem>
              <MenuItem value="PERCENTAGE">Percentage</MenuItem>
            </Select>
          </FormControl>
          <TextField
            name="clientId"
            label="Client ID"
            value={newFee.clientId}
            onChange={handleInputChange}
            fullWidth
            margin="normal"
            required
          />
          <Button type="submit" variant="contained" color="primary">
            Add Service Fee
          </Button>
        </form>
        <Typography variant="h6" gutterBottom sx={{ mt: 4 }}>
          Existing Service Fees
        </Typography>
        {serviceFees.map((fee) => (
          <Box key={fee.id} sx={{ mb: 2 }}>
            <Typography>
              {fee.name}: {fee.amount} ({fee.type}) - Client ID: {fee.clientId}
            </Typography>
          </Box>
        ))}
      </Box>
    </Paper>
  );
};

export default ServiceFeeBuilder;

================
File: frontend/src/components/ServiceFeeManager.tsx
================
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import {
  addServiceFee,
  updateServiceFee,
} from '../redux/slices/serviceFeeSlice';
import { AppDispatch } from '../redux/store';
import { ServiceFee } from '../types';

const ServiceFeeManager: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [feeName, setFeeName] = useState('');
  const [feeAmount, setFeeAmount] = useState<number | string>('');

  const handleAddFee = () => {
    if (feeName && feeAmount) {
      const newFee: Omit<ServiceFee, 'id'> = {
        name: feeName,
        amount: Number(feeAmount),
        value: Number(feeAmount),
      };
      dispatch(addServiceFee(newFee));
      setFeeName('');
      setFeeAmount('');
    }
  };

  const handleUpdateFee = (id: number) => {
    if (feeAmount) {
      dispatch(
        updateServiceFee({
          id,
          amount: Number(feeAmount),
          value: Number(feeAmount),
        })
      );
      setFeeAmount('');
    }
  };

  return (
    <div>
      <h2>Manage Service Fees</h2>
      <input
        type="text"
        placeholder="Fee Name"
        value={feeName}
        onChange={(e) => setFeeName(e.target.value)}
      />
      <input
        type="number"
        placeholder="Fee Amount"
        value={feeAmount}
        onChange={(e) => setFeeAmount(e.target.value)}
      />
      <button onClick={handleAddFee}>Add Service Fee</button>
      <button onClick={() => handleUpdateFee(1)}>Update Fee</button>
    </div>
  );
};

export default ServiceFeeManager;

================
File: frontend/src/components/StaffScheduler.tsx
================
import React from 'react';

const StaffScheduler: React.FC = () => {
  return (
    <div className="staff-scheduler">
      <h4>Staff Scheduler</h4>
      <p>Staff scheduling functionality to be implemented.</p>
    </div>
  );
};

export default StaffScheduler;

================
File: frontend/src/components/ThemeProvider.tsx
================
import React from 'react';
import { ThemeProvider as EmotionThemeProvider } from '@emotion/react';
import { createTheme, Theme } from '@mui/material/styles';

const theme: Theme = createTheme({
  palette: {
    primary: {
      main: '#0070f3',
    },
    secondary: {
      main: '#ff4081',
    },
  },
  typography: {
    fontFamily: 'Arial, sans-serif',
  },
});

const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => <EmotionThemeProvider theme={theme}>{children}</EmotionThemeProvider>;

export default ThemeProvider;

================
File: frontend/src/components/TopSellingItemsChart.tsx
================
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Typography, Box } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from 'recharts';
import { format } from 'date-fns';
import { TopSellingItem } from '../types/analyticsTypes';
import { AnalyticsService } from '../services/AnalyticsService';

const TopSellingItemsChart: React.FC = () => {
  const [topSellingItems, setTopSellingItems] = useState<TopSellingItem[]>([]);
  const [dateRange, setDateRange] = useState<[Date | null, Date | null]>([
    null,
    null,
  ]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const analyticsService = useMemo(() => new AnalyticsService(), []);

  const fetchTopSellingItems = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const [startDate, endDate] = dateRange;
      const formattedStartDate = startDate
        ? format(startDate, 'yyyy-MM-dd')
        : undefined;
      const formattedEndDate = endDate
        ? format(endDate, 'yyyy-MM-dd')
        : undefined;
      const items = await analyticsService.getTopSellingItems(
        formattedStartDate,
        formattedEndDate
      );
      setTopSellingItems(items);
    } catch (err) {
      setError('Failed to fetch top selling items');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, [dateRange, analyticsService]);

  useEffect(() => {
    fetchTopSellingItems();
  }, [fetchTopSellingItems]);

  if (isLoading) return <Typography>Loading top selling items...</Typography>;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        Top Selling Items
      </Typography>
      <LocalizationProvider dateAdapter={AdapterDateFns}>
        <Box display="flex" justifyContent="space-between" mb={2}>
          <DatePicker
            label="Start Date"
            value={dateRange[0]}
            onChange={(newValue: Date | null) =>
              setDateRange([newValue, dateRange[1]])
            }
          />
          <DatePicker
            label="End Date"
            value={dateRange[1]}
            onChange={(newValue: Date | null) =>
              setDateRange([dateRange[0], newValue])
            }
          />
        </Box>
      </LocalizationProvider>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={topSellingItems}>
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="quantity" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>
    </Box>
  );
};

export default TopSellingItemsChart;

================
File: frontend/src/components/WalletDrop.tsx
================
import React, { useState } from 'react';
import { TextField, Button, Typography, Box } from '@mui/material';
import { WalletDropService } from '../services/WalletDropService';
import { WalletDrop as WalletDropType } from '../types/walletTypes';

const WalletDrop: React.FC = () => {
  const [walletDrop, setWalletDrop] = useState<WalletDropType>({
    amount: 0,
    expirationDate: '',
    description: '',
  });
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  const walletDropService = new WalletDropService();

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setWalletDrop((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null);
    setSuccess(null);

    try {
      await walletDropService.createWalletDrop(walletDrop);
      setSuccess('Wallet drop created successfully');
      setWalletDrop({ amount: 0, expirationDate: '', description: '' });
    } catch (err) {
      setError('Failed to create wallet drop');
      console.error(err);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit}>
      <Typography variant="h6" gutterBottom>
        Create Wallet Drop
      </Typography>
      <TextField
        name="amount"
        label="Amount"
        type="number"
        value={walletDrop.amount}
        onChange={handleInputChange}
        fullWidth
        margin="normal"
        required
      />
      <TextField
        name="expirationDate"
        label="Expiration Date"
        type="date"
        value={walletDrop.expirationDate}
        onChange={handleInputChange}
        fullWidth
        margin="normal"
        required
        InputLabelProps={{ shrink: true }}
      />
      <TextField
        name="description"
        label="Description"
        value={walletDrop.description}
        onChange={handleInputChange}
        fullWidth
        margin="normal"
        multiline
        rows={4}
      />
      <Button type="submit" variant="contained" color="primary">
        Create Wallet Drop
      </Button>
      {error && <Typography color="error">{error}</Typography>}
      {success && <Typography color="success">{success}</Typography>}
    </Box>
  );
};

export default WalletDrop;

================
File: frontend/src/context/AuthContext.tsx
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import api from '../services/api';

interface User {
  id: string;
  email: string;
  // Add other user properties as needed
}

interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      setIsAuthenticated(true);
      // Optionally fetch user data here
    }
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const response = await api.post('/auth/login', { email, password });
      const { token, user } = response.data;
      localStorage.setItem('token', token);
      setIsAuthenticated(true);
      setUser(user);
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    }
  };

  const logout = () => {
    localStorage.removeItem('token');
    setIsAuthenticated(false);
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: frontend/src/context/CartContext.tsx
================
import React, { createContext, useState, useContext, ReactNode } from 'react';

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  // Add other properties as needed
}

interface CartContextType {
  cartItems: CartItem[];
  addToCart: (item: CartItem) => void;
  removeFromCart: (itemId: string) => void;
  clearCart: () => void;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);

  const addToCart = (item: CartItem) => {
    setCartItems((prevItems) => [...prevItems, item]);
  };

  const removeFromCart = (itemId: string) => {
    setCartItems((prevItems) => prevItems.filter((item) => item.id !== itemId));
  };

  const clearCart = () => {
    setCartItems([]);
  };

  return (
    <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, clearCart }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = (): CartContextType => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

================
File: frontend/src/context/ClientContext.tsx
================
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from 'react';
import { getSubdomain } from '../utils/subdomain';
import { fetchClientBySubdomain } from '../api/clientApi';

interface Client {
  id: number;
  name: string;
  // Add other client properties
}

interface ClientContextType {
  client: Client | null;
  clientId: number | null;
  subdomain: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  setClientId: (id: number | null) => void;
  setIsAuthenticated: (value: boolean) => void;
}

const ClientContext = createContext<ClientContextType | undefined>(undefined);

export const ClientProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [client, setClient] = useState<Client | null>(null);
  const [subdomain, setSubdomain] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [clientId, setClientId] = useState<number | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const loadClient = async () => {
      const detectedSubdomain = getSubdomain();
      setSubdomain(detectedSubdomain);

      if (detectedSubdomain) {
        try {
          const clientData = await fetchClientBySubdomain(detectedSubdomain);
          setClient(clientData);
          setClientId(clientData.id); // Set clientId here
        } catch (err) {
          setError('Failed to load client data');
          console.error(err);
        }
      } else {
        setError('Invalid subdomain');
      }
      setIsLoading(false);
    };

    loadClient();
  }, []);

  return (
    <ClientContext.Provider
      value={{
        client,
        clientId,
        subdomain,
        isAuthenticated,
        isLoading,
        error,
        setClientId,
        setIsAuthenticated,
      }}
    >
      {children}
    </ClientContext.Provider>
  );
};

export const useClientContext = () => {
  const context = useContext(ClientContext);
  if (context === undefined) {
    throw new Error('useClientContext must be used within a ClientProvider');
  }
  return context;
};

================
File: frontend/src/context/SocketContext.tsx
================
import React, { createContext, useContext, useEffect, useState } from 'react';
import io, { Socket } from 'socket.io-client';

const SocketContext = createContext<Socket | null>(null);

export const useSocket = () => useContext(SocketContext);

export const SocketProvider: React.FC = ({ children }) => {
  const [socket, setSocket] = useState<Socket | null>(null);

  useEffect(() => {
    const newSocket = io('http://localhost:3000');
    setSocket(newSocket);

    return () => {
      newSocket.close();
    };
  }, []);

  return (
    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>
  );
};

================
File: frontend/src/features/menuSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from '../api/axios';

export const fetchMenuItems = createAsyncThunk(
  'menu/fetchMenuItems',
  async () => {
    const response = await axios.get('/menu/items');
    return response.data;
  }
);

interface MenuItem {
  id: number;
  name: string;
  price: number;
}

export interface MenuState {
  items: MenuItem[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: MenuState = {
  items: [],
  status: 'idle',
  error: null,
};

const menuSlice = createSlice({
  name: 'menu',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchMenuItems.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMenuItems.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchMenuItems.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      });
  },
});

export default menuSlice.reducer;

================
File: frontend/src/features/ordersSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';

interface Order {
  id: number;
  items: Array<{
    id: number;
    name: string;
    quantity: number;
    price: number;
  }>;
  total: number;
  status: string;
}

interface OrdersState {
  orders: Order[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: OrdersState = {
  orders: [],
  status: 'idle',
  error: null,
};

export const fetchOrders = createAsyncThunk('orders/fetchOrders', async () => {
  const response = await axios.get<Order[]>('/api/orders');
  return response.data;
});

const ordersSlice = createSlice({
  name: 'orders',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchOrders.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(
        fetchOrders.fulfilled,
        (state, action: PayloadAction<Order[]>) => {
          state.status = 'succeeded';
          state.orders = action.payload;
        }
      )
      .addCase(fetchOrders.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      });
  },
});

export default ordersSlice.reducer;

================
File: frontend/src/features/rolesSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

interface Role {
  id: number;
  name: string;
}

interface RolesState {
  roles: Role[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: RolesState = {
  roles: [],
  status: 'idle',
  error: null,
};

export const fetchRoles = createAsyncThunk('roles/fetchRoles', async () => {
  const response = await axios.get('/api/roles');
  return response.data;
});

const rolesSlice = createSlice({
  name: 'roles',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchRoles.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchRoles.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.roles = action.payload;
      })
      .addCase(fetchRoles.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      });
  },
});

export default rolesSlice.reducer;

================
File: frontend/src/hooks/useAuth.ts
================
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';

export const useAuth = () => {
  const user = useSelector((state: RootState) => state.auth.user);
  const isGlobalAdmin = user?.role === 'GLOBAL_ADMIN';
  const authToken = useSelector((state: RootState) => state.auth.token);

  return { user, isGlobalAdmin, authToken };
};

================
File: frontend/src/hooks/useClientBranding.ts
================
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';

export const useClientBranding = () => {
  return useSelector((state: RootState) => state.clientBranding.branding);
};

================
File: frontend/src/hooks/useLazyImage.ts
================
import { useState, useEffect } from 'react';

export const useLazyImage = (src: string, placeholder: string) => {
  const [imageSrc, setImageSrc] = useState(placeholder);

  useEffect(() => {
    const img = new Image();
    img.src = src;
    img.onload = () => {
      setImageSrc(src);
    };
  }, [src]);

  return imageSrc;
};

================
File: frontend/src/hooks/useQuery.ts
================
import { useState, useEffect } from 'react';
import axiosInstance from '../api/axios';

interface QueryResult<T> {
  data: T | null;
  isLoading: boolean;
  error: Error | null;
}

export function useQuery<T>(url: string): QueryResult<T> {
  const [data, setData] = useState<T | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    let isMounted = true;

    const fetchData = async () => {
      try {
        const response = await axiosInstance.get<T>(url);
        if (isMounted) {
          setData(response.data);
          setIsLoading(false);
        }
      } catch (error) {
        if (isMounted) {
          setError(error as Error);
          setIsLoading(false);
        }
      }
    };

    fetchData();

    return () => {
      isMounted = false;
    };
  }, [url]);

  return { data, isLoading, error };
}

================
File: frontend/src/hooks/useQueryWithCache.ts
================
import { useQuery, QueryKey, UseQueryOptions } from 'react-query';
import axiosInstance from '../api/axios';

export function useQueryWithCache<T>(
  queryKey: QueryKey,
  url: string,
  options?: UseQueryOptions<T, Error>
) {
  return useQuery<T, Error>(
    queryKey,
    async () => {
      const { data } = await axiosInstance.get<T>(url);
      return data;
    },
    {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
      ...options,
    }
  );
}

================
File: frontend/src/hooks/useSelectedLocation.ts
================
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';

export const useSelectedLocation = () => {
  const selectedLocation = useSelector((state: RootState) => state.location.selectedLocation);
  return { selectedLocation };
};

================
File: frontend/src/pages/ABTestManagement.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchABTestsAsync,
  createABTestAsync,
  updateABTestAsync,
  deleteABTestAsync,
} from '../redux/slices/abTestSlice';
import { fetchClientsAsync } from '../redux/slices/clientSlice';
import { fetchLocationsAsync } from '../redux/slices/locationSlice';
import { ABTest } from '../types/abTestTypes';
import { Client } from '../types/clientTypes';
import { Location } from '../types/locationTypes';
import {
  TextField,
  Button,
  List,
  ListItem,
  IconButton,
  Typography,
  Box,
  Switch,
  Select,
  MenuItem,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';

const ABTestManagement: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { tests, status, error } = useSelector(
    (state: RootState) => state.abTest
  );
  const clients = useSelector((state: RootState) => state.client.clients);
  const locations = useSelector((state: RootState) => state.location.locations);
  const [newTest, setNewTest] = useState<Partial<ABTest>>({
    name: '',
    description: '',
    variantA: '',
    variantB: '',
    isActive: false,
    clientId: 0,
    locationId: 0,
  });

  useEffect(() => {
    dispatch(fetchABTestsAsync());
    dispatch(fetchClientsAsync());
    dispatch(fetchLocationsAsync());
  }, [dispatch]);

  const handleCreateTest = () => {
    dispatch(createABTestAsync(newTest as ABTest));
    setNewTest({
      name: '',
      description: '',
      variantA: '',
      variantB: '',
      isActive: false,
      clientId: 0,
      locationId: 0,
    });
  };

  const handleUpdateTest = (test: ABTest) => {
    dispatch(updateABTestAsync(test));
  };

  const handleDeleteTest = (id: number) => {
    if (window.confirm('Are you sure you want to delete this AB test?')) {
      dispatch(deleteABTestAsync(id));
    }
  };

  if (status === 'loading') return <Typography>Loading...</Typography>;
  if (status === 'failed') return <Typography>Error: {error}</Typography>;

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>
        AB Test Management
      </Typography>
      <Box sx={{ marginBottom: 2 }}>
        <TextField
          label="Test Name"
          value={newTest.name}
          onChange={(e) => setNewTest({ ...newTest, name: e.target.value })}
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Description"
          value={newTest.description}
          onChange={(e) => setNewTest({ ...newTest, description: e.target.value })}
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Variant A"
          value={newTest.variantA}
          onChange={(e) => setNewTest({ ...newTest, variantA: e.target.value })}
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Variant B"
          value={newTest.variantB}
          onChange={(e) => setNewTest({ ...newTest, variantB: e.target.value })}
          sx={{ marginRight: 1 }}
        />
        <Select
          value={newTest.clientId}
          onChange={(e) => setNewTest({ ...newTest, clientId: e.target.value as number })}
          sx={{ marginRight: 1 }}
        >
          {clients.map((client: Client) => (
            <MenuItem key={client.id} value={client.id}>
              {client.name}
            </MenuItem>
          ))}
        </Select>
        <Select
          value={newTest.locationId}
          onChange={(e) => setNewTest({ ...newTest, locationId: e.target.value as number })}
          sx={{ marginRight: 1 }}
        >
          {locations.map((location: Location) => (
            <MenuItem key={location.id} value={location.id}>
              {location.name}
            </MenuItem>
          ))}
        </Select>
        <Switch
          checked={newTest.isActive}
          onChange={(e) => setNewTest({ ...newTest, isActive: e.target.checked })}
        />
        <Button variant="contained" onClick={handleCreateTest}>
          Create Test
        </Button>
      </Box>
      <List>
        {tests.map((test: ABTest) => (
          <ListItem key={test.id}>
            <TextField
              value={test.name}
              onChange={(e) => handleUpdateTest({ ...test, name: e.target.value })}
            />
            <TextField
              value={test.description}
              onChange={(e) => handleUpdateTest({ ...test, description: e.target.value })}
            />
            <TextField
              value={test.variantA}
              onChange={(e) => handleUpdateTest({ ...test, variantA: e.target.value })}
            />
            <TextField
              value={test.variantB}
              onChange={(e) => handleUpdateTest({ ...test, variantB: e.target.value })}
            />
            <Switch
              checked={test.isActive}
              onChange={(e) => handleUpdateTest({ ...test, isActive: e.target.checked })}
            />
            <IconButton onClick={() => handleDeleteTest(test.id)}>
              <DeleteIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default ABTestManagement;

================
File: frontend/src/pages/AdminDashboard.tsx
================
import React from 'react';
import ClientBrandingManager from '../components/admin/ClientBrandingManager';
import POSSettingsForm from '../components/admin/POSSettingsForm';
// ... other imports ...

const AdminDashboard: React.FC = () => {
  return (
    <div className="admin-dashboard">
      <h1>Admin Dashboard</h1>
      <section>
        <h2>Client Branding</h2>
        <ClientBrandingManager />
      </section>
      <section>
        <h2>POS Settings</h2>
        <POSSettingsForm />
      </section>
      {/* ... other admin components ... */}
    </div>
  );
};

export default AdminDashboard;

================
File: frontend/src/pages/AdminDiscounts.tsx
================
import React, { useEffect, useState } from 'react';
import {
  createDiscount,
  fetchDiscountsByLocation,
  updateDiscount,
  deleteDiscount,
  scheduleDiscountDrop,
} from '../api/discountApi';
import { Discount } from '../types';

const AdminDiscounts: React.FC = () => {
  const [discounts, setDiscounts] = useState<Discount[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadDiscounts();
  }, []);

  const loadDiscounts = async () => {
    try {
      setLoading(true);
      const data = await fetchDiscountsByLocation(1);
      setDiscounts(data);
    } catch (err) {
      setError('Failed to load discounts.');
    } finally {
      setLoading(false);
    }
  };

  const handleCreateDiscount = async () => {
    try {
      const newDiscount = {
        name: 'New Discount',
        value: 10,
        type: 'percentage',
        expirationDate: new Date().toISOString(),
        locationId: 1,
        conditions: {},
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
      };
      await createDiscount(newDiscount);
      loadDiscounts();
    } catch (err) {
      setError('Failed to create discount.');
    }
  };

  const handleUpdateDiscount = async (discountId: number) => {
    try {
      const updatedDiscount = {
        name: 'Updated Discount',
        value: 15,
      };
      await updateDiscount(discountId, updatedDiscount);
      loadDiscounts();
    } catch (err) {
      setError('Failed to update discount.');
    }
  };

  const handleDeleteDiscount = async (discountId: number) => {
    try {
      await deleteDiscount(discountId);
      loadDiscounts();
    } catch (err) {
      setError('Failed to delete discount.');
    }
  };

  const handleScheduleDiscountDrop = async () => {
    try {
      const scheduleData = {
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        recurrence: 'daily' as const,
        discountId: discounts[0]?.id ? Number(discounts[0].id) : 0,
      };
      await scheduleDiscountDrop(scheduleData);
      loadDiscounts();
    } catch (err) {
      setError('Failed to schedule discount drop.');
    }
  };

  return (
    <div>
      <h2>Discount Management</h2>
      {loading && <p>Loading...</p>}
      {error && <p>{error}</p>}
      <button onClick={handleCreateDiscount}>Create Discount</button>
      <button onClick={handleScheduleDiscountDrop}>
        Schedule Discount Drop
      </button>
      {discounts.map((discount) => (
        <div key={discount.id}>
          <p>
            {discount.name} - {discount.value}%
          </p>
          <button onClick={() => handleUpdateDiscount(Number(discount.id))}>
            Update
          </button>
          <button onClick={() => handleDeleteDiscount(Number(discount.id))}>
            Delete
          </button>
        </div>
      ))}
    </div>
  );
};

export default AdminDiscounts;

================
File: frontend/src/pages/AdminLocationManagement.tsx
================
import React, { useEffect, useState } from 'react';
import {
  fetchLocations,
  createLocation,
  updateLocation,
  deleteLocation,
} from '../api/locationApi';
import { Location } from '../types';

const AdminLocationManagement: React.FC = () => {
  const [locations, setLocations] = useState<Location[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadLocations();
  }, []);

  const loadLocations = async () => {
    try {
      setLoading(true);
      const data = await fetchLocations();
      setLocations(data);
      setLoading(false);
    } catch (err) {
      setError('Failed to load locations.');
      setLoading(false);
    }
  };

  const handleCreateLocation = async () => {
    try {
      const newLocation = {
        name: 'New Location',
        address: '1234 Main St',
      };
      await createLocation(newLocation);
      loadLocations();
    } catch (err) {
      setError('Failed to create location.');
    }
  };

  const handleUpdateLocation = async (locationId: number) => {
    try {
      const updatedLocation = {
        name: 'Updated Location',
        address: '5678 Elm St',
      };
      await updateLocation(locationId, updatedLocation);
      loadLocations();
    } catch (err) {
      setError('Failed to update location.');
    }
  };

  const handleDeleteLocation = async (locationId: number) => {
    try {
      await deleteLocation(locationId);
      loadLocations();
    } catch (err) {
      setError('Failed to delete location.');
    }
  };

  return (
    <div>
      <h2>Admin Location Management</h2>
      {loading ? (
        <p>Loading...</p>
      ) : error ? (
        <p>{error}</p>
      ) : (
        <>
          <button onClick={handleCreateLocation}>Create Location</button>
          <ul>
            {locations.map((location) => (
              <li key={location.id}>
                {location.name}: {location.address}
                <button onClick={() => handleUpdateLocation(location.id)}>
                  Update
                </button>
                <button onClick={() => handleDeleteLocation(location.id)}>
                  Delete
                </button>
              </li>
            ))}
          </ul>
        </>
      )}
    </div>
  );
};

export default AdminLocationManagement;

================
File: frontend/src/pages/AdminLoyaltyManagement.tsx
================
import React from 'react';
import { Typography, Tabs, Tab, Box } from '@mui/material';
import LoyaltyRewards from '../components/LoyaltyRewards';
import LoyaltyTiers from '../components/LoyaltyTiers';

const AdminLoyaltyManagement: React.FC = () => {
  const [tabValue, setTabValue] = React.useState(0);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>
        Loyalty Program Management
      </Typography>
      <Tabs value={tabValue} onChange={handleTabChange}>
        <Tab label="Rewards" />
        <Tab label="Tiers" />
      </Tabs>
      {tabValue === 0 && <LoyaltyRewards />}
      {tabValue === 1 && <LoyaltyTiers />}
    </Box>
  );
};

export default AdminLoyaltyManagement;

================
File: frontend/src/pages/AdminLoyaltyRewards.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useParams } from 'react-router-dom';
import {
  fetchLoyaltyRewards,
  addReward,
  updateReward,
  selectLoyaltyRewards,
} from '../redux/slices/loyaltySlice';
import { AppDispatch, LoyaltyReward } from '../types';

const AdminLoyaltyRewards: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { clientId } = useParams<{ clientId: string }>(); // Extract clientId from params
  const loyaltyRewards = useSelector(selectLoyaltyRewards);
  const [rewardName, setRewardName] = useState('');
  const [pointsRequired, setPointsRequired] = useState<number | string>('');

  useEffect(() => {
    if (clientId) {
      dispatch(fetchLoyaltyRewards(Number(clientId))); // Pass clientId as number
    }
  }, [dispatch, clientId]);

  const handleAddReward = () => {
    if (rewardName && pointsRequired) {
      dispatch(
        addReward({
          id: Date.now(),
          name: rewardName,
          pointsRequired: parseInt(pointsRequired as string, 10),
          isActive: true, // Default to active when added
        })
      );
      setRewardName('');
      setPointsRequired('');
    }
  };

  return (
    <div>
      <h2>Loyalty Rewards Management</h2>
      <input
        type="text"
        placeholder="Reward Name"
        value={rewardName}
        onChange={(e) => setRewardName(e.target.value)}
      />
      <input
        type="number"
        placeholder="Points Required"
        value={pointsRequired}
        onChange={(e) => setPointsRequired(e.target.value)}
      />
      <button onClick={handleAddReward}>Add Reward</button>
      <ul>
        {loyaltyRewards.map((reward: LoyaltyReward) => (
          <li key={reward.id}>
            {reward.name} - {reward.pointsRequired} points
            <button
              onClick={() =>
                dispatch(
                  updateReward({
                    id: reward.id,
                    pointsRequired: 200,
                    isActive: true,
                  })
                )
              }
            >
              Update Points to 200
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default AdminLoyaltyRewards;

================
File: frontend/src/pages/AdminMenuManagement.tsx
================
import React, { useEffect, useState, useCallback } from 'react';
import { createMenu, updateMenu, deleteMenu, fetchMenus } from '../api/menuApi';
import { useParams } from 'react-router-dom';
import { Menu } from '../types';

const AdminMenuManagement: React.FC = () => {
  const { clientId } = useParams<{ clientId: string }>();
  const [menuId, setMenuId] = useState<number>(0);
  const [menuData, setMenuData] = useState<Partial<Menu>>({});
  const [updatedMenu, setUpdatedMenu] = useState<Partial<Menu>>({});
  const [menus, setMenus] = useState<Menu[]>([]);

  const loadMenus = useCallback(async () => {
    if (clientId) {
      const loadedMenus = await fetchMenus(Number(clientId));
      setMenus(loadedMenus);
    }
  }, [clientId]);

  useEffect(() => {
    loadMenus();
  }, [loadMenus]);

  const handleCreateMenu = async () => {
    if (clientId && menuData.name) {
      await createMenu(Number(clientId), menuData);
      loadMenus();
      setMenuData({});
    }
  };

  const handleUpdateMenu = async () => {
    if (clientId && menuId && updatedMenu) {
      await updateMenu(Number(clientId), menuId, updatedMenu);
      loadMenus();
      setUpdatedMenu({});
    }
  };

  const handleDeleteMenu = async () => {
    if (clientId && menuId) {
      await deleteMenu(Number(clientId), menuId);
      loadMenus();
      setMenuId(0);
    }
  };

  return (
    <div>
      <h2>Menu Management</h2>
      <div>
        <h3>Create New Menu</h3>
        <input
          type="text"
          placeholder="Menu Name"
          value={menuData.name || ''}
          onChange={(e) => setMenuData({ ...menuData, name: e.target.value })}
        />
        <button onClick={handleCreateMenu}>Create Menu</button>
      </div>
      <div>
        <h3>Update Menu</h3>
        <select
          value={menuId}
          onChange={(e) => setMenuId(Number(e.target.value))}
        >
          <option value={0}>Select a menu</option>
          {menus.map((menu) => (
            <option key={menu.id} value={menu.id}>
              {menu.name}
            </option>
          ))}
        </select>
        <input
          type="text"
          placeholder="New Menu Name"
          value={updatedMenu.name || ''}
          onChange={(e) =>
            setUpdatedMenu({ ...updatedMenu, name: e.target.value })
          }
        />
        <button onClick={handleUpdateMenu}>Update Menu</button>
      </div>
      <div>
        <h3>Delete Menu</h3>
        <select
          value={menuId}
          onChange={(e) => setMenuId(Number(e.target.value))}
        >
          <option value={0}>Select a menu</option>
          {menus.map((menu) => (
            <option key={menu.id} value={menu.id}>
              {menu.name}
            </option>
          ))}
        </select>
        <button onClick={handleDeleteMenu}>Delete Menu</button>
      </div>
    </div>
  );
};

export default AdminMenuManagement;

================
File: frontend/src/pages/AdminPanel.tsx
================
import React from 'react';
import { useAppSelector, useAppDispatch } from '../redux/store';
import { fetchClientConfig, selectClientConfig, selectClientConfigStatus, selectClientConfigError } from '../redux/slices/clientConfigSlice';

interface AdminPanelProps {
  isGlobalAdmin: boolean;
}

const AdminPanel: React.FC<AdminPanelProps> = ({ isGlobalAdmin }) => {
  const dispatch = useAppDispatch();
  const clientConfig = useAppSelector(selectClientConfig);
  const status = useAppSelector(selectClientConfigStatus);
  const error = useAppSelector(selectClientConfigError);

  React.useEffect(() => {
    if (isGlobalAdmin) {
      dispatch(fetchClientConfig('global'));
    }
  }, [dispatch, isGlobalAdmin]);

  return (
    <div>
      <h1>{isGlobalAdmin ? 'Global Admin Panel' : 'Admin Panel'}</h1>
      {status === 'loading' && <p>Loading...</p>}
      {status === 'failed' && <p>Error: {error}</p>}
      {status === 'succeeded' && clientConfig && (
        <div>
          <h2>Client Configuration</h2>
          <pre>{JSON.stringify(clientConfig, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default AdminPanel;

================
File: frontend/src/pages/AdminWalletManagement.tsx
================
import React, { useEffect, useState, useCallback } from 'react';
import { useSelector } from 'react-redux';
import { fetchWalletData } from '../api/walletApi';
import { Wallet, Discount } from '../types';
import { selectGuestProfile } from '../redux/slices/guestSlice';

const AdminWalletManagement: React.FC = () => {
  const [wallet, setWallet] = useState<Wallet | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const guestProfile = useSelector(selectGuestProfile);
  const guestId = guestProfile.id;

  const loadWalletData = useCallback(async () => {
    try {
      setLoading(true);
      const balance = await fetchWalletData();
      setWallet({
        balance: balance.balance,
        guestId: guestId,
        discounts: balance.discounts || [],
      });
    } catch (err) {
      setError('Failed to load wallet data.');
    } finally {
      setLoading(false);
    }
  }, [guestId]);

  useEffect(() => {
    loadWalletData();
  }, [loadWalletData]);

  return (
    <div>
      <h2>Admin Wallet Management</h2>
      {loading && <p>Loading...</p>}
      {error && <p>{error}</p>}
      {wallet && (
        <div>
          <p>Guest ID: {wallet.guestId}</p>
          <p>Balance: ${wallet.balance.toFixed(2)}</p>
          <h3>Discounts:</h3>
          {wallet.discounts && wallet.discounts.length > 0 ? (
            <ul>
              {wallet.discounts.map((discount: Discount) => (
                <li key={discount.id}>
                  {discount.name} - {discount.value}%{' (Expires: '}
                  {new Date(discount.expirationDate).toLocaleDateString()}
                  {')'}
                </li>
              ))}
            </ul>
          ) : (
            <p>No discounts available</p>
          )}
        </div>
      )}
      <button onClick={loadWalletData}>Refresh Wallet Data</button>
    </div>
  );
};

export default AdminWalletManagement;

================
File: frontend/src/pages/BrandingManagement.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchBrandingProfiles,
  createBrandingProfile,
  updateBrandingProfile,
  deleteBrandingProfile,
} from '../redux/slices/brandingSlice';
import { BrandingProfile, Client } from '../types';
import {
  TextField,
  Button,
  List,
  ListItem,
  IconButton,
  Typography,
  Box,
  Select,
  MenuItem,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';

const BrandingManagement: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { profiles, status, error } = useSelector(
    (state: RootState) => state.branding
  );
  const clients = useSelector((state: RootState) => state.clients.clients);
  const [newProfile, setNewProfile] = useState<Partial<BrandingProfile>>({
    name: '',
    logoUrl: '',
    primaryColor: '',
    secondaryColor: '',
    fontColor: '',
    clientId: 0,
  });

  useEffect(() => {
    dispatch(fetchBrandingProfiles());
  }, [dispatch]);

  const handleCreateProfile = () => {
    dispatch(createBrandingProfile(newProfile));
    setNewProfile({
      name: '',
      logoUrl: '',
      primaryColor: '',
      secondaryColor: '',
      fontColor: '',
      clientId: 0,
    });
  };

  const handleUpdateProfile = (profile: BrandingProfile) => {
    dispatch(updateBrandingProfile(profile));
  };

  const handleDeleteProfile = (id: number) => {
    if (
      window.confirm('Are you sure you want to delete this branding profile?')
    ) {
      dispatch(deleteBrandingProfile(id));
    }
  };

  if (status === 'loading') return <Typography>Loading...</Typography>;
  if (status === 'failed') return <Typography>Error: {error}</Typography>;

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>
        Branding Management
      </Typography>
      <Box sx={{ marginBottom: 2 }}>
        <TextField
          label="Profile Name"
          value={newProfile.name}
          onChange={(e) =>
            setNewProfile({ ...newProfile, name: e.target.value })
          }
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Logo URL"
          value={newProfile.logoUrl}
          onChange={(e) =>
            setNewProfile({ ...newProfile, logoUrl: e.target.value })
          }
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Primary Color"
          value={newProfile.primaryColor}
          onChange={(e) =>
            setNewProfile({ ...newProfile, primaryColor: e.target.value })
          }
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Secondary Color"
          value={newProfile.secondaryColor}
          onChange={(e) =>
            setNewProfile({ ...newProfile, secondaryColor: e.target.value })
          }
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Font Color"
          value={newProfile.fontColor}
          onChange={(e) =>
            setNewProfile({ ...newProfile, fontColor: e.target.value })
          }
          sx={{ marginRight: 1 }}
        />
        <Select
          value={newProfile.clientId}
          onChange={(e) =>
            setNewProfile({ ...newProfile, clientId: e.target.value as number })
          }
          sx={{ marginRight: 1 }}
        >
          {clients.map((client: Client) => (
            <MenuItem key={client.id} value={client.id}>
              {client.name}
            </MenuItem>
          ))}
        </Select>
        <Button onClick={handleCreateProfile} variant="contained">
          Add Profile
        </Button>
      </Box>

      <List>
        {profiles.map((profile) => (
          <ListItem key={profile.id}>
            <TextField
              value={profile.name}
              onChange={(e) =>
                handleUpdateProfile({ ...profile, name: e.target.value })
              }
              sx={{ marginRight: 1 }}
            />
            <TextField
              value={profile.logoUrl}
              onChange={(e) =>
                handleUpdateProfile({ ...profile, logoUrl: e.target.value })
              }
              sx={{ marginRight: 1 }}
            />
            <TextField
              value={profile.primaryColor}
              onChange={(e) =>
                handleUpdateProfile({
                  ...profile,
                  primaryColor: e.target.value,
                })
              }
              sx={{ marginRight: 1 }}
            />
            <TextField
              value={profile.secondaryColor}
              onChange={(e) =>
                handleUpdateProfile({
                  ...profile,
                  secondaryColor: e.target.value,
                })
              }
              sx={{ marginRight: 1 }}
            />
            <TextField
              value={profile.fontColor}
              onChange={(e) =>
                handleUpdateProfile({ ...profile, fontColor: e.target.value })
              }
              sx={{ marginRight: 1 }}
            />
            <Select
              value={profile.clientId}
              onChange={(e) =>
                handleUpdateProfile({
                  ...profile,
                  clientId: e.target.value as number,
                })
              }
              sx={{ marginRight: 1 }}
            >
              {clients.map((client: Client) => (
                <MenuItem key={client.id} value={client.id}>
                  {client.name}
                </MenuItem>
              ))}
            </Select>
            <IconButton onClick={() => handleDeleteProfile(profile.id)}>
              <DeleteIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default BrandingManagement;

================
File: frontend/src/pages/BrandingSettings.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  selectBrandingProfiles,
  addBrandingProfile,
  updateBrandingProfile,
  fetchBrandingProfiles,
} from '../redux/slices/brandingSlice';
import { RootState, AppDispatch, BrandingProfile } from '../types';
import { useParams } from 'react-router-dom';
import { fetchClientId } from '../api/clientApi';

const BrandingSettings: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const brandingProfiles = useSelector((state: RootState) =>
    selectBrandingProfiles(state)
  );
  const { clientId } = useParams<{ clientId: string }>();
  const [currentProfile, setCurrentProfile] = useState<BrandingProfile>({
    id: 0,
    clientId: Number(clientId),
    name: '',
    logoUrl: '',
    primaryColor: '',
    secondaryColor: '',
    fontColor: '',
    secondaryFontColor: '',
  });
  const [logoFile, setLogoFile] = useState<File | null>(null);

  useEffect(() => {
    if (clientId) {
      dispatch(fetchBrandingProfiles(Number(clientId)));
    }
  }, [dispatch, clientId]);

  useEffect(() => {
    if (brandingProfiles.length > 0) {
      setCurrentProfile((prev) => ({
        ...prev,
        ...brandingProfiles[0],
        id: brandingProfiles[0].id || 0,
      }));
    }
  }, [brandingProfiles]);

  useEffect(() => {
    const fetchClient = async () => {
      const id = await fetchClientId();
      // Use the fetched client ID if needed
      console.log('Fetched client ID:', id);
    };

    fetchClient();
  }, []);

  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setLogoFile(e.target.files[0]);
    }
  };

  const handleSave = async () => {
    if (logoFile) {
      // Handle logo upload
      const formData = new FormData();
      formData.append('file', logoFile);
      formData.append('clientId', clientId?.toString() || '');

      try {
        const response = await fetch('/api/branding/upload-logo', {
          method: 'POST',
          body: formData,
        });
        const data = await response.json();

        if (data.url) {
          setCurrentProfile((prev) => ({ ...prev, logoUrl: data.url }));
        }
      } catch (error) {
        console.error('Error uploading logo:', error);
      }
    }

    if (currentProfile.id === 0) {
      dispatch(addBrandingProfile(currentProfile));
    } else {
      dispatch(updateBrandingProfile(currentProfile));
    }
  };

  return (
    <div className="p-4 bg-white shadow rounded-md">
      <h2 className="text-2xl font-bold mb-4">Branding Settings</h2>
      <div className="space-y-4">
        <input
          type="text"
          placeholder="Name"
          value={currentProfile.name}
          onChange={(e) =>
            setCurrentProfile((prev) => ({ ...prev, name: e.target.value }))
          }
          className="w-full p-2 border rounded"
        />
        <input
          type="text"
          placeholder="Logo URL"
          value={currentProfile.logoUrl}
          onChange={(e) =>
            setCurrentProfile((prev) => ({ ...prev, logoUrl: e.target.value }))
          }
          className="w-full p-2 border rounded"
        />
        <input
          type="file"
          accept="image/*"
          onChange={handleLogoUpload}
          className="w-full p-2 border rounded"
        />
        <input
          type="color"
          placeholder="Primary Color"
          value={currentProfile.primaryColor}
          onChange={(e) =>
            setCurrentProfile((prev) => ({
              ...prev,
              primaryColor: e.target.value,
            }))
          }
          className="w-full p-2 border rounded"
        />
        <input
          type="color"
          placeholder="Secondary Color"
          value={currentProfile.secondaryColor}
          onChange={(e) =>
            setCurrentProfile((prev) => ({
              ...prev,
              secondaryColor: e.target.value,
            }))
          }
          className="w-full p-2 border rounded"
        />
        <input
          type="color"
          placeholder="Font Color"
          value={currentProfile.fontColor}
          onChange={(e) =>
            setCurrentProfile((prev) => ({
              ...prev,
              fontColor: e.target.value,
            }))
          }
          className="w-full p-2 border rounded"
        />
        <input
          type="color"
          placeholder="Secondary Font Color"
          value={currentProfile.secondaryFontColor}
          onChange={(e) =>
            setCurrentProfile((prev) => ({
              ...prev,
              secondaryFontColor: e.target.value,
            }))
          }
          className="w-full p-2 border rounded"
        />
        <button
          onClick={handleSave}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          Save Branding
        </button>
      </div>
    </div>
  );
};

export default BrandingSettings;

================
File: frontend/src/pages/BusinessAdminDashboard.tsx
================
import React from 'react';
import { useClientContext } from '../context/ClientContext';

const BusinessAdminDashboard: React.FC = () => {
  const { client } = useClientContext();

  if (!client) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>{client.name} Admin Dashboard</h1>
      {/* Add dashboard content here */}
    </div>
  );
};

export default BusinessAdminDashboard;

================
File: frontend/src/pages/CateringMenuItems.tsx
================
import React, { useState, useCallback } from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import axios from 'axios';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
} from '@mui/material';

interface CateringMenuItem {
  id: number;
  name: string;
  description: string;
  price: number;
  menuId: number;
}

interface CateringMenu {
  id: number;
  name: string;
}

const API_URL = process.env.REACT_APP_API_URL || '/api';

const CateringMenuItems: React.FC = () => {
  const queryClient = useQueryClient();
  const [open, setOpen] = useState(false);
  const [newItem, setNewItem] = useState({
    name: '',
    description: '',
    price: 0,
    menuId: 0,
  });

  const {
    data: menuItems,
    isLoading,
    isError,
  } = useQuery<CateringMenuItem[]>('cateringMenuItems', async () => {
    const response = await axios.get(`${API_URL}/catering-menu-items`);
    return response.data;
  });

  const { data: menus } = useQuery<CateringMenu[]>(
    'cateringMenus',
    async () => {
      const response = await axios.get(`${API_URL}/catering-menus`);
      return response.data;
    }
  );

  const createItemMutation = useMutation(
    (newItem: Omit<CateringMenuItem, 'id'>) =>
      axios.post(`${API_URL}/catering-menu-items`, newItem),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('cateringMenuItems');
        setOpen(false);
        setNewItem({ name: '', description: '', price: 0, menuId: 0 });
      },
    }
  );

  const handleCreateItem = useCallback(() => {
    createItemMutation.mutate(newItem);
  }, [createItemMutation, newItem]);

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      const { name, value } = e.target;
      setNewItem((prev) => ({
        ...prev,
        [name]: name === 'price' ? parseFloat(value) : value,
      }));
    },
    []
  );

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error loading menu items</div>;

  return (
    <div>
      <h1>Catering Menu Items</h1>
      <Button variant="contained" color="primary" onClick={() => setOpen(true)}>
        Add New Menu Item
      </Button>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Description</TableCell>
              <TableCell>Price</TableCell>
              <TableCell>Menu</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {menuItems?.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.name}</TableCell>
                <TableCell>{item.description}</TableCell>
                <TableCell>${item.price.toFixed(2)}</TableCell>
                <TableCell>
                  {menus?.find((menu) => menu.id === item.menuId)?.name}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>Add New Menu Item</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Name"
            name="name"
            fullWidth
            value={newItem.name}
            onChange={handleInputChange}
          />
          <TextField
            margin="dense"
            label="Description"
            name="description"
            fullWidth
            value={newItem.description}
            onChange={handleInputChange}
          />
          <TextField
            margin="dense"
            label="Price"
            name="price"
            type="number"
            fullWidth
            value={newItem.price}
            onChange={handleInputChange}
          />
          <FormControl fullWidth margin="dense">
            <InputLabel>Menu</InputLabel>
            <Select
              value={newItem.menuId}
              onChange={(e) =>
                setNewItem((prev) => ({
                  ...prev,
                  menuId: e.target.value as number,
                }))
              }
            >
              {menus?.map((menu) => (
                <MenuItem key={menu.id} value={menu.id}>
                  {menu.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button onClick={handleCreateItem}>Add</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default CateringMenuItems;

================
File: frontend/src/pages/CateringMenus.tsx
================
import React, { useState, useCallback } from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import axios from 'axios';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
} from '@mui/material';

interface CateringMenu {
  id: number;
  name: string;
  description: string;
}

const API_URL = process.env.REACT_APP_API_URL || '/api';

const CateringMenus: React.FC = () => {
  const queryClient = useQueryClient();
  const [open, setOpen] = useState(false);
  const [newMenu, setNewMenu] = useState({ name: '', description: '' });

  const {
    data: menus,
    isLoading,
    isError,
  } = useQuery<CateringMenu[]>('cateringMenus', async () => {
    const response = await axios.get(`${API_URL}/catering-menus`);
    return response.data;
  });

  const createMenuMutation = useMutation(
    (newMenu: Omit<CateringMenu, 'id'>) =>
      axios.post(`${API_URL}/catering-menus`, newMenu),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('cateringMenus');
        setOpen(false);
        setNewMenu({ name: '', description: '' });
      },
    }
  );

  const handleCreateMenu = useCallback(() => {
    createMenuMutation.mutate(newMenu);
  }, [createMenuMutation, newMenu]);

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      const { name, value } = e.target;
      setNewMenu((prev) => ({ ...prev, [name]: value }));
    },
    []
  );

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error loading menus</div>;

  return (
    <div>
      <h1>Catering Menus</h1>
      <Button variant="contained" color="primary" onClick={() => setOpen(true)}>
        Add New Menu
      </Button>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Description</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {menus?.map((menu) => (
              <TableRow key={menu.id}>
                <TableCell>{menu.name}</TableCell>
                <TableCell>{menu.description}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>Add New Catering Menu</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Name"
            name="name"
            fullWidth
            value={newMenu.name}
            onChange={handleInputChange}
          />
          <TextField
            margin="dense"
            label="Description"
            name="description"
            fullWidth
            value={newMenu.description}
            onChange={handleInputChange}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button onClick={handleCreateMenu}>Add</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default CateringMenus;

================
File: frontend/src/pages/CateringOrderAssignments.tsx
================
import React from 'react';

const CateringOrderAssignments: React.FC = () => {
  return (
    <div>
      <h1>Catering Order Assignments</h1>
      {/* Add your component logic here */}
    </div>
  );
};

export default CateringOrderAssignments;

================
File: frontend/src/pages/CateringOrders.tsx
================
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import axios from 'axios';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
} from '@mui/material';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';

interface CateringOrder {
  id: number;
  customerId: number;
  houseAccountId: number | null;
  orderDate: string;
  deliveryDate: string;
  status: string;
  totalAmount: number;
}

interface Customer {
  id: number;
  name: string;
}

interface HouseAccount {
  id: number;
  name: string;
  balance: number;
}

const API_URL = process.env.REACT_APP_API_URL || '/api';

const CateringOrders: React.FC = () => {
  const queryClient = useQueryClient();
  const [open, setOpen] = useState(false);
  const [newOrder, setNewOrder] = useState<Partial<CateringOrder>>({
    customerId: 0,
    houseAccountId: null,
    orderDate: new Date().toISOString(),
    deliveryDate: new Date().toISOString(),
    status: 'Pending',
    totalAmount: 0,
  });

  const {
    data: orders,
    isLoading,
    isError,
  } = useQuery<CateringOrder[]>('cateringOrders', async () => {
    const response = await axios.get(`${API_URL}/catering-orders`);
    return response.data;
  });

  const { data: customers } = useQuery<Customer[]>('customers', async () => {
    const response = await axios.get(`${API_URL}/customers`);
    return response.data;
  });

  const { data: houseAccounts } = useQuery<HouseAccount[]>(
    'houseAccounts',
    async () => {
      const response = await axios.get(`${API_URL}/house-accounts`);
      return response.data;
    }
  );

  const createOrderMutation = useMutation(
    (newOrder: Partial<CateringOrder>) =>
      axios.post(`${API_URL}/catering-orders`, newOrder),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('cateringOrders');
        setOpen(false);
        setNewOrder({
          customerId: 0,
          houseAccountId: null,
          orderDate: new Date().toISOString(),
          deliveryDate: new Date().toISOString(),
          status: 'Pending',
          totalAmount: 0,
        });
      },
    }
  );

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error loading catering orders</div>;

  return (
    <div>
      <h1>Catering Orders</h1>
      <Button variant="contained" color="primary" onClick={() => setOpen(true)}>
        Create New Order
      </Button>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Order ID</TableCell>
              <TableCell>Customer</TableCell>
              <TableCell>House Account</TableCell>
              <TableCell>Order Date</TableCell>
              <TableCell>Delivery Date</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Total Amount</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {orders?.map((order) => (
              <TableRow key={order.id}>
                <TableCell>{order.id}</TableCell>
                <TableCell>
                  {customers?.find((c) => c.id === order.customerId)?.name}
                </TableCell>
                <TableCell>
                  {order.houseAccountId
                    ? houseAccounts?.find(
                        (ha) => ha.id === order.houseAccountId
                      )?.name
                    : 'N/A'}
                </TableCell>
                <TableCell>
                  {new Date(order.orderDate).toLocaleString()}
                </TableCell>
                <TableCell>
                  {new Date(order.deliveryDate).toLocaleString()}
                </TableCell>
                <TableCell>
                  <Chip
                    label={order.status}
                    color={
                      order.status === 'Completed'
                        ? 'success'
                        : order.status === 'In Progress'
                          ? 'warning'
                          : 'default'
                    }
                  />
                </TableCell>
                <TableCell>${order.totalAmount.toFixed(2)}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Dialog open={open} onClose={() => setOpen(false)}>
        <DialogTitle>Create New Catering Order</DialogTitle>
        <DialogContent>
          <FormControl fullWidth margin="dense">
            <InputLabel>Customer</InputLabel>
            <Select
              value={newOrder.customerId}
              onChange={(e) =>
                setNewOrder({
                  ...newOrder,
                  customerId: e.target.value as number,
                })
              }
            >
              {customers?.map((customer) => (
                <MenuItem key={customer.id} value={customer.id}>
                  {customer.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <FormControl fullWidth margin="dense">
            <InputLabel>House Account (Optional)</InputLabel>
            <Select
              value={newOrder.houseAccountId || ''}
              onChange={(e) =>
                setNewOrder({
                  ...newOrder,
                  houseAccountId: e.target.value as number | null,
                })
              }
            >
              <MenuItem value="">None</MenuItem>
              {houseAccounts?.map((account) => (
                <MenuItem key={account.id} value={account.id}>
                  {account.name} (Balance: ${account.balance.toFixed(2)})
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <DateTimePicker
            label="Order Date"
            value={newOrder.orderDate}
            onChange={(date) =>
              setNewOrder({ ...newOrder, orderDate: date?.toISOString() || '' })
            }
          />
          <DateTimePicker
            label="Delivery Date"
            value={newOrder.deliveryDate}
            onChange={(date) =>
              setNewOrder({
                ...newOrder,
                deliveryDate: date?.toISOString() || '',
              })
            }
          />
          <FormControl fullWidth margin="dense">
            <InputLabel>Status</InputLabel>
            <Select
              value={newOrder.status}
              onChange={(e) =>
                setNewOrder({ ...newOrder, status: e.target.value as string })
              }
            >
              <MenuItem value="Pending">Pending</MenuItem>
              <MenuItem value="In Progress">In Progress</MenuItem>
              <MenuItem value="Completed">Completed</MenuItem>
            </Select>
          </FormControl>
          <TextField
            margin="dense"
            label="Total Amount"
            type="number"
            fullWidth
            value={newOrder.totalAmount}
            onChange={(e) =>
              setNewOrder({
                ...newOrder,
                totalAmount: parseFloat(e.target.value),
              })
            }
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button onClick={() => createOrderMutation.mutate(newOrder)}>
            Create
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default CateringOrders;

================
File: frontend/src/pages/CateringOrdersAdmin.tsx
================
import React, { useCallback, useMemo, useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Modal,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Typography,
  Snackbar,
  Alert,
  CircularProgress,
  Grid,
  Box,
  IconButton,
  SelectChangeEvent,
} from '@mui/material';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { useParams } from 'react-router-dom';
import { cateringOrderApi } from '../api/cateringOrderApi';
import { useAuth } from '../contexts/AuthContext';
import {
  CateringOrder,
  OrderStatus,
  OrderStatistics,
} from '../types/cateringOrderTypes';

const CateringOrdersAdmin: React.FC = () => {
  const queryClient = useQueryClient();
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingOrder, setEditingOrder] = useState<CateringOrder | null>(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [deletingOrderId, setDeletingOrderId] = useState<number | null>(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [orderStatistics, setOrderStatistics] = useState<OrderStatistics | null>(null);

  const { clientId } = useParams<{ clientId: string }>();
  const { user } = useAuth();

  const {
    data: orders,
    isLoading,
    isError,
  } = useQuery(['cateringOrders', selectedStatus, clientId], () =>
    cateringOrderApi.fetchOrders(clientId, selectedStatus)
  );

  const updateOrderStatusMutation = useMutation(
    ({ orderId, newStatus }: { orderId: number; newStatus: OrderStatus }) =>
      cateringOrderApi.updateOrderStatus(clientId, orderId, newStatus),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(['cateringOrders', selectedStatus, clientId]);
        setSnackbarMessage('Order status updated successfully');
        setSnackbarOpen(true);
      },
      onError: () => {
        setSnackbarMessage('Failed to update order status');
        setSnackbarOpen(true);
      },
    }
  );

  const deleteOrderMutation = useMutation(
    (orderId: number) => cateringOrderApi.deleteOrder(clientId, orderId),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(['cateringOrders', selectedStatus, clientId]);
        setSnackbarMessage('Order deleted successfully');
        setSnackbarOpen(true);
      },
      onError: () => {
        setSnackbarMessage('Failed to delete order');
        setSnackbarOpen(true);
      },
    }
  );

  const handleStatusChange = useCallback(
    (orderId: number, newStatus: OrderStatus) => {
      updateOrderStatusMutation.mutate({ orderId, newStatus });
    },
    [updateOrderStatusMutation]
  );

  const handleFilterChange = useCallback(
    (event: SelectChangeEvent<string>) => {
      setSelectedStatus(event.target.value);
    },
    []
  );

  const handleEditClick = useCallback((order: CateringOrder) => {
    setEditingOrder(order);
    setIsEditModalOpen(true);
  }, []);

  const handleDeleteClick = useCallback((orderId: number) => {
    setDeletingOrderId(orderId);
    setIsDeleteModalOpen(true);
  }, []);

  const handleEditSubmit = useCallback(() => {
    if (editingOrder) {
      updateOrderStatusMutation.mutate({
        orderId: editingOrder.id,
        newStatus: editingOrder.status,
      });
      setIsEditModalOpen(false);
    }
  }, [editingOrder, updateOrderStatusMutation]);

  const handleDeleteConfirm = useCallback(() => {
    if (deletingOrderId) {
      deleteOrderMutation.mutate(deletingOrderId);
      setIsDeleteModalOpen(false);
    }
  }, [deletingOrderId, deleteOrderMutation]);

  // Calculate order statistics
  useEffect(() => {
    if (orders) {
      const stats: OrderStatistics = {
        totalOrders: orders.length,
        totalRevenue: orders.reduce((sum: number, order: CateringOrder) => sum + order.totalAmount, 0),
        averageOrderValue: orders.length > 0
          ? orders.reduce((sum: number, order: CateringOrder) => sum + order.totalAmount, 0) / orders.length
          : 0,
      };
      setOrderStatistics(stats);
    }
  }, [orders]);

  if (isLoading) return <CircularProgress />;
  if (isError) return <Typography color="error">Error loading orders</Typography>;

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        Catering Orders Management
      </Typography>
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={4}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6">Total Orders</Typography>
            <Typography variant="h4">{orderStatistics?.totalOrders}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} sm={4}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6">Total Revenue</Typography>
            <Typography variant="h4">${orderStatistics?.totalRevenue.toFixed(2)}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} sm={4}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6">Average Order Value</Typography>
            <Typography variant="h4">${orderStatistics?.averageOrderValue.toFixed(2)}</Typography>
          </Paper>
        </Grid>
      </Grid>
      <FormControl fullWidth sx={{ mb: 3 }}>
        <InputLabel>Filter by Status</InputLabel>
        <Select value={selectedStatus} onChange={handleFilterChange}>
          <MenuItem value="all">All</MenuItem>
          <MenuItem value="pending">Pending</MenuItem>
          <MenuItem value="confirmed">Confirmed</MenuItem>
          <MenuItem value="completed">Completed</MenuItem>
          <MenuItem value="cancelled">Cancelled</MenuItem>
        </Select>
      </FormControl>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Order ID</TableCell>
              <TableCell>Customer</TableCell>
              <TableCell>Date</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Total</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {orders?.map((order: CateringOrder) => (
              <TableRow key={order.id}>
                <TableCell>{order.id}</TableCell>
                <TableCell>{order.customerName}</TableCell>
                <TableCell>{new Date(order.orderDate).toLocaleDateString()}</TableCell>
                <TableCell>{order.status}</TableCell>
                <TableCell>${order.totalAmount.toFixed(2)}</TableCell>
                <TableCell>
                  <IconButton onClick={() => handleEditClick(order)}>
                    <EditIcon />
                  </IconButton>
                  <IconButton onClick={() => handleDeleteClick(order.id)}>
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Modal open={isEditModalOpen} onClose={() => setIsEditModalOpen(false)}>
        <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', bgcolor: 'background.paper', boxShadow: 24, p: 4 }}>
          <Typography variant="h6" gutterBottom>Edit Order</Typography>
          {editingOrder && (
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Status</InputLabel>
              <Select
                value={editingOrder.status}
                onChange={(e) => setEditingOrder({ ...editingOrder, status: e.target.value as OrderStatus })}
              >
                <MenuItem value="pending">Pending</MenuItem>
                <MenuItem value="confirmed">Confirmed</MenuItem>
                <MenuItem value="completed">Completed</MenuItem>
                <MenuItem value="cancelled">Cancelled</MenuItem>
              </Select>
            </FormControl>
          )}
          <Button onClick={handleEditSubmit} variant="contained">Save Changes</Button>
        </Box>
      </Modal>
      <Modal open={isDeleteModalOpen} onClose={() => setIsDeleteModalOpen(false)}>
        <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', bgcolor: 'background.paper', boxShadow: 24, p: 4 }}>
          <Typography variant="h6" gutterBottom>Confirm Deletion</Typography>
          <Typography>Are you sure you want to delete this order?</Typography>
          <Button onClick={handleDeleteConfirm} variant="contained" color="error" sx={{ mt: 2 }}>Delete</Button>
        </Box>
      </Modal>
      <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={() => setSnackbarOpen(false)}>
        <Alert onClose={() => setSnackbarOpen(false)} severity="success" sx={{ width: '100%' }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default CateringOrdersAdmin;

================
File: frontend/src/pages/CheckoutPage.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { RootState, AppDispatch } from '../redux/store';
import {
  removeFromCart,
  updateCartItemQuantity,
  clearCart,
} from '../redux/slices/cartSlice';
import { createOrder } from '../api/orderApi';
import { fetchGuestRewards } from '../api/guestApi';
import { OrderType, Reward, CartItem } from '../types';

const CheckoutPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const cartItems = useSelector((state: RootState) => state.cart.items);
  const location = useSelector(
    (state: RootState) => state.location.selectedLocation
  );
  const guest = useSelector((state: RootState) => state.auth.currentGuest);

  const [orderType, setOrderType] = useState<OrderType>('pickup');
  const [kitchenTip, setKitchenTip] = useState<number>(0);
  const [driverTip, setDriverTip] = useState<number>(0);
  const [appliedDiscounts, setAppliedDiscounts] = useState<string[]>([]);
  const [availableRewards, setAvailableRewards] = useState<Reward[]>([]);

  useEffect(() => {
    if (guest) {
      fetchGuestRewards(guest.id).then(setAvailableRewards);
    }
  }, [guest]);

  const handleQuantityChange = (index: number, newQuantity: number) => {
    if (newQuantity < 1) return;
    dispatch(updateCartItemQuantity({ index, quantity: newQuantity }));
  };

  const handleRemoveItem = (index: number) => {
    dispatch(removeFromCart(index));
  };

  const calculateItemTotal = (item: CartItem) => {
    const itemTotal = item.menuItem.price * item.quantity;
    const modifierTotal =
      item.selectedModifiers.reduce((sum, mod) => sum + mod.price, 0) *
      item.quantity;
    return itemTotal + modifierTotal;
  };

  const calculateSubtotal = () => {
    return cartItems.reduce(
      (total, item) => total + calculateItemTotal(item),
      0
    );
  };

  const calculateTax = (subtotal: number) => {
    return subtotal * (location?.taxRate || 0);
  };

  const calculateServiceCharge = (subtotal: number) => {
    const rate =
      orderType === 'catering'
        ? location?.cateringServiceChargeRate
        : location?.serviceChargeRate;
    return subtotal * (rate || 0);
  };

  const calculateTotal = () => {
    const subtotal = calculateSubtotal();
    const tax = calculateTax(subtotal);
    const serviceCharge = calculateServiceCharge(subtotal);
    const tips = orderType === 'catering' ? kitchenTip + driverTip : 0;
    return subtotal + tax + serviceCharge + tips;
  };

  const handleCheckout = async () => {
    try {
      if (!location) {
        throw new Error('Location not selected');
      }
      const orderData = {
        items: cartItems,
        orderType,
        locationId: location.id,
        guestId: guest?.id,
        subtotal: calculateSubtotal(),
        tax: calculateTax(calculateSubtotal()),
        serviceCharge: calculateServiceCharge(calculateSubtotal()),
        kitchenTip,
        driverTip,
        total: calculateTotal(),
        appliedDiscounts,
      };
      const response = await createOrder(orderData);
      const orderId = response.data.id;
      dispatch(clearCart());
      navigate(`/order-confirmation/${orderId}`);
    } catch (error) {
      console.error('Error creating order:', error);
      // Handle error (e.g., show error message to user)
    }
  };

  return (
    <div className="checkout-page">
      <h1>Checkout</h1>
      <div className="order-type-selector">
        <label>
          Order Type:
          <select
            value={orderType}
            onChange={(e) => setOrderType(e.target.value as OrderType)}
            aria-label="Select Order Type"
          >
            <option value="pickup">Pickup</option>
            <option value="delivery">Delivery</option>
            <option value="catering">Catering</option>
          </select>
        </label>
      </div>
      {cartItems.map((item, index) => (
        <div key={index} className="cart-item">
          <h3>{item.menuItem.name}</h3>
          <p>
            Quantity:
            <input
              type="number"
              value={item.quantity}
              onChange={(e) =>
                handleQuantityChange(index, parseInt(e.target.value, 10))
              }
              min="1"
              aria-label="Item Quantity"
            />
          </p>
          <p>Price: ${calculateItemTotal(item).toFixed(2)}</p>
          {item.selectedModifiers.map((mod, modIndex) => (
            <p key={modIndex}>
              {mod.name}: ${(mod.price * item.quantity).toFixed(2)}
            </p>
          ))}
          <button onClick={() => handleRemoveItem(index)}>Remove</button>
        </div>
      ))}
      <div className="order-summary">
        <h2>Order Summary</h2>
        <p>Subtotal: ${calculateSubtotal().toFixed(2)}</p>
        <p>Tax: ${calculateTax(calculateSubtotal()).toFixed(2)}</p>
        <p>
          Service Charge: $
          {calculateServiceCharge(calculateSubtotal()).toFixed(2)}
        </p>
        {orderType === 'catering' && (
          <>
            <label>
              Kitchen Tip: $
              <input
                type="number"
                value={kitchenTip}
                onChange={(e) => setKitchenTip(parseFloat(e.target.value))}
                min="0"
                step="0.01"
                aria-label="Kitchen Tip"
              />
            </label>
            <label>
              Driver Tip: $
              <input
                type="number"
                value={driverTip}
                onChange={(e) => setDriverTip(parseFloat(e.target.value))}
                min="0"
                step="0.01"
                aria-label="Driver Tip"
              />
            </label>
          </>
        )}
        <h3>Total: ${calculateTotal().toFixed(2)}</h3>
      </div>
      {availableRewards.length > 0 && (
        <div className="available-rewards">
          <h3>Available Rewards</h3>
          {availableRewards.map((reward) => (
            <div key={reward.id}>
              <p>
                {reward.name} - {reward.description}
              </p>
              <button
                onClick={() =>
                  setAppliedDiscounts([...appliedDiscounts, reward.id])
                }
              >
                Apply
              </button>
            </div>
          ))}
        </div>
      )}
      <button onClick={handleCheckout}>Place Order</button>
    </div>
  );
};

export default CheckoutPage;

================
File: frontend/src/pages/ClientLocationsPage.tsx
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';
import LocationCard from '../components/LocationCard';
import { Location } from '../types';

const ClientLocationsPage: React.FC = () => {
  const { clientId } = useParams<{ clientId: string }>();
  const [locations, setLocations] = useState<Location[]>([]);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchLocations = async () => {
      try {
        const response = await axios.get<Location[]>(
          `/api/clients/${clientId}/locations`
        );
        setLocations(response.data);
      } catch (error) {
        console.error('Error fetching locations', error);
      } finally {
        setLoading(false);
      }
    };

    fetchLocations();
  }, [clientId]);

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>Client Locations</h1>
      <div className="location-list">
        {locations.map((location) => (
          <LocationCard key={location.id} location={location} />
        ))}
      </div>
      <LoadScript
        googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || ''}
      >
        <GoogleMap
          mapContainerStyle={{ height: '400px', width: '100%' }}
          center={
            locations.length > 0
              ? { lat: locations[0].latitude, lng: locations[0].longitude }
              : { lat: 0, lng: 0 }
          }
          zoom={10}
        >
          {locations.map((location) => (
            <Marker
              key={location.id}
              position={{ lat: location.latitude, lng: location.longitude }}
              title={location.name}
            />
          ))}
        </GoogleMap>
      </LoadScript>
    </div>
  );
};

export default ClientLocationsPage;

================
File: frontend/src/pages/ClientSettings.tsx
================
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { updateClientStatus } from '../redux/slices/clientSlice';
import { AppDispatch } from '../redux/store';

const ClientSettings: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const client = useSelector((state: RootState) => state.client);
  const [status, setStatus] = useState(client.status);

  const handleUpdateStatus = () => {
    dispatch(updateClientStatus(status));
  };

  return (
    <div>
      <h2>Client Settings</h2>
      <select
        value={status}
        onChange={(e) =>
          setStatus(
            e.target.value as 'idle' | 'loading' | 'failed' | 'succeeded'
          )
        }
      >
        <option value="idle">Idle</option>
        <option value="loading">Loading</option>
        <option value="failed">Failed</option>
        <option value="succeeded">Succeeded</option>
      </select>
      <button onClick={handleUpdateStatus}>Update Status</button>
      <p>Current Status: {client.status}</p>
    </div>
  );
};

export default ClientSettings;

================
File: frontend/src/pages/Dashboard.tsx
================
import React, { useEffect, useState } from 'react';
import { useClientContext } from '../context/ClientContext';
import { CateringOrderService } from '../services/CateringOrderService';
import { MenuService } from '../services/MenuService';
import {
  Typography,
  Grid,
  Paper,
  CircularProgress,
  Button,
} from '@mui/material';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';
import { OrderStatistics } from '../types/cateringOrderTypes';
import { MenuStatistics } from '../types/menuTypes';

const Dashboard: React.FC = () => {
  const { user } = useClientContext();
  const [orderStats, setOrderStats] = useState<OrderStatistics | null>(null);
  const [menuStats, setMenuStats] = useState<MenuStatistics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      if (!user?.clientId) return;

      try {
        const endDate = new Date().toISOString();
        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(); // Last 30 days
        const [orderStatsData, menuStatsData] = await Promise.all([
          CateringOrderService.getOrderStatistics(user.clientId, startDate, endDate),
          MenuService.getMenuStatistics(user.clientId, startDate, endDate),
        ]);
        setOrderStats(orderStatsData);
        setMenuStats(menuStatsData);
        setLoading(false);
      } catch (err) {
        setError('Failed to load dashboard data. Please try again.');
        setLoading(false);
      }
    };

    fetchData();
  }, [user?.clientId]);

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  const popularItemsData = menuStats?.mostPopularItems.map((item) => ({
    name: item.name,
    orders: item.orderCount,
  })) || [];

  return (
    <div>
      <Typography variant="h4" gutterBottom>
        Dashboard
      </Typography>
      <Grid container spacing={3}>
        <Grid item xs={12} sm={6} md={3}>
          <Paper style={{ padding: '20px' }}>
            <Typography variant="h6">Total Orders</Typography>
            <Typography variant="h4">{orderStats?.totalOrders}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Paper style={{ padding: '20px' }}>
            <Typography variant="h6">Total Revenue</Typography>
            <Typography variant="h4">
              ${orderStats?.totalRevenue.toFixed(2)}
            </Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Paper style={{ padding: '20px' }}>
            <Typography variant="h6">Average Order Value</Typography>
            <Typography variant="h4">
              ${orderStats?.averageOrderValue.toFixed(2)}
            </Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Paper style={{ padding: '20px' }}>
            <Typography variant="h6">Total Menu Items</Typography>
            <Typography variant="h4">{menuStats?.totalItems}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12}>
          <Paper style={{ padding: '20px' }}>
            <Typography variant="h6" gutterBottom>
              Most Popular Items
            </Typography>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={popularItemsData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="orders" fill="#8884d8" />
              </BarChart>
            </ResponsiveContainer>
          </Paper>
        </Grid>
      </Grid>
      <Button variant="contained" color="primary" style={{ marginTop: '20px' }}>
        View Detailed Reports
      </Button>
    </div>
  );
};

export default Dashboard;

================
File: frontend/src/pages/GlobalAdminDashboard.tsx
================
import React from 'react';
import ClientBuilderWizard from '../components/admin/ClientBuilderWizard';

const GlobalAdminDashboard: React.FC = () => {
  return (
    <div>
      <h1>Global Admin Dashboard</h1>
      <ClientBuilderWizard />
    </div>
  );
};

export default GlobalAdminDashboard;

================
File: frontend/src/pages/GlobalAdminPanel.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchClients,
  createClient,
  updateClient,
  deleteClient,
} from '../redux/slices/clientSlice';
import { Client } from '../types/clientTypes';
import {
  TextField,
  Button,
  List,
  ListItem,
  IconButton,
  Typography,
  Box,
  Switch,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';

const GlobalAdminPanel: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { clients, status, error } = useSelector(
    (state: RootState) => state.client
  );
  const [newClient, setNewClient] = useState<Partial<Client>>({
    name: '',
    subdomain: '',
    active: true,
  });

  useEffect(() => {
    dispatch(fetchClients());
  }, [dispatch]);

  const handleCreateClient = () => {
    dispatch(createClient(newClient));
    setNewClient({ name: '', subdomain: '', active: true });
  };

  const handleUpdateClient = (client: Client) => {
    dispatch(updateClient(client));
  };

  const handleDeleteClient = (id: string) => {
    if (window.confirm('Are you sure you want to delete this client?')) {
      dispatch(deleteClient(id));
    }
  };

  if (status === 'loading') return <Typography>Loading...</Typography>;
  if (status === 'failed') return <Typography>Error: {error}</Typography>;

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h4" gutterBottom>
        Global Admin Panel
      </Typography>
      <Box sx={{ marginBottom: 2 }}>
        <TextField
          label="Client Name"
          value={newClient.name}
          onChange={(e) => setNewClient({ ...newClient, name: e.target.value })}
          sx={{ marginRight: 1 }}
        />
        <TextField
          label="Subdomain"
          value={newClient.subdomain}
          onChange={(e) =>
            setNewClient({ ...newClient, subdomain: e.target.value })
          }
          sx={{ marginRight: 1 }}
        />
        <Switch
          checked={newClient.active}
          onChange={(e) =>
            setNewClient({ ...newClient, active: e.target.checked })
          }
        />
        <Button onClick={handleCreateClient} variant="contained">
          Add Client
        </Button>
      </Box>

      <List>
        {clients.map((client) => (
          <ListItem key={client.id}>
            <TextField
              value={client.name}
              onChange={(e) =>
                handleUpdateClient({ ...client, name: e.target.value })
              }
              sx={{ marginRight: 1 }}
            />
            <TextField
              value={client.subdomain}
              onChange={(e) =>
                handleUpdateClient({ ...client, subdomain: e.target.value })
              }
              sx={{ marginRight: 1 }}
            />
            <Switch
              checked={client.active}
              onChange={(e) =>
                handleUpdateClient({ ...client, active: e.target.checked })
              }
              sx={{ marginRight: 1 }}
            />
            <IconButton onClick={() => handleDeleteClient(client.id)}>
              <DeleteIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default GlobalAdminPanel;

================
File: frontend/src/pages/GuestLandingPage.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import {
  Typography,
  Grid,
  Card,
  CardContent,
  CardMedia,
  Button,
  TextField,
  Container,
} from '@mui/material';
import { RootState, AppDispatch } from '../redux/store';
import { fetchLocations } from '../redux/slices/locationSlice';
import { Location } from '../types';

const GuestLandingPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector((state: RootState) => state.location.locations);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    dispatch(fetchLocations());
  }, [dispatch]);

  const filteredLocations = locations.filter(
    (location) =>
      location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      location.address.toLowerCase().includes(searchTerm.toLowerCase()) ||
      location.city.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Container maxWidth="lg">
      <Typography variant="h2" component="h1" gutterBottom>
        Order from our locations
      </Typography>
      <TextField
        fullWidth
        variant="outlined"
        placeholder="Search locations..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        style={{ marginBottom: '2rem' }}
      />
      <Grid container spacing={4}>
        {filteredLocations.map((location: Location) => (
          <Grid item xs={12} sm={6} md={4} key={location.id}>
            <Card>
              <CardMedia
                component="img"
                height="140"
                image={
                  location.imageUrl || 'https://via.placeholder.com/300x140'
                }
                alt={location.name}
              />
              <CardContent>
                <Typography gutterBottom variant="h5" component="div">
                  {location.name}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {location.address}, {location.city}, {location.state}{' '}
                  {location.zipCode}
                </Typography>
                <Button
                  component={Link}
                  to={`/order/${location.id}`}
                  variant="contained"
                  color="primary"
                  style={{ marginTop: '1rem' }}
                >
                  Order Now
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Container>
  );
};

export default GuestLandingPage;

================
File: frontend/src/pages/GuestMenuPage.tsx
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchMenuItemsAsync } from '../redux/slices/menuItemsSlice';
import MenuItemCard from '../components/MenuItemCard';
import MenuItemModal from '../components/MenuItemModal';
import LoadingSpinner from '../components/LoadingSpinner';
import { MenuItem } from '../types/menuTypes';
import { useClientBranding } from '../hooks/useClientBranding';
import { Typography, Box, Alert, Grid } from '@mui/material';

const GuestMenuPage: React.FC = () => {
  const { locationId } = useParams<{ locationId: string }>();
  const dispatch = useDispatch<AppDispatch>();
  const menuItems = useSelector((state: RootState) => state.menuItems.items);
  const status = useSelector((state: RootState) => state.menuItems.status);
  const error = useSelector((state: RootState) => state.menuItems.error);
  const clientBranding = useClientBranding();

  const [selectedItem, setSelectedItem] = useState<MenuItem | null>(null);

  useEffect(() => {
    if (locationId) {
      dispatch(fetchMenuItemsAsync(locationId));
    }
  }, [dispatch, locationId]);

  if (status === 'loading') {
    return <LoadingSpinner />;
  }

  if (status === 'failed') {
    return <Alert severity="error">Error loading menu: {error}</Alert>;
  }

  return (
    <Box
      className="guest-menu-page"
      sx={{ backgroundColor: clientBranding?.backgroundColor }}
    >
      <Typography variant="h1" sx={{ color: clientBranding?.primaryColor }}>
        {clientBranding?.restaurantName} Menu
      </Typography>
      <Grid container spacing={2}>
        {menuItems.map((item: MenuItem) => (
          <Grid item xs={12} sm={6} md={4} key={item.id}>
            <MenuItemCard
              item={item}
              onSelect={() => setSelectedItem(item)}
            />
          </Grid>
        ))}
      </Grid>
      {selectedItem && (
        <MenuItemModal
          item={selectedItem}
          onClose={() => setSelectedItem(null)}
        />
      )}
    </Box>
  );
};

export default GuestMenuPage;

================
File: frontend/src/pages/GuestProfile.tsx
================
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState, GuestProfile as GuestProfileType } from '../types';

const GuestProfile: React.FC = () => {
  const guestProfile = useSelector(
    (state: RootState) => state.guest.profile as GuestProfileType
  );

  if (!guestProfile) {
    return <div>Loading guest profile...</div>;
  }

  return (
    <div>
      <h2>Guest Profile</h2>
      <p>
        Name: {guestProfile.firstName} {guestProfile.lastName}
      </p>
      <p>Loyalty Points: {guestProfile.loyaltyPoints}</p>
      {guestProfile.loyaltyTier && (
        <p>Loyalty Tier: {guestProfile.loyaltyTier}</p>
      )}
    </div>
  );
};

export default GuestProfile;

================
File: frontend/src/pages/GuestProfilePage.tsx
================
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { fetchGuestProfile } from '../api/guestApi';
import {
  getLoyaltyChallenges,
  getGuestChallengeProgress,
} from '../api/loyaltyChallengeApi';
import {
  GuestProfile,
  LoyaltyChallenge,
  LoyaltyChallengeProgress,
} from '../types';
import LoyaltyChallengeProgressComponent from '../components/LoyaltyChallengeProgressComponent';

const GuestProfilePage: React.FC = () => {
  const { guestId } = useParams<{ guestId: string }>();
  const [guestProfile, setGuestProfile] = useState<GuestProfile | null>(null);
  const [challenges, setChallenges] = useState<LoyaltyChallenge[]>([]);
  const [challengeProgress, setChallengeProgress] = useState<
    LoyaltyChallengeProgress[]
  >([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const profile = await fetchGuestProfile(parseInt(guestId));
        setGuestProfile(profile);

        const allChallenges = await getLoyaltyChallenges();
        const activeChallenges = allChallenges.filter(
          (challenge) => challenge.status === 'active'
        );
        setChallenges(activeChallenges);

        const progress = await getGuestChallengeProgress(parseInt(guestId));
        setChallengeProgress(progress);
      } catch (error) {
        console.error('Error fetching guest data:', error);
      }
    };

    fetchData();
  }, [guestId]);

  if (!guestProfile) {
    return <div>Loading...</div>;
  }

  return (
    <div className="guest-profile">
      <h1>
        {guestProfile.firstName} {guestProfile.lastName}&apos;s Profile
      </h1>
      <p>Email: {guestProfile.email}</p>
      <p>Loyalty Points: {guestProfile.loyaltyPoints}</p>
      <p>Loyalty Tier: {guestProfile.loyaltyTier}</p>

      <h2>Active Challenges</h2>
      {challenges.map((challenge) => {
        const progress = challengeProgress.find(
          (p) => p.challengeId === challenge.id
        );
        return progress ? (
          <LoyaltyChallengeProgressComponent
            key={challenge.id}
            challenge={challenge}
            progress={progress}
          />
        ) : null;
      })}
    </div>
  );
};

export default GuestProfilePage;

================
File: frontend/src/pages/HomePage.tsx
================
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import {
  Typography,
  Grid,
  TextField,
  Container,
  Box,
  Tabs,
  Tab,
} from '@mui/material';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import MarkerClusterGroup from 'react-leaflet-markercluster';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'react-leaflet-markercluster/dist/styles.min.css';
import { RootState, AppDispatch } from '../redux/store';
import { fetchLocations } from '../redux/slices/locationSlice';
import { Location } from '../types/locationTypes';
import LocationCard from '../components/LocationCard';
import Button from '@mui/material/Button';

// Fix for default marker icon
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
  iconUrl: require('leaflet/dist/images/marker-icon.png'),
  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),
});

const HomePage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector(
    (state: RootState) => state.location.locations
  );
  const [searchTerm, setSearchTerm] = useState('');
  const [tabValue, setTabValue] = useState(0);
  const navigate = useNavigate();

  useEffect(() => {
    dispatch(fetchLocations());
  }, [dispatch]);

  const filteredLocations = locations.filter(
    (location: Location) =>
      (location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        location.address.toLowerCase().includes(searchTerm.toLowerCase()) ||
        location.city.toLowerCase().includes(searchTerm.toLowerCase())) &&
      (tabValue === 0 || (tabValue === 1 && location.isDropoffSite))
  );

  const mapCenter =
    locations.length > 0
      ? [locations[0].latitude, locations[0].longitude]
      : [0, 0];

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleViewMenu = () => {
    navigate('/menu');
  };

  return (
    <Container maxWidth="lg">
      <Typography variant="h2" component="h1" gutterBottom>
        Welcome to Our Online Ordering Hub
      </Typography>
      <TextField
        fullWidth
        variant="outlined"
        placeholder="Search locations..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        style={{ marginBottom: '1rem' }}
      />
      <Tabs
        value={tabValue}
        onChange={handleTabChange}
        style={{ marginBottom: '1rem' }}
      >
        <Tab label="All Locations" />
        <Tab label="Dropoff Sites" />
      </Tabs>
      <Box sx={{ height: '400px', marginBottom: '2rem' }}>
        <MapContainer
          center={mapCenter as L.LatLngExpression}
          zoom={13}
          style={{ height: '100%', width: '100%' }}
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
          <MarkerClusterGroup>
            {filteredLocations.map((location) => (
              <Marker
                key={location.id}
                position={[location.latitude, location.longitude]}
              >
                <Popup>
                  <Typography variant="h6">{location.name}</Typography>
                  <Typography variant="body2">{location.address}</Typography>
                  {location.isDropoffSite && (
                    <Typography variant="body2" color="primary">
                      Dropoff Site Available
                    </Typography>
                  )}
                </Popup>
              </Marker>
            ))}
          </MarkerClusterGroup>
        </MapContainer>
      </Box>
      <Grid container spacing={4}>
        {filteredLocations.map((location: Location) => (
          <Grid item xs={12} sm={6} md={4} key={location.id}>
            <LocationCard location={location} />
          </Grid>
        ))}
      </Grid>
      <Button onClick={handleViewMenu}>View Menu</Button>
    </Container>
  );
};

export default HomePage;

================
File: frontend/src/pages/Inventory.tsx
================
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { InventoryItem } from '../types';

const Inventory: React.FC = () => {
  const items = useSelector((state: RootState) => state.inventory.items);
  const status = useSelector((state: RootState) => state.inventory.status);
  const error = useSelector((state: RootState) => state.inventory.error);

  if (status === 'loading') {
    return <div>Loading inventory...</div>;
  }

  if (error) {
    return <div>Error fetching inventory: {error}</div>;
  }

  return (
    <div>
      <h2>Inventory</h2>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th>Unit</th>
            <th>Reorder Point</th>
          </tr>
        </thead>
        <tbody>
          {items.map((item: InventoryItem) => (
            <tr key={item.id}>
              <td>{item.name}</td>
              <td>{item.quantity}</td>
              <td>{item.unit}</td>
              <td>{item.reorderPoint}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Inventory;

================
File: frontend/src/pages/InventoryManagement.tsx
================
import React, { useEffect, useState } from 'react';
import {
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Modal,
  TextField,
  Snackbar,
  Alert,
  CircularProgress,
} from '@mui/material';
import { InventoryItem } from '../types/inventoryTypes';
import { InventoryService } from '../services/inventoryService';
import { useAuth } from '../contexts/AuthContext';

const InventoryManagement: React.FC = () => {
  const [inventory, setInventory] = useState<InventoryItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const inventoryService = useMemo(() => new InventoryService(), []);

  useEffect(() => {
    const fetchInventory = async () => {
      try {
        const data = await inventoryService.getInventory();
        setInventory(data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching inventory:', error);
        setError('Failed to fetch inventory. Please try again.');
        setLoading(false);
      }
    };

    fetchInventory();
  }, [inventoryService]);

  const { user } = useAuth();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);
  const [snackbar, setSnackbar] = useState<{
    message: string;
    severity: 'success' | 'error';
  } | null>(null);

  const handleAddItem = () => {
    setSelectedItem({
      id: 0,
      name: '',
      quantity: 0,
      unit: '',
      reorderPoint: 0,
      tenantId: user.tenantId,
    });
    setIsModalOpen(true);
  };

  const handleEditItem = (item: InventoryItem) => {
    setSelectedItem(item);
    setIsModalOpen(true);
  };

  const handleSaveItem = async () => {
    if (!selectedItem) return;

    try {
      let updatedItem;
      if (selectedItem.id === 0) {
        updatedItem = await inventoryService.createInventoryItem(
          user.tenantId,
          selectedItem
        );
        setInventory([...inventory, updatedItem]);
      } else {
        updatedItem = await inventoryService.updateInventoryItem(
          user.tenantId,
          selectedItem.id,
          selectedItem
        );
        setInventory(
          inventory.map((item) =>
            item.id === updatedItem.id ? updatedItem : item
          )
        );
      }
      setIsModalOpen(false);
      setSnackbar({
        message: 'Inventory item saved successfully',
        severity: 'success',
      });
    } catch (err) {
      setSnackbar({
        message: 'Failed to save inventory item. Please try again.',
        severity: 'error',
      });
    }
  };

  const handleDeleteItem = async (itemId: number) => {
    if (
      window.confirm('Are you sure you want to delete this inventory item?')
    ) {
      try {
        await inventoryService.deleteInventoryItem(user.tenantId, itemId);
        setInventory(inventory.filter((item) => item.id !== itemId));
        setSnackbar({
          message: 'Inventory item deleted successfully',
          severity: 'success',
        });
      } catch (err) {
        setSnackbar({
          message: 'Failed to delete inventory item. Please try again.',
          severity: 'error',
        });
      }
    }
  };

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <div>
      <Typography variant="h4" gutterBottom>
        Inventory Management
      </Typography>
      <Button
        variant="contained"
        color="primary"
        onClick={handleAddItem}
        style={{ marginBottom: '20px' }}
      >
        Add New Item
      </Button>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Quantity</TableCell>
              <TableCell>Unit</TableCell>
              <TableCell>Reorder Point</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {inventory.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.name}</TableCell>
                <TableCell>{item.quantity}</TableCell>
                <TableCell>{item.unit}</TableCell>
                <TableCell>{item.reorderPoint}</TableCell>
                <TableCell>
                  <Button onClick={() => handleEditItem(item)}>Edit</Button>
                  <Button
                    onClick={() => handleDeleteItem(item.id)}
                    color="secondary"
                  >
                    Delete
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Modal open={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <Paper
          style={{
            padding: '20px',
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            maxWidth: '400px',
            width: '100%',
          }}
        >
          {selectedItem && (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleSaveItem();
              }}
            >
              <Typography variant="h6" gutterBottom>
                {selectedItem.id === 0 ? 'Add New Item' : 'Edit Item'}
              </Typography>
              <TextField
                label="Name"
                value={selectedItem.name}
                onChange={(e) =>
                  setSelectedItem({ ...selectedItem, name: e.target.value })
                }
                fullWidth
                margin="normal"
              />
              <TextField
                label="Quantity"
                type="number"
                value={selectedItem.quantity}
                onChange={(e) =>
                  setSelectedItem({
                    ...selectedItem,
                    quantity: Number(e.target.value),
                  })
                }
                fullWidth
                margin="normal"
              />
              <TextField
                label="Unit"
                value={selectedItem.unit}
                onChange={(e) =>
                  setSelectedItem({ ...selectedItem, unit: e.target.value })
                }
                fullWidth
                margin="normal"
              />
              <TextField
                label="Reorder Point"
                type="number"
                value={selectedItem.reorderPoint}
                onChange={(e) =>
                  setSelectedItem({
                    ...selectedItem,
                    reorderPoint: Number(e.target.value),
                  })
                }
                fullWidth
                margin="normal"
              />
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                style={{ marginTop: '20px' }}
              >
                Save Item
              </Button>
            </form>
          )}
        </Paper>
      </Modal>
      <Snackbar
        open={!!snackbar}
        autoHideDuration={6000}
        onClose={() => setSnackbar(null)}
      >
        <Alert
          onClose={() => setSnackbar(null)}
          severity={snackbar?.severity}
          sx={{ width: '100%' }}
        >
          {snackbar?.message}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default InventoryManagement;

================
File: frontend/src/pages/LocationManagement.tsx
================
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
// Remove unused import: import { updateLocation } from '../redux/slices/locationSlice';

const LocationManagement: React.FC = () => {
  const locations = useSelector((state: RootState) => state.location.locations);

  // ... component logic

  return (
    <div>
      <h1>Location Management</h1>
      {locations.map((location) => (
        <div key={location.id}>{/* Render location details */}</div>
      ))}
    </div>
  );
};

export default LocationManagement;

================
File: frontend/src/pages/Login.tsx
================
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { loginUser } from '../redux/slices/authSlice';
import { RootState, AppDispatch } from '../redux/store';
import { Client } from '../types';

const Login: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const client = useSelector((state: RootState) => state.clientConfig.client);
  const error = useSelector((state: RootState) => state.auth.error);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (client) {
      const loginData = {
        email,
        password,
        clientId: client.id,
        subdomain: client.subdomain || '',
      };
      dispatch(loginUser(loginData));
    } else {
      console.error('Client is null');
    }
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">Login</button>
      </form>
      {error && <p className="error-message">{error}</p>}
    </div>
  );
};

export default Login;

================
File: frontend/src/pages/LoyaltyAdminPage.tsx
================
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import LoyaltyChallengeManager from '../components/LoyaltyChallengeManager';
import WalletDrop from '../components/WalletDrop';
import DiscountBuilder from '../components/DiscountBuilder';
import POSDiscountSync from '../components/POSDiscountSync';
import ClientAdminHub from '../components/ClientAdminHub';
import { UserRole } from '../types/userTypes';

const LoyaltyAdminPage: React.FC = () => {
  const user = useSelector((state: RootState) => state.auth.user);
  const isClientAdmin = user?.roles.includes(UserRole.CLIENT_ADMIN);

  return (
    <div>
      <h1>Loyalty Program Administration</h1>
      {isClientAdmin ? (
        <ClientAdminHub />
      ) : (
        <>
          <LoyaltyChallengeManager />
          <WalletDrop />
          <DiscountBuilder />
          <POSDiscountSync />
        </>
      )}
    </div>
  );
};

export default LoyaltyAdminPage;

================
File: frontend/src/pages/LoyaltyManagement.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import {
  fetchLoyaltyRewards,
  createLoyaltyReward,
  updateLoyaltyReward,
  deleteLoyaltyReward,
  fetchLoyaltyConfig,
  updateLoyaltyConfig,
} from '../redux/slices/loyaltySlice';
import { LoyaltyReward, LoyaltyConfig } from '../types';

const LoyaltyManagement: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { rewards, config, status, error } = useSelector(
    (state: RootState) => state.loyalty
  );
  const [newReward, setNewReward] = useState<Partial<LoyaltyReward>>({
    name: '',
    pointsRequired: 0,
    isActive: true,
  });
  const [editingConfig, setEditingConfig] = useState<LoyaltyConfig | null>(
    null
  );
  const [formError, setFormError] = useState<string | null>(null);

  useEffect(() => {
    dispatch(fetchLoyaltyRewards());
    dispatch(fetchLoyaltyConfig());
  }, [dispatch]);

  const validateReward = (reward: Partial<LoyaltyReward>): boolean => {
    if (!reward.name || reward.name.trim() === '') {
      setFormError('Reward name is required');
      return false;
    }
    if (reward.pointsRequired === undefined || reward.pointsRequired < 0) {
      setFormError('Points required must be a positive number');
      return false;
    }
    setFormError(null);
    return true;
  };

  const handleCreateReward = () => {
    if (validateReward(newReward)) {
      dispatch(createLoyaltyReward(newReward));
      setNewReward({ name: '', pointsRequired: 0, isActive: true });
    }
  };

  const handleUpdateReward = (reward: LoyaltyReward) => {
    if (validateReward(reward)) {
      dispatch(updateLoyaltyReward(reward));
    }
  };

  const handleDeleteReward = (id: number) => {
    if (window.confirm('Are you sure you want to delete this reward?')) {
      dispatch(deleteLoyaltyReward(id));
    }
  };

  const handleUpdateConfig = () => {
    if (editingConfig) {
      dispatch(updateLoyaltyConfig(editingConfig));
      setEditingConfig(null);
    }
  };

  if (status === 'loading') return <div>Loading...</div>;
  if (status === 'failed') return <div>Error: {error}</div>;

  return (
    <div className="loyalty-management">
      <h2>Loyalty Management</h2>

      <section className="loyalty-rewards">
        <h3>Loyalty Rewards</h3>
        <form
          onSubmit={(e) => {
            e.preventDefault();
            handleCreateReward();
          }}
          className="reward-form"
        >
          <input
            type="text"
            value={newReward.name}
            onChange={(e) =>
              setNewReward({ ...newReward, name: e.target.value })
            }
            placeholder="Reward Name"
            required
          />
          <input
            type="number"
            value={newReward.pointsRequired}
            onChange={(e) =>
              setNewReward({
                ...newReward,
                pointsRequired: parseInt(e.target.value),
              })
            }
            placeholder="Points Required"
            required
            min="0"
          />
          <button type="submit">Add Reward</button>
        </form>
        {formError && <p className="error-message">{formError}</p>}

        <ul className="rewards-list">
          {rewards.map((reward) => (
            <li key={reward.id} className="reward-item">
              <input
                type="text"
                value={reward.name}
                onChange={(e) =>
                  handleUpdateReward({ ...reward, name: e.target.value })
                }
              />
              <input
                type="number"
                value={reward.pointsRequired}
                onChange={(e) =>
                  handleUpdateReward({
                    ...reward,
                    pointsRequired: parseInt(e.target.value),
                  })
                }
                min="0"
              />
              <button
                onClick={() =>
                  handleUpdateReward({ ...reward, isActive: !reward.isActive })
                }
              >
                {reward.isActive ? 'Deactivate' : 'Activate'}
              </button>
              <button onClick={() => handleDeleteReward(reward.id)}>
                Delete
              </button>
            </li>
          ))}
        </ul>
      </section>

      <section className="loyalty-configuration">
        <h3>Loyalty Configuration</h3>
        {config && (
          <div className="tiers-config">
            <h4>Tiers</h4>
            {editingConfig ? (
              <>
                {editingConfig.tiers.map((tier, index) => (
                  <input
                    key={index}
                    type="text"
                    value={tier.tierName}
                    onChange={(e) => {
                      const newTiers = [...editingConfig.tiers];
                      newTiers[index] = { tierName: e.target.value };
                      setEditingConfig({ ...editingConfig, tiers: newTiers });
                    }}
                  />
                ))}
                <button
                  onClick={() =>
                    setEditingConfig({
                      ...editingConfig,
                      tiers: [...editingConfig.tiers, { tierName: '' }],
                    })
                  }
                >
                  Add Tier
                </button>
                <button onClick={handleUpdateConfig}>Save Configuration</button>
              </>
            ) : (
              <>
                <ul className="tiers-list">
                  {config.tiers.map((tier, index) => (
                    <li key={index}>{tier.tierName}</li>
                  ))}
                </ul>
                <button onClick={() => setEditingConfig(config)}>
                  Edit Configuration
                </button>
              </>
            )}
          </div>
        )}
      </section>
    </div>
  );
};

export default LoyaltyManagement;

================
File: frontend/src/pages/Menu.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchMenus } from '../redux/slices/menuSlice';
import { useClientContext } from '../context/ClientContext';
import { Menu as MenuType, MenuGroup, MenuItem } from '../types';

const MenuPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const menus = useSelector((state: RootState) => state.menu.menus);
  const { clientId, isLoading, error } = useClientContext();

  useEffect(() => {
    if (clientId) {
      dispatch(fetchMenus(clientId));
    }
  }, [dispatch, clientId]);

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!clientId) return <div>No client ID available</div>;

  return (
    <div>
      <h2>Menu</h2>
      {menus.map((menu: MenuType) => (
        <div key={menu.id}>
          <h3>{menu.name}</h3>
          <ul>
            {menu.groups.map((group: MenuGroup) => (
              <li key={group.id}>
                <h4>{group.name}</h4>
                <ul>
                  {group.items.map((item: MenuItem) => (
                    <li key={item.id}>{item.name}</li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
};

export default MenuPage;

================
File: frontend/src/pages/MenuBuilder.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';
import { RootState, AppDispatch, Menu, MenuGroup } from '../types';
import { fetchMenus, updateMenu } from '../redux/slices/menuSlice';
import MenuGroupComponent from './MenuGroupComponent';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Typography,
  Box,
  CircularProgress,
} from '@mui/material';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import { useClientContext } from '../context/ClientContext';

const MenuBuilder: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const menus = useSelector((state: RootState) => state.menu.menus);
  const loading = useSelector((state: RootState) => state.menu.loading);
  const error = useSelector((state: RootState) => state.menu.error);
  const [activeMenu, setActiveMenu] = useState<Menu | null>(null);
  const [isAddGroupDialogOpen, setIsAddGroupDialogOpen] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const { clientId } = useClientContext();

  useEffect(() => {
    if (clientId) {
      dispatch(fetchMenus(clientId.toString()));
    }
  }, [dispatch, clientId]);

  const handleDragEnd = (result: DropResult) => {
    if (!result.destination || !activeMenu) {
      return;
    }

    const newGroups = Array.from(activeMenu.groups);
    const [reorderedGroup] = newGroups.splice(result.source.index, 1);
    newGroups.splice(result.destination.index, 0, reorderedGroup);

    const updatedMenu: Menu = {
      ...activeMenu,
      groups: newGroups,
    };

    setActiveMenu(updatedMenu);
    dispatch(updateMenu({ clientId: clientId.toString(), menuId: activeMenu.id, menuData: updatedMenu }));
  };

  const handleAddGroup = () => {
    if (activeMenu && newGroupName.trim()) {
      const updatedMenu: Menu = {
        ...activeMenu,
        groups: [
          ...activeMenu.groups,
          { id: Date.now().toString(), name: newGroupName.trim(), items: [] },
        ],
      };
      dispatch(updateMenu({ clientId: clientId.toString(), menuId: activeMenu.id, menuData: updatedMenu }));
      setIsAddGroupDialogOpen(false);
      setNewGroupName('');
    }
  };

  if (loading) {
    return <CircularProgress />;
  }

  if (error) {
    return <Typography color="error">{error}</Typography>;
  }

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Menu Builder
      </Typography>
      <Box display="flex" flexWrap="wrap" gap={2} mb={2}>
        {menus.map((menu) => (
          <Button
            key={menu.id}
            variant={activeMenu?.id === menu.id ? 'contained' : 'outlined'}
            onClick={() => setActiveMenu(menu)}
            aria-label={`Select menu ${menu.name}`}
          >
            {menu.name}
          </Button>
        ))}
      </Box>
      {activeMenu && (
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="menu">
            {(provided) => (
              <Box {...provided.droppableProps} ref={provided.innerRef}>
                {activeMenu.groups.map((group, index) => (
                  <Draggable key={group.id} draggableId={group.id} index={index}>
                    {(provided) => (
                      <Box
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                      >
                        <MenuGroupComponent
                          group={group}
                          index={index}
                          menuId={activeMenu.id}
                        />
                      </Box>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </Box>
            )}
          </Droppable>
        </DragDropContext>
      )}
      <Button
        startIcon={<AddCircleOutlineIcon />}
        onClick={() => setIsAddGroupDialogOpen(true)}
        variant="contained"
        color="primary"
        style={{ marginTop: '16px' }}
        aria-label="Add new group"
      >
        Add Group
      </Button>
      <Dialog open={isAddGroupDialogOpen} onClose={() => setIsAddGroupDialogOpen(false)}>
        <DialogTitle>Add New Group</DialogTitle>
        <DialogContent>
          <TextField
            margin="dense"
            label="Group Name"
            fullWidth
            value={newGroupName}
            onChange={(e) => setNewGroupName(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsAddGroupDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleAddGroup} color="primary">
            Add
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MenuBuilder;

================
File: frontend/src/pages/MenuManagementAdmin.tsx
================
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Button,
  Modal,
  TextField,
  Paper,
  Snackbar,
  Alert,
  CircularProgress,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Switch,
  FormControlLabel,
  List,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import AddIcon from '@mui/icons-material/Add';
import SyncIcon from '@mui/icons-material/Sync';
import { useParams } from 'react-router-dom';
import { menuService } from '../services/menuService';
import { useAuth } from '../contexts/AuthContext';
import { Menu, MenuGroup, MenuItem, Modifier } from '../types/menuTypes';

interface SelectedItem {
  id: string;
  name: string;
  parentId?: string;
  grandParentId?: string;
  price?: number;
  description?: string;
  isAvailable?: boolean;
  menuId?: string;
  groupId?: string;
  itemId?: string;
}

const MenuManagementAdmin: React.FC = () => {
  const [menus, setMenus] = useState<Menu[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState<
    'menu' | 'group' | 'item' | 'modifier'
  >('menu');
  const [selectedItem, setSelectedItem] = useState<SelectedItem | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [snackbar, setSnackbar] = useState<{
    message: string;
    severity: 'success' | 'error';
  } | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [syncStatus, setSyncStatus] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredMenus, setFilteredMenus] = useState<Menu[]>([]);

  const { clientId } = useParams<{ clientId: string }>();
  const { user } = useAuth();

  const loadMenus = useCallback(async () => {
    if (!clientId) return;
    try {
      const fetchedMenus = await menuService.getAllMenus(clientId);
      setMenus(fetchedMenus);
      setLoading(false);
    } catch (err) {
      setError('Failed to load menus. Please try again.');
      setLoading(false);
    }
  }, [clientId]);

  useEffect(() => {
    loadMenus();
  }, [loadMenus]);

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    const query = event.target.value.toLowerCase();
    setSearchQuery(query);
    const filtered = menus.filter(
      (menu) =>
        menu.name.toLowerCase().includes(query) ||
        menu.menuGroups.some(
          (group) =>
            group.name.toLowerCase().includes(query) ||
            group.items.some((item) => item.name.toLowerCase().includes(query))
        )
    );
    setFilteredMenus(filtered);
  };

  const handleSave = async () => {
    if (!selectedItem || !clientId) return;
    setIsSaving(true);
    try {
      let result: Menu | MenuGroup | MenuItem;
      switch (modalType) {
        case 'menu':
          result =
            selectedItem.id === '0'
              ? await menuService.createMenu(clientId, selectedItem)
              : await menuService.updateMenu(
                  clientId,
                  selectedItem.id,
                  selectedItem
                );
          setMenus(menus.map((m) => (m.id === result.id ? result as Menu : m)));
          break;
        case 'group':
          if (selectedItem.parentId) {
            result =
              selectedItem.id === '0'
                ? await menuService.createMenuGroup(
                    clientId,
                    selectedItem.parentId,
                    selectedItem
                  )
                : await menuService.updateMenuGroup(
                    clientId,
                    selectedItem.parentId,
                    selectedItem.id,
                    selectedItem
                  );
            setMenus(
              menus.map((m) =>
                m.id === selectedItem.parentId
                  ? {
                      ...m,
                      menuGroups: m.menuGroups.map((g) =>
                        g.id === result.id ? result : g
                      ),
                    }
                  : m
              )
            );
          }
          break;
        case 'item':
          if (selectedItem.grandParentId && selectedItem.parentId) {
            result =
              selectedItem.id === '0'
                ? await menuService.createMenuItem(
                    clientId,
                    selectedItem.grandParentId,
                    selectedItem.parentId,
                    selectedItem
                  )
                : await menuService.updateMenuItem(
                    clientId,
                    selectedItem.grandParentId,
                    selectedItem.parentId,
                    selectedItem.id,
                    selectedItem
                  );
            setMenus(
              menus.map((m) =>
                m.id === selectedItem.grandParentId
                  ? {
                      ...m,
                      menuGroups: m.menuGroups.map((g) =>
                        g.id === selectedItem.parentId
                          ? {
                              ...g,
                              items: g.items.map((i) =>
                                i.id === result.id ? result : i
                              ),
                            }
                          : g
                      ),
                    }
                  : m
              )
            );
          }
          break;
        case 'modifier':
          if (
            selectedItem.menuId &&
            selectedItem.groupId &&
            selectedItem.itemId
          ) {
            result =
              selectedItem.id === '0'
                ? await menuService.createModifier(
                    clientId,
                    selectedItem.menuId,
                    selectedItem.groupId,
                    selectedItem.itemId,
                    selectedItem
                  )
                : await menuService.updateModifier(
                    clientId,
                    selectedItem.menuId,
                    selectedItem.groupId,
                    selectedItem.itemId,
                    selectedItem.id,
                    selectedItem
                  );
            setMenus(
              menus.map((m) =>
                m.id === selectedItem.menuId
                  ? {
                      ...m,
                      menuGroups: m.menuGroups.map((g) =>
                        g.id === selectedItem.groupId
                          ? {
                              ...g,
                              items: g.items.map((i) =>
                                i.id === selectedItem.itemId
                                  ? {
                                      ...i,
                                      modifiers: i.modifiers.map((mod) =>
                                        mod.id === result.id ? result : mod
                                      ),
                                    }
                                  : i
                              ),
                            }
                          : g
                      ),
                    }
                  : m
              )
            );
          }
          break;
      }
      setIsModalOpen(false);
      setSnackbar({ message: 'Item saved successfully', severity: 'success' });
    } catch (err) {
      setSnackbar({
        message: 'Failed to save item. Please try again.',
        severity: 'error',
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleEdit = (
    type: 'menu' | 'group' | 'item' | 'modifier',
    item: SelectedItem
  ) => {
    setModalType(type);
    setSelectedItem(item);
    setIsModalOpen(true);
  };

  const handleDelete = async (
    type: 'menu' | 'group' | 'item' | 'modifier',
    id: string
  ) => {
    if (!clientId) return;
    try {
      await menuService.deleteItem(clientId, type, id);
      setMenus(menus.filter((m) => m.id !== id));
      setSnackbar({
        message: 'Item deleted successfully',
        severity: 'success',
      });
    } catch (err) {
      setSnackbar({
        message: 'Failed to delete item. Please try again.',
        severity: 'error',
      });
    }
  };

  const handleAdd = (
    type: 'menu' | 'group' | 'item' | 'modifier',
    parentId?: string,
    grandParentId?: string
  ) => {
    setModalType(type);
    setSelectedItem({ id: '0', name: '', parentId, grandParentId });
    setIsModalOpen(true);
  };

  const handleSync = useCallback(async () => {
    if (!clientId) return;
    try {
      setSyncStatus('Syncing menus...');
      await menuService.syncMenus(clientId);
      setSyncStatus('Menus synced successfully');
      loadMenus();
    } catch (error) {
      setSyncStatus('Error syncing menus');
      console.error('Error syncing menus:', error);
    }
  }, [clientId, loadMenus]);

  const renderMenuStructure = (menu: Menu): JSX.Element => {
    return (
      <Accordion key={menu.id}>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography>{menu.name}</Typography>
        </AccordionSummary>
        <AccordionDetails>
          {menu.menuGroups.map((group) => (
            <Accordion key={group.id}>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography>{group.name}</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <List>
                  {group.items.map((item) => (
                    <ListItem key={item.id}>
                      <ListItemText
                        primary={item.name}
                        secondary={`$${item.price.toFixed(2)}`}
                      />
                      <ListItemSecondaryAction>
                        <IconButton
                          edge="end"
                          aria-label="edit"
                          onClick={() => handleEdit('item', item)}
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton
                          edge="end"
                          aria-label="delete"
                          onClick={() => handleDelete('item', item.id)}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </ListItemSecondaryAction>
                    </ListItem>
                  ))}
                </List>
              </AccordionDetails>
            </Accordion>
          ))}
        </AccordionDetails>
      </Accordion>
    );
  };

  const renderModalContent = () => {
    if (!selectedItem) return null;

    return (
      <form onSubmit={(e) => { e.preventDefault(); handleSave(); }}>
        <Typography variant="h6">
          {modalType === 'menu' ? 'Menu' :
           modalType === 'group' ? 'Menu Group' :
           modalType === 'item' ? 'Menu Item' : 'Modifier'}
        </Typography>
        <TextField
          label="Name"
          value={selectedItem.name}
          onChange={(e) => setSelectedItem({ ...selectedItem, name: e.target.value })}
          fullWidth
          margin="normal"
        />
        {(modalType === 'item' || modalType === 'modifier') && (
          <TextField
            label="Price"
            type="number"
            value={selectedItem.price || ''}
            onChange={(e) => setSelectedItem({
              ...selectedItem,
              price: parseFloat(e.target.value),
            })}
            fullWidth
            margin="normal"
          />
        )}
        {modalType === 'item' && (
          <TextField
            label="Description"
            value={selectedItem.description || ''}
            onChange={(e) => setSelectedItem({ ...selectedItem, description: e.target.value })}
            fullWidth
            margin="normal"
            multiline
            rows={3}
          />
        )}
        {modalType !== 'menu' && (
          <FormControlLabel
            control={
              <Switch
                checked={selectedItem.isAvailable || false}
                onChange={(e) => setSelectedItem({
                  ...selectedItem,
                  isAvailable: e.target.checked,
                })}
              />
            }
            label="Available"
          />
        )}
        <Button type="submit" variant="contained" color="primary" disabled={isSaving}>
          {isSaving ? <CircularProgress size={24} /> : 'Save'}
        </Button>
      </form>
    );
  };

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <div>
      <Typography variant="h4">Menu Management</Typography>
      <TextField
        label="Search Menu Items"
        variant="outlined"
        fullWidth
        margin="normal"
        value={searchQuery}
        onChange={handleSearch}
      />
      <Button onClick={handleSync} startIcon={<SyncIcon />}>
        Sync Menus
      </Button>
      {syncStatus && <Typography>{syncStatus}</Typography>}
      {(searchQuery ? filteredMenus : menus).map((menu) => (
        <Accordion key={menu.id}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography>{menu.name}</Typography>
          </AccordionSummary>
          <AccordionDetails>{renderMenuStructure(menu)}</AccordionDetails>
        </Accordion>
      ))}
      <Button
        onClick={() => handleAdd('menu')}
        startIcon={<AddIcon />}
        variant="contained"
        color="primary"
      >
        Add Menu
      </Button>
      <Modal open={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <Paper style={{ padding: '20px', maxWidth: '500px', margin: '20px auto' }}>
          {renderModalContent()}
        </Paper>
      </Modal>
      <Snackbar
        open={!!snackbar}
        autoHideDuration={6000}
        onClose={() => setSnackbar(null)}
      >
        <Alert
          onClose={() => setSnackbar(null)}
          severity={snackbar?.severity}
          sx={{ width: '100%' }}
        >
          {snackbar?.message}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default MenuManagementAdmin;

================
File: frontend/src/pages/MenuPage.tsx
================
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../redux/store';
import { fetchMenu } from '../redux/slices/menuSlice';
import { Menu, MenuGroup, MenuItem } from '../types/menuTypes';
import { MenuService } from '../services/menuService';
import MenuItemCard from '../components/MenuItemCard';
import LoadingSpinner from '../components/LoadingSpinner';
import ErrorMessage from '../components/ErrorMessage';

const MenuPage: React.FC = () => {
  const { clientId } = useParams<{ clientId: string }>();
  const dispatch = useDispatch();
  const menu = useSelector((state: RootState) => state.menu.currentMenu);
  const loading = useSelector((state: RootState) => state.menu.loading);
  const error = useSelector((state: RootState) => state.menu.error);
  const [menuStatistics, setMenuStatistics] = useState<MenuService.MenuStatistics | null>(null);

  useEffect(() => {
    if (clientId) {
      dispatch(fetchMenu(clientId));
      MenuService.getMenuStatistics(clientId)
        .then(stats => setMenuStatistics(stats))
        .catch(err => console.error('Failed to fetch menu statistics:', err));
    }
  }, [clientId, dispatch]);

  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error} />;
  if (!menu) return <ErrorMessage message="Menu not found" />;

  return (
    <div className="menu-page">
      <h1>{menu.name}</h1>
      {menuStatistics && (
        <div className="menu-statistics">
          <p>Total Items: {menuStatistics.totalItems}</p>
          <h3>Most Popular Items:</h3>
          <ul>
            {menuStatistics.mostPopularItems.map((item) => (
              <li key={item.name}>{item.name} - Ordered {item.orderCount} times</li>
            ))}
          </ul>
        </div>
      )}
      {menu.menuGroups.map((group: MenuGroup) => (
        <div key={group.id} className="menu-group">
          <h2>{group.name}</h2>
          <div className="menu-items">
            {group.items.map((item: MenuItem) => (
              <MenuItemCard key={item.id} item={item} />
            ))}
          </div>
        </div>
      ))}
    </div>
  );
};

export default MenuPage;

================
File: frontend/src/pages/OrderConfirmation.tsx
================
import React from 'react';
import { Typography, Paper } from '@mui/material';
import { useParams } from 'react-router-dom';

const OrderConfirmation: React.FC = () => {
  const { orderId } = useParams<{ orderId: string }>();

  return (
    <Paper
      elevation={3}
      style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}
    >
      <Typography variant="h4" gutterBottom>
        Order Confirmation
      </Typography>
      <Typography variant="h6" gutterBottom>
        Thank you for your order!
      </Typography>
      <Typography>
        Your order number is: <strong>{orderId}</strong>
      </Typography>
      <Typography>
        We&apos;ve sent a confirmation email with your order details.
      </Typography>
    </Paper>
  );
};

export default OrderConfirmation;

================
File: frontend/src/pages/OrderPage.tsx
================
import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchMenu, selectMenu } from '../redux/slices/menuSlice';
import { addToCart, removeFromCart, updateCartItemQuantity, selectCartItems } from '../redux/slices/cartSlice';
import { Menu, MenuGroup, MenuItem, Modifier, CartItem } from '../types/menuTypes';
import { useSelectedLocation } from '../hooks/useSelectedLocation';

const OrderPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { selectedLocation } = useSelectedLocation();
  const menu = useSelector((state: RootState) => selectMenu(state));
  const cartItems = useSelector((state: RootState) => selectCartItems(state));
  const [itemQuantities, setItemQuantities] = useState<Record<string, number>>({});
  const [selectedModifiers, setSelectedModifiers] = useState<Record<string, Record<string, Modifier>>>({});
  const [activeGroup, setActiveGroup] = useState<string | null>(null);

  useEffect(() => {
    if (selectedLocation) {
      dispatch(fetchMenu(selectedLocation));
    }
  }, [dispatch, selectedLocation]);

  useEffect(() => {
    if (menu && menu.menuGroups.length > 0) {
      setActiveGroup(menu.menuGroups[0].id);
    }
  }, [menu]);

  const handleQuantityChange = (itemId: string, quantity: number) => {
    setItemQuantities(prev => ({ ...prev, [itemId]: quantity }));
  };

  const handleModifierSelection = (itemId: string, modifier: Modifier) => {
    setSelectedModifiers(prev => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        [modifier.id]: modifier
      }
    }));
  };

  const handleAddToCart = (item: MenuItem) => {
    const quantity = itemQuantities[item.id] || 1;
    dispatch(addToCart({
      menuItem: {
        id: item.id,
        name: item.name,
        price: item.price
      },
      quantity: quantity,
      selectedModifiers: Object.values(selectedModifiers[item.id] || {})
    }));
    setItemQuantities(prev => ({ ...prev, [item.id]: 1 }));
    setSelectedModifiers(prev => ({ ...prev, [item.id]: {} }));
  };

  const handleRemoveFromCart = (itemId: string) => {
    dispatch(removeFromCart(itemId));
  };

  const handleUpdateCartQuantity = (itemId: string, quantity: number) => {
    dispatch(updateCartItemQuantity({ id: itemId, quantity }));
  };

  const getEffectivePrice = (item: MenuItem | Modifier) => {
    return item.localOverrides?.price ?? item.price;
  };

  const getEffectiveName = (item: MenuItem | Modifier) => {
    return item.localOverrides?.name ?? item.name;
  };

  const isItemAvailable = (item: MenuItem) => {
    return item.localOverrides?.isAvailable ?? item.isAvailable;
  };

  if (!menu) return <div>Loading menu...</div>;

  return (
    <div className="order-page">
      <h1>Order Page for {selectedLocation?.name}</h1>
      
      <div className="menu-navigation">
        {menu.menuGroups.map((group: MenuGroup) => (
          <button 
            key={group.id}
            onClick={() => setActiveGroup(group.id)}
            className={activeGroup === group.id ? 'active' : ''}
          >
            {group.name}
          </button>
        ))}
      </div>

      <div className="menu-container">
        {menu.menuGroups
          .filter((group: MenuGroup) => activeGroup === group.id)
          .map((group: MenuGroup) => (
          <div key={group.id} className="menu-group">
            <h2>{group.name}</h2>
            {group.items.map((item: MenuItem) => (
              <div key={item.id} className="menu-item">
                <h3>{getEffectiveName(item)} - ${getEffectivePrice(item).toFixed(2)}</h3>
                <p>{item.description}</p>
                {isItemAvailable(item) ? (
                  <>
                    <input 
                      type="number" 
                      value={itemQuantities[item.id] || 1} 
                      onChange={(e) => handleQuantityChange(item.id, Math.max(1, parseInt(e.target.value) || 1))}
                      min="1"
                    />
                    {item.modifiers && item.modifiers.map(modifier => (
                      <label key={modifier.id}>
                        <input
                          type="checkbox"
                          onChange={() => handleModifierSelection(item.id, modifier)}
                          checked={!!selectedModifiers[item.id]?.[modifier.id]}
                        />
                        {getEffectiveName(modifier)} (+${getEffectivePrice(modifier).toFixed(2)})
                      </label>
                    ))}
                    <button onClick={() => handleAddToCart(item)}>Add to Cart</button>
                  </>
                ) : (
                  <p>Currently unavailable</p>
                )}
              </div>
            ))}
          </div>
        ))}
      </div>

      <div className="cart-container">
        <h2>Cart</h2>
        {cartItems.map((cartItem: CartItem) => (
          <div key={cartItem.menuItem.id} className="cart-item">
            <h3>{cartItem.menuItem.name}</h3>
            <p>Price: ${cartItem.menuItem.price.toFixed(2)}</p>
            <p>Quantity: 
              <input 
                type="number" 
                value={cartItem.quantity} 
                onChange={(e) => handleUpdateCartQuantity(cartItem.menuItem.id, Math.max(1, parseInt(e.target.value) || 1))}
                min="1"
              />
            </p>
            {cartItem.selectedModifiers.length > 0 && (
              <div>
                <h4>Selected Modifiers:</h4>
                <ul>
                  {cartItem.selectedModifiers.map((modifier) => (
                    <li key={modifier.id}>{modifier.name} (+${modifier.price.toFixed(2)})</li>
                  ))}
                </ul>
              </div>
            )}
            <button onClick={() => handleRemoveFromCart(cartItem.menuItem.id)}>Remove</button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default OrderPage;

================
File: frontend/src/pages/OrderScheduling.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchLocations, selectLocations } from '../redux/slices/locationSlice';
import { Location } from '../types/locationTypes';

const OrderScheduling: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const locations = useSelector(selectLocations);

  useEffect(() => {
    dispatch(fetchLocations());
  }, [dispatch]);

  return (
    <div>
      <h2>Order Scheduling</h2>
      <select>
        {locations.map((location: Location) => (
          <option key={location.id} value={location.id}>
            {location.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default OrderScheduling;

================
File: frontend/src/pages/PosProfilePage.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchLocationPOSProfiles, selectLocationPOSProfiles, selectPOSProfileLoading, selectPOSProfileError } from '../redux/slices/posProfileSlice';
import { LocationPOSProfile } from '../types/posTypes';
import { useSelectedLocation } from '../hooks/useSelectedLocation';

const PosProfilePage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { selectedLocation } = useSelectedLocation();
  const locationProfiles = useSelector(selectLocationPOSProfiles);
  const loading = useSelector(selectPOSProfileLoading);
  const error = useSelector(selectPOSProfileError);

  useEffect(() => {
    if (selectedLocation) {
      dispatch(fetchLocationPOSProfiles(selectedLocation));
    }
  }, [dispatch, selectedLocation]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h2>POS Profiles for Location: {selectedLocation}</h2>
      {locationProfiles.length === 0 ? (
        <p>No POS profiles found for this location.</p>
      ) : (
        locationProfiles.map((profile: LocationPOSProfile) => (
          <div key={profile.id}>
            <h3>Profile ID: {profile.id}</h3>
            <p>Core POS Profile ID: {profile.corePOSProfileId}</p>
            <p>Last Sync Status: {profile.lastSyncStatus}</p>
            {profile.lastSyncError && <p>Last Sync Error: {profile.lastSyncError}</p>}
            <h4>Custom Settings:</h4>
            <ul>
              {Object.entries(profile.customSettings).map(([key, value]) => (
                <li key={key}>{key}: {value.toString()}</li>
              ))}
            </ul>
          </div>
        ))
      )}
    </div>
  );
};

export default PosProfilePage;

================
File: frontend/src/pages/PosSettingsPage.tsx
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '../redux/store';
import { fetchPOSSettings, updatePOSSettings, selectPOSSettingsForLocation } from '../redux/slices/posSettingsSlice';
import { useSelectedLocation } from '../hooks/useSelectedLocation';
import { POSSettings } from '../types/posSettingsTypes';

const PosSettingsPage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { selectedLocation } = useSelectedLocation();
  const posSettings = useSelector((state: RootState) => 
    selectedLocation ? selectPOSSettingsForLocation(state, selectedLocation) : null
  );
  const [localSettings, setLocalSettings] = useState<Partial<POSSettings>>({});

  useEffect(() => {
    if (selectedLocation) {
      dispatch(fetchPOSSettings(selectedLocation));
    }
  }, [dispatch, selectedLocation]);

  useEffect(() => {
    if (posSettings) {
      setLocalSettings(posSettings);
    }
  }, [posSettings]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setLocalSettings(prev => ({ 
      ...prev, 
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value 
    }));
  };

  const handleCustomSettingChange = (key: string, value: string | number | boolean) => {
    setLocalSettings(prev => ({
      ...prev,
      customSettings: {
        ...prev.customSettings,
        [key]: value
      }
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (selectedLocation) {
      dispatch(updatePOSSettings({ locationId: selectedLocation, settings: localSettings }));
    }
  };

  if (!posSettings) {
    return <div>Loading POS settings...</div>;
  }

  return (
    <div>
      <h1>POS Settings for {selectedLocation}</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>POS System: {posSettings.posSystem}</label>
        </div>
        <div>
          <label htmlFor="apiKey">API Key:</label>
          <input
            type="text"
            id="apiKey"
            name="apiKey"
            value={localSettings.apiKey || ''}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label htmlFor="apiEndpoint">API Endpoint:</label>
          <input
            type="text"
            id="apiEndpoint"
            name="apiEndpoint"
            value={localSettings.apiEndpoint || ''}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label htmlFor="syncFrequency">Sync Frequency (minutes):</label>
          <input
            type="number"
            id="syncFrequency"
            name="syncFrequency"
            value={localSettings.syncFrequency || 0}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label htmlFor="menuSyncEnabled">Menu Sync Enabled:</label>
          <input
            type="checkbox"
            id="menuSyncEnabled"
            name="menuSyncEnabled"
            checked={localSettings.menuSyncEnabled || false}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label htmlFor="inventorySyncEnabled">Inventory Sync Enabled:</label>
          <input
            type="checkbox"
            id="inventorySyncEnabled"
            name="inventorySyncEnabled"
            checked={localSettings.inventorySyncEnabled || false}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label htmlFor="orderSyncEnabled">Order Sync Enabled:</label>
          <input
            type="checkbox"
            id="orderSyncEnabled"
            name="orderSyncEnabled"
            checked={localSettings.orderSyncEnabled || false}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Last Sync: {posSettings.lastSyncTimestamp ? new Date(posSettings.lastSyncTimestamp).toLocaleString() : 'Never'}</label>
        </div>
        <h2>Custom Settings</h2>
        {Object.entries(posSettings.customSettings || {}).map(([key, value]) => (
          <div key={key}>
            <label htmlFor={key}>{key}:</label>
            <input
              type={typeof value === 'boolean' ? 'checkbox' : 'text'}
              id={key}
              name={key}
              value={typeof value !== 'boolean' ? value : undefined}
              checked={typeof value === 'boolean' ? value : undefined}
              onChange={(e) => handleCustomSettingChange(key, e.target.type === 'checkbox' ? e.target.checked : e.target.value)}
            />
          </div>
        ))}
        <button type="submit">Save POS Settings</button>
      </form>
    </div>
  );
};

export default PosSettingsPage;

================
File: frontend/src/pages/ProfilePage.tsx
================
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { updateUserProfile, selectCurrentUser } from '../redux/slices/userSlice';

const ProfilePage: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const userProfile = useSelector(selectCurrentUser);
  const [firstName, setFirstName] = useState(userProfile?.firstName || '');
  const [lastName, setLastName] = useState(userProfile?.lastName || '');
  const [email, setEmail] = useState(userProfile?.email || '');
  const [restaurantName, setRestaurantName] = useState(userProfile?.restaurantName || '');
  const [cuisineType, setCuisineType] = useState(userProfile?.cuisineType || '');
  const [phoneNumber, setPhoneNumber] = useState(userProfile?.phoneNumber || '');
  const [address, setAddress] = useState(userProfile?.address || '');
  const [timeZone, setTimeZone] = useState(userProfile?.timeZone || '');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (userProfile) {
      setFirstName(userProfile.firstName);
      setLastName(userProfile.lastName);
      setEmail(userProfile.email);
      setRestaurantName(userProfile.restaurantName || '');
      setCuisineType(userProfile.cuisineType || '');
      setPhoneNumber(userProfile.phoneNumber || '');
      setAddress(userProfile.address || '');
      setTimeZone(userProfile.timeZone || '');
    }
  }, [userProfile]);

  const handleUpdateProfile = async () => {
    try {
      await dispatch(updateUserProfile({
        firstName,
        lastName,
        email,
        restaurantName,
        cuisineType,
        phoneNumber,
        address,
        timeZone
      })).unwrap();
      setError(null);
    } catch (err) {
      setError('Failed to update profile. Please try again.');
    }
  };

  if (!userProfile) {
    return <div>Loading...</div>;
  }

  return (
    <div className="profile-page">
      <h2>Restaurant Profile</h2>
      {error && <div className="error">{error}</div>}
      <div>
        <label htmlFor="firstName">First Name:</label>
        <input
          type="text"
          id="firstName"
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="lastName">Last Name:</label>
        <input
          type="text"
          id="lastName"
          value={lastName}
          onChange={(e) => setLastName(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="restaurantName">Restaurant Name:</label>
        <input
          type="text"
          id="restaurantName"
          value={restaurantName}
          onChange={(e) => setRestaurantName(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="cuisineType">Cuisine Type:</label>
        <input
          type="text"
          id="cuisineType"
          value={cuisineType}
          onChange={(e) => setCuisineType(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="phoneNumber">Phone Number:</label>
        <input
          type="tel"
          id="phoneNumber"
          value={phoneNumber}
          onChange={(e) => setPhoneNumber(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="address">Address:</label>
        <input
          type="text"
          id="address"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="timeZone">Time Zone:</label>
        <input
          type="text"
          id="timeZone"
          value={timeZone}
          onChange={(e) => setTimeZone(e.target.value)}
        />
      </div>
      <button onClick={handleUpdateProfile}>Update Profile</button>
    </div>
  );
};

export default ProfilePage;

================
File: frontend/src/pages/Register.tsx
================
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '../redux/store';
import { register, selectAuthStatus } from '../redux/slices/authSlice';
import { useNavigate } from 'react-router-dom';

const Register: React.FC = () => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState<string | null>(null);

  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const status = useSelector(selectAuthStatus);

  useEffect(() => {
    if (status === 'succeeded') {
      navigate('/login');
    }
  }, [status, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (password !== confirmPassword) {
      setError("Passwords don't match");
      return;
    }

    try {
      await dispatch(register({ username, email, password })).unwrap();
    } catch (err) {
      setError('Registration failed. Please try again.');
    }
  };

  return (
    <div className="register-page">
      <h2>Register for Our Restaurant Ordering Hub</h2>
      {error && <div className="error">{error}</div>}
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="username">Username:</label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="confirmPassword">Confirm Password:</label>
          <input
            type="password"
            id="confirmPassword"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit" disabled={status === 'loading'}>
          {status === 'loading' ? 'Registering...' : 'Register'}
        </button>
      </form>
    </div>
  );
};

export default Register;

================
File: frontend/src/pages/ReportingDashboard.tsx
================
import React, { useState, useEffect, lazy, Suspense } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState, AppDispatch } from '../redux/store';
import { fetchDashboardData } from '../redux/slices/dashboardSlice';
import { selectCurrentUser, selectSelectedLocation } from '../redux/slices/userSlice';
import { CircularProgress, Grid, Paper, Typography, Button, Tabs, Tab, Box } from '@mui/material';
import { DateRange, DashboardParams, DashboardData, ChartData, LocationComparisonData } from '../types/dashboardTypes';
import { DateRangePicker } from '@mui/x-date-pickers-pro/DateRangePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import LocationSelector from '../components/LocationSelector';

const LazyBarChart = lazy(() => import('../components/LazyBarChart'));
const LazyLocationComparisonChart = lazy(() => import('../components/LazyLocationComparisonChart'));

const ReportingDashboard: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { data, loading, error } = useSelector((state: RootState) => state.dashboard);
  const user = useSelector(selectCurrentUser);
  const selectedLocation = useSelector(selectSelectedLocation);
  const [dateRange, setDateRange] = useState<DateRange>({ startDate: null, endDate: null });
  const [activeTab, setActiveTab] = useState(0);
  const [showComparison, setShowComparison] = useState(false);

  useEffect(() => {
    if (dateRange.startDate && dateRange.endDate && selectedLocation) {
      const params: DashboardParams = {
        dateRange,
        clientId: user?.clientId,
        locationId: selectedLocation, // Change to locationId
      };
      dispatch(fetchDashboardData(params));
    }
  }, [dispatch, dateRange, user, selectedLocation]);

  const handleDateRangeChange = (newDateRange: DateRange) => {
    setDateRange(newDateRange);
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setActiveTab(newValue);
  };

  const handleRefresh = () => {
    if (dateRange.startDate && dateRange.endDate && selectedLocation) {
      const params: DashboardParams = {
        dateRange,
        clientId: user?.clientId,
        locationId: selectedLocation, // Change to locationId
      };
      dispatch(fetchDashboardData(params));
    }
  };

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;
  if (!data) return <Typography>No data available</Typography>;

  return (
    <Box className="reporting-dashboard">
      <LocalizationProvider dateAdapter={AdapterDateFns}>
        <DateRangePicker
          value={[dateRange.startDate, dateRange.endDate]}
          onChange={(newValue: [Date | null, Date | null]) => 
            handleDateRangeChange({ startDate: newValue[0], endDate: newValue[1] })
          }
        />
      </LocalizationProvider>
      <Button onClick={handleRefresh} variant="contained" color="primary">Refresh Data</Button>
      
      <Grid container spacing={3} sx={{ mt: 2 }}>
        <Grid item xs={12} md={6}>
          <Paper className="p-4">
            <Typography variant="h6">Total Orders</Typography>
            <Typography variant="h4">{data?.totalOrders ?? 'N/A'}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Total Revenue</Typography>
            <Typography variant="h4">${data?.revenue?.toFixed(2) ?? 'N/A'}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Avg. Order Value</Typography>
            <Typography variant="h4">${data?.averageOrderValue?.toFixed(2) ?? 'N/A'}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={3}>
          <Paper elevation={3} sx={{ p: 2 }}>
            <Typography variant="h6">Customer Retention</Typography>
            <Typography variant="h4">{data?.customerRetentionRate ? `${data?.customerRetentionRate}%` : 'N/A'}</Typography>
          </Paper>
        </Grid>
      </Grid>

      <Tabs value={activeTab} onChange={handleTabChange} sx={{ mt: 2 }}>
        <Tab label="Revenue" />
        <Tab label="Order Trends" />
        <Tab label="Menu Performance" />
        <Tab label="Customer Insights" />
      </Tabs>

      <Suspense fallback={<CircularProgress />}>
        {activeTab === 0 && data?.revenueOverTime && <LazyBarChart data={data.revenueOverTime} title="Revenue Over Time" />}
        {activeTab === 1 && data?.orderTrends && <LazyBarChart data={data.orderTrends} title="Order Trends" />}
        {activeTab === 2 && data?.menuPerformance && <LazyBarChart data={data.menuPerformance} title="Menu Performance" />}
        {activeTab === 3 && data?.customerInsights && <LazyBarChart data={data.customerInsights} title="Customer Insights" />}
      </Suspense>

      <Button onClick={() => setShowComparison(!showComparison)} variant="outlined" color="primary" sx={{ mt: 2 }}>
        {showComparison ? "Hide Comparison" : "Compare Locations"}
      </Button>

      {showComparison && data?.locationComparison && (
        <Suspense fallback={<CircularProgress />}>
          <LazyLocationComparisonChart data={data.locationComparison} />
        </Suspense>
      )}

    </Box>
  );
};

export default ReportingDashboard;

================
File: frontend/src/pages/UserManagement.tsx
================
import React, { useEffect, useState, useMemo } from 'react';
import {
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Modal,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Snackbar,
  Alert,
  CircularProgress,
} from '@mui/material';
import { User, UserRole } from '../types/userTypes';
import { userService } from '../services/userService';

const UserManagement: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [snackbar, setSnackbar] = useState<{
    message: string;
    severity: 'success' | 'error';
  } | null>(null);

  const userServiceInstance = useMemo(() => new userService(), []);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const data = await userServiceInstance.getUsers();
        setUsers(data);
        setLoading(false);
      } catch (error) {
        setError('Failed to load users. Please try again.');
        setLoading(false);
      }
    };

    fetchUsers();
  }, [userServiceInstance]);

  const handleAddUser = () => {
    setSelectedUser({
      id: '',
      email: '',
      role: UserRole.EMPLOYEE,
      clientId: '',
    });
    setIsModalOpen(true);
  };

  const handleEditUser = (user: User) => {
    setSelectedUser(user);
    setIsModalOpen(true);
  };

  const handleSaveUser = async () => {
    if (!selectedUser) return;

    try {
      let updatedUser: User;
      if (selectedUser.id === '') {
        updatedUser = await userServiceInstance.createUser(selectedUser);
        setUsers([...users, updatedUser]);
      } else {
        updatedUser = await userServiceInstance.updateUser(
          selectedUser.id,
          selectedUser
        );
        setUsers(
          users.map((user) => (user.id === updatedUser.id ? updatedUser : user))
        );
      }
      setIsModalOpen(false);
      setSnackbar({ message: 'User saved successfully', severity: 'success' });
    } catch (err) {
      setSnackbar({
        message: 'Failed to save user. Please try again.',
        severity: 'error',
      });
    }
  };

  const handleDeleteUser = async (userId: string) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        await userServiceInstance.deleteUser(userId);
        setUsers(users.filter((user) => user.id !== userId));
        setSnackbar({
          message: 'User deleted successfully',
          severity: 'success',
        });
      } catch (err) {
        setSnackbar({
          message: 'Failed to delete user. Please try again.',
          severity: 'error',
        });
      }
    }
  };

  if (loading) return <CircularProgress />;
  if (error) return <Typography color="error">{error}</Typography>;

  return (
    <div>
      <Typography variant="h4" component="h1" gutterBottom>
        User Management
      </Typography>
      <Button onClick={handleAddUser} variant="contained" color="primary">
        Add User
      </Button>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Email</TableCell>
              <TableCell>Role</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>{user.email}</TableCell>
                <TableCell>{user.role}</TableCell>
                <TableCell>
                  <Button onClick={() => handleEditUser(user)}>Edit</Button>
                  <Button onClick={() => handleDeleteUser(user.id)}>
                    Delete
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Modal open={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <Paper
          style={{
            padding: '20px',
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            maxWidth: '400px',
            width: '100%',
          }}
        >
          {selectedUser && (
            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleSaveUser();
              }}
            >
              <Typography variant="h6" gutterBottom>
                {selectedUser.id === '' ? 'Add New User' : 'Edit User'}
              </Typography>
              <TextField
                label="Email"
                value={selectedUser.email}
                onChange={(e) =>
                  setSelectedUser({ ...selectedUser, email: e.target.value })
                }
                fullWidth
                margin="normal"
              />
              <FormControl fullWidth margin="normal">
                <InputLabel>Role</InputLabel>
                <Select
                  value={selectedUser.role}
                  onChange={(e) =>
                    setSelectedUser({
                      ...selectedUser,
                      role: e.target.value as UserRole,
                    })
                  }
                >
                  {Object.values(UserRole).map((role) => (
                    <MenuItem key={role} value={role}>
                      {role}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                style={{ marginTop: '20px' }}
              >
                Save User
              </Button>
            </form>
          )}
        </Paper>
      </Modal>
      <Snackbar
        open={!!snackbar}
        autoHideDuration={6000}
        onClose={() => setSnackbar(null)}
      >
        <Alert
          onClose={() => setSnackbar(null)}
          severity={snackbar?.severity}
          sx={{ width: '100%' }}
        >
          {snackbar?.message}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default UserManagement;

================
File: frontend/src/pages/Wallet.tsx
================
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  loadWalletData,
  fetchWalletBalance,
  selectWalletBalance,
  selectWalletRewards,
  selectWalletDiscounts,
} from '../redux/slices/walletSlice';
import { AppDispatch } from '../redux/store';

interface Reward {
  id: string;
  name: string;
}

interface Discount {
  id: string;
  name: string;
}

const Wallet: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const balance = useSelector(selectWalletBalance);
  const rewards = useSelector(selectWalletRewards);
  const discounts = useSelector(selectWalletDiscounts);

  useEffect(() => {
    dispatch(loadWalletData());
    dispatch(fetchWalletBalance());
  }, [dispatch]);

  return (
    <div>
      <h2>Your Wallet</h2>
      <p>Balance: ${(balance as number).toFixed(2)}</p>

      <h3>Rewards</h3>
      {(rewards as Reward[]).length > 0 ? (
        <ul>
          {(rewards as Reward[]).map((reward: Reward) => (
            <li key={reward.id}>{reward.name}</li>
          ))}
        </ul>
      ) : (
        <p>No rewards available</p>
      )}

      <h3>Discounts</h3>
      {(discounts as Discount[]).length > 0 ? (
        <ul>
          {(discounts as Discount[]).map((discount: Discount) => (
            <li key={discount.id}>{discount.name}</li>
          ))}
        </ul>
      ) : (
        <p>No discounts available</p>
      )}
    </div>
  );
};

export default Wallet;

================
File: frontend/src/redux/slices/abTestSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { ABTestService } from '../../services/abTestService';
import { ABTest } from '../../types/abTestTypes';
import { RootState } from '../rootReducer'; // Update this import if necessary

interface ABTestState {
  tests: ABTest[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: ABTestState = {
  tests: [],
  status: 'idle',
  error: null,
};

export const fetchABTests = createAsyncThunk<ABTest[], void, { rejectValue: string }>(
  'abTest/fetchABTests',
  async (_, { rejectWithValue }) => {
    try {
      return await ABTestService.fetchABTests();
    } catch (error) {
      return rejectWithValue('Failed to fetch AB tests');
    }
  }
);

export const createABTest = createAsyncThunk<ABTest, Omit<ABTest, 'id'>, { rejectValue: string }>(
  'abTest/createABTest',
  async (abTest, { rejectWithValue }) => {
    try {
      return await ABTestService.createABTest(abTest);
    } catch (error) {
      return rejectWithValue('Failed to create AB test');
    }
  }
);

export const updateABTest = createAsyncThunk<ABTest, { id: string; abTest: Partial<ABTest> }, { rejectValue: string }>(
  'abTest/updateABTest',
  async ({ id, abTest }, { rejectWithValue }) => {
    try {
      return await ABTestService.updateABTest(id, abTest);
    } catch (error) {
      return rejectWithValue('Failed to update AB test');
    }
  }
);

const abTestSlice = createSlice({
  name: 'abTest',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchABTests.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchABTests.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.tests = action.payload;
      })
      .addCase(fetchABTests.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'An unknown error occurred';
      })
      .addCase(createABTest.fulfilled, (state, action) => {
        state.tests.push(action.payload);
      })
      .addCase(updateABTest.fulfilled, (state, action) => {
        const index = state.tests.findIndex(test => test.id === action.payload.id);
        if (index !== -1) {
          state.tests[index] = action.payload;
        }
      });
  },
});

export default abTestSlice.reducer;

// Selectors
export const selectABTests = (state: RootState) => state.abTest.tests;
export const selectABTestStatus = (state: RootState) => state.abTest.status;
export const selectABTestError = (state: RootState) => state.abTest.error;

================
File: frontend/src/redux/slices/auditLogSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface AuditLogEntry {
  id: string;
  userId: string;
  action: string;
  timestamp: string;
  details: Record<string, unknown>;
}

interface AuditLogState {
  logs: AuditLogEntry[];
  loading: boolean;
  error: string | null;
}

const initialState: AuditLogState = {
  logs: [],
  loading: false,
  error: null,
};

const auditLogSlice = createSlice({
  name: 'auditLog',
  initialState,
  reducers: {
    fetchLogsStart(state) {
      state.loading = true;
      state.error = null;
    },
    fetchLogsSuccess(state, action: PayloadAction<AuditLogEntry[]>) {
      state.logs = action.payload;
      state.loading = false;
    },
    fetchLogsFailure(state, action: PayloadAction<string>) {
      state.loading = false;
      state.error = action.payload;
    },
    addLogEntry(state, action: PayloadAction<AuditLogEntry>) {
      state.logs.unshift(action.payload);
    },
  },
});

export const {
  fetchLogsStart,
  fetchLogsSuccess,
  fetchLogsFailure,
  addLogEntry,
} = auditLogSlice.actions;

export default auditLogSlice.reducer;

================
File: frontend/src/redux/slices/authSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import api from '../../services/api';

interface AuthState {
  isAuthenticated: boolean;
  user: {
    id: string;
    role: 'global_admin' | 'client_admin' | 'user';
    clientId?: string;
  } | null;
  token: string | null;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: AuthState = {
  isAuthenticated: false,
  user: null,
  token: null,
  status: 'idle',
  error: null,
};

export const register = createAsyncThunk(
  'auth/register',
  async (userData: { username: string; email: string; password: string }, { rejectWithValue }) => {
    try {
      const response = await api.post('/auth/register', userData);
      return response.data;
    } catch (error) {
      return rejectWithValue('Registration failed. Please try again.');
    }
  }
);

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setCredentials: (state, action: PayloadAction<{ user: any; token: string }>) => {
      const { user, token } = action.payload;
      state.user = user;
      state.token = token;
      state.isAuthenticated = true;
    },
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.isAuthenticated = false;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(register.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(register.fulfilled, (state, action) => {
        state.status = 'succeeded';
        // You might want to automatically log in the user here,
        // or you might want to require email verification first
      })
      .addCase(register.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      });
  },
});

export const { setCredentials, logout } = authSlice.actions;

export const selectCurrentUser = (state: RootState) => state.auth.user;
export const selectIsAuthenticated = (state: RootState) => state.auth.isAuthenticated;
export const selectAuthStatus = (state: RootState) => state.auth.status;

export default authSlice.reducer;

================
File: frontend/src/redux/slices/brandingSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { BrandingState, BrandingProfile } from '../../types';
import { brandingService } from '../../services/brandingService';

const initialState: BrandingState = {
  profiles: [],
  status: 'idle',
  error: null,
};

export const fetchBrandingProfiles = createAsyncThunk(
  'branding/fetchProfiles',
  async () => {
    return await brandingService.getBrandingProfiles();
  }
);

export const createBrandingProfile = createAsyncThunk(
  'branding/createProfile',
  async (profileData: Partial<BrandingProfile>) => {
    return await brandingService.createBrandingProfile(profileData);
  }
);

export const updateBrandingProfile = createAsyncThunk(
  'branding/updateProfile',
  async (profileData: BrandingProfile) => {
    return await brandingService.updateBrandingProfile(profileData);
  }
);

export const deleteBrandingProfile = createAsyncThunk(
  'branding/deleteProfile',
  async (id: number) => {
    await brandingService.deleteBrandingProfile(id);
    return id;
  }
);

const brandingSlice = createSlice({
  name: 'branding',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchBrandingProfiles.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchBrandingProfiles.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.profiles = action.payload;
      })
      .addCase(fetchBrandingProfiles.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      })
      .addCase(createBrandingProfile.fulfilled, (state, action) => {
        state.profiles.push(action.payload);
      })
      .addCase(updateBrandingProfile.fulfilled, (state, action) => {
        const index = state.profiles.findIndex(
          (profile) => profile.id === action.payload.id
        );
        if (index !== -1) {
          state.profiles[index] = action.payload;
        }
      })
      .addCase(deleteBrandingProfile.fulfilled, (state, action) => {
        state.profiles = state.profiles.filter(
          (profile) => profile.id !== action.payload
        );
      });
  },
});

export default brandingSlice.reducer;

================
File: frontend/src/redux/slices/cartSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../rootReducer';
import { CartItem } from '../../types';

interface CartState {
  items: CartItem[];
}

const initialState: CartState = {
  items: [],
};

const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    addToCart: (state, action: PayloadAction<CartItem>) => {
      state.items.push(action.payload);
    },
    removeFromCart: (state, action: PayloadAction<string>) => {
      state.items = state.items.filter(item => item.menuItem.id !== action.payload);
    },
    updateCartItemQuantity: (state, action: PayloadAction<{ id: string; quantity: number }>) => {
      const item = state.items.find(item => item.menuItem.id === action.payload.id);
      if (item) {
        item.quantity = action.payload.quantity;
      }
    },
  },
});

export const { addToCart, removeFromCart, updateCartItemQuantity } = cartSlice.actions;

export const selectCartItems = (state: RootState) => state.cart.items;

export default cartSlice.reducer;

================
File: frontend/src/redux/slices/cateringOrderSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState, CateringOrder } from '../../types';
import axios from 'axios';

interface CateringOrderState {
  cateringOrder: {
    orders: CateringOrder[];
    status: 'idle' | 'loading' | 'succeeded' | 'failed';
  };
}

const initialState: CateringOrderState = {
  cateringOrder: {
    orders: [],
    status: 'idle',
  },
};

export const fetchCateringOrders = createAsyncThunk(
  'cateringOrders/fetchCateringOrders',
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get<CateringOrder[]>('/api/catering-orders');
      return response.data;
    } catch (error) {
      return rejectWithValue('Failed to fetch catering orders');
    }
  }
);

export const createCateringOrder = createAsyncThunk(
  'cateringOrders/createCateringOrder',
  async (order: Omit<CateringOrder, 'id'>, { rejectWithValue }) => {
    try {
      const response = await axios.post<CateringOrder>(
        '/api/catering-orders',
        order
      );
      return response.data;
    } catch (error) {
      return rejectWithValue('Failed to create catering order');
    }
  }
);

const cateringOrdersSlice = createSlice({
  name: 'cateringOrder',
  initialState,
  reducers: {
    // ... other reducers
  },
  extraReducers: (builder) => {
    builder.addCase(fetchCateringOrders.fulfilled, (state, action) => {
      state.cateringOrder.orders = action.payload;
      state.cateringOrder.status = 'succeeded';
    });
    // ... other cases
  },
});

export default cateringOrdersSlice.reducer;

export const selectCateringOrders = (state: RootState) =>
  state.cateringOrder.cateringOrder.orders;

================
File: frontend/src/redux/slices/challengeSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

export type ChallengeType = 'purchase' | 'visit' | 'referral';
export type ChallengeStatus = 'active' | 'inactive';

export interface Challenge {
  id: string;
  name: string;
  description: string;
  challengeType: ChallengeType;
  targetValue: number;
  reward: number;
  status: ChallengeStatus;
}

interface ChallengeState {
  challenges: Challenge[];
  loading: boolean;
  error: string | null;
}

const initialState: ChallengeState = {
  challenges: [],
  loading: false,
  error: null,
};

const challengeSlice = createSlice({
  name: 'challenge',
  initialState,
  reducers: {
    fetchChallenges: (state) => {
      state.loading = true;
    },
    fetchChallengesSuccess: (state, action: PayloadAction<Challenge[]>) => {
      state.challenges = action.payload;
      state.loading = false;
    },
    fetchChallengesFailure: (state, action: PayloadAction<string>) => {
      state.error = action.payload;
      state.loading = false;
    },
    createChallenge: (state, action: PayloadAction<Challenge>) => {
      state.challenges.push(action.payload);
    },
    updateChallenge: (state, action: PayloadAction<Challenge>) => {
      const index = state.challenges.findIndex(c => c.id === action.payload.id);
      if (index !== -1) {
        state.challenges[index] = action.payload;
      }
    },
  },
});

export const {
  fetchChallenges,
  fetchChallengesSuccess,
  fetchChallengesFailure,
  createChallenge,
  updateChallenge,
} = challengeSlice.actions;

export default challengeSlice.reducer;

================
File: frontend/src/redux/slices/clientBrandingSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { ClientBrandingService } from '../../services/clientBrandingService';
import { ClientBranding } from '../../types/clientTypes';
import { RootState } from '../store';

interface ClientBrandingState {
  data: ClientBranding | null;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: ClientBrandingState = {
  data: null,
  status: 'idle',
  error: null,
};

export const fetchClientBranding = createAsyncThunk<
  ClientBranding,
  string,
  { rejectValue: string }
>(
  'clientBranding/fetchClientBranding',
  async (clientId, { rejectWithValue }) => {
    try {
      return await ClientBrandingService.fetchClientBranding(clientId);
    } catch (error) {
      return rejectWithValue('Failed to fetch client branding');
    }
  }
);

export const updateClientBranding = createAsyncThunk<
  ClientBranding,
  { clientId: string; brandingData: Partial<ClientBranding> },
  { rejectValue: string }
>(
  'clientBranding/updateClientBranding',
  async ({ clientId, brandingData }, { rejectWithValue }) => {
    try {
      return await ClientBrandingService.updateClientBranding(clientId, brandingData);
    } catch (error) {
      return rejectWithValue('Failed to update client branding');
    }
  }
);

const clientBrandingSlice = createSlice({
  name: 'clientBranding',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClientBranding.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchClientBranding.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.data = action.payload;
      })
      .addCase(fetchClientBranding.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'An unknown error occurred';
      })
      .addCase(updateClientBranding.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateClientBranding.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.data = action.payload;
      })
      .addCase(updateClientBranding.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'An unknown error occurred';
      });
  },
});

export default clientBrandingSlice.reducer;

// Selectors
export const selectClientBranding = (state: RootState) => state.clientBranding.data;
export const selectClientBrandingStatus = (state: RootState) => state.clientBranding.status;
export const selectClientBrandingError = (state: RootState) => state.clientBranding.error;

================
File: frontend/src/redux/slices/clientConfigSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { ClientService } from '../../services/clientService';
import { ClientConfig } from '../../types/clientTypes';
import { RootState } from '../store'; // Add this import

export const fetchClientConfig = createAsyncThunk<
  ClientConfig,
  void,
  { rejectValue: string }
>(
  'clientConfig/fetchClientConfig',
  async (_, { rejectWithValue }) => {
    try {
      const config = await ClientService.fetchClientConfig();
      return config;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

const clientConfigSlice = createSlice({
  name: 'clientConfig',
  initialState: {
    config: null as ClientConfig | null,
    status: 'idle' as 'idle' | 'loading' | 'succeeded' | 'failed',
    error: null as string | null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClientConfig.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchClientConfig.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.config = action.payload;
      })
      .addCase(fetchClientConfig.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload || 'An unknown error occurred';
      });
  },
});

export default clientConfigSlice.reducer;

// Selectors
export const selectClientConfig = (state: RootState) => state.clientConfig.config;
export const selectClientConfigStatus = (state: RootState) => state.clientConfig.status;
export const selectClientConfigError = (state: RootState) => state.clientConfig.error;

================
File: frontend/src/redux/slices/clientSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { ClientService } from '../../services/clientService';
import { ClientMetrics } from '../../types/clientTypes';

interface ClientState {
  metrics: ClientMetrics | null;
  loading: boolean;
  error: string | null;
}

const initialState: ClientState = {
  metrics: null,
  loading: false,
  error: null,
};

export const fetchClientMetrics = createAsyncThunk<
  ClientMetrics,
  string,
  { rejectValue: string }
>(
  'client/fetchMetrics',
  async (locationId, { rejectWithValue }) => {
    try {
      return await ClientService.fetchClientMetrics(locationId);
    } catch (error) {
      return rejectWithValue('Failed to fetch client metrics');
    }
  }
);

const clientSlice = createSlice({
  name: 'client',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClientMetrics.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchClientMetrics.fulfilled, (state, action) => {
        state.loading = false;
        state.metrics = action.payload;
      })
      .addCase(fetchClientMetrics.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'An unknown error occurred';
      });
  },
});

export default clientSlice.reducer;

================
File: frontend/src/redux/slices/dashboardSlice.ts
================
import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
import { DashboardData, DashboardParams } from '../../types/dashboardTypes';
import { fetchDashboardDataAPI } from '../../services/dashboardService';

export const fetchDashboardData = createAsyncThunk<DashboardData, DashboardParams, { rejectValue: string }>(
  'dashboard/fetchDashboardData',
  async (params: DashboardParams, { rejectWithValue }) => {
    try {
      const response = await fetchDashboardDataAPI(params);
      return response;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

interface DashboardState {
  data: DashboardData | null;
  loading: boolean;
  error: string | null;
}

const initialState: DashboardState = {
  data: null,
  loading: false,
  error: null,
};

const dashboardSlice = createSlice({
  name: 'dashboard',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchDashboardData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchDashboardData.fulfilled, (state, action: PayloadAction<DashboardData>) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(fetchDashboardData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload ?? 'An error occurred';
      });
  },
});

export default dashboardSlice.reducer;

================
File: frontend/src/redux/slices/discountSlice.ts
================
import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { fetchDiscountsByLocation } from '../../api/discountApi';

interface DiscountState {
  discounts: { id: string; name: string; value: number }[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: DiscountState = {
  discounts: [],
  status: 'idle',
  error: null,
};

export const fetchDiscounts = createAsyncThunk(
  'discounts/fetchDiscounts',
  async (clientId: number) => {
    const response = await fetchDiscountsByLocation(clientId);
    return response;
  }
);

const discountSlice = createSlice({
  name: 'discounts',
  initialState,
  reducers: {
    addDiscount: (
      state,
      action: PayloadAction<{ id: string; name: string; value: number }>
    ) => {
      state.discounts.push(action.payload);
    },
    updateDiscount: (
      state,
      action: PayloadAction<{ id: string; value: number }>
    ) => {
      const discount = state.discounts.find((d) => d.id === action.payload.id);
      if (discount) {
        discount.value = action.payload.value;
      }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchDiscounts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchDiscounts.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.discounts = action.payload;
      })
      .addCase(fetchDiscounts.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      });
  },
});

export const selectDiscounts = (state: RootState) => state.discount.discounts;
export const selectDiscountStatus = (state: RootState) => state.discount.status;
export const selectDiscountsError = (state: RootState) => state.discount.error;

export const { addDiscount, updateDiscount } = discountSlice.actions;

export default discountSlice.reducer;

================
File: frontend/src/redux/slices/guestSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { GuestMetrics } from '../../types/guestTypes';
import { GuestService } from '../../services/guestService';

interface GuestState {
  metrics: GuestMetrics | null;
  loading: boolean;
  error: string | null;
}

const initialState: GuestState = {
  metrics: null,
  loading: false,
  error: null,
};

export const fetchGuestMetrics = createAsyncThunk<
  GuestMetrics,
  string,
  { rejectValue: string }
>(
  'guest/fetchMetrics',
  async (locationId, { rejectWithValue }) => {
    try {
      return await GuestService.fetchGuestMetrics(locationId);
    } catch (error) {
      return rejectWithValue('Failed to fetch guest metrics');
    }
  }
);

const guestSlice = createSlice({
  name: 'guest',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchGuestMetrics.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchGuestMetrics.fulfilled, (state, action) => {
        state.loading = false;
        state.metrics = action.payload;
      })
      .addCase(fetchGuestMetrics.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'An unknown error occurred';
      });
  },
});

export default guestSlice.reducer;

================
File: frontend/src/redux/slices/inventorySlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { InventoryItem } from '../../types';
import { inventoryService } from '../../services/inventoryService';

interface InventoryState {
  items: InventoryItem[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: InventoryState = {
  items: [],
  status: 'idle',
  error: null,
};

export const fetchInventory = createAsyncThunk(
  'inventory/fetchInventory',
  async () => {
    const response = await inventoryService.getInventory();
    return response;
  }
);

export const updateInventoryItem = createAsyncThunk(
  'inventory/updateItem',
  async (item: InventoryItem) => {
    const response = await inventoryService.updateInventoryItem(item);
    return response;
  }
);

const inventorySlice = createSlice({
  name: 'inventory',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchInventory.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchInventory.fulfilled, (state, action: PayloadAction<InventoryItem[]>) => {
        state.status = 'succeeded';
        state.items = action.payload;
      })
      .addCase(fetchInventory.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || 'Failed to fetch inventory';
      })
      .addCase(updateInventoryItem.fulfilled, (state, action: PayloadAction<InventoryItem>) => {
        const index = state.items.findIndex((item) => item.id === action.payload.id);
        if (index !== -1) {
          state.items[index] = action.payload;
        }
      });
  },
});

export const selectInventoryItems = (state: RootState) => state.inventory.items;
export const selectInventoryStatus = (state: RootState) => state.inventory.status;
export const selectInventoryError = (state: RootState) => state.inventory.error;

export default inventorySlice.reducer;

================
File: frontend/src/redux/slices/LocationCard.tsx
================
import React from 'react';

interface LocationCardProps {
  name: string;
  address: string;
  imageUrl: string;
}

const LocationCard: React.FC<LocationCardProps> = ({
  name,
  address,
  imageUrl,
}) => {
  return (
    <div className="location-card">
      <img src={imageUrl} alt={name} />
      <h3>{name}</h3>
      <p>{address}</p>
    </div>
  );
};

export default LocationCard;

================
File: frontend/src/redux/slices/LocationSelectionPage.tsx
================
import React from 'react';

interface Location {
  id: number;
  name: string;
}

interface LocationSelectionPageProps {
  locations: Location[];
  onSelectLocation: (id: number) => void;
}

const LocationSelectionPage: React.FC<LocationSelectionPageProps> = ({
  locations,
  onSelectLocation,
}) => {
  const handleKeyPress = (
    event: React.KeyboardEvent<HTMLDivElement>,
    id: number
  ) => {
    if (event.key === 'Enter' || event.key === ' ') {
      onSelectLocation(id);
    }
  };

  return (
    <div className="location-selection-page">
      <h2>Select a Location</h2>
      <ul>
        {locations.map((location) => (
          <div
            key={location.id}
            tabIndex={0}
            role="button"
            onClick={() => onSelectLocation(location.id)}
            onKeyPress={(e) => handleKeyPress(e, location.id)}
          >
            {location.name}
          </div>
        ))}
      </ul>
    </div>
  );
};

export default LocationSelectionPage;

================
File: frontend/src/redux/slices/locationSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { Location } from '../../types/locationTypes';
import api from '../../services/api';

interface LocationState {
  locations: Location[];
  loading: boolean;
  error: string | null;
}

const initialState: LocationState = {
  locations: [],
  loading: false,
  error: null,
};

export const fetchLocations = createAsyncThunk<Location[], void, { rejectValue: string }>(
  'location/fetchLocations',
  async (_, { rejectWithValue }) => {
    try {
      const response = await api.get('/locations');
      return response.data;
    } catch (error) {
      return rejectWithValue('Failed to fetch locations');
    }
  }
);

const locationSlice = createSlice({
  name: 'location',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchLocations.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLocations.fulfilled, (state, action) => {
        state.locations = action.payload;
        state.loading = false;
      })
      .addCase(fetchLocations.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'An error occurred';
      });
  },
});

// Updated selector functions
export const selectLocations = (state: RootState) => state.location.locations;
export const selectLocationLoading = (state: RootState) => state.location.loading;
export const selectLocationError = (state: RootState) => state.location.error;

export default locationSlice.reducer;

================
File: frontend/src/redux/slices/loyaltySlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { LoyaltyReward, LoyaltyConfig } from '../../types';
import { loyaltyService } from '../../services/loyaltyService';

interface LoyaltyState {
  rewards: LoyaltyReward[];
  config: LoyaltyConfig | null;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: LoyaltyState = {
  rewards: [],
  config: null,
  status: 'idle',
  error: null,
};

export const fetchLoyaltyRewards = createAsyncThunk(
  'loyalty/fetchRewards',
  async () => {
    const response = await loyaltyService.getLoyaltyRewards();
    return response;
  }
);

export const createLoyaltyReward = createAsyncThunk(
  'loyalty/createReward',
  async (reward: Partial<LoyaltyReward>) => {
    const response = await loyaltyService.createLoyaltyReward(reward);
    return response;
  }
);

export const updateLoyaltyReward = createAsyncThunk(
  'loyalty/updateReward',
  async (reward: LoyaltyReward) => {
    const response = await loyaltyService.updateLoyaltyReward(reward);
    return response;
  }
);

export const deleteLoyaltyReward = createAsyncThunk(
  'loyalty/deleteReward',
  async (rewardId: number) => {
    await loyaltyService.deleteLoyaltyReward(rewardId);
    return rewardId;
  }
);

export const fetchLoyaltyConfig = createAsyncThunk(
  'loyalty/fetchConfig',
  async () => {
    const response = await loyaltyService.getLoyaltyConfig();
    return response;
  }
);

export const updateLoyaltyConfig = createAsyncThunk(
  'loyalty/updateConfig',
  async (config: LoyaltyConfig) => {
    const response = await loyaltyService.updateLoyaltyConfig(config);
    return response;
  }
);

const loyaltySlice = createSlice({
  name: 'loyalty',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchLoyaltyRewards.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchLoyaltyRewards.fulfilled, (state, action: PayloadAction<LoyaltyReward[]>) => {
        state.status = 'succeeded';
        state.rewards = action.payload;
      })
      .addCase(fetchLoyaltyRewards.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || 'Failed to fetch loyalty rewards';
      })
      .addCase(createLoyaltyReward.fulfilled, (state, action: PayloadAction<LoyaltyReward>) => {
        state.rewards.push(action.payload);
      })
      .addCase(updateLoyaltyReward.fulfilled, (state, action: PayloadAction<LoyaltyReward>) => {
        const index = state.rewards.findIndex((reward) => reward.id === action.payload.id);
        if (index !== -1) {
          state.rewards[index] = action.payload;
        }
      })
      .addCase(deleteLoyaltyReward.fulfilled, (state, action: PayloadAction<number>) => {
        state.rewards = state.rewards.filter((reward) => reward.id !== action.payload);
      })
      .addCase(fetchLoyaltyConfig.fulfilled, (state, action: PayloadAction<LoyaltyConfig>) => {
        state.config = action.payload;
      })
      .addCase(updateLoyaltyConfig.fulfilled, (state, action: PayloadAction<LoyaltyConfig>) => {
        state.config = action.payload;
      });
  },
});

export const selectLoyaltyRewards = (state: RootState) => state.loyalty.rewards;
export const selectLoyaltyConfig = (state: RootState) => state.loyalty.config;
export const selectLoyaltyStatus = (state: RootState) => state.loyalty.status;
export const selectLoyaltyError = (state: RootState) => state.loyalty.error;

export default loyaltySlice.reducer;

================
File: frontend/src/redux/slices/menuItemsSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../rootReducer';
import { Menu, MenuItem, MenuGroup } from '../../types/menuTypes';

interface MenuItemsState {
  items: MenuItem[];
}

const initialState: MenuItemsState = {
  items: [],
};

const menuItemsSlice = createSlice({
  name: 'menuItems',
  initialState,
  reducers: {
    setMenuItems: (state, action: PayloadAction<Menu>) => {
      const menu = action.payload;
      const allItems = menu.menuGroups.flatMap((group: MenuGroup) => group.items);
      state.items = allItems;
    },
  },
});

export const { setMenuItems } = menuItemsSlice.actions;

export const selectMenuItems = (state: RootState) => state.menuItems.items;

export default menuItemsSlice.reducer;

================
File: frontend/src/redux/slices/menuSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../rootReducer';
import { Menu, MenuStatistics } from '../../types/menuTypes';
import { menuService } from '../../services/menuService'; // Corrected import

interface MenuState {
  menu: Menu | null;
  statistics: MenuStatistics | null;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: MenuState = {
  menu: null,
  statistics: null,
  status: 'idle',
  error: null,
};

export const fetchMenu = createAsyncThunk<
  Menu,
  string,
  { rejectValue: string }
>(
  'menu/fetchMenu',
  async (locationId, { rejectWithValue }) => {
    try {
      const menu = await menuService.getMenu(locationId);
      return menu;
    } catch (error) {
      return rejectWithValue('Failed to fetch menu');
    }
  }
);

export const updateMenu = createAsyncThunk<
  Menu,
  { locationId: string; menuId: string; menuData: Partial<Menu> },
  { rejectValue: string }
>(
  'menu/updateMenu',
  async ({ locationId, menuId, menuData }, { rejectWithValue }) => {
    try {
      const updatedMenu = await menuService.updateMenu(locationId, menuId, menuData);
      return updatedMenu;
    } catch (error) {
      return rejectWithValue('Failed to update menu');
    }
  }
);

const menuSlice = createSlice({
  name: 'menu',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchMenu.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMenu.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.menu = action.payload;
      })
      .addCase(fetchMenu.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      })
      .addCase(updateMenu.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateMenu.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.menu = action.payload;
      })
      .addCase(updateMenu.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload as string;
      });
  },
});

export const selectMenu = (state: RootState) => state.menu.menu;
export const selectMenuStatus = (state: RootState) => state.menu.status;
export const selectMenuError = (state: RootState) => state.menu.error;

export default menuSlice.reducer;

================
File: frontend/src/redux/slices/orderSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';

interface Order {
  id: string;
  clientId: string;
  customerId: string;
  items: OrderItem[];
  total: number;
  status: OrderStatus;
  createdAt: Date;
  updatedAt: Date;
}

interface OrderItem {
  id: string;
  menuItemId: string;
  quantity: number;
  price: number;
  modifiers?: Modifier[];
}

interface Modifier {
  id: string;
  name: string;
  price: number;
}

enum OrderStatus {
  PENDING = 'PENDING',
  PROCESSING = 'PROCESSING',
  COMPLETED = 'COMPLETED',
  CANCELLED = 'CANCELLED'
}

interface OrderState {
  activeOrders: Order[];
}

const initialState: OrderState = {
  activeOrders: [],
};

const orderSlice = createSlice({
  name: 'order',
  initialState,
  reducers: {
    setActiveOrders: (state, action: PayloadAction<Order[]>) => {
      state.activeOrders = action.payload;
    },
    removeOrder: (state, action: PayloadAction<string>) => {
      state.activeOrders = state.activeOrders.filter(
        (order) => order.id !== action.payload
      );
    },
    updateOrder: (state, action: PayloadAction<Order>) => {
      state.activeOrders = state.activeOrders.map((order) => 
        order.id === action.payload.id ? action.payload : order
      );
    },
  },
});

export const { setActiveOrders, removeOrder, updateOrder } = orderSlice.actions;

export const selectActiveOrders = (state: RootState) => state.order.activeOrders;

export default orderSlice.reducer;

================
File: frontend/src/redux/slices/posIntegrationSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { fetchPOSIntegrations as fetchPOSIntegrationsAPI } from '../../api/posIntegrationApi';

export const fetchPOSIntegrations = createAsyncThunk(
  'posIntegration/fetchPOSIntegrations',
  async () => {
    const response = await fetchPOSIntegrationsAPI();
    return response.data;
  }
);

const posIntegrationSlice = createSlice({
  name: 'posIntegration',
  initialState: {
    integrations: [],
    status: 'idle',
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(fetchPOSIntegrations.fulfilled, (state, action) => {
      state.integrations = action.payload;
    });
  },
});

export default posIntegrationSlice.reducer;

================
File: frontend/src/redux/slices/posProfileSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { LocationPOSProfile } from '../../types/posTypes';
import api from '../../services/api';

interface POSProfileState {
  locationProfiles: LocationPOSProfile[];
  loading: boolean;
  error: string | null;
}

const initialState: POSProfileState = {
  locationProfiles: [],
  loading: false,
  error: null,
};

export const fetchLocationPOSProfiles = createAsyncThunk<
  LocationPOSProfile[],
  string,
  { rejectValue: string }
>(
  'posProfile/fetchLocationProfiles',
  async (locationId, { rejectWithValue }) => {
    try {
      const response = await api.get(`/locations/${locationId}/pos-profiles`);
      return response.data;
    } catch (error) {
      return rejectWithValue('Failed to fetch location POS profiles');
    }
  }
);

const posProfileSlice = createSlice({
  name: 'posProfile',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchLocationPOSProfiles.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLocationPOSProfiles.fulfilled, (state, action) => {
        state.locationProfiles = action.payload;
        state.loading = false;
      })
      .addCase(fetchLocationPOSProfiles.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'An error occurred';
      });
  },
});

export const selectLocationPOSProfiles = (state: RootState) => state.posProfile.locationProfiles;
export const selectPOSProfileLoading = (state: RootState) => state.posProfile.loading;
export const selectPOSProfileError = (state: RootState) => state.posProfile.error;

export default posProfileSlice.reducer;

================
File: frontend/src/redux/slices/posSettingsSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { posSettingService } from '../../services/posSettingService';
import { POSSettings } from '../../types/posSettingsTypes';

interface POSSettingsState {
  settings: Record<string, POSSettings>;
  loading: boolean;
  error: string | null;
}

const initialState: POSSettingsState = {
  settings: {},
  loading: false,
  error: null,
};

export const fetchPOSSettings = createAsyncThunk<
  POSSettings,
  string,
  { rejectValue: string }
>(
  'posSettings/fetchSettings',
  async (locationId, { rejectWithValue }) => {
    try {
      const settings = await posSettingService.getSettings(locationId);
      return settings;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

export const updatePOSSettings = createAsyncThunk<
  POSSettings,
  { locationId: string; settings: Partial<POSSettings> },
  { rejectValue: string }
>(
  'posSettings/updateSettings',
  async ({ locationId, settings }, { rejectWithValue }) => {
    try {
      // Changed from updateSyncSettings to updateSettings
      const updatedSettings = await posSettingService.updateSettings(locationId, settings);
      return updatedSettings;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

const posSettingsSlice = createSlice({
  name: 'posSettings',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPOSSettings.pending, (state) => {
        state.loading = true;
        state.error = null;  // Clear error when starting a new fetch
      })
      .addCase(fetchPOSSettings.fulfilled, (state, action) => {
        state.settings[action.meta.arg] = action.payload;
        state.loading = false;
      })
      .addCase(fetchPOSSettings.rejected, (state, action) => {
        state.error = action.payload || 'An unknown error occurred';
        state.loading = false;
      })
      .addCase(updatePOSSettings.pending, (state) => {
        state.loading = true;
      })
      .addCase(updatePOSSettings.fulfilled, (state, action) => {
        state.settings[action.meta.arg.locationId] = action.payload;
        state.loading = false;
      })
      .addCase(updatePOSSettings.rejected, (state, action) => {
        state.error = action.payload || 'An unknown error occurred';
        state.loading = false;
      });
  },
});

export const { clearError } = posSettingsSlice.actions;

export const selectPOSSettingsForLocation = (state: RootState, locationId: string) => 
  state.posSettings.settings[locationId];

export const selectPOSSettings = (state: RootState) => state.posSettings.settings;
export const selectPOSSettingsLoading = (state: RootState) => state.posSettings.loading;
export const selectPOSSettingsError = (state: RootState) => state.posSettings.error;

export default posSettingsSlice.reducer;

================
File: frontend/src/redux/slices/providerSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { providerService } from '../../services/providerService';
import { Provider, PaginatedResponse } from '../../types/providerTypes';

interface ProviderState {
  providers: Provider[];
  loading: boolean;
  error: string | null;
  totalProviders: number;
  currentPage: number;
  totalPages: number;
  pageSize: number;
}

const initialState: ProviderState = {
  providers: [],
  loading: false,
  error: null,
  totalProviders: 0,
  currentPage: 1,
  totalPages: 1,
  pageSize: 10,
};

export const fetchProviders = createAsyncThunk<
  PaginatedResponse<Provider>,
  { page: number; limit: number },
  { rejectValue: string }
>(
  'providers/fetchProviders',
  async ({ page, limit }, { rejectWithValue }) => {
    try {
      const response = await providerService.getProviders({ page, limit });
      return response;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

const providerSlice = createSlice({
  name: 'provider',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchProviders.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchProviders.fulfilled, (state, action: PayloadAction<PaginatedResponse<Provider>>) => {
        state.loading = false;
        state.providers = action.payload.data;
        state.totalProviders = action.payload.total;
        state.currentPage = action.payload.page;
        state.totalPages = action.payload.totalPages;
        state.pageSize = action.payload.limit; // Changed from pageSize to limit
      })
      .addCase(fetchProviders.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'An unknown error occurred';
      });
  },
});

export const selectProviders = (state: RootState) => state.provider.providers;
export const selectProvidersLoading = (state: RootState) => state.provider.loading;
export const selectProvidersError = (state: RootState) => state.provider.error;
export const selectTotalProviders = (state: RootState) => state.provider.totalProviders;
export const selectCurrentPage = (state: RootState) => state.provider.currentPage;
export const selectTotalPages = (state: RootState) => state.provider.totalPages;
export const selectPageSize = (state: RootState) => state.provider.pageSize;

export default providerSlice.reducer;

================
File: frontend/src/redux/slices/realtimeMetricsSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';

interface TopSellingItem {
  id: string;
  name: string;
  quantity: number;
  revenue: number;
}

interface RealtimeMetrics {
  todaySales: number;
  todayOrders: number;
  averageOrderValue: number;
  newGuests: number;
  activeGuests: number;
  topSellingItems: TopSellingItem[];
}

interface RealtimeMetricsState {
  metrics: RealtimeMetrics;
  loading: boolean;
  error: string | null;
}

const initialState: RealtimeMetricsState = {
  metrics: {
    todaySales: 0,
    todayOrders: 0,
    averageOrderValue: 0,
    newGuests: 0,
    activeGuests: 0,
    topSellingItems: [],
  },
  loading: false,
  error: null,
};

const realtimeMetricsSlice = createSlice({
  name: 'realtimeMetrics',
  initialState,
  reducers: {
    updateMetrics: (state, action: PayloadAction<Partial<RealtimeMetrics>>) => {
      state.metrics = { ...state.metrics, ...action.payload };
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const { updateMetrics, setLoading, setError } = realtimeMetricsSlice.actions;

export const selectRealtimeMetrics = (state: RootState) => state.realtimeMetrics.metrics;
export const selectRealtimeMetricsLoading = (state: RootState) => state.realtimeMetrics.loading;
export const selectRealtimeMetricsError = (state: RootState) => state.realtimeMetrics.error;

export default realtimeMetricsSlice.reducer;

================
File: frontend/src/redux/slices/revenueSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { fetchRevenueData } from '../../api/revenueApi';

interface RevenueData {
  date: string;
  amount: number;
}

interface RevenueState {
  data: RevenueData[];
  loading: boolean;
  error: string | null;
}

const initialState: RevenueState = {
  data: [],
  loading: false,
  error: null,
};

export const fetchRevenue = createAsyncThunk(
  'revenue/fetchRevenue',
  async (dateRange: { startDate: string; endDate: string }, { rejectWithValue }) => {
    try {
      const data = await fetchRevenueData(dateRange);
      return data;
    } catch (error: unknown) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

const revenueSlice = createSlice({
  name: 'revenue',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchRevenue.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchRevenue.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(fetchRevenue.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

export const selectRevenueData = (state: RootState) => state.revenue.data;
export const selectRevenueLoading = (state: RootState) => state.revenue.loading;
export const selectRevenueError = (state: RootState) => state.revenue.error;

export default revenueSlice.reducer;

================
File: frontend/src/redux/slices/reviewSlice.ts
================
import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { reviewService } from '../../services/reviewService';
import { Review } from '../../types/reviewTypes'; // Import the Review type from your types file

interface ReviewState {
  reviews: Review[];
  loading: boolean;
  error: string | null;
}

const initialState: ReviewState = {
  reviews: [],
  loading: false,
  error: null,
};

export const fetchReviews = createAsyncThunk<
  Review[],
  string,
  { rejectValue: string }
>(
  'review/fetchReviews',
  async (itemId, { rejectWithValue }) => {
    try {
      const reviews = await reviewService.getReviews(itemId);
      return reviews;
    } catch (error) {
      if (error instanceof Error) {
        return rejectWithValue(error.message);
      }
      return rejectWithValue('An unknown error occurred');
    }
  }
);

const reviewSlice = createSlice({
  name: 'review',
  initialState,
  reducers: {
    addReview: (state, action: PayloadAction<Review>) => {
      state.reviews.push(action.payload);
    },
    updateReview: (state, action: PayloadAction<Review>) => {
      const index = state.reviews.findIndex(review => review.id === action.payload.id);
      if (index !== -1) {
        state.reviews[index] = action.payload;
      }
    },
    deleteReview: (state, action: PayloadAction<string>) => {
      state.reviews = state.reviews.filter(review => review.id !== action.payload);
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchReviews.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchReviews.fulfilled, (state, action) => {
        state.loading = false;
        state.reviews = action.payload;
      })
      .addCase(fetchReviews.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || 'An unknown error occurred';
      });
  },
});

export const { addReview, updateReview, deleteReview } = reviewSlice.actions;

export const selectReviews = (state: RootState) => state.review.reviews;
export const selectReviewsLoading = (state: RootState) => state.review.loading;
export const selectReviewsError = (state: RootState) => state.review.error;

export default reviewSlice.reducer;

================
File: frontend/src/redux/slices/roleSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../rootReducer';

interface Role {
  id: string;
  name: string;
  permissions: string[];
}

interface RoleState {
  roles: Role[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: RoleState = {
  roles: [],
  status: 'idle',
  error: null,
};

const roleSlice = createSlice({
  name: 'roles',
  initialState,
  reducers: {
    addRole: (state, action: PayloadAction<Role>) => {
      state.roles.push(action.payload);
    },
    updateRole: (
      state,
      action: PayloadAction<{ id: string; permissions: string[] }>
    ) => {
      const role = state.roles.find((r) => r.id === action.payload.id);
      if (role) {
        role.permissions = action.payload.permissions;
      }
    },
  },
});

export const selectRoles = (state: RootState) => state.role.roles;
export const selectRoleStatus = (state: RootState) => state.role.status;
export const selectRoleError = (state: RootState) => state.role.error;

export const { addRole, updateRole } = roleSlice.actions;

export default roleSlice.reducer;

================
File: frontend/src/redux/slices/rootReducer.ts
================
import { combineReducers } from '@reduxjs/toolkit';
import authSlice from './authSlice'; // This import is correct
import abTestReducer from './abTestSlice';
import clientBrandingReducer from './clientBrandingSlice';
import clientConfigReducer from './clientConfigSlice';
import clientReducer from './clientSlice';
import walletReducer from './walletSlice';
import roleReducer from './roleSlice';
import locationReducer from './locationSlice';
import menuReducer from './menuSlice';
import orderReducer from './orderSlice';
import loyaltyReducer from './loyaltySlice';
import posIntegrationReducer from './posIntegrationSlice';
import userReducer from './userSlice';
import discountReducer from './discountSlice';
import serviceFeeReducer from './serviceFeeSlice';
import posProfileReducer from './posProfileSlice';
import providerReducer from './providerSlice';
import reviewReducer from './reviewSlice';
import guestReducer from './guestSlice';
import dashboardReducer from './dashboardSlice';
import cateringOrderReducer from './cateringOrderSlice';
import inventoryReducer from './inventorySlice';
import realtimeMetricsReducer from './realtimeMetricsSlice';

const rootReducer = combineReducers({
  auth: authSlice, // Remove .reducer, authSlice is already a reducer
  abTest: abTestReducer,
  clientBranding: clientBrandingReducer,
  clientConfig: clientConfigReducer,
  client: clientReducer,
  wallet: walletReducer,
  role: roleReducer,
  location: locationReducer,
  menu: menuReducer,
  order: orderReducer,
  loyalty: loyaltyReducer,
  posIntegration: posIntegrationReducer,
  user: userReducer,
  discount: discountReducer,
  serviceFee: serviceFeeReducer,
  posProfile: posProfileReducer,
  provider: providerReducer,
  review: reviewReducer,
  guest: guestReducer,
  dashboard: dashboardReducer,
  cateringOrder: cateringOrderReducer,
  inventory: inventoryReducer,
  realtimeMetrics: realtimeMetricsReducer,
});

export type RootState = ReturnType<typeof rootReducer>;

export default rootReducer;

================
File: frontend/src/redux/slices/salesReportSlice.ts
================
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface SalesData {
  date: string;
  totalSales: number;
  orderCount: number;
  averageOrderValue: number;
}

interface SalesReportState {
  dailySales: SalesData[];
  monthlySales: SalesData[];
  loading: boolean;
  error: string | null;
}

const initialState: SalesReportState = {
  dailySales: [],
  monthlySales: [],
  loading: false,
  error: null,
};

const salesReportSlice = createSlice({
  name: 'salesReport',
  initialState,
  reducers: {
    fetchSalesReportStart(state) {
      state.loading = true;
      state.error = null;
    },
    fetchDailySalesSuccess(state, action: PayloadAction<SalesData[]>) {
      state.dailySales = action.payload;
      state.loading = false;
    },
    fetchMonthlySalesSuccess(state, action: PayloadAction<SalesData[]>) {
      state.monthlySales = action.payload;
      state.loading = false;
    },
    fetchSalesReportFailure(state, action: PayloadAction<string>) {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const {
  fetchSalesReportStart,
  fetchDailySalesSuccess,
  fetchMonthlySalesSuccess,
  fetchSalesReportFailure,
} = salesReportSlice.actions;

export default salesReportSlice.reducer;

================
File: frontend/src/redux/slices/serviceFeeSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { ServiceFeeApi } from '../../api/serviceFeeApi';
import { ServiceFee } from '../../types/serviceFeeTypes';

interface ServiceFeeState {
  serviceFees: ServiceFee[];
  loading: boolean;
  error: string | null;
}

const initialState: ServiceFeeState = {
  serviceFees: [],
  loading: false,
  error: null,
};

// Use ServiceFeeApi instead of serviceFeeApi
export const fetchServiceFees = createAsyncThunk(
  'serviceFees/fetchServiceFees',
  async (clientId: string) => {
    const response = await ServiceFeeApi.getServiceFees(clientId);
    return response;
  }
);

export const createServiceFee = createAsyncThunk(
  'serviceFees/createServiceFee',
  async ({ clientId, serviceFee }: { clientId: string; serviceFee: Omit<ServiceFee, 'id'> }) => {
    const response = await ServiceFeeApi.createServiceFee(clientId, serviceFee);
    return response;
  }
);

const serviceFeeSlice = createSlice({
  name: 'serviceFee',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchServiceFees.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchServiceFees.fulfilled, (state, action) => {
        state.loading = false;
        state.serviceFees = action.payload;
      })
      .addCase(fetchServiceFees.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch service fees';
      })
      .addCase(createServiceFee.fulfilled, (state, action) => {
        state.serviceFees.push(action.payload);
      });
  },
});

export default serviceFeeSlice.reducer;

================
File: frontend/src/redux/slices/sessionSlice.ts
================
import { createSlice } from '@reduxjs/toolkit';
import { v4 as uuidv4 } from 'uuid';

const initialState = {
  id: localStorage.getItem('sessionId') || uuidv4(),
};

const sessionSlice = createSlice({
  name: 'session',
  initialState,
  reducers: {},
});

export default sessionSlice.reducer;

================
File: frontend/src/redux/slices/settingsSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import * as settingsApi from '../../api/settingsApi';
import { Settings } from '../../types/settingsTypes';

export const fetchSettings = createAsyncThunk(
  'settings/fetchSettings',
  async (clientId: number) => {
    return await settingsApi.fetchSettings(clientId);
  }
);

export const updateSettings = createAsyncThunk(
  'settings/updateSettings',
  async ({
    clientId,
    settings,
  }: {
    clientId: number;
    settings: Partial<Settings>;
  }) => {
    return await settingsApi.updateSettings(clientId, settings);
  }
);

interface SettingsState {
  data: Settings | null;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: SettingsState = {
  data: null,
  status: 'idle',
  error: null,
};

const settingsSlice = createSlice({
  name: 'settings',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchSettings.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchSettings.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.data = action.payload;
      })
      .addCase(fetchSettings.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || 'Failed to fetch settings';
      })
      .addCase(updateSettings.fulfilled, (state, action) => {
        state.data = action.payload;
      });
  },
});

export default settingsSlice.reducer;

================
File: frontend/src/redux/slices/tailwind.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom styles */
body {
  @apply font-sans text-gray-900;
}

button {
  @apply bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600;
}

input,
select,
textarea {
  @apply border border-gray-300 rounded p-2 w-full;
}

table {
  @apply min-w-full bg-white border border-gray-200;
}

thead {
  @apply bg-gray-100;
}

tbody tr:hover {
  @apply bg-gray-50;
}

================
File: frontend/src/redux/slices/types.ts
================
export interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  loading: boolean;
  error: string | null;
}

export interface MenuState {
  menus: Menu[];
  loading: boolean;
  error: string | null;
}

export interface ClientState {
  clients: Client[];
  loading: boolean;
  error: string | null;
}

export interface LocationState {
  locations: Location[];
  loading: boolean;
  error: string | null;
}

export interface OrderState {
  orders: Order[];
  loading: boolean;
  error: string | null;
}

export interface RoleState {
  roles: Role[];
  loading: boolean;
  error: string | null;
}

export interface User {
  id: number;
  username: string;
  email: string;
  role: string;
}

export interface Menu {
  id: number;
  name: string;
  groups: MenuGroup[];
}

export interface MenuGroup {
  id: number;
  name: string;
  items: MenuItem[];
}

export interface MenuItem {
  id: number;
  name: string;
  price: number;
  description: string;
}

export interface Client {
  id: number;
  name: string;
  subdomain: string;
  active: boolean;
}

export interface Location {
  id: number;
  name: string;
  address: string;
  posSystem: string;
  locationHours: string;
  posApiKey: string;
  posGuid: string;
  providerId?: number;
  serviceFee?: number;
}

export interface Order {
  id: number;
  clientId: number;
  items: OrderItem[];
  total: number;
  status: string;
}

export interface OrderItem {
  id: number;
  menuItemId: number;
  quantity: number;
  price: number;
}

export interface Role {
  id: number;
  name: string;
  permissions: string[];
}

export interface ServiceFee {
  id: number;
  name: string;
  amount: number;
}

export interface Provider {
  id: number;
  name: string;
  serviceFee: number;
}

export interface Discount {
  id: number;
  name: string;
  type: string;
  value: string;
  locationId: number | null;
  conditions: Record<string, unknown>;
  startDate: string;
  endDate: string;
}

================
File: frontend/src/redux/slices/userSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import api from '../../services/api';

export interface User {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  role: 'global_admin' | 'client_admin' | 'restaurant_manager' | 'staff';
  clientId?: string;
  restaurantName?: string;
  cuisineType?: string;
  phoneNumber?: string;
  address?: string;
  timeZone?: string;
}

interface UserState {
  currentUser: User | null;
  selectedLocation: string | null;
  loading: boolean;
  error: string | null;
}

const initialState: UserState = {
  currentUser: null,
  selectedLocation: null,
  loading: false,
  error: null,
};

export const updateUserProfile = createAsyncThunk(
  'user/updateProfile',
  async (userData: Partial<User>, { rejectWithValue }) => {
    try {
      const response = await api.put('/user/profile', userData);
      return response.data;
    } catch (error) {
      return rejectWithValue('Failed to update profile');
    }
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setCurrentUser: (state, action: PayloadAction<User | null>) => {
      state.currentUser = action.payload;
    },
    setSelectedLocation: (state, action: PayloadAction<string | null>) => {
      state.selectedLocation = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(updateUserProfile.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateUserProfile.fulfilled, (state, action) => {
        state.loading = false;
        state.currentUser = action.payload;
      })
      .addCase(updateUserProfile.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

export const { setCurrentUser, setSelectedLocation } = userSlice.actions;

export const selectCurrentUser = (state: RootState) => state.user.currentUser;
export const selectSelectedLocation = (state: RootState) => state.user.selectedLocation;

export default userSlice.reducer;

================
File: frontend/src/redux/slices/walletSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../rootReducer';
import { walletService } from '../../services/walletService';
import { Wallet, WalletTransaction } from '../../types/walletTypes';

interface Reward {
  id: string;
  name: string;
  // Add other relevant properties
}

interface Discount {
  id: string;
  name: string;
  // Add other relevant properties
}

interface WalletState {
  balance: number;
  rewards: Reward[];
  discounts: Discount[];
  loading: boolean;
  error: string | null;
}

const initialState: WalletState = {
  balance: 0,
  rewards: [],
  discounts: [],
  loading: false,
  error: null,
};

export const fetchWalletBalance = createAsyncThunk(
  'wallet/fetchBalance',
  async (_, { rejectWithValue }) => {
    try {
      const balance = await walletService.getBalance();
      return balance;
    } catch (error) {
      return rejectWithValue((error as Error).message);
    }
  }
);

export const addFunds = createAsyncThunk(
  'wallet/addFunds',
  async (amount: number, { rejectWithValue }) => {
    try {
      const updatedBalance = await walletService.addFunds(amount);
      return updatedBalance;
    } catch (error) {
      return rejectWithValue((error as Error).message);
    }
  }
);

// Ensure this async thunk is exported
export const loadWalletData = createAsyncThunk(
  'wallet/loadData',
  async (_, { rejectWithValue }) => {
    try {
      // Replace this with your actual API call
      const response = await fetch('/api/wallet');
      const data = await response.json();
      return data;
    } catch (error) {
      return rejectWithValue('Failed to load wallet data');
    }
  }
);

const walletSlice = createSlice({
  name: 'wallet',
  initialState,
  reducers: {
    // Add any synchronous actions here
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchWalletBalance.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchWalletBalance.fulfilled, (state, action: PayloadAction<number>) => {
        state.loading = false;
        state.balance = action.payload;
      })
      .addCase(fetchWalletBalance.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      })
      .addCase(addFunds.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(addFunds.fulfilled, (state, action: PayloadAction<number>) => {
        state.loading = false;
        state.balance = action.payload;
      })
      .addCase(addFunds.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

// Export the reducer
export default walletSlice.reducer;

// Export selectors
export const selectWalletBalance = (state: RootState) => state.wallet.balance;
export const selectWalletRewards = (state: RootState) => state.wallet.rewards;
export const selectWalletDiscounts = (state: RootState) => state.wallet.discounts;
export const selectWalletLoading = (state: RootState) => state.wallet.loading;
export const selectWalletError = (state: RootState) => state.wallet.error;

================
File: frontend/src/redux/rootReducer.ts
================
import { combineReducers } from '@reduxjs/toolkit';
import authReducer from './slices/authSlice';
import abTestReducer from './slices/abTestSlice';
import clientBrandingReducer from './slices/clientBrandingSlice';
import clientConfigReducer from './slices/clientConfigSlice';
import clientReducer from './slices/clientSlice';
import locationReducer from './slices/locationSlice';
import menuReducer from './slices/menuSlice';
import orderReducer from './slices/orderSlice';
import loyaltyReducer from './slices/loyaltySlice';
import posIntegrationReducer from './slices/posIntegrationSlice';
import userReducer from './slices/userSlice';
import walletReducer from './slices/walletSlice';
import discountReducer from './slices/discountSlice';
import serviceFeeReducer from './slices/serviceFeeSlice';
import posProfileReducer from './slices/posProfileSlice';
import providerReducer from './slices/providerSlice';
import reviewReducer from './slices/reviewSlice';
import roleReducer from './slices/roleSlice';
import guestReducer from './slices/guestSlice';
import revenueReducer from './slices/revenueSlice';
import dashboardReducer from './slices/dashboardSlice';
import cateringOrderReducer from './slices/cateringOrderSlice';
import inventoryReducer from './slices/inventorySlice';
import realtimeMetricsReducer from './slices/realtimeMetricsSlice';
import posSettingsReducer from './slices/posSettingsSlice';
import cartReducer from './slices/cartSlice'; // Add this line
import menuItemsReducer from './slices/menuItemsSlice';

const rootReducer = combineReducers({
  auth: authReducer,
  abTest: abTestReducer,
  clientBranding: clientBrandingReducer,
  clientConfig: clientConfigReducer,
  client: clientReducer,
  location: locationReducer,
  menu: menuReducer,
  order: orderReducer,
  loyalty: loyaltyReducer,
  posIntegration: posIntegrationReducer,
  user: userReducer,
  wallet: walletReducer,
  discount: discountReducer,
  serviceFee: serviceFeeReducer,
  posProfile: posProfileReducer,
  provider: providerReducer,
  review: reviewReducer,
  role: roleReducer,
  guest: guestReducer,
  revenue: revenueReducer,
  dashboard: dashboardReducer,
  cateringOrder: cateringOrderReducer,
  inventory: inventoryReducer,
  realtimeMetrics: realtimeMetricsReducer,
  posSettings: posSettingsReducer,
  cart: cartReducer, // Add this line
  menuItems: menuItemsReducer,
});

export type RootState = ReturnType<typeof rootReducer>;

export default rootReducer;

================
File: frontend/src/redux/store.ts
================
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './rootReducer';

export const store = configureStore({
  reducer: rootReducer,
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

================
File: frontend/src/services/abTestService.ts
================
import api from './api';
import { ABTest } from '../types/abTestTypes';

export const ABTestService = {
  fetchABTests: async (): Promise<ABTest[]> => {
    const response = await api.get('/ab-tests');
    return response.data;
  },
  createABTest: async (abTest: Omit<ABTest, 'id'>): Promise<ABTest> => {
    const response = await api.post('/ab-tests', abTest);
    return response.data;
  },
  updateABTest: async (id: string, abTest: Partial<ABTest>): Promise<ABTest> => {
    const response = await api.put(`/ab-tests/${id}`, abTest);
    return response.data;
  },
};

================
File: frontend/src/services/analyticsService.ts
================
import apiClient from '../api/apiClient';
import { SalesByCategory } from '../types/analyticsTypes';

export class AnalyticsService {
  async getSalesByCategory(startDate?: string, endDate?: string): Promise<SalesByCategory[]> {
    const response = await apiClient.get('/analytics/sales-by-category', {
      params: { startDate, endDate },
    });
    return response.data;
  }

  // Add other analytics-related methods here
}

================
File: frontend/src/services/api.ts
================
import axios, { AxiosInstance, InternalAxiosRequestConfig } from 'axios';

const api: AxiosInstance = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add a request interceptor
api.interceptors.request.use((config: InternalAxiosRequestConfig) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers = config.headers || {};
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  return config;
}, (error) => {
  return Promise.reject(error);
});

// Add a response interceptor
api.interceptors.response.use((response) => {
  return response;
}, (error) => {
  if (error.response && error.response.status === 401) {
    // Handle unauthorized access (e.g., redirect to login)
  }
  return Promise.reject(error);
});

export default api;

================
File: frontend/src/services/brandingService.ts
================
import axios from 'axios';
import { BrandingProfile } from '../types';

const API_URL = '/api/branding';

export const brandingService = {
  getBrandingProfiles: async (): Promise<BrandingProfile[]> => {
    const response = await axios.get(API_URL);
    return response.data;
  },

  createBrandingProfile: async (
    profileData: Partial<BrandingProfile>
  ): Promise<BrandingProfile> => {
    const response = await axios.post(API_URL, profileData);
    return response.data;
  },

  updateBrandingProfile: async (
    profileData: BrandingProfile
  ): Promise<BrandingProfile> => {
    const response = await axios.put(
      `${API_URL}/${profileData.id}`,
      profileData
    );
    return response.data;
  },

  deleteBrandingProfile: async (id: number): Promise<void> => {
    await axios.delete(`${API_URL}/${id}`);
  },
};

================
File: frontend/src/services/cateringOrderService.ts
================
import axios from 'axios';
import { CateringOrder, OrderStatus } from '../types/cateringTypes';

const API_URL = process.env.REACT_APP_API_URL || '/api';

export class CateringOrderService {
  async fetchOrders(
    clientId: string,
    status: string
  ): Promise<CateringOrder[]> {
    const response = await axios.get(
      `${API_URL}/clients/${clientId}/catering-orders`,
      {
        params: { status },
      }
    );
    return response.data;
  }

  async updateOrderStatus(
    clientId: string,
    orderId: number,
    newStatus: OrderStatus
  ): Promise<CateringOrder> {
    const response = await axios.patch(
      `${API_URL}/clients/${clientId}/catering-orders/${orderId}`,
      {
        status: newStatus,
      }
    );
    return response.data;
  }

  async deleteOrder(clientId: string, orderId: number): Promise<void> {
    await axios.delete(
      `${API_URL}/clients/${clientId}/catering-orders/${orderId}`
    );
  }

  // Add more methods as needed, such as creating a new order, fetching a single order, etc.
}

================
File: frontend/src/services/cateringService.ts
================
import axios from 'axios';
import { CateringOrder } from '../types/cateringTypes';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const fetchCateringOrders = async (
  tenantId: string
): Promise<CateringOrder[]> => {
  const response = await axios.get(
    `${API_BASE_URL}/tenants/${tenantId}/catering-orders`
  );
  return response.data;
};

export const updateCateringOrder = async (
  tenantId: string,
  order: CateringOrder
): Promise<CateringOrder> => {
  const response = await axios.put(
    `${API_BASE_URL}/tenants/${tenantId}/catering-orders/${order.id}`,
    order
  );
  return response.data;
};

export const deleteCateringOrder = async (
  tenantId: string,
  orderId: number
): Promise<void> => {
  await axios.delete(
    `${API_BASE_URL}/tenants/${tenantId}/catering-orders/${orderId}`
  );
};

================
File: frontend/src/services/clientBrandingService.ts
================
import api from './api';
import { ClientBranding } from '../types/clientTypes'; // Make sure to create this type

export const ClientBrandingService = {
  fetchClientBranding: async (clientId: string): Promise<ClientBranding> => {
    const response = await api.get(`/clients/${clientId}/branding`);
    return response.data;
  },
  updateClientBranding: async (clientId: string, brandingData: Partial<ClientBranding>): Promise<ClientBranding> => {
    const response = await api.patch(`/clients/${clientId}/branding`, brandingData);
    return response.data;
  },
};

================
File: frontend/src/services/clientConfigService.ts
================
import axios from 'axios';
import { ClientConfig } from '../types/clientTypes';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api';

export const clientConfigService = {
  async getClientConfig(clientId: string): Promise<ClientConfig> {
    const response = await axios.get<ClientConfig>(`${API_BASE_URL}/clients/${clientId}/config`);
    return response.data;
  },

  async updateClientConfig(clientId: string, config: Partial<ClientConfig>): Promise<ClientConfig> {
    const response = await axios.put<ClientConfig>(`${API_BASE_URL}/clients/${clientId}/config`, config);
    return response.data;
  },
};

================
File: frontend/src/services/clientService.ts
================
import api from './api';
import { ClientConfig, ClientMetrics } from '../types/clientTypes';

export const ClientService = {
  fetchClientConfig: async (): Promise<ClientConfig> => {
    const response = await api.get('/client-config');
    return response.data;
  },
  fetchClientMetrics: async (locationId: string): Promise<ClientMetrics> => {
    const response = await api.get(`/locations/${locationId}/client-metrics`);
    return response.data;
  },
  // ... other client-related methods
};

================
File: frontend/src/services/corePOSProfileService.ts
================
import axios from 'axios';
import { POSProfile, POSIntegration } from '../types/posTypes';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api';

export const corePOSProfileService = {
  async getCorePOSProfiles(clientId: string): Promise<POSProfile[]> {
    const response = await axios.get<POSProfile[]>(`${API_BASE_URL}/clients/${clientId}/core-pos-profiles`);
    return response.data;
  },

  async getCorePOSProfile(clientId: string, profileId: string): Promise<POSProfile> {
    const response = await axios.get<POSProfile>(`${API_BASE_URL}/clients/${clientId}/core-pos-profiles/${profileId}`);
    return response.data;
  },

  async createCorePOSProfile(clientId: string, profile: Omit<POSProfile, 'id'>): Promise<POSProfile> {
    const response = await axios.post<POSProfile>(`${API_BASE_URL}/clients/${clientId}/core-pos-profiles`, profile);
    return response.data;
  },

  async updateCorePOSProfile(clientId: string, profileId: string, profile: Partial<POSProfile>): Promise<POSProfile> {
    const response = await axios.put<POSProfile>(`${API_BASE_URL}/clients/${clientId}/core-pos-profiles/${profileId}`, profile);
    return response.data;
  },

  async deleteCorePOSProfile(clientId: string, profileId: string): Promise<void> {
    await axios.delete(`${API_BASE_URL}/clients/${clientId}/core-pos-profiles/${profileId}`);
  },

  async getPOSIntegrations(clientId: string, locationId: string): Promise<POSIntegration[]> {
    const response = await axios.get<POSIntegration[]>(`${API_BASE_URL}/clients/${clientId}/locations/${locationId}/pos-integrations`);
    return response.data;
  },

  async getPOSIntegration(clientId: string, locationId: string, integrationId: string): Promise<POSIntegration> {
    const response = await axios.get<POSIntegration>(`${API_BASE_URL}/clients/${clientId}/locations/${locationId}/pos-integrations/${integrationId}`);
    return response.data;
  },

  async createPOSIntegration(clientId: string, locationId: string, integration: Omit<POSIntegration, 'id'>): Promise<POSIntegration> {
    const response = await axios.post<POSIntegration>(`${API_BASE_URL}/clients/${clientId}/locations/${locationId}/pos-integrations`, integration);
    return response.data;
  },

  async updatePOSIntegration(clientId: string, locationId: string, integrationId: string, integration: Partial<POSIntegration>): Promise<POSIntegration> {
    const response = await axios.put<POSIntegration>(`${API_BASE_URL}/clients/${clientId}/locations/${locationId}/pos-integrations/${integrationId}`, integration);
    return response.data;
  },

  async deletePOSIntegration(clientId: string, locationId: string, integrationId: string): Promise<void> {
    await axios.delete(`${API_BASE_URL}/clients/${clientId}/locations/${locationId}/pos-integrations/${integrationId}`);
  },
};

================
File: frontend/src/services/dashboardService.ts
================
import axios from 'axios';
import { DashboardParams, DashboardData } from '../types/dashboardTypes';

export const fetchDashboardDataAPI = async (params: DashboardParams): Promise<DashboardData> => {
  const response = await axios.get<DashboardData>('/api/dashboard', { params });
  return response.data;
};

================
File: frontend/src/services/guestService.ts
================
import api from './api';
import { GuestMetrics } from '../types/guestTypes';

export const GuestService = {
  fetchGuestMetrics: async (locationId: string): Promise<GuestMetrics> => {
    const response = await api.get(`/locations/${locationId}/guest-metrics`);
    return response.data;
  },
};

================
File: frontend/src/services/inventoryService.ts
================
import axios from 'axios';
import { InventoryItem } from '../types';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api';

export const inventoryService = {
  async getInventory(): Promise<InventoryItem[]> {
    const response = await axios.get<InventoryItem[]>(`${API_BASE_URL}/inventory`);
    return response.data;
  },

  async getInventoryItem(id: string): Promise<InventoryItem> {
    const response = await axios.get<InventoryItem>(`${API_BASE_URL}/inventory/${id}`);
    return response.data;
  },

  async updateInventoryItem(item: InventoryItem): Promise<InventoryItem> {
    const response = await axios.put<InventoryItem>(`${API_BASE_URL}/inventory/${item.id}`, item);
    return response.data;
  },

  async createInventoryItem(item: Omit<InventoryItem, 'id'>): Promise<InventoryItem> {
    const response = await axios.post<InventoryItem>(`${API_BASE_URL}/inventory`, item);
    return response.data;
  },

  async deleteInventoryItem(id: string): Promise<void> {
    await axios.delete(`${API_BASE_URL}/inventory/${id}`);
  },
};

================
File: frontend/src/services/locationService.ts
================
import api from './api';
import { Location } from '../types/locationTypes';

export class LocationService {
  async getLocations(): Promise<Location[]> {
    const response = await api.get('/locations');
    return response.data;
  }

  async getLocation(id: string): Promise<Location> {
    const response = await api.get(`/locations/${id}`);
    return response.data;
  }

  // Add other location-related methods as needed
}

================
File: frontend/src/services/loyaltyService.ts
================
import axios from 'axios';
import { LoyaltyReward, LoyaltyConfig } from '../types';

const API_URL = '/api/loyalty';

export const loyaltyService = {
  getLoyaltyRewards: async (): Promise<LoyaltyReward[]> => {
    const response = await axios.get(`${API_URL}/rewards`);
    return response.data;
  },

  createLoyaltyReward: async (
    rewardData: Partial<LoyaltyReward>
  ): Promise<LoyaltyReward> => {
    const response = await axios.post(`${API_URL}/rewards`, rewardData);
    return response.data;
  },

  updateLoyaltyReward: async (
    rewardData: LoyaltyReward
  ): Promise<LoyaltyReward> => {
    const response = await axios.put(
      `${API_URL}/rewards/${rewardData.id}`,
      rewardData
    );
    return response.data;
  },

  deleteLoyaltyReward: async (id: number): Promise<void> => {
    await axios.delete(`${API_URL}/rewards/${id}`);
  },

  getLoyaltyConfig: async (): Promise<LoyaltyConfig> => {
    const response = await axios.get(`${API_URL}/config`);
    return response.data;
  },

  updateLoyaltyConfig: async (
    configData: LoyaltyConfig
  ): Promise<LoyaltyConfig> => {
    const response = await axios.put(`${API_URL}/config`, configData);
    return response.data;
  },
};

================
File: frontend/src/services/menuItemService.ts
================
import axios from 'axios';
import { MenuItem, MenuGroup } from '../types/menuTypes';

const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || 'http://localhost:3000/api';

export class MenuItemService {
  async getAllMenuItems(tenantId: string): Promise<MenuItem[]> {
    const response = await axios.get(
      `${API_BASE_URL}/tenants/${tenantId}/menu-items`
    );
    return response.data;
  }

  async getMenuItem(tenantId: string, menuItemId: number): Promise<MenuItem> {
    const response = await axios.get(
      `${API_BASE_URL}/tenants/${tenantId}/menu-items/${menuItemId}`
    );
    return response.data;
  }

  async createMenuItem(
    tenantId: string,
    menuItem: Omit<MenuItem, 'id'>
  ): Promise<MenuItem> {
    const response = await axios.post(
      `${API_BASE_URL}/tenants/${tenantId}/menu-items`,
      menuItem
    );
    return response.data;
  }

  async updateMenuItem(
    tenantId: string,
    menuItemId: number,
    menuItem: MenuItem
  ): Promise<MenuItem> {
    const response = await axios.put(
      `${API_BASE_URL}/tenants/${tenantId}/menu-items/${menuItemId}`,
      menuItem
    );
    return response.data;
  }

  async deleteMenuItem(tenantId: string, menuItemId: number): Promise<void> {
    await axios.delete(
      `${API_BASE_URL}/tenants/${tenantId}/menu-items/${menuItemId}`
    );
  }

  async getAllCategories(tenantId: string): Promise<MenuGroup[]> {
    const response = await axios.get(
      `${API_BASE_URL}/tenants/${tenantId}/categories`
    );
    return response.data;
  }
}

================
File: frontend/src/services/menuService.ts
================
import { Menu, MenuStatistics } from '../types/menuTypes';
import api from './api';

export const menuService = {
  getMenu: async (locationId: string): Promise<Menu> => {
    const response = await api.get(`/locations/${locationId}/menu`);
    return response.data;
  },

  getMenuStatistics: async (locationId: string): Promise<MenuStatistics> => {
    const response = await api.get(`/locations/${locationId}/menu/statistics`);
    return response.data;
  },

  updateMenu: async (locationId: string, menuId: string, menuData: Partial<Menu>): Promise<Menu> => {
    const response = await api.put(`/locations/${locationId}/menus/${menuId}`, menuData);
    return response.data;
  },

  // Other methods...
};

================
File: frontend/src/services/posIntegrationService.ts
================
import api from './api';
import { POSProfile } from '../types/posIntegrationTypes';

export const posIntegrationService = {
  getProfiles: async (): Promise<POSProfile[]> => {
    const response = await api.get('/core-pos-profiles');
    return response.data;
  },

  createProfile: async (profile: Partial<POSProfile>): Promise<POSProfile> => {
    const response = await api.post('/core-pos-profiles', profile);
    return response.data;
  },

  updateProfile: async (profile: POSProfile): Promise<POSProfile> => {
    const response = await api.put(`/core-pos-profiles/${profile.id}`, profile);
    return response.data;
  },

  deleteProfile: async (profileId: number): Promise<void> => {
    await api.delete(`/core-pos-profiles/${profileId}`);
  },

  syncProfile: async (profileId: number): Promise<void> => {
    await api.post(`/core-pos-profiles/${profileId}/sync`);
  },
};

================
File: frontend/src/services/posProfileService.ts
================
import api from './api';
import { LocationPOSProfile } from '../types/posTypes';

export const posProfileService = {
  getLocationProfiles: async (locationId: string): Promise<LocationPOSProfile[]> => {
    const response = await api.get(`/locations/${locationId}/pos-profiles`);
    return response.data;
  },

  updateLocationProfile: async (locationId: string, profile: Partial<LocationPOSProfile>): Promise<LocationPOSProfile> => {
    const response = await api.put(`/locations/${locationId}/pos-profiles/${profile.id}`, profile);
    return response.data;
  },

  // Add other methods as needed
};

================
File: frontend/src/services/posSettingService.ts
================
import api from './api';
import { POSSettings } from '../types/posSettingsTypes';

export const posSettingService = {
  getSettings: async (locationId: string): Promise<POSSettings> => {
    const response = await api.get(`/locations/${locationId}/pos-settings`);
    return response.data;
  },

  updateSettings: async (locationId: string, settings: Partial<POSSettings>): Promise<POSSettings> => {
    const response = await api.put(`/locations/${locationId}/pos-settings`, settings);
    return response.data;
  },
};

================
File: frontend/src/services/providerService.ts
================
import api from './api';
import { Provider, PaginatedResponse } from '../types/providerTypes';

export const providerService = {
  getProviders: async ({ page, limit }: { page: number; limit: number }): Promise<PaginatedResponse<Provider>> => {
    const response = await api.get('/providers', { params: { page, limit } });
    return response.data;
  },
  // Add other provider-related methods as needed
};

================
File: frontend/src/services/reviewService.ts
================
import api from './api';
import { Review } from '../types/reviewTypes';

export const reviewService = {
  getReviews: async (itemId: string): Promise<Review[]> => {
    const response = await api.get(`/reviews/${itemId}`);
    return response.data;
  },
  // Add other review-related methods as needed
};

================
File: frontend/src/services/userService.ts
================
import apiClient from '../api/apiClient';
import { User } from '../types/userTypes';

export class userService {
  async getUsers(): Promise<User[]> {
    const response = await apiClient.get('/users');
    return response.data;
  }

  async createUser(user: User): Promise<User> {
    const response = await apiClient.post('/users', user);
    return response.data;
  }

  async updateUser(id: string, user: User): Promise<User> {
    const response = await apiClient.put(`/users/${id}`, user);
    return response.data;
  }

  async deleteUser(id: string): Promise<void> {
    await apiClient.delete(`/users/${id}`);
  }
}

================
File: frontend/src/services/walletService.ts
================
import apiClient from '../api/apiClient';

class WalletService {
  async getBalance(): Promise<number> {
    const response = await apiClient.get('/wallet/balance');
    return response.data.balance;
  }

  async addFunds(amount: number): Promise<number> {
    const response = await apiClient.post('/wallet/add-funds', { amount });
    return response.data.balance;
  }

  // Add other wallet-related methods here
}

export const walletService = new WalletService();

================
File: frontend/src/store/clientSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export interface Client {
  id: number;
  name: string;
  subdomain: string;
  active: boolean;
}

interface ClientState {
  list: Client[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: ClientState = {
  list: [],
  status: 'idle',
  error: null,
};

// Async thunk for fetching clients
export const fetchClients = createAsyncThunk(
  'clients/fetchClients',
  async () => {
    const response = await fetch('/api/clients');
    if (!response.ok) throw new Error('Failed to fetch clients');
    return await response.json();
  }
);

// Async thunk for updating a client’s status
export const updateClientStatus = createAsyncThunk(
  'clients/updateClientStatus',
  async ({ clientId, status }: { clientId: number; status: boolean }) => {
    const response = await fetch(`/api/clients/${clientId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ active: status }),
    });
    if (!response.ok) throw new Error('Failed to update client status');
    return await response.json();
  }
);

const clientSlice = createSlice({
  name: 'clients',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchClients.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchClients.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.list = action.payload;
      })
      .addCase(fetchClients.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      })
      .addCase(updateClientStatus.fulfilled, (state, action) => {
        const index = state.list.findIndex(
          (client) => client.id === action.payload.id
        );
        if (index !== -1) {
          state.list[index] = action.payload;
        }
      });
  },
});

export default clientSlice.reducer;

================
File: frontend/src/store/discountSlice.ts
================
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import axios from '../api/axios';

interface Discount {
  id: number;
  name: string;
  value: number;
  type: string;
}

interface DiscountState {
  list: Discount[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: DiscountState = {
  list: [],
  status: 'idle',
  error: null,
};

export const fetchDiscounts = createAsyncThunk(
  'discounts/fetchDiscounts',
  async () => {
    const response = await axios.get<Discount[]>('/api/discounts');
    return response.data;
  }
);

export const createDiscount = createAsyncThunk(
  'discounts/createDiscount',
  async (discount: Omit<Discount, 'id'>) => {
    const response = await axios.post<Discount>('/api/discounts', discount);
    return response.data;
  }
);

export const updateDiscount = createAsyncThunk(
  'discounts/updateDiscount',
  async (discount: Discount) => {
    const response = await axios.put<Discount>(
      `/api/discounts/${discount.id}`,
      discount
    );
    return response.data;
  }
);

export const scheduleDiscountDrop = createAsyncThunk(
  'discounts/scheduleDiscountDrop',
  async (scheduleData: {
    discountId: number;
    guestIds: number[];
    scheduleTime: string;
  }) => {
    const response = await axios.post(
      '/api/discounts/schedule-drop',
      scheduleData
    );
    return response.data;
  }
);

const discountSlice = createSlice({
  name: 'discounts',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchDiscounts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(
        fetchDiscounts.fulfilled,
        (state, action: PayloadAction<Discount[]>) => {
          state.status = 'succeeded';
          state.list = action.payload;
        }
      )
      .addCase(fetchDiscounts.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      })
      .addCase(
        createDiscount.fulfilled,
        (state, action: PayloadAction<Discount>) => {
          state.list.push(action.payload);
        }
      )
      .addCase(
        updateDiscount.fulfilled,
        (state, action: PayloadAction<Discount>) => {
          const index = state.list.findIndex(
            (discount) => discount.id === action.payload.id
          );
          if (index !== -1) {
            state.list[index] = action.payload;
          }
        }
      )
      .addCase(scheduleDiscountDrop.fulfilled, () => {
        // Optionally handle the response from scheduling the discount drop
      });
  },
});

export default discountSlice.reducer;

================
File: frontend/src/store/index.ts
================
import { configureStore, combineReducers } from '@reduxjs/toolkit';
import authReducer from '../redux/slices/authSlice'; // Change to default import
import menuReducer from '../redux/slices/menuSlice';
import locationReducer from '../redux/slices/locationSlice';
import discountReducer from '../redux/slices/discountSlice';
import serviceFeeReducer from '../redux/slices/serviceFeeSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer, // Use authReducer directly
    menu: menuReducer,
    locations: locationReducer,
    discounts: discountReducer,
    serviceFees: serviceFeeReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

================
File: frontend/src/store/locationSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

interface Location {
  id: number;
  name: string;
  client: { name: string };
  isTestLocation: boolean;
}

interface LocationState {
  list: Location[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: LocationState = {
  list: [],
  status: 'idle',
  error: null,
};

export const fetchLocations = createAsyncThunk(
  'locations/fetchLocations',
  async () => {
    const response = await fetch('/api/locations');
    if (!response.ok) throw new Error('Failed to fetch locations');
    return await response.json();
  }
);

export const updateLocation = createAsyncThunk(
  'locations/updateLocation',
  async ({
    locationId,
    isTestLocation,
  }: {
    locationId: number;
    isTestLocation: boolean;
  }) => {
    const response = await fetch(`/api/locations/${locationId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ isTestLocation }),
    });
    if (!response.ok) throw new Error('Failed to update location');
    return await response.json();
  }
);

const locationSlice = createSlice({
  name: 'locations',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchLocations.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchLocations.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.list = action.payload;
      })
      .addCase(fetchLocations.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      })
      .addCase(updateLocation.fulfilled, (state, action) => {
        const index = state.list.findIndex(
          (location) => location.id === action.payload.id
        );
        if (index !== -1) {
          state.list[index] = action.payload;
        }
      });
  },
});

export default locationSlice.reducer;

================
File: frontend/src/store/menuSlice.ts
================
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Interfaces for the hierarchical structure
interface Modifier {
  id: number;
  name: string;
  price: number;
}

interface MenuItem {
  id: number;
  name: string;
  price: number;
  modifiers: Modifier[];
}

interface MenuGroup {
  id: number;
  name: string;
  items: MenuItem[];
}

interface Menu {
  id: number;
  name: string;
  groups: MenuGroup[];
}

interface MenuState {
  menus: Menu[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: MenuState = {
  menus: [],
  status: 'idle',
  error: null,
};

// Async thunk for fetching menu data
export const fetchMenus = createAsyncThunk('menu/fetchMenus', async () => {
  const response = await fetch('/api/menu'); // Adjust the endpoint as needed
  if (!response.ok) throw new Error('Failed to fetch menu data');
  return await response.json();
});

const menuSlice = createSlice({
  name: 'menu',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchMenus.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchMenus.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.menus = action.payload;
      })
      .addCase(fetchMenus.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || null;
      });
  },
});

export default menuSlice.reducer;

================
File: frontend/src/styles/tailwind.css
================
/* Add styles for the inventory management and guest-facing features */

.menu-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  padding: 20px;
}

.menu-item {
  background-color: #fff;
  border: 1px solid #ccc;
  padding: 10px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.menu-item:hover {
  background-color: #f9f9f9;
}

.menu-item.unavailable {
  opacity: 0.5;
  pointer-events: none;
}

.unavailable-overlay {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-weight: bold;
  color: red;
}

.order-page {
  padding: 20px;
}

================
File: frontend/src/types/abTestTypes.ts
================
export interface ABTest {
    id: number;
    name: string;
    description: string;
    variantA: string;
    variantB: string;
    isActive: boolean;
    clientId: number;
    locationId: number;
    startDate: string;
    endDate: string;
    createdAt: string;
    updatedAt: string;
}

export enum ABTestStatus {
    DRAFT = 'DRAFT',
    RUNNING = 'RUNNING',
    PAUSED = 'PAUSED',
    COMPLETED = 'COMPLETED',
    ARCHIVED = 'ARCHIVED'
}

export interface ABTestVariation {
    id: string;
    name: string;
    description: string;
    isControl: boolean;
    config: Record<string, any>; // Configuration specific to this variation
}

export interface ABTestMetric {
    id: string;
    name: string;
    description: string;
    type: ABTestMetricType;
    goal: ABTestMetricGoal;
}

export enum ABTestMetricType {
    CONVERSION = 'CONVERSION',
    REVENUE = 'REVENUE',
    ENGAGEMENT = 'ENGAGEMENT',
    CUSTOM = 'CUSTOM'
}

export enum ABTestMetricGoal {
    INCREASE = 'INCREASE',
    DECREASE = 'DECREASE'
}

export interface ABTestResults {
    variationResults: ABTestVariationResult[];
    winner?: string; // ID of the winning variation
    confidenceLevel: number;
    reportUrl?: string;
}

export interface ABTestVariationResult {
    variationId: string;
    metrics: Record<string, number>; // Metric ID to value mapping
    sampleSize: number;
    conversionRate?: number;
}

export interface CreateABTestInput {
    name: string;
    description: string;
    startDate: string;
    endDate: string;
    variations: Omit<ABTestVariation, 'id'>[];
    metrics: Omit<ABTestMetric, 'id'>[];
    clientId: number;
}

export interface UpdateABTestInput {
    id: string;
    name?: string;
    description?: string;
    startDate?: string;
    endDate?: string;
    status?: ABTestStatus;
    variations?: Omit<ABTestVariation, 'id'>[];
    metrics?: Omit<ABTestMetric, 'id'>[];
}

export interface ABTestCreateData {
    name: string;
    description: string;
    variantA: string;
    variantB: string;
    isActive: boolean;
    clientId: number;
    locationId: number;
    startDate: string;
    endDate: string;
}

export interface ABTestResult {
    id: number;
    abTestId: number;
    variant: 'A' | 'B';
    conversions: number;
    impressions: number;
    createdAt: string;
    updatedAt: string;
}

================
File: frontend/src/types/analyticsTypes.ts
================
export interface SalesByCategory {
  name: string;
  value: number;
}

export interface TopSellingItem {
  id: string;
  name: string;
  quantity: number;
  revenue: number;
}

// Add other analytics-related types as needed

================
File: frontend/src/types/authTypes.ts
================
export interface User {
  id: string;
  username: string;
  email: string;
  roles: string[];
  // Add other user properties as needed
}

================
File: frontend/src/types/cateringOrderTypes.ts
================
import { Order, OrderItem } from './orderTypes';

export interface CateringOrder extends Omit<Order, 'id'> {
  id: number; // Override the id type to number
  eventDate: Date;
  eventType: string;
  deliveryAddress: string;
  specialInstructions?: string;
}

export interface CateringOrderItem extends OrderItem {
  cateringSpecificField?: string;
}

// Remove the duplicate CateringOrder interface
// export interface CateringOrder { ... }

export type OrderStatus = 'pending' | 'confirmed' | 'completed' | 'cancelled';

export interface OrderStatistics {
  totalOrders: number;
  totalRevenue: number;
  averageOrderValue: number;
  // ... other properties
}

// ... other types

export interface Provider {
  // Define provider properties
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
}

================
File: frontend/src/types/cateringTypes.ts
================
export interface CateringOrder {
  id: number;
  clientId: string;
  customerName: string;
  orderDate: string;
  deliveryDate: string;
  status: OrderStatus;
  total: number;
  items: CateringOrderItem[];
  // Add more fields as needed
}

export interface CateringOrderItem {
  id: number;
  name: string;
  quantity: number;
  price: number;
  // Add more fields as needed
}

export interface CateringOrderItemModifier {
  id: number;
  modifierId: number;
  name: string;
  price: number;
}

export enum OrderStatus {
  PENDING = 'pending',
  CONFIRMED = 'confirmed',
  PREPARING = 'preparing',
  READY = 'ready',
  OUT_FOR_DELIVERY = 'out_for_delivery',
  DELIVERED = 'delivered',
  CANCELLED = 'cancelled',
}

export interface OrderStatistics {
  totalOrders: number;
  pendingOrders: number;
  completedOrders: number;
  cancelledOrders: number;
  totalRevenue: number;
  // Add more statistics as needed
}

================
File: frontend/src/types/challengeTypes.ts
================
export interface Challenge {
  id: number;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  reward: string;
  // Add any other properties that a Challenge should have
}

================
File: frontend/src/types/clientTypes.ts
================
import { POSType } from './posIntegrationTypes';

export interface ClientPreferences {
  id: number;
  clientId: number;
  language: string;
  currency: string;
  timeFormat: '12h' | '24h';
  dateFormat: string;
  timezone: string;
}

export interface Client {
  id: number;
  name: string;
  subdomain: string;
  email: string;
  phoneNumber: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
  active: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface ClientBranding {
  id: number;
  clientId: number;
  logoUrl: string;
  primaryColor: string;
  secondaryColor: string;
  fontFamily: string;
  customCss: string;
}

export interface ClientConfig {
  id: string;
  name: string;
  settings: Record<string, any>;
  theme: string;
  features: string[]
  // Add other properties as needed
}

export interface ClientData {
  name: string;
  domain: string;
  primaryColor: string;
  secondaryColor: string;
  logo: string;
  features: {
    loyalty: boolean;
    onlineOrdering: boolean;
    tableReservations: boolean;
  };
}

export interface ClientCreateData {
  name: string;
  subdomain: string;
  email: string;
  phoneNumber: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
}

export interface ClientMetrics {
  totalClients: number;
  newClients: number;
  activeClients: number;
  averageOrderValue: number;
  repeatClientRate: number;
  clientRetentionRate: number;
  clientLifetimeValue: number;
  averageOrdersPerClient: number;
  topClients: {
    clientId: string;
    name: string;
    totalOrders: number;
    totalSpent: number;
  }[];
  clientSatisfactionScore: number;
  lastUpdated: string; // ISO date string
}

================
File: frontend/src/types/dashboardTypes.ts
================
import { Dayjs } from 'dayjs';

export interface DateRange {
  startDate: Date | null;
  endDate: Date | null;
}

export interface DashboardParams {
  dateRange: DateRange;
  clientId?: string;
  locationId?: string;
}

export interface DashboardData {
  totalOrders?: number;
  revenue?: number;
  averageOrderValue?: number;
  customerRetentionRate?: number;
  revenueOverTime?: ChartData;
  orderTrends?: ChartData;
  menuPerformance?: ChartData;
  customerInsights?: ChartData;
  locationComparison?: LocationComparisonData;
}

export interface ChartData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor?: string;
    borderColor?: string;
    borderWidth?: number;
  }[];
}

export interface LocationComparisonData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor: string;
  }[];
}

export interface DashboardStats {
    totalOrders: number;
    totalRevenue: number;
    averageOrderValue: number;
    topSellingItems: TopSellingItem[];
    newCustomers: number;
    returningCustomers: number;
  }
  
  export interface TopSellingItem {
    itemId: string;
    itemName: string;
    quantity: number;
    revenue: number;
  }

================
File: frontend/src/types/dateTypes.ts
================
export interface DateRange {
  startDate: Date | null;
  endDate: Date | null;
}

================
File: frontend/src/types/discountTypes.ts
================
export interface Discount {
    id: string;
    clientId: string;
    name: string;
    code: string;
    type: 'PERCENTAGE' | 'FIXED_AMOUNT';
    value: number;
    startDate: Date;
    endDate: Date;
    isActive: boolean;
    description?: string;
  }

================
File: frontend/src/types/guestTypes.ts
================
export interface Guest {
    id: string;
    name: string;
    email: string;
    phone?: string;
    lastVisit?: Date;
    visitCount: number;
    preferences?: string[];
  }

export interface GuestMetrics {
  totalGuests: number;
  newGuests: number;
  activeGuests: number;
  averageOrderValue: number;
  repeatGuestRate: number;
  guestRetentionRate: number;
  guestLifetimeValue: number;
  averageOrdersPerGuest: number;
  topGuests: {
    guestId: string;
    name: string;
    totalOrders: number;
    totalSpent: number;
  }[];
  guestSatisfactionScore: number;
  lastUpdated: string;
}

================
File: frontend/src/types/index.ts
================
import type {
  POSType as ImportedPOSType,
  CorePOSProfile,
  LocationPOSProfile,
  POSMenuItem,
  POSCategory,
  POSOrder,
  POSOrderItem,
} from './posTypes';
import type { User } from './userTypes';
import type { Order, OrderItem, OrderStatus } from './orderTypes';
import type { POSIntegration as POSIntegrationType } from './posIntegrationTypes';
import type { Provider } from './providerTypes';
import type { PaginatedResponse } from './paginationTypes';
import type { LocationProfile } from './locationTypes';
import type { Menu, MenuGroup } from './menuTypes';

export type { Provider, PaginatedResponse };

export * from './userTypes';
export * from './clientTypes';
export * from './locationTypes';
export * from './menuTypes';
export type { Order, OrderItem, OrderStatus };
export * from './cateringOrderTypes';
export * from './inventoryTypes';
export * from './posTypes';
export type { POSIntegrationType };
export * from './loyaltyTypes';
export * from './walletTypes';
export * from './guestTypes';
export * from './revenueTypes';
export * from './serviceFeeTypes';
export * from './discountTypes';

export type { POSType as POSTypeAlias } from './posTypes';

export interface RealtimeMetrics {
  todaySales: number;
  todayOrders: number;
  averageOrderValue: number;
  newGuests: number;
  activeGuests: number;
  topSellingItems: Array<{ itemId: string; itemName: string; quantity: number }>;
}

export interface Challenge {
  id: number;
  name: string;
  description: string;
  startDate: string;
  endDate: string;
  reward: string;
  clientId: string;
  locationId: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface TopSellingItem {
  id: number;
  name: string;
  quantity: number;
  revenue: number;
}

export interface ClientConfig {
  id: string;
  name: string;
  settings: Record<string, any>;
}

export interface AuthResponse {
  token: string;
  user: User;
}

export type UserRole = 'admin' | 'manager' | 'staff' | 'customer';

export type POSType = ImportedPOSType;

export interface ServiceFee {
  id: string;
  clientId: string;
  name: string;
  amount: number;
  type: 'FIXED' | 'PERCENTAGE';
}

export interface DashboardStats {
  totalOrders: number;
  totalRevenue: number;
  averageOrderValue: number;
  topSellingItems: { itemId: string; itemName: string; quantity: number }[];
}

export interface InventoryItem {
  id: string;
  name: string;
  quantity: number;
  unit: string;
  lowStockThreshold: number;
}

export interface Discount {
  id: string;
  clientId: string;
  name: string;
  code: string;
  type: 'PERCENTAGE' | 'FIXED_AMOUNT';
  value: number;
  startDate: string;
  endDate: string;
  isActive: boolean;
}

export interface Guest {
  id: string;
  name: string;
  email: string;
  phone?: string;
  lastVisit?: string;
}

export interface CateringOrder extends Order {
  eventDate: string;
  eventType: string;
  deliveryAddress: string;
  specialInstructions?: string;
}

export interface RevenueData {
  date: string;
  totalRevenue: number;
  orderCount: number;
}

export interface Settings {
  id: string;
  clientId: string;
  theme: {
    primaryColor: string;
    secondaryColor: string;
    fontFamily: string;
  };
  notifications: {
    email: boolean;
    sms: boolean;
    push: boolean;
  };
}

export type { Menu, MenuGroup, MenuItem } from './menuTypes';
export type { LocationProfile } from './locationTypes';

================
File: frontend/src/types/inventoryTypes.ts
================
export interface InventoryItem {
  id: number;
  name: string;
  quantity: number;
  unit: string;
  reorderPoint: number;
  tenantId: string;
}

================
File: frontend/src/types/locationTypes.ts
================
export interface LocationProfile {
  id: string;
  name: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
  gpsCoordinates: {
    latitude: number;
    longitude: number;
  };
  standardHours: {
    open: string;
    close: string;
  }[];
  temporaryHours?: {
    startDate: string;
    endDate: string;
    open: string;
    close: string;
  }[];
  image?: string;
}

export interface LocationUpdateData {
  name?: string;
  address?: string;
  phoneNumber?: string;
  // ... other updatable location fields
}

export interface Location {
  id: string;
  name: string;
  address: string;
  city: string;
  latitude: number;
  longitude: number;
  isDropoffSite: boolean;
  // Add other properties as needed
}

export interface LocationCreateData {
  name: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  country: string;
  phoneNumber: string;
  email: string;
  timezone: string;
  isActive: boolean;
  clientId: number;
}

export interface LocationHours {
  id: number;
  locationId: number;
  dayOfWeek: number;
  openTime: string;
  closeTime: string;
  isClosed: boolean;
}

export interface LocationMenu {
  id: number;
  locationId: number;
  name: string;
  description: string;
  isActive: boolean;
  items: MenuItem[];
}

export interface MenuItem {
  id: number;
  menuId: number;
  name: string;
  description: string;
  price: number;
  isAvailable: boolean;
}

================
File: frontend/src/types/loyaltyTypes.ts
================
export interface LoyaltyReward {
    id: string;
    name: string;
    description: string;
    pointsRequired: number;
    reward: string;
  }
  
  export interface LoyaltyConfig {
    id: string;
    clientId: string;
    pointsPerDollar: number;
    expirationPeriod: number; // in days
  }
  
  export interface LoyaltyTransaction {
    id: string;
    userId: string;
    points: number;
    type: 'EARN' | 'REDEEM';
    description: string;
    createdAt: Date;
  }

================
File: frontend/src/types/menuTypes.ts
================
export interface Menu {
  id: string;
  locationId: string;
  name: string;
  menuGroups: MenuGroup[];
}

export interface MenuGroup {
  id: string;
  name: string;
  items: MenuItem[];
}

export interface MenuItem extends BaseMenuItem {
  localOverrides: LocalOverrides;
  modifierGroups: {
    id: string;
    name: string;
    modifiers: Modifier[];
  }[];
}

export interface BaseMenuItem {
  id: string;
  posId: string;
  name: string;
  description: string;
  price: number;
  // Other common fields
}

export interface Modifier extends BaseModifier {
  localOverrides: LocalOverrides;
}

export interface BaseModifier {
  id: string;
  posId: string;
  name: string;
  price: number;
  // Other common fields
}

export interface LocalOverrides {
  name?: string;
  description?: string;
  price?: number;
  onlineInventoryCount?: number;
  isAvailable?: boolean;
  loyaltyPointsPrice?: number;
  // Other fields that can be overridden
}

export interface CartItem {
  menuItem: {
    id: string;
    posId: string;
    name: string;
    price: number;
  };
  quantity: number;
  selectedModifiers: Modifier[];
}

export interface MenuStatistics {
  totalItems: number;
  averagePrice: number;
  mostPopularItem: string;
  leastPopularItem: string;
  averageOrderValue: number;
  // Add any other relevant statistics for your multi-location restaurant system
}

================
File: frontend/src/types/orderTypes.ts
================
export interface Order {
  id: string;
  clientId: string;
  customerId: string;
  items: OrderItem[];
  total: number;
  status: OrderStatus;
  createdAt: Date;
  updatedAt: Date;
}

export interface OrderItem {
  id: string;
  menuItemId: string;
  quantity: number;
  price: number;
  selectedModifiers: SelectedModifier[];
}

export interface SelectedModifier {
  id: string;
  name: string;
  price: number;
}

export interface Modifier {
  id: string;
  name: string;
  price: number;
}

export enum OrderStatus {
  PENDING = 'PENDING',
  PROCESSING = 'PROCESSING',
  COMPLETED = 'COMPLETED',
  CANCELLED = 'CANCELLED'
}

================
File: frontend/src/types/paginationTypes.ts
================
export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

================
File: frontend/src/types/posIntegrationTypes.ts
================
export interface POSIntegration {
  id: number;
  tenantId: string;
  posType: POSType;
  apiKey: string;
  isActive: boolean;
  lastSyncDate: string;
}

export enum POSType {
  TOAST = 'TOAST',
  SQUARE = 'SQUARE',
  CLOVER = 'CLOVER',
  REVEL = 'REVEL',
}

export interface POSProfile {
  id: number;
  tenantId: string;
  posType: POSType;
  apiKey: string;
  isActive: boolean;
  lastSyncDate: string;
  name: string;
  apiEndpoint: string;
}

================
File: frontend/src/types/posSettingsTypes.ts
================
export interface POSSettings {
  id: string;
  locationId: string;
  posProfileId: string; // References the template POS profile
  posSystem: string;
  apiKey: string;
  apiEndpoint: string;
  menuSyncEnabled: boolean;
  inventorySyncEnabled: boolean;
  orderSyncEnabled: boolean;
  lastSyncTimestamp: string | null;
  syncFrequency: number;
  customSettings: Record<string, string | number | boolean>;
}

================
File: frontend/src/types/posTypes.ts
================
export type POSType = 'Toast' | 'Square' | 'Clover' | 'Revel' | 'Other';

export interface CorePOSProfile {
  // Define your CorePOSProfile properties here
}

export interface LocationPOSProfile {
  id: string;
  locationId: string;
  corePOSProfileId: string;
  lastSyncStatus: 'SUCCESS' | 'FAILED' | 'IN_PROGRESS' | 'NOT_SYNCED';
  lastSyncError?: string;
  customSettings: Record<string, string | number | boolean>;
}

export interface POSMenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  categoryId: string;
  externalId: string;
}

export interface POSCategory {
  id: string;
  name: string;
  externalId: string;
}

export interface POSOrder {
  id: string;
  externalId: string;
  total: number;
  status: string;
  items: POSOrderItem[];
  createdAt: string;
  updatedAt: string;
}

export interface POSOrderItem {
  id: string;
  name: string;
  quantity: number;
  price: number;
  externalId: string;
}

export interface POSIntegration {
  id: string;
  name: string;
  type: string;
  // Add other properties as needed
}

export interface POSProfile {
  id: string;
  name: string;
  // Add other properties as needed
}

================
File: frontend/src/types/providerTypes.ts
================
export interface Provider {
  id: string;
  name: string;
  // Add other provider properties as needed
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number; // Add this line
}

================
File: frontend/src/types/revenueTypes.ts
================
export interface RevenueData {
    date: string;
    totalRevenue: number;
    orderCount: number;
    averageOrderValue: number;
    topSellingItems: TopSellingItem[];
  }
  
  export interface TopSellingItem {
    itemId: string;
    itemName: string;
    quantity: number;
    revenue: number;
  }

================
File: frontend/src/types/reviewTypes.ts
================
export interface ReviewCreateData {
  orderId: string;
  rating: number;
  comment: string;
  // ... other fields needed for creating a review
}

export interface Review {
  id: string;
  orderId: string;
  rating: number;
  comment: string;
  createdAt: string;
  // ... other review fields
}

================
File: frontend/src/types/roleTypes.ts
================
export interface Role {
    id: string;
    name: string;
    permissions: string[];
  }
  
  export interface Permission {
    id: string;
    name: string;
    description: string;
  }

================
File: frontend/src/types/serviceFeeTypes.ts
================
export interface ServiceFee {
    id: string;
    clientId: string;
    name: string;
    amount: number;
    type: 'FIXED' | 'PERCENTAGE';
    description?: string;
  }

================
File: frontend/src/types/settingsTypes.ts
================
export interface Settings {
    id: string;
    clientId: string;
    theme: ThemeSettings;
    notifications: NotificationSettings;
    general: GeneralSettings;
  }
  
  export interface ThemeSettings {
    primaryColor: string;
    secondaryColor: string;
    fontFamily: string;
  }
  
  export interface NotificationSettings {
    email: boolean;
    sms: boolean;
    push: boolean;
  }
  
  export interface GeneralSettings {
    language: string;
    timezone: string;
  }

================
File: frontend/src/types/tenantTypes.ts
================
export interface Tenant {
  id: string;
  name: string;
  subdomain: string;
  plan: TenantPlan;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export enum TenantPlan {
  BASIC = 'BASIC',
  PREMIUM = 'PREMIUM',
  ENTERPRISE = 'ENTERPRISE',
}

================
File: frontend/src/types/userTypes.ts
================
export enum UserRole {
  EMPLOYEE = 'EMPLOYEE',
  MANAGER = 'MANAGER',
  ADMIN = 'ADMIN',
  GUEST = 'GUEST',
  CLIENT_ADMIN = 'CLIENT_ADMIN',
  GLOBAL_ADMIN = 'GLOBAL_ADMIN',
  // Add other roles as needed
}

export interface User {
  id: string;
  email: string;
  role: UserRole;
  clientId: string;
}

export interface AuthResponse {
  token: string;
  user: User;
}

================
File: frontend/src/types/walletTypes.ts
================
export interface Wallet {
    id: string;
    balance: number;
    userId: string;
    // Add other relevant properties
}

export interface WalletTransaction {
    id: string;
    walletId: string;
    amount: number;
    type: 'CREDIT' | 'DEBIT';
    description: string;
    createdAt: Date;
    // Add other relevant properties
}

================
File: frontend/src/utils/abTestUtils.ts
================
import { SHA256 } from 'crypto-js';

export const generateConsistentHash = (
  userId: string | null,
  sessionId: string,
  testId: string
): number => {
  const input = `${userId || sessionId}-${testId}`;
  const hash = SHA256(input);
  return parseInt(hash.toString().slice(0, 8), 16);
};

export function getVariantForUser(
  userId: string,
  sessionId: string,
  testId: string,
  variantA: string,
  variantB: string
): string {
  // Implement your A/B test variant selection logic here
  // This is a simple example, you might want to use a more sophisticated method
  const hash = hashString(`${userId}${sessionId}${testId}`);
  return hash % 2 === 0 ? variantA : variantB;
}

function hashString(str: string): number {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  return Math.abs(hash);
}

================
File: frontend/src/utils/auth.ts
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export const withAuth = <P extends object>(
  WrappedComponent: React.ComponentType<P>
) => {
  const WithAuth: React.FC<P> = (props) => {
    const { user } = useAuth();
    const navigate = useNavigate();

    React.useEffect(() => {
      if (!user) {
        navigate('/login');
      }
    }, [user, navigate]);

    if (!user) {
      return null;
    }

    return React.createElement(WrappedComponent, props);
  };

  return WithAuth;
};

// Add other auth-related utility functions here

================
File: frontend/src/utils/errorHandler.js
================
import { toast } from 'react-toastify';

export const handleApiError = (error) => {
  const message =
    error.response?.data?.message || 'An unexpected error occurred';
  toast.error(message);
  console.error('API Error:', error);
};

================
File: frontend/src/utils/errorHandler.ts
================
import { toast } from 'react-toastify';
import { AxiosError } from 'axios';

export const handleApiError = (error: AxiosError | Error): void => {
  let errorMessage = 'An unexpected error occurred';

  if (error instanceof AxiosError) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      errorMessage = error.response.data.message || 'An error occurred';
    } else if (error.request) {
      // The request was made but no response was received
      errorMessage = 'No response received from server';
    } else {
      // Something happened in setting up the request that triggered an Error
      errorMessage = error.message || 'An unexpected error occurred';
    }
  } else {
    errorMessage = error.message || 'An unexpected error occurred';
  }

  // Display error message using toast
  toast.error(errorMessage);

  // Log the error for debugging purposes
  console.error('API Error:', error);
};

================
File: frontend/src/utils/exportUtils.ts
================
import { Workbook } from 'exceljs';

interface ExportData {
  [key: string]: string | number | boolean | Date;
}

export const exportToCSV = (data: ExportData[], filename: string): void => {
  const csvContent =
    'data:text/csv;charset=utf-8,' +
    data.map((row) => Object.values(row).join(',')).join('\n');

  const encodedUri = encodeURI(csvContent);
  const link = document.createElement('a');
  link.setAttribute('href', encodedUri);
  link.setAttribute('download', `${filename}.csv`);
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const exportToExcel = async (
  data: ExportData[],
  filename: string
): Promise<void> => {
  const workbook = new Workbook();
  const worksheet = workbook.addWorksheet('Sheet 1');

  // Add headers
  const headers = Object.keys(data[0]);
  worksheet.addRow(headers);

  // Add data
  data.forEach((item) => {
    worksheet.addRow(Object.values(item));
  });

  // Generate Excel file
  const buffer = await workbook.xlsx.writeBuffer();
  const blob = new Blob([buffer], {
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  });
  const url = window.URL.createObjectURL(blob);

  // Trigger download
  const link = document.createElement('a');
  link.href = url;
  link.download = `${filename}.xlsx`;
  link.click();

  // Clean up
  window.URL.revokeObjectURL(url);
};

================
File: frontend/src/utils/logger.ts
================
const logger = {
  error: (...args: any[]) => {
    console.error(...args);
  },
  warn: (...args: any[]) => {
    console.warn(...args);
  },
  info: (...args: any[]) => {
    console.log(...args);
  },
  debug: (...args: any[]) => {
    if (process.env.NODE_ENV !== 'production') {
      console.log(...args);
    }
  },
};

export default logger;

================
File: frontend/src/utils/socket.ts
================
import io from 'socket.io-client';
import { POSAlert } from '../types';

export const initializeSocket = () => {
  const socket = io('http://localhost:3001'); // Replace with your server URL

  socket.on('connect', () => {
    console.log('Connected to WebSocket server');
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from WebSocket server');
  });

  socket.on('posAlert', (alert: POSAlert) => {
    console.log('Received POS Alert:', alert);
    // In a real application, you would dispatch an action to update the Redux store
  });

  return socket;
};

================
File: frontend/src/utils/subdomain.ts
================
export const getSubdomain = (): string | null => {
  const hostname = window.location.hostname;
  const parts = hostname.split('.');
  if (parts.length > 2 && parts[0] !== 'www') {
    return parts[0];
  }
  return null;
};

================
File: frontend/src/utils/themeUtils.ts
================
import { createTheme as createMuiTheme } from '@mui/material/styles';
import { ClientBranding } from '../types';

export const createTheme = (branding: ClientBranding) => {
  return createMuiTheme({
    palette: {
      primary: {
        main: branding.primaryColor,
      },
      secondary: {
        main: branding.secondaryColor,
      },
    },
    typography: {
      fontFamily: branding.fontFamily,
    },
    components: {
      MuiButton: {
        styleOverrides: {
          root: {
            borderRadius: branding.buttonStyle === 'rounded' ? '20px' : '0px',
          },
        },
      },
    },
  });
};

================
File: frontend/src/App.css
================
.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

.App-link {
  color: #61dafb;
}

================
File: frontend/src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { CartProvider } from './contexts/CartContext';
import ProtectedRoute from './components/ProtectedRoute';
import Checkout from './components/guest/Checkout';
import Login from './components/Login'; // Update import path
import Home from './components/Home'; // Update import path

function App() {
  return (
    <AuthProvider>
      <CartProvider>
        <Router>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <ProtectedRoute path="/checkout" component={Checkout} />
            {/* Add more routes as needed */}
          </Routes>
        </Router>
      </CartProvider>
    </AuthProvider>
  );
}

export default App;

================
File: frontend/src/App.tsx
================
import React from 'react';
import { AuthProvider } from './context/AuthContext';
import {
  BrowserRouter as Router,
  Route,
  Routes,
  Navigate,
} from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from './redux/store';
import { ClientProvider } from './context/ClientContext';
import { useClientContext } from './context/ClientContext';
import AdminPanel from './components/admin/AdminPanel';
import Menu from './components/guest/Menu';
import Login from './components/Login';
import Dashboard from './pages/Dashboard';
import PrivateRoute from './components/PrivateRoute';
import HomePage from './pages/HomePage';
import BusinessAdminDashboard from './pages/BusinessAdminDashboard';
import AdminDashboard from './pages/AdminDashboard';
import CheckoutPage from './pages/CheckoutPage';
import UserManagement from './pages/UserManagement';
import OrderConfirmation from './pages/OrderConfirmation';
import { UserRole } from './types/userTypes';

const App: React.FC = () => {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<Login />} />
          <Route path="/menu/:locationId" element={<Menu />} />

          <Route
            element={
              <PrivateRoute
                allowedRoles={[
                  UserRole.GUEST,
                  UserRole.CLIENT_ADMIN,
                  UserRole.GLOBAL_ADMIN,
                ]}
              />
            }
          >
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/cart" element={<CheckoutPage />} />
            <Route path="/checkout" element={<CheckoutPage />} />
            <Route
              path="/order-confirmation/:orderId"
              element={<OrderConfirmation />}
            />
          </Route>

          <Route
            element={
              <PrivateRoute
                allowedRoles={[UserRole.CLIENT_ADMIN, UserRole.GLOBAL_ADMIN]}
              />
            }
          >
            <Route path="/admin" element={<AdminPanel />} />
            <Route path="/admin-dashboard" element={<AdminDashboard />} />
            <Route path="/business-admin" element={<BusinessAdminDashboard />} />
            <Route path="/user-management" element={<UserManagement />} />
          </Route>

          <Route path="*" element={<Navigate to="/login" replace />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
};

const AppWithClientProvider: React.FC = () => (
  <ClientProvider>
    <App />
  </ClientProvider>
);

export default AppWithClientProvider;

================
File: frontend/src/ClientContext.tsx
================
import React, { createContext, useContext, useState, ReactNode } from 'react';

interface ClientContextType {
  clientId: string | null;
  setClientId: (id: string | null) => void;
}

const ClientContext = createContext<ClientContextType | undefined>(undefined);

export const ClientProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [clientId, setClientId] = useState<string | null>(null);

  const value = React.useMemo(() => ({ clientId, setClientId }), [clientId]);

  return (
    <ClientContext.Provider value={value}>{children}</ClientContext.Provider>
  );
};

export const useClient = (): ClientContextType => {
  const context = useContext(ClientContext);
  if (context === undefined) {
    throw new Error('useClient must be used within a ClientProvider');
  }
  return context;
};

================
File: frontend/src/component-types.txt
================
(
()
(data
(dateRange
(discountedTotal
(error
(id
(item
(locationId
(user
0
0,
1
1,
2
2,
3,
345,
4
400,
6,
ABTest)
Challenge)
CustomerMetrics
Date
Discount[]
DropOffLocation)
DropResult)
Error)
Error,
ErrorInfo)
FC<LayoutProps>
InventoryItem[]
Item
KeyboardEvent<HTMLDivElement>)
Location
Location)
LocationUpdateData)
Location[]
LoginFormInputs)
LoyaltyChallenge
LoyaltyReward)
LoyaltyTier
Menu
MenuGroup
MenuItem
MenuItem)
MenuItem,
Modifier[]
Number(feeAmount),
Omit<CorePOSProfile,
Omit<Discount,
Omit<ServiceFee,
POSProfile)
POSType
Partial<CorePOSProfile>
Partial<LoyaltyChallenge>
Provider)
React
ReactNode
RevenueData[]
RootState)
SalesByCategory)
SelectChangeEvent<ChallengeType>)
State
SubmitHandler<LoginFormInputs>
Theme
UserRole[]
[
[Dayjs,
[]
[],
[number,
[string,
[updatedGroup]
activeMenu
any
any)
any,
boolean
boolean)
branding
challenge
clientId
data
defaultPosition
discountName,
e
editingCampaign
event
false,
feeName,
formData
formattedEndDate
formattedStartDate,
getAlertSeverity(alert
item
keyof
loc
location
name
new
newGroupName
newGroups,
newItemDescription,
newItemName,
newStatus
newTiers
null}
number
number)
number,
parseFloat(discountValue
parseFloat(e
parseFloat(minPurchaseAmount),
parseFloat(newItemPrice),
parseFloat(value),
parseInt(e
parseInt(maxUses,
string
string)
string,
true
true,
undefined
unknown
updatedItems
updatedLocation
updatedMenu
value
value,
{
{JSON
{alert
{challenge
{currentMetric[1]}
{currentProgress}
{error}
{error}<
{fee
{guestProfile
{item
{lastSyncTime
{location
{new
{posProfiles
{selectedLocation

================
File: frontend/src/defined-types.txt
================
AuthResponse
CateringOrder
Challenge
ClientConfig
DashboardStats
Discount
Guest
InventoryItem
Menu
MenuGroup
MenuItem
MenuItem
Modifier
POSType
RealtimeMetrics
RevenueData
ServiceFee
Settings
TopSellingItem
UserRole

================
File: frontend/src/env.d.ts
================
declare namespace NodeJS {
  interface ProcessEnv {
    NODE_ENV: 'development' | 'production' | 'test';
    PUBLIC_URL: string;
  }
}

================
File: frontend/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --color-primary: #3b82f6;
  --color-secondary: #1e40af;
  --color-accent: #f59e0b;
  --font-primary: 'Roboto', sans-serif;
  --font-secondary: 'Open Sans', sans-serif;
  --button-shape: 0.5rem;
}

body {
  font-family: var(--font-primary);
  background-color: var(--color-primary);
  color: var(--font-secondary);
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--font-primary);
  color: var(--color-secondary);
}

button {
  background-color: var(--color-accent);
  border-radius: var(--button-shape);
  font-family: var(--font-secondary);
  padding: 0.5rem 1rem;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: var(--color-secondary);
}

a {
  color: var(--color-accent);
  text-decoration: none;
  font-family: var(--font-secondary);
}

a:hover {
  text-decoration: underline;
}

input, select, textarea {
  border: 1px solid var(--color-secondary);
  padding: 0.5rem;
  font-family: var(--font-primary);
  border-radius: var(--button-shape);
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: var(--color-accent);
}

.btn-primary {
  background-color: var(--color-primary);
  color: white;
  border-radius: var(--button-shape);
}

.btn-secondary {
  background-color: var(--color-secondary);
  color: white;
  border-radius: var(--button-shape);
}

.bg-primary { background-color: var(--color-primary); }
.bg-secondary { background-color: var(--color-secondary); }
.bg-accent { background-color: var(--color-accent); }
.text-primary { color: var(--color-primary); }
.text-secondary { color: var(--color-secondary); }
.text-accent { color: var(--color-accent); }

.brand-header {
  background-image: var(--header-background-url);
  background-color: var(--color-primary);
  color: var(--font-color);
  padding: 1rem;
}

.brand-footer {
  background-color: var(--color-secondary);
  color: var(--font-color);
  padding: 1rem;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

@media (max-width: 768px) {
  body { font-size: 0.875rem; }
  h1 { font-size: 1.5rem; }
  .brand-header, .brand-footer { padding: 0.75rem; }
}

================
File: frontend/src/index.tsx
================
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from './redux/store';
import App from './App';
import './index.css';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter as Router } from 'react-router-dom';
import { ThemeProvider } from './components/ThemeProvider';
import { ClientBrandingProvider } from './components/ClientBrandingProvider';
import { ErrorBoundary } from './components/ErrorBoundary';

ReactDOM.render(
  <React.StrictMode>
    <ErrorBoundary>
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <Router>
            <ThemeProvider>
              <ClientBrandingProvider>
                <App />
              </ClientBrandingProvider>
            </ThemeProvider>
          </Router>
        </PersistGate>
      </Provider>
    </ErrorBoundary>
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.register();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

// Add any additional initialization or global setup here

================
File: frontend/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: frontend/src/missing-types.txt
================
(
()
(data
(dateRange
(discountedTotal
(error
(id
(item
(locationId
(user
0
0,
1
1,
2
2,
3,
345,
4
400,
6,
ABTest)
Challenge)
CustomerMetrics
Date
Discount[]
DropOffLocation)
DropResult)
Error)
Error,
ErrorInfo)
FC<LayoutProps>
InventoryItem[]
Item
KeyboardEvent<HTMLDivElement>)
Location
Location)
LocationUpdateData)
Location[]
LoginFormInputs)
LoyaltyChallenge
LoyaltyReward)
LoyaltyTier
MenuItem)
MenuItem,
Modifier[]
Number(feeAmount),
Omit<CorePOSProfile,
Omit<Discount,
Omit<ServiceFee,
POSProfile)
Partial<CorePOSProfile>
Partial<LoyaltyChallenge>
Provider)
React
ReactNode
RevenueData[]
RootState)
SalesByCategory)
SelectChangeEvent<ChallengeType>)
State
SubmitHandler<LoginFormInputs>
Theme
UserRole[]
[
[Dayjs,
[]
[],
[number,
[string,
[updatedGroup]
activeMenu
any
any)
any,
boolean
boolean)
branding
challenge
clientId
data
defaultPosition
discountName,
e
editingCampaign
event
false,
feeName,
formData
formattedEndDate
formattedStartDate,
getAlertSeverity(alert
item
keyof
loc
location
name
new
newGroupName
newGroups,
newItemDescription,
newItemName,
newStatus
newTiers
null}
number
number)
number,
parseFloat(discountValue
parseFloat(e
parseFloat(minPurchaseAmount),
parseFloat(newItemPrice),
parseFloat(value),
parseInt(e
parseInt(maxUses,
string
string)
string,
true
true,
undefined
unknown
updatedItems
updatedLocation
updatedMenu
value
value,
{
{JSON
{alert
{challenge
{currentMetric[1]}
{currentProgress}
{error}
{error}<
{fee
{guestProfile
{item
{lastSyncTime
{location
{new
{posProfiles
{selectedLocation

================
File: frontend/src/reducers.ts
================
import rootReducer from './redux/rootReducer';

export default rootReducer;

================
File: frontend/src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: frontend/src/routes.tsx
================
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import { UserRole } from './types/userTypes';
import PrivateRoute from './components/PrivateRoute';
import Dashboard from './pages/Dashboard';
import GuestLandingPage from './pages/GuestLandingPage';
import Login from './pages/Login';
import Menu from './pages/Menu';
import OrderConfirmation from './pages/OrderConfirmation';
import LocationManagement from './pages/LocationManagement';
import MenuBuilder from './pages/MenuBuilder';
import OrderPage from './pages/OrderPage';
import OrderScheduling from './pages/OrderScheduling';
import PosProfilePage from './pages/PosProfilePage';
import ProfilePage from './pages/ProfilePage';
import Wallet from './pages/Wallet';
import ClientLocationsPage from './pages/ClientLocationsPage';
import ABTestManagement from './pages/ABTestManagement';
import AdminDashboard from './pages/AdminDashboard';
import AdminDiscounts from './pages/AdminDiscounts';
import AdminLocationManagement from './pages/AdminLocationManagement';
import AdminLoyaltyManagement from './pages/AdminLoyaltyManagement';
import AdminLoyaltyRewards from './pages/AdminLoyaltyRewards';
import AdminMenuManagement from './pages/AdminMenuManagement';
import AdminWalletManagement from './pages/AdminWalletManagement';
import BrandingManagement from './pages/BrandingManagement';
import BrandingSettings from './pages/BrandingSettings';
import BusinessAdminDashboard from './pages/BusinessAdminDashboard';
import CateringMenuItems from './pages/CateringMenuItems';
import CateringMenus from './pages/CateringMenus';
import CateringOrderAssignments from './pages/CateringOrderAssignments';
import CateringOrders from './pages/CateringOrders';
import ClientSettings from './pages/ClientSettings';
import GlobalAdminDashboard from './pages/GlobalAdminDashboard';
import GuestMenuPage from './pages/GuestMenuPage';
import GuestProfile from './pages/GuestProfile';
import HomePage from './pages/HomePage';
import Inventory from './pages/Inventory';
import InventoryManagement from './pages/InventoryManagement';
import LoyaltyManagement from './pages/LoyaltyManagement';
import MenuManagementAdmin from './pages/MenuManagementAdmin';
import MenuPage from './pages/MenuPage';
import POSSettingsPage from './pages/PosSettingsPage';
import Register from './pages/Register';
import ReportingDashboard from './pages/ReportingDashboard';
import UserManagement from './pages/UserManagement';
import AdminPanel from './pages/AdminPanel'; // Add this import

const AppRoutes: React.FC = () => {
  return (
    <Routes>
      <Route path="/" element={<GuestLandingPage />} />
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/menu/:locationId" element={<Menu />} />
      <Route
        path="/order-confirmation/:orderId"
        element={<OrderConfirmation />}
      />
      <Route path="/guest-menu" element={<GuestMenuPage />} />
      <Route path="/home" element={<HomePage />} />

      <Route
        element={
          <PrivateRoute
            allowedRoles={[
              UserRole.GUEST,
              UserRole.CLIENT_ADMIN,
              UserRole.GLOBAL_ADMIN,
            ]}
          />
        }
      >
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/profile" element={<ProfilePage />} />
        <Route path="/wallet" element={<Wallet />} />
        <Route path="/guest-profile" element={<GuestProfile />} />
        <Route path="/order" element={<OrderPage />} />
        <Route path="/order-scheduling" element={<OrderScheduling />} />
      </Route>

      <Route
        element={
          <PrivateRoute
            allowedRoles={[UserRole.CLIENT_ADMIN, UserRole.GLOBAL_ADMIN]}
          />
        }
      >
        <Route path="/admin-dashboard" element={<AdminDashboard />} />
        <Route
          path="/business-admin-dashboard"
          element={<BusinessAdminDashboard />}
        />
        <Route path="/locations" element={<AdminLocationManagement />} />
        <Route path="/menu-management" element={<AdminMenuManagement />} />
        <Route path="/menu-builder" element={<MenuBuilder />} />
        <Route
          path="/loyalty-management"
          element={<AdminLoyaltyManagement />}
        />
        <Route path="/loyalty-rewards" element={<AdminLoyaltyRewards />} />
        <Route path="/discounts" element={<AdminDiscounts />} />
        <Route path="/wallet-management" element={<AdminWalletManagement />} />
        <Route path="/branding-management" element={<BrandingManagement />} />
        <Route path="/branding-settings" element={<BrandingSettings />} />
        <Route path="/catering-menus" element={<CateringMenus />} />
        <Route path="/catering-menu-items" element={<CateringMenuItems />} />
        <Route path="/catering-orders" element={<CateringOrders />} />
        <Route
          path="/catering-order-assignments"
          element={<CateringOrderAssignments />}
        />
        <Route path="/inventory" element={<Inventory />} />
        <Route path="/inventory-management" element={<InventoryManagement />} />
        <Route path="/pos-settings" element={<POSSettingsPage />} />
        <Route path="/pos-profile" element={<PosProfilePage />} />
        <Route path="/reporting" element={<ReportingDashboard />} />
        <Route path="/user-management" element={<UserManagement />} />
        <Route path="/ab-test-management" element={<ABTestManagement />} />
        <Route path="/client-locations" element={<ClientLocationsPage />} />
        <Route path="/client-settings" element={<ClientSettings />} />
      </Route>

      <Route element={<PrivateRoute allowedRoles={[UserRole.GLOBAL_ADMIN]} />}>
        <Route
          path="/global-admin"
          element={<AdminPanel isGlobalAdmin={true} />}
        />
      </Route>
    </Routes>
  );
};

export default AppRoutes;

================
File: frontend/src/serviceWorker.ts
================
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

type Config = {
  onSuccess?: (registration: ServiceWorkerRegistration) => void;
  onUpdate?: (registration: ServiceWorkerRegistration) => void;
};

export function register(config?: Config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://bit.ly/CRA-PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl: string, config?: Config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl: string, config?: Config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

================
File: frontend/src/serviceWorkerRegistration.ts
================
// serviceWorkerRegistration.ts

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    window.location.hostname === '[::1]' ||
    window.location.hostname.match(/^127(?:\.[0-9]+){0,2}\.[0-9]+$/)
);

type Config = {
  onSuccess?: (registration: ServiceWorkerRegistration) => void;
  onUpdate?: (registration: ServiceWorkerRegistration) => void;
};

export function register(config?: Config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    const publicUrl = new URL(
      process.env.PUBLIC_URL || '',
      window.location.href
    );

    if (publicUrl.origin !== window.location.origin) {
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        checkValidServiceWorker(swUrl, config);

        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl: string, config?: Config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              console.log('Content is cached for offline use.');

              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl: string, config?: Config) {
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

================
File: frontend/src/setupProxy.js
================
import { createProxyMiddleware } from 'http-proxy-middleware';

export default function setupProxy(app) {
  app.use(
    '/api',
    createProxyMiddleware({
      target: 'https://localhost:5000',
      changeOrigin: true,
      secure: false, // Accept self-signed certificates
    })
  );
}

================
File: frontend/src/theme.ts
================
import { createTheme } from '@mui/material/styles';
import { DefaultTheme } from 'styled-components';

const muiTheme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
    },
    secondary: {
      main: '#dc004e',
    },
  },
});

const styledTheme: DefaultTheme = {
  colors: {
    primary: muiTheme.palette.primary.main,
    secondary: muiTheme.palette.secondary.main,
    background: muiTheme.palette.background.default,
    text: muiTheme.palette.text.primary,
  },
  fontSizes: {
    small: '0.8rem',
    medium: '1rem',
    large: '1.2rem',
  },
};

export { muiTheme as default, styledTheme };

================
File: frontend/src/types.ts
================
import { store } from './redux/store';

// Define RootState and AppDispatch types
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

// Define the UserRole type
export type UserRole = 'admin' | 'manager' | 'user';

// Define the OrderType
export type OrderType = 'pickup' | 'delivery' | 'dine-in' | 'catering';

// Define the Reward interface
export interface Reward {
  id: string;
  name: string;
  description: string;
  pointsRequired: number;
}

// Define the interfaces for various entities used in the app

export interface LoyaltyReward {
  id: number;
  name: string;
  pointsRequired: number;
  description?: string;
  expirationDate?: string;
  isActive: boolean;
}

export interface LoyaltyTier {
  id: number;
  firstName: string;
  lastName: string;
  loyaltyPoints: number;
}

export interface Location {
  id: number;
  name: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  phoneNumber: string;
  email: string;
  latitude: number;
  longitude: number;
  imageUrl?: string;
  corePOSProfileId?: number;
  posApis?: string[];
  isDropoffSite?: boolean;
  dropOffLocations?: DropOffLocation[];
  twoFactorException: boolean;
  paymentGatewayExceptions: PaymentGateway[];
}

export interface Wallet {
  balance: number;
  guestId: number;
  id?: number;
  discounts?: Discount[];
}

export interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  modifiers: Modifier[];
  defaultModifiers: Modifier[];
  reviewsEnabled: boolean;
  averageRating?: number;
  reviewCount?: number;
  showQuantityAvailable: boolean;
  quantityAvailable?: number;
}

export interface Modifier {
  id: string;
  name: string;
  price: number;
}

export interface MenuGroup {
  id: number;
  name: string;
  items: MenuItem[];
}

export interface Menu {
  id: number;
  name: string;
  description?: string;
  groups: MenuGroup[];
}

export interface BrandingProfile {
  id: number;
  clientId: number;
  name: string;
  logoUrl: string;
  primaryColor: string;
  secondaryColor: string;
  fontColor: string;
  secondaryFontColor?: string;
}

export interface BrandingState {
  profiles: BrandingProfile[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface ServiceFee {
  id: number;
  name: string;
  amount: number;
  value: number;
}

export interface Client {
  id: number;
  name: string;
  subdomain: string;
  active: boolean;
}

export interface Order {
  id: string;
  items: CartItem[];
  orderType: OrderType;
  subtotal: number;
  tax: number;
  total: number;
  appliedDiscounts: Reward[];
  kitchenTip?: number;
  driverTip?: number;
}

export interface OrderItem {
  id: string;
  name: string;
  quantity: number;
  modifications?: string[];
}

export interface Role {
  id: number;
  name: string;
  permissions: string[];
}

export interface User {
  id: number;
  name: string;
  email: string;
  role: UserRole;
  firstName?: string;
  lastName?: string;
}

export interface POSProfile {
  id: number;
  name: string;
  provider: string;
}

export interface POSProfileState {
  profiles: POSProfile[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface Discount {
  id: number;
  name: string;
  type: 'percentage' | 'fixed' | 'bogo';
  value: number;
  code?: string;
  startDate: Date;
  endDate: Date;
  isActive: boolean;
  usageLimit?: number;
  usageCount: number;
  minPurchaseAmount?: number;
  maxDiscountAmount?: number;
  applicableItems?: string;
  applicableCategories?: string;
}

export interface LoyaltyConfig {
  tiers: { tierName: string }[];
}

export interface CartItem {
  menuItem: {
    id: string;
    name: string;
    price: number;
  };
  quantity: number;
  selectedModifiers: {
    [key: string]: string | number | boolean;
  };
}

export interface DashboardStat {
  id: number;
  label: string;
  value: number | string;
}

export interface CateringOrder extends Order {
  eventDate: string;
  specialInstructions: string;
}

export interface InventoryItem {
  id: number;
  name: string;
  quantity: number;
  unit: string;
  reorderPoint: number;
}

// Redux Slice State Types
export interface ClientState {
  clients: Client[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface OrderState {
  orders: Order[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  permissions: string[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface WalletState {
  balance: number;
  rewards: LoyaltyReward[];
  discounts: Discount[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface LocationState {
  locations: Location[];
  selectedLocation: Location | null;
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface MenuState {
  menus: Menu[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface BrandingState {
  profiles: BrandingProfile[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface LoyaltyState {
  rewards: LoyaltyReward[];
  config: LoyaltyConfig;
  userPoints: number;
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

export interface RoleState {
  roles: Role[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface DiscountState {
  list: Discount[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

export interface CartState {
  items: CartItem[];
  discount: Discount | null;
}

export interface GuestState {
  profile: unknown;
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface UserState {
  profile: User | null;
  rewards: unknown[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface ServiceFeeState {
  serviceFees: ServiceFee[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface InventoryState {
  items: InventoryItem[];
  status: 'idle' | 'loading' | 'failed' | 'succeeded';
  error: string | null;
}

export interface GuestProfile {
  id: number;
  firstName: string;
  lastName: string;
  name: string;
  email: string;
  loyaltyPoints: number;
  loyaltyTier: string;
}

export interface DashboardState {
  stats: DashboardStat[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

export interface CateringOrderState {
  orders: CateringOrder[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

// General Utility Types
export interface ApiResponse<T> {
  data: T;
  success: boolean;
  message: string;
}

export interface ClientBranding {
  id: string;
  clientId: string;
  logo: string;
  favicon: string;
  primaryColor: string;
  secondaryColor: string;
  accentColor: string;
  fontFamily: string;
  buttonStyle: 'rounded' | 'square';
  headerStyle: 'centered' | 'left-aligned';
  footerContent: string;
}

// Define the AuthResponse type
export interface AuthResponse {
  user: User;
  token: string;
  permissions?: string[]; // Include permissions if it's part of the response
}

export interface DropOffTime {
  id: number;
  time: string;
}

export interface DropOffLocation {
  id: number;
  name: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  parentLocationId: number;
  dropOffTimes: DropOffTime[];
}

export interface LoyaltyChallenge {
  id: number;
  name: string;
  description: string;
  conditions: {
    itemCount: number;
    timeframe: string;
    minSpend: number;
    frequency:
      | 'unlimited'
      | 'once_per_day'
      | 'once_per_week'
      | 'once_per_month';
    restrictedMenuItems?: number[];
    restrictedMenuGroups?: number[];
  };
  rewardConfig: {
    reward: string;
    points: number;
    discount: number;
  };
  challengeType: 'purchase-based' | 'engagement-based';
  startDate: Date;
  endDate: Date;
  status: 'active' | 'inactive' | 'completed' | 'archived';
  participantCount: number;
  locationId: number;
  clientId: number;
}

// Add this to the existing types
export interface LoyaltyChallengeProgress {
  id: number;
  challengeId: number;
  guestId: number;
  progress: {
    itemCount?: number;
    totalSpend?: number;
    // Add other relevant progress fields
  };
  isCompleted: boolean;
  completedAt?: Date;
}

export interface POSAlert {
  id: number;
  posProfileId: number;
  errorCode: string;
  message: string;
  timestamp: Date;
}

export interface RealtimeMetrics {
  todaySales: number;
  todayOrders: number;
  averageOrderValue: number;
  newGuests: number;
  returningGuests: number;
  mostPopularItem: string;
}

export enum PaymentGateway {
  STRIPE = 'stripe',
  PAYPAL = 'paypal',
  FINIX = 'finix',
  AEDYN = 'aedyn',
  WORLDPAY = 'worldpay',
}

export interface ClientSettings {
  companyName: string;
  supportEmail: string;
  twoFactorRequired: boolean;
  defaultPaymentGateways: PaymentGateway[];
}

================
File: frontend/ssl/server.cert
================
-----BEGIN CERTIFICATE-----
MIIDkzCCAnugAwIBAgIUGdpXEHQgv57ILEs9jYbX85OuZiowDQYJKoZIhvcNAQEL
BQAwWTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM
GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDESMBAGA1UEAwwJbG9jYWxob3N0MB4X
DTI0MDgyNTE3NDEzNFoXDTI0MDkyNDE3NDEzNFowWTELMAkGA1UEBhMCQVUxEzAR
BgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5
IEx0ZDESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
MIIBCgKCAQEAuOQlMPzv0zFr37uQmVERF+iw+T/z7M1ixsvh+5WiNIzLcScj5IXl
QGp81Fthno/9ZwLsoUPWImjA+y0Eo80i6mqOHp2rQWgLlVxwysXD+Qj4x6OcXdUT
M6XzmSi462gABcl/ng/HgUUTaUS6D3cYuS1IW/t4Toavm1JftOx6EnWzPRldv1M9
z47q6Z7F942CboDLu8pNZUqdntm1hKqrYGngOjekTHd5iuGVJiBUY/MPJPMO8LfI
jgV/f1L7XP93j/ayM9N2WkD8n83hgvvdpzNpO9ZZI7PeoICLhVRTbYWp+PikYesa
dU/PBTUGXol8sOY/kq1pOQAnJa737GOeDwIDAQABo1MwUTAdBgNVHQ4EFgQUh66Z
h/uU4KXCqAml+GfDdjK7HUUwHwYDVR0jBBgwFoAUh66Zh/uU4KXCqAml+GfDdjK7
HUUwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEARrGSEkYBgVQO
S8NbQInCsMced0pWe+sxZMaY7kX5+E89rQmxSShwA7xWkWz8ajHIXgy4IyWjMCzv
Hn1OTV2oP/95KFwBN4uy7k99oQwShTceQfz7Ohy54sGbh2HzpxSvFd3/zc/kZ1Fq
u34s3tIDZ/p+17idT43PYzB2ai8yKLxpzRPY0CznT+/+tZkyVrPPCa9QO3li9drI
YSxHUgYaf9DoMGKpoRoGHd+55Q8rbLMWNyB0vLcv3OlNMshX2k8CIELBWIWnMSRm
tKJmrvi3svrCC8W1xR1YYCGb3WSJ3pNCRR+7PJlC0IruDn07qDVTei0TvDQb3wSO
3cJKwiR8sA==
-----END CERTIFICATE-----

================
File: frontend/.dockerignore
================
node_modules
logs
.git
*.log

================
File: frontend/.env
================
REACT_APP_API_URL=https://localhost:5000/api

================
File: frontend/.eslintignore
================
build/

================
File: frontend/.eslintrc.js
================
module.exports = {
  parser: '@typescript-eslint/parser',
  extends: [
    'plugin:react/recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsx-a11y/recommended',
    'prettier', // This ensures Prettier rules are applied last
  ],
  plugins: [
    'react',
    '@typescript-eslint',
    'react-hooks',
    'jsx-a11y',
    'prettier',
  ],
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
  rules: {
    'react/react-in-jsx-scope': 'off', // Since React 17, this is not necessary
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
    'prettier/prettier': ['error', { endOfLine: 'auto' }],
    'react/prop-types': 'off', // We're using TypeScript for type checking
    'jsx-a11y/no-noninteractive-element-interactions': 'warn',
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
};

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/.prettierrc
================
{
  "singleQuote": true,
  "trailingComma": "es5",
  "tabWidth": 2,
  "semi": true
}

================
File: frontend/Dockerfile
================
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]

================
File: frontend/nginx.conf
================
server {
    listen 80;
    server_name localhost;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name localhost;

    ssl_certificate /etc/nginx/ssl/server.cert;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https://64.23.178.198; frame-ancestors 'none'; object-src 'none';" always;

    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    location /api {
        proxy_pass https://64.23.178.198:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_ssl_verify off;
    }

    location ~* \.(?:css|js)$ {
        root /usr/share/nginx/html;
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
    }
}

================
File: frontend/package-lock.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.1.0",
      "dependencies": {
        "@axe-core/react": "^4.9.1",
        "@emotion/react": "^11.13.3",
        "@emotion/styled": "^11.13.0",
        "@googlemaps/google-maps-services-js": "^3.4.0",
        "@mui/icons-material": "^5.16.7",
        "@mui/material": "^5.16.7",
        "@mui/x-date-pickers": "^7.15.0",
        "@mui/x-date-pickers-pro": "^7.15.0",
        "@react-google-maps/api": "^2.19.3",
        "@reduxjs/toolkit": "^2.2.7",
        "@sentry/react": "^8.27.0",
        "@tanstack/react-query": "^5.51.23",
        "@testing-library/jest-dom": "^5.17.0",
        "@testing-library/react": "^13.4.0",
        "@testing-library/user-event": "^13.5.0",
        "@types/jest": "^27.5.2",
        "@types/moment": "^2.13.0",
        "@types/node": "^16.18.89",
        "@types/react": "^18.2.64",
        "@types/react-beautiful-dnd": "^13.1.8",
        "@types/react-color": "^3.0.12",
        "@types/react-datepicker": "^4.19.6",
        "@types/react-dom": "^18.2.21",
        "@types/react-redux": "^7.1.33",
        "@types/redux-logger": "^3.0.13",
        "@types/styled-components": "^5.1.34",
        "@types/yup": "^0.32.0",
        "antd": "^5.20.2",
        "autoprefixer": "^10.4.20",
        "axios": "^1.7.6",
        "chart.js": "^4.4.4",
        "date-fns": "^3.6.0",
        "dayjs": "^1.11.13",
        "exceljs": "^4.4.0",
        "focus-trap-react": "^10.2.3",
        "formik": "^2.4.6",
        "framer-motion": "^11.3.28",
        "leaflet": "^1.9.4",
        "moment": "^2.30.1",
        "moment-timezone": "^0.5.45",
        "react": "^18.3.1",
        "react-beautiful-dnd": "^13.1.1",
        "react-chartjs-2": "^5.2.0",
        "react-color": "^2.19.3",
        "react-colorful": "^5.6.1",
        "react-datepicker": "^7.3.0",
        "react-dom": "^18.3.1",
        "react-helmet-async": "^2.0.5",
        "react-hook-form": "^7.53.0",
        "react-intl": "^6.6.8",
        "react-leaflet": "^4.2.1",
        "react-leaflet-markercluster": "^3.0.0-rc1",
        "react-query": "^3.39.3",
        "react-redux": "^9.1.2",
        "react-router-dom": "^6.26.1",
        "react-scripts": "5.0.1",
        "react-toastify": "^10.0.5",
        "recharts": "^2.12.7",
        "redux": "^5.0.1",
        "redux-logger": "^3.0.6",
        "redux-persist": "^6.0.0",
        "reselect": "^5.1.1",
        "socket.io": "^4.7.5",
        "socket.io-client": "^4.7.5",
        "styled-components": "^6.1.12",
        "tailwindcss": "^3.4.10",
        "typescript": "^4.9.5",
        "uuid": "^10.0.0",
        "web-vitals": "^2.1.4",
        "yup": "^1.4.0"
      },
      "devDependencies": {
        "@types/chart.js": "^2.9.41",
        "@types/crypto-js": "^4.2.2",
        "@types/express": "^4.17.21",
        "@types/leaflet": "^1.9.12",
        "@types/react-leaflet": "^3.0.0",
        "@types/react-leaflet-markercluster": "^3.0.4",
        "@types/socket.io-client": "^3.0.0",
        "@types/uuid": "^10.0.0",
        "@typescript-eslint/eslint-plugin": "^5.62.0",
        "@typescript-eslint/parser": "^5.62.0",
        "eslint": "^8.57.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-plugin-prettier": "^5.2.1",
        "eslint-plugin-react": "^7.35.0",
        "eslint-plugin-react-hooks": "^4.6.2",
        "prettier": "^3.3.3",
        "serve": "^14.2.1",
        "source-map-explorer": "^2.5.3"
      }
    },
    "node_modules/@adobe/css-tools": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@adobe/css-tools/-/css-tools-4.4.0.tgz",
      "integrity": "sha512-Ff9+ksdQQB3rMncgqDK78uLznstjyfIf2Arnh22pW8kBpLs6rpKDwgnZT46hin5Hl1WzazzK64DOrhSwYpS7bQ==",
      "license": "MIT"
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@ant-design/colors": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@ant-design/colors/-/colors-7.1.0.tgz",
      "integrity": "sha512-MMoDGWn1y9LdQJQSHiCC20x3uZ3CwQnv9QMz6pCmJOrqdgM9YxsoVVY0wtrdXbmfSgnV0KNk6zi09NAhMR2jvg==",
      "license": "MIT",
      "dependencies": {
        "@ctrl/tinycolor": "^3.6.1"
      }
    },
    "node_modules/@ant-design/cssinjs": {
      "version": "1.21.1",
      "resolved": "https://registry.npmjs.org/@ant-design/cssinjs/-/cssinjs-1.21.1.tgz",
      "integrity": "sha512-tyWnlK+XH7Bumd0byfbCiZNK43HEubMoCcu9VxwsAwiHdHTgWa+tMN0/yvxa+e8EzuFP1WdUNNPclRpVtD33lg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.1",
        "@emotion/hash": "^0.8.0",
        "@emotion/unitless": "^0.7.5",
        "classnames": "^2.3.1",
        "csstype": "^3.1.3",
        "rc-util": "^5.35.0",
        "stylis": "^4.3.3"
      },
      "peerDependencies": {
        "react": ">=16.0.0",
        "react-dom": ">=16.0.0"
      }
    },
    "node_modules/@ant-design/cssinjs-utils": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@ant-design/cssinjs-utils/-/cssinjs-utils-1.0.3.tgz",
      "integrity": "sha512-BrztZZKuoYcJK8uEH40ylBemf/Mu/QPiDos56g2bv6eUoniQkgQHOCOvA3+pncoFO1TaS8xcUCIqGzDA0I+ZVQ==",
      "license": "MIT",
      "dependencies": {
        "@ant-design/cssinjs": "^1.21.0",
        "@babel/runtime": "^7.23.2",
        "rc-util": "^5.38.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@ant-design/cssinjs/node_modules/@emotion/hash": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.8.0.tgz",
      "integrity": "sha512-kBJtf7PH6aWwZ6fka3zQ0p6SBYzx4fl1LoZXE2RrnYST9Xljm7WfKJrU4g/Xr3Beg72MLrp1AWNUmuYJTL7Cow==",
      "license": "MIT"
    },
    "node_modules/@ant-design/cssinjs/node_modules/@emotion/unitless": {
      "version": "0.7.5",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.7.5.tgz",
      "integrity": "sha512-OWORNpfjMsSSUBVrRBVGECkhWcULOAJz9ZW8uK9qgxD+87M7jHRcvh/A96XXNhXTLmKcoYSQtBEX7lHMO7YRwg==",
      "license": "MIT"
    },
    "node_modules/@ant-design/cssinjs/node_modules/stylis": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.4.tgz",
      "integrity": "sha512-osIBl6BGUmSfDkyH2mB7EFvCJntXDrLhKjHTRj/rK6xLH0yuPrHULDRQzKokSOD4VoorhtKpfcfW1GAntu8now==",
      "license": "MIT"
    },
    "node_modules/@ant-design/fast-color": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@ant-design/fast-color/-/fast-color-2.0.6.tgz",
      "integrity": "sha512-y2217gk4NqL35giHl72o6Zzqji9O7vHh9YmhUVkPtAOpoTCH4uWxo/pr4VE8t0+ChEPs0qo4eJRC5Q1eXWo3vA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.24.7"
      },
      "engines": {
        "node": ">=8.x"
      }
    },
    "node_modules/@ant-design/icons": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@ant-design/icons/-/icons-5.4.0.tgz",
      "integrity": "sha512-QZbWC5xQYexCI5q4/fehSEkchJr5UGtvAJweT743qKUQQGs9IH2DehNLP49DJ3Ii9m9CijD2HN6fNy3WKhIFdA==",
      "license": "MIT",
      "dependencies": {
        "@ant-design/colors": "^7.0.0",
        "@ant-design/icons-svg": "^4.4.0",
        "@babel/runtime": "^7.24.8",
        "classnames": "^2.2.6",
        "rc-util": "^5.31.1"
      },
      "engines": {
        "node": ">=8"
      },
      "peerDependencies": {
        "react": ">=16.0.0",
        "react-dom": ">=16.0.0"
      }
    },
    "node_modules/@ant-design/icons-svg": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@ant-design/icons-svg/-/icons-svg-4.4.2.tgz",
      "integrity": "sha512-vHbT+zJEVzllwP+CM+ul7reTEfBR0vgxFe7+lREAsAA7YGsYpboiq2sQNeQeRvh09GfQgs/GyFEvZpJ9cLXpXA==",
      "license": "MIT"
    },
    "node_modules/@ant-design/react-slick": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@ant-design/react-slick/-/react-slick-1.1.2.tgz",
      "integrity": "sha512-EzlvzE6xQUBrZuuhSAFTdsr4P2bBBHGZwKFemEfq8gIGyIQCxalYfZW/T2ORbtQx5rU69o+WycP3exY/7T1hGA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.4",
        "classnames": "^2.2.5",
        "json2mq": "^0.2.0",
        "resize-observer-polyfill": "^1.5.1",
        "throttle-debounce": "^5.0.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0"
      }
    },
    "node_modules/@axe-core/react": {
      "version": "4.10.0",
      "resolved": "https://registry.npmjs.org/@axe-core/react/-/react-4.10.0.tgz",
      "integrity": "sha512-gpFj1+G0zabbd0ZDum1N5FPJtUOfPIfslXNH58WuR7opSK0WTwPJ49ZlYr/Wg2fA4VGI5lfkG5fAZSG9p8ecKw==",
      "license": "MPL-2.0",
      "dependencies": {
        "axe-core": "~4.10.0",
        "requestidlecallback": "^0.3.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.24.7.tgz",
      "integrity": "sha512-BcYH1CVJBO9tvyIZ2jVeXgSIMvGZ2FDRvDdOIVQyuklNKSsx+eppDEBq/g47Ayw+RqNFE+URvOShmf+f/qwAlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/highlight": "^7.24.7",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.25.4.tgz",
      "integrity": "sha512-+LGRog6RAsCJrrrg/IO6LGmpphNe5DiK30dGjCoxxeGv49B10/3XYGxPsAwrDlMFcFEvdAUavDT8r9k/hSyQqQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.25.2.tgz",
      "integrity": "sha512-BBt3opiCOxUr9euZ5/ro/Xv8/V7yJ5bjYMqG/C1YAo8MIKAnumZalCN+msbci3Pigy4lIQfPUpfMM27HMGaYEA==",
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.24.7",
        "@babel/generator": "^7.25.0",
        "@babel/helper-compilation-targets": "^7.25.2",
        "@babel/helper-module-transforms": "^7.25.2",
        "@babel/helpers": "^7.25.0",
        "@babel/parser": "^7.25.0",
        "@babel/template": "^7.25.0",
        "@babel/traverse": "^7.25.2",
        "@babel/types": "^7.25.2",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "license": "MIT"
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/eslint-parser": {
      "version": "7.25.1",
      "resolved": "https://registry.npmjs.org/@babel/eslint-parser/-/eslint-parser-7.25.1.tgz",
      "integrity": "sha512-Y956ghgTT4j7rKesabkh5WeqgSFZVFwaPR0IWFm7KFHFmmJ4afbG49SmfW4S+GyRPx0Dy5jxEWA5t0rpxfElWg==",
      "license": "MIT",
      "dependencies": {
        "@nicolo-ribaudo/eslint-scope-5-internals": "5.1.1-v1",
        "eslint-visitor-keys": "^2.1.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || >=14.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.0",
        "eslint": "^7.5.0 || ^8.0.0 || ^9.0.0"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
      "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.25.5",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.25.5.tgz",
      "integrity": "sha512-abd43wyLfbWoxC6ahM8xTkqLpGB2iWBVyuKC9/srhFunCd1SDNrV1s72bBpK4hLj8KLzHBBcOblvLQZBNw9r3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.25.4",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.24.7.tgz",
      "integrity": "sha512-BaDeOonYvhdKw+JoMVkAixAAJzG2jVPIwWoKBPdYuY9b452e2rPuI9QPYh3KpofZ3pW2akOmwZLOiOsHMiqRAg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-builder-binary-assignment-operator-visitor": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-builder-binary-assignment-operator-visitor/-/helper-builder-binary-assignment-operator-visitor-7.24.7.tgz",
      "integrity": "sha512-xZeCVVdwb4MsDBkkyZ64tReWYrLRHlMN72vP7Bdm3OUOuyFZExhsHUUnuWnm2/XOlAJzR0LfPpB56WXZn0X/lA==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.2.tgz",
      "integrity": "sha512-U2U5LsSaZ7TAt3cfaymQ8WHh0pxvdHoEk6HVpaexxixjyEquMh0L0YNJNM6CTGKMXV1iksi0iZkGw4AcFkPaaw==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.25.2",
        "@babel/helper-validator-option": "^7.24.8",
        "browserslist": "^4.23.1",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.25.4.tgz",
      "integrity": "sha512-ro/bFs3/84MDgDmMwbcHgDa8/E6J3QKNTk4xJJnVeFtGE+tL0K26E3pNxhYz2b67fJpt7Aphw5XcploKXuCvCQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-member-expression-to-functions": "^7.24.8",
        "@babel/helper-optimise-call-expression": "^7.24.7",
        "@babel/helper-replace-supers": "^7.25.0",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/traverse": "^7.25.4",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.25.2.tgz",
      "integrity": "sha512-+wqVGP+DFmqwFD3EH6TMTfUNeqDehV3E/dl+Sd54eaXqm17tEUNbEIn4sVivVowbvUpOtIGxdo3GoXyDH9N/9g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "regexpu-core": "^5.3.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.2.tgz",
      "integrity": "sha512-LV76g+C502biUK6AyZ3LK10vDpDyCzZnhZFXkH1L75zHPj68+qc8Zfpx2th+gzwA2MzyK+1g/3EPl62yFnVttQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.22.6",
        "@babel/helper-plugin-utils": "^7.22.5",
        "debug": "^4.1.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.14.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.24.8.tgz",
      "integrity": "sha512-LABppdt+Lp/RlBxqrh4qgf1oEH/WxdzQNDJIu5gC/W1GyvPVrOBiItmmM8wan2fm4oYqFuFfkXmlGpLQhPY8CA==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.8",
        "@babel/types": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.24.7.tgz",
      "integrity": "sha512-8AyH3C+74cgCVVXow/myrynrAGv+nTVg5vKu2nZph9x7RcRwzmh0VFallJuFTZ9mx6u4eSdXZfcOzSqTUm0HCA==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.25.2.tgz",
      "integrity": "sha512-BjyRAbix6j/wv83ftcVJmBt72QtHI56C7JXZoG2xATiLpmoC7dpd8WnkikExHDVPpi/3qCmO6WY1EaXOluiecQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.24.7",
        "@babel/helper-simple-access": "^7.24.7",
        "@babel/helper-validator-identifier": "^7.24.7",
        "@babel/traverse": "^7.25.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.24.7.tgz",
      "integrity": "sha512-jKiTsW2xmWwxT1ixIdfXUZp+P5yURx2suzLZr5Hi64rURpDYdMW0pv+Uf17EYk2Rd428Lx4tLsnjGJzYKDM/6A==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.24.8.tgz",
      "integrity": "sha512-FFWx5142D8h2Mgr/iPVGH5G7w6jDn4jUSpZTyDnQO0Yn7Ks2Kuz6Pci8H6MPCoUJegd/UZQ3tAvfLCxQSnWWwg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.25.0.tgz",
      "integrity": "sha512-NhavI2eWEIz/H9dbrG0TuOicDhNexze43i5z7lEqwYm0WEZVTwnPpA0EafUTP7+6/W79HWIP2cTe3Z5NiSTVpw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-wrap-function": "^7.25.0",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.25.0.tgz",
      "integrity": "sha512-q688zIvQVYtZu+i2PsdIu/uWGRpfxzr5WESsfpShfZECkO+d2o+WROWezCi/Q6kJ0tfPa5+pUGUlfx2HhrA3Bg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-member-expression-to-functions": "^7.24.8",
        "@babel/helper-optimise-call-expression": "^7.24.7",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.24.7.tgz",
      "integrity": "sha512-zBAIvbCMh5Ts+b86r/CjU+4XGYIs+R1j951gxI3KmmxBMhCg4oQMsv6ZXQ64XOm/cvzfU1FmoCyt6+owc5QMYg==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.24.7.tgz",
      "integrity": "sha512-IO+DLT3LQUElMbpzlatRASEyQtfhSE0+m465v++3jyyXeBTBUjtVZg28/gHeV5mrTJqvEKhKroBGAvhW+qPHiQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.24.7",
        "@babel/types": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.24.8.tgz",
      "integrity": "sha512-pO9KhhRcuUyGnJWwyEgnRJTSIZHiT+vMD0kPeD+so0l7mxkMT19g3pjY9GTnHySck/hDzq+dtW/4VgnMkippsQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.24.7.tgz",
      "integrity": "sha512-rR+PBcQ1SMQDDyF6X0wxtG8QyLCgUB0eRAGguqRLfkCA87l7yAP7ehq8SNj96OOGTO8OBV70KhuFYcIkHXOg0w==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.24.8.tgz",
      "integrity": "sha512-xb8t9tD1MHLungh/AIoWYN+gVHaB9kwlu8gffXGSt3FFEIT7RjS+xWbc2vUD1UTZdIpKj/ab3rdqJ7ufngyi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.25.0.tgz",
      "integrity": "sha512-s6Q1ebqutSiZnEjaofc/UKDyC4SbzV5n5SrA2Gq8UawLycr3i04f1dX4OzoQVnexm6aOCh37SQNYlJ/8Ku+PMQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.25.0",
        "@babel/traverse": "^7.25.0",
        "@babel/types": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.25.0.tgz",
      "integrity": "sha512-MjgLZ42aCm0oGjJj8CtSM3DB8NOOf8h2l7DCTePJs29u+v7yO/RBX9nShlKMgFnRks/Q4tBAe7Hxnov9VkGwLw==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.25.0",
        "@babel/types": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.24.7.tgz",
      "integrity": "sha512-EStJpq4OuY8xYfhGVXngigBJRWxftKX9ksiGDnmlY3o7B/V7KIAc9X4oiK87uPJSc/vs5L869bem5fhZa8caZw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.24.7",
        "chalk": "^2.4.2",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.25.4.tgz",
      "integrity": "sha512-nq+eWrOgdtu3jG5Os4TQP3x3cLA8hR8TvJNjD8vnPa20WGycimcparWnLK4jJhElTK6SDyuJo1weMKO/5LpmLA==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.25.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key": {
      "version": "7.25.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.25.3.tgz",
      "integrity": "sha512-wUrcsxZg6rqBXG05HG1FPYgsP6EvwF4WpBbxIpWIIYnH8wG0gzx3yZY3dtEHas4sTAOGkbTsc9EGPxwff8lRoA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/traverse": "^7.25.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.25.0.tgz",
      "integrity": "sha512-Bm4bH2qsX880b/3ziJ8KD711LT7z4u8CFudmjqle65AZj/HNUFhEf90dqYv6O86buWvSBmeQDjv0Tn2aF/bIBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.25.0.tgz",
      "integrity": "sha512-lXwdNZtTmeVOOFtwM/WDe7yg1PL8sYhRk/XH0FzbR2HDQ0xC+EnQ/JHeoMYSavtU115tnUk0q9CDyq8si+LMAA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.24.7.tgz",
      "integrity": "sha512-+izXIbke1T33mY4MSNnrqhPXDz01WYhEf3yF5NbnUtkiNnm+XBZJl3kNfoK6NKmYlz/D07+l2GWVK/QfDkNCuQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/plugin-transform-optional-chaining": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.25.0.tgz",
      "integrity": "sha512-tggFrk1AIShG/RUQbEwt2Tr/E+ObkfwrPjR6BjbRvsx24+PSjK8zrq0GWPNCjo8qpRx4DuJzlcvWJqlm+0h3kw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-class-properties": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.18.6.tgz",
      "integrity": "sha512-cumfXOF0+nzZrrN8Rf0t7M+tF6sZc7vhQwYQck9q1/5w2OExlD+b4v4RpMJFaV1Z7WcDRgO6FqvxqxGlwo+RHQ==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-class-properties instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-decorators": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.24.7.tgz",
      "integrity": "sha512-RL9GR0pUG5Kc8BUWLNDm2T5OpYwSX15r98I0IkgmRQTXuELq/OynH8xtMTMvTJFjXbMWFVTKtYkTaYQsuAwQlQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-decorators": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-nullish-coalescing-operator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.18.6.tgz",
      "integrity": "sha512-wQxQzxYeJqHcfppzBDnm1yAY0jSRkUXR2z8RePZYrKwMKgMlE8+Z6LUno+bd6LvbGh8Gltvy74+9pIYkr+XkKA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-nullish-coalescing-operator instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-numeric-separator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-numeric-separator/-/plugin-proposal-numeric-separator-7.18.6.tgz",
      "integrity": "sha512-ozlZFogPqoLm8WBr5Z8UckIoE4YQ5KESVcNudyXOR8uqIkliTEgJ3RoketfG6pmzLdeZF0H/wjE9/cCEitBl7Q==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-numeric-separator instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-optional-chaining": {
      "version": "7.21.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.21.0.tgz",
      "integrity": "sha512-p4zeefM72gpmEe2fkUr/OnOXpWEf8nAgk7ZYVqqfFiyIG7oFfVZcCrU64hWn5xp4tQ9LkV4bTIa5rD0KANpKNA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-optional-chaining instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.20.0",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-methods": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.18.6.tgz",
      "integrity": "sha512-nutsvktDItsNn4rpGItSNV2sz1XwS+nfU0Rg8aCx3W3NOKVzdMjJRu0O5OkgDp3ZGICSTbgRpxZoWsxoKRvbeA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-private-methods instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.0-placeholder-for-preset-env.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz",
      "integrity": "sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-decorators": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.24.7.tgz",
      "integrity": "sha512-Ui4uLJJrRV1lb38zg1yYTmRKmiZLiftDEvZN2iq3kd9kUFU+PttmzTbAFC2ucRk/XJmtek6G23gPsuZbhrT8fQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-dynamic-import": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-dynamic-import/-/plugin-syntax-dynamic-import-7.8.3.tgz",
      "integrity": "sha512-5gdGbFon+PszYzqs83S3E5mpi7/y/8M9eC90MRTZfduQOYW76ig6SOSPNe41IG5LoP3FGBn2N0RjVDSQiS94kQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-export-namespace-from": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-export-namespace-from/-/plugin-syntax-export-namespace-from-7.8.3.tgz",
      "integrity": "sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.3"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-flow": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-flow/-/plugin-syntax-flow-7.24.7.tgz",
      "integrity": "sha512-9G8GYT/dxn/D1IIKOUBmGX0mnmj46mGH9NnZyJLwtCpgh5f7D2VbuKodb+2s9m1Yavh1s7ASQN8lf0eqrb1LTw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.24.7.tgz",
      "integrity": "sha512-Ec3NRUMoi8gskrkBe3fNmEQfxDvY8bgfQpz6jlk/41kX9eUjvpyqWU7PBP/pLAvMaSQjbMNKJmvX57jP+M6bPg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.24.7.tgz",
      "integrity": "sha512-hbX+lKKeUMGihnK8nvKqmXBInriT3GVjzXKFriV3YC6APGxMbP8RZNFwy91+hocLXq90Mta+HshoB31802bb8A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.24.7.tgz",
      "integrity": "sha512-6ddciUPe/mpMnOKv/U+RSd2vvVy+Yw/JfBB0ZHYjEZt9NLHmCUylNYlsbqCCS1Bffjlb0fCwC9Vqz+sBz6PsiQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.25.4.tgz",
      "integrity": "sha512-uMOCoHVU52BsSWxPOMVv5qKRdeSlPuImUCB2dlPuBSU+W2/ROE7/Zg8F2Kepbk+8yBa68LlRKxO+xgEVWorsDg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-unicode-sets-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz",
      "integrity": "sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.24.7.tgz",
      "integrity": "sha512-Dt9LQs6iEY++gXUwY03DNFat5C2NbO48jj+j/bSAz6b3HgPs39qcPiYt77fDObIcFwj3/C2ICX9YMwGflUoSHQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-generator-functions": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.25.4.tgz",
      "integrity": "sha512-jz8cV2XDDTqjKPwVPJBIjORVEmSGYhdRa8e5k5+vN+uwcjSrSxUaebBRa4ko1jqNF2uxyg8G6XYk30Jv285xzg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-remap-async-to-generator": "^7.25.0",
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/traverse": "^7.25.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.24.7.tgz",
      "integrity": "sha512-SQY01PcJfmQ+4Ash7NE+rpbLFbmqA2GPIgqzxfFTL4t1FKRq4zTms/7htKpoCUI9OcFYgzqfmCdH53s6/jn5fA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-remap-async-to-generator": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.24.7.tgz",
      "integrity": "sha512-yO7RAz6EsVQDaBH18IDJcMB1HnrUn2FJ/Jslc/WtPPWcjhpUJXU/rjbwmluzp7v/ZzWcEhTMXELnnsz8djWDwQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.25.0.tgz",
      "integrity": "sha512-yBQjYoOjXlFv9nlXb3f1casSHOZkWr29NX+zChVanLg5Nc157CrbEX9D7hxxtTpuFy7Q0YzmmWfJxzvps4kXrQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-properties": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.25.4.tgz",
      "integrity": "sha512-nZeZHyCWPfjkdU5pA/uHiTaDAFUEqkpzf1YoQT2NeSynCGYq9rxfyI3XpQbfx/a0hSnFH6TGlEXvae5Vi7GD8g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.25.4",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-static-block": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.24.7.tgz",
      "integrity": "sha512-HMXK3WbBPpZQufbMG4B46A90PkuuhN9vBCb5T8+VAHqvAqvcLi+2cKoukcpmUYkszLhScU3l1iudhrks3DggRQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-class-static-block": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.25.4.tgz",
      "integrity": "sha512-oexUfaQle2pF/b6E0dwsxQtAol9TLSO88kQvym6HHBWFliV2lGdrPieX+WgMRLSJDVzdYywk7jXbLPuO2KLTLg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-compilation-targets": "^7.25.2",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-replace-supers": "^7.25.0",
        "@babel/traverse": "^7.25.4",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.24.7.tgz",
      "integrity": "sha512-25cS7v+707Gu6Ds2oY6tCkUwsJ9YIDbggd9+cu9jzzDgiNq7hR/8dkzxWfKWnTic26vsI3EsCXNd4iEB6e8esQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/template": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.24.8.tgz",
      "integrity": "sha512-36e87mfY8TnRxc7yc6M9g9gOB7rKgSahqkIKwLpz4Ppk2+zC2Cy1is0uwtuSG6AE4zlTOUa+7JGz9jCJGLqQFQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.24.7.tgz",
      "integrity": "sha512-ZOA3W+1RRTSWvyqcMJDLqbchh7U4NRGqwRfFSVbOLS/ePIP4vHB5e8T8eXcuqyN1QkgKyj5wuW0lcS85v4CrSw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.24.7.tgz",
      "integrity": "sha512-JdYfXyCRihAe46jUIliuL2/s0x0wObgwwiGxw/UbgJBr20gQBThrokO4nYKgWkD7uBaqM7+9x5TU7NkExZJyzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.25.0.tgz",
      "integrity": "sha512-YLpb4LlYSc3sCUa35un84poXoraOiQucUTTu8X1j18JV+gNa8E0nyUf/CjZ171IRGr4jEguF+vzJU66QZhn29g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.25.0",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-dynamic-import": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.24.7.tgz",
      "integrity": "sha512-sc3X26PhZQDb3JhORmakcbvkeInvxz+A8oda99lj7J60QRuPZvNAk9wQlTBS1ZynelDrDmTU4pw1tyc5d5ZMUg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.24.7.tgz",
      "integrity": "sha512-Rqe/vSc9OYgDajNIK35u7ot+KeCoetqQYFXM4Epf7M7ez3lWlOjrDjrwMei6caCVhfdw+mIKD4cgdGNy5JQotQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-builder-binary-assignment-operator-visitor": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-export-namespace-from": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.24.7.tgz",
      "integrity": "sha512-v0K9uNYsPL3oXZ/7F9NNIbAj2jv1whUEtyA6aujhekLs56R++JDQuzRcP2/z4WX5Vg/c5lE9uWZA0/iUoFhLTA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-export-namespace-from": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-flow-strip-types": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-flow-strip-types/-/plugin-transform-flow-strip-types-7.25.2.tgz",
      "integrity": "sha512-InBZ0O8tew5V0K6cHcQ+wgxlrjOw1W4wDXLkOTjLRD8GYhTSkxTVBtdy3MMtvYBrbAWa1Qm3hNoTc1620Yj+Mg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/plugin-syntax-flow": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.24.7.tgz",
      "integrity": "sha512-wo9ogrDG1ITTTBsy46oGiN1dS9A7MROBTcYsfS8DtsImMkHk9JXJ3EWQM6X2SUw4x80uGPlwj0o00Uoc6nEE3g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.25.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.25.1.tgz",
      "integrity": "sha512-TVVJVdW9RKMNgJJlLtHsKDTydjZAbwIsn6ySBPQaEAUU5+gVvlJt/9nRmqVbsV/IBanRjzWoaAQKLoamWVOUuA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.24.8",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/traverse": "^7.25.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-json-strings": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.24.7.tgz",
      "integrity": "sha512-2yFnBGDvRuxAaE/f0vfBKvtnvvqU8tGpMHqMNpTN2oWMKIR3NqFkjaAgGwawhqK/pIN2T3XdjGPdaG0vDhOBGw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-json-strings": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.25.2.tgz",
      "integrity": "sha512-HQI+HcTbm9ur3Z2DkO+jgESMAMcYLuN/A7NRw9juzxAezN9AvqvUTnpKP/9kkYANz6u7dFlAyOu44ejuGySlfw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-logical-assignment-operators": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.24.7.tgz",
      "integrity": "sha512-4D2tpwlQ1odXmTEIFWy9ELJcZHqrStlzK/dAOWYyxX3zT0iXQB6banjgeOJQXzEc4S0E0a5A+hahxPaEFYftsw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.24.7.tgz",
      "integrity": "sha512-T/hRC1uqrzXMKLQ6UCwMT85S3EvqaBXDGf0FaMf4446Qx9vKwlghvee0+uuZcDUCZU5RuNi4781UQ7R308zzBw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.24.7.tgz",
      "integrity": "sha512-9+pB1qxV3vs/8Hdmz/CulFB8w2tuu6EB94JZFsjdqxQokwGa9Unap7Bo2gGBGIvPmDIVvQrom7r5m/TCDMURhg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.24.8.tgz",
      "integrity": "sha512-WHsk9H8XxRs3JXKWFiqtQebdh9b/pTk4EgueygFzYlTKAg0Ud985mSevdNjdXdFBATSKVJGQXP1tv6aGbssLKA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.24.8",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-simple-access": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.25.0.tgz",
      "integrity": "sha512-YPJfjQPDXxyQWg/0+jHKj1llnY5f/R6a0p/vP4lPymxLu7Lvl4k2WMitqi08yxwQcCVUUdG9LCUj4TNEgAp3Jw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.25.0",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-validator-identifier": "^7.24.7",
        "@babel/traverse": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.24.7.tgz",
      "integrity": "sha512-3aytQvqJ/h9z4g8AsKPLvD4Zqi2qT+L3j7XoFFu1XBlZWEl2/1kWnhmAbxpLgPrHSY0M6UA02jyTiwUVtiKR6A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.24.7.tgz",
      "integrity": "sha512-/jr7h/EWeJtk1U/uz2jlsCioHkZk1JJZVcc8oQsJ1dUlaJD83f4/6Zeh2aHt9BIFokHIsSeDfhUmju0+1GPd6g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.24.7.tgz",
      "integrity": "sha512-RNKwfRIXg4Ls/8mMTza5oPF5RkOW8Wy/WgMAp1/F1yZ8mMbtwXW+HDoJiOsagWrAhI5f57Vncrmr9XeT4CVapA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-nullish-coalescing-operator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.24.7.tgz",
      "integrity": "sha512-Ts7xQVk1OEocqzm8rHMXHlxvsfZ0cEF2yomUqpKENHWMF4zKk175Y4q8H5knJes6PgYad50uuRmt3UJuhBw8pQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-numeric-separator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.24.7.tgz",
      "integrity": "sha512-e6q1TiVUzvH9KRvicuxdBTUj4AdKSRwzIyFFnfnezpCfP2/7Qmbb8qbU2j7GODbl4JMkblitCQjKYUaX/qkkwA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-rest-spread": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.24.7.tgz",
      "integrity": "sha512-4QrHAr0aXQCEFni2q4DqKLD31n2DL+RxcwnNjDFkSG0eNQ/xCavnRkfCUjsyqGC2OviNJvZOF/mQqZBw7i2C5Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-transform-parameters": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.24.7.tgz",
      "integrity": "sha512-A/vVLwN6lBrMFmMDmPPz0jnE6ZGx7Jq7d6sT/Ev4H65RER6pZ+kczlf1DthF5N0qaPHBsI7UXiE8Zy66nmAovg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-replace-supers": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-catch-binding": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.24.7.tgz",
      "integrity": "sha512-uLEndKqP5BfBbC/5jTwPxLh9kqPWWgzN/f8w6UwAIirAEqiIVJWWY312X72Eub09g5KF9+Zn7+hT7sDxmhRuKA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-chaining": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.24.8.tgz",
      "integrity": "sha512-5cTOLSMs9eypEy8JUVvIKOu6NgvbJMnpG62VpIHrTmROdQ+L5mDAaI40g25k5vXti55JWNX5jCkq3HZxXBQANw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.24.7.tgz",
      "integrity": "sha512-yGWW5Rr+sQOhK0Ot8hjDJuxU3XLRQGflvT4lhlSY0DFvdb3TwKaY26CJzHtYllU0vT9j58hc37ndFPsqT1SrzA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-methods": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.25.4.tgz",
      "integrity": "sha512-ao8BG7E2b/URaUQGqN3Tlsg+M3KlHY6rJ1O1gXAEUnZoyNQnvKyH87Kfg+FoxSeyWUB8ISZZsC91C44ZuBFytw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.25.4",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-property-in-object": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.24.7.tgz",
      "integrity": "sha512-9z76mxwnwFxMyxZWEgdgECQglF2Q7cFLm0kMf8pGwt+GSJsY0cONKj/UuO4bOH0w/uAel3ekS4ra5CEAyJRmDA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-create-class-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.24.7.tgz",
      "integrity": "sha512-EMi4MLQSHfd2nrCqQEWxFdha2gBCqU4ZcCng4WBGZ5CJL4bBRW0ptdqqDdeirGZcpALazVVNJqRmsO8/+oNCBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-constant-elements": {
      "version": "7.25.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-constant-elements/-/plugin-transform-react-constant-elements-7.25.1.tgz",
      "integrity": "sha512-SLV/giH/V4SmloZ6Dt40HjTGTAIkxn33TVIHxNGNvo8ezMhrxBkzisj4op1KZYPIOHFLqhv60OHvX+YRu4xbmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-display-name": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-display-name/-/plugin-transform-react-display-name-7.24.7.tgz",
      "integrity": "sha512-H/Snz9PFxKsS1JLI4dJLtnJgCJRoo0AUm3chP6NYr+9En1JMKloheEiLIhlp5MDVznWo+H3AAC1Mc8lmUEpsgg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.25.2.tgz",
      "integrity": "sha512-KQsqEAVBpU82NM/B/N9j9WOdphom1SZH3R+2V7INrQUH+V9EBFwZsEJl8eBIVeQE62FxJCc70jzEZwqU7RcVqA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-module-imports": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/plugin-syntax-jsx": "^7.24.7",
        "@babel/types": "^7.25.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-development": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-development/-/plugin-transform-react-jsx-development-7.24.7.tgz",
      "integrity": "sha512-QG9EnzoGn+Qar7rxuW+ZOsbWOt56FvvI93xInqsZDC5fsekx1AlIO4KIJ5M+D0p0SqSH156EpmZyXq630B8OlQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-transform-react-jsx": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-pure-annotations": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-pure-annotations/-/plugin-transform-react-pure-annotations-7.24.7.tgz",
      "integrity": "sha512-PLgBVk3fzbmEjBJ/u8kFzOqS9tUeDjiaWud/rRym/yjCo/M9cASPlnrd2ZmmZpQT40fOOrvR8jh+n8jikrOhNA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.24.7.tgz",
      "integrity": "sha512-lq3fvXPdimDrlg6LWBoqj+r/DEWgONuwjuOuQCSYgRroXDH/IdM1C0IZf59fL5cHLpjEH/O6opIRBbqv7ELnuA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "regenerator-transform": "^0.15.2"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.24.7.tgz",
      "integrity": "sha512-0DUq0pHcPKbjFZCfTss/pGkYMfy3vFWydkUBd9r0GHpIyfs2eCDENvqadMycRS9wZCXR41wucAfJHJmwA0UmoQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.25.4.tgz",
      "integrity": "sha512-8hsyG+KUYGY0coX6KUCDancA0Vw225KJ2HJO0yCNr1vq5r+lJTleDaJf0K7iOhjw4SWhu03TMBzYTJ9krmzULQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.8",
        "babel-plugin-polyfill-corejs2": "^0.4.10",
        "babel-plugin-polyfill-corejs3": "^0.10.6",
        "babel-plugin-polyfill-regenerator": "^0.6.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.24.7.tgz",
      "integrity": "sha512-KsDsevZMDsigzbA09+vacnLpmPH4aWjcZjXdyFKGzpplxhbeB4wYtury3vglQkg6KM/xEPKt73eCjPPf1PgXBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.24.7.tgz",
      "integrity": "sha512-x96oO0I09dgMDxJaANcRyD4ellXFLLiWhuwDxKZX5g2rWP1bTPkBSwCYv96VDXVT1bD9aPj8tppr5ITIh8hBng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.24.7.tgz",
      "integrity": "sha512-kHPSIJc9v24zEml5geKg9Mjx5ULpfncj0wRpYtxbvKyTtHCYDkVE3aHQ03FrpEo4gEe2vrJJS1Y9CJTaThA52g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.24.7.tgz",
      "integrity": "sha512-AfDTQmClklHCOLxtGoP7HkeMw56k1/bTQjwsfhL6pppo/M4TOBSq+jjBUBLmV/4oeFg4GWMavIl44ZeCtmmZTw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.24.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.24.8.tgz",
      "integrity": "sha512-adNTUpDCVnmAE58VEqKlAA6ZBlNkMnWD0ZcW76lyNFN3MJniyGFZfNwERVk8Ap56MCnXztmDr19T4mPTztcuaw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript": {
      "version": "7.25.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.25.2.tgz",
      "integrity": "sha512-lBwRvjSmqiMYe/pS0+1gggjJleUJi7NzjvQ1Fkqtt69hBa/0t1YuW/MLQMAPixfwaQOHUXsd6jeU3Z+vdGv3+A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.24.7",
        "@babel/helper-create-class-features-plugin": "^7.25.0",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.24.7",
        "@babel/plugin-syntax-typescript": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.24.7.tgz",
      "integrity": "sha512-U3ap1gm5+4edc2Q/P+9VrBNhGkfnf+8ZqppY71Bo/pzZmXhhLdqgaUl6cuB07O1+AQJtCLfaOmswiNbSQ9ivhw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-property-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.24.7.tgz",
      "integrity": "sha512-uH2O4OV5M9FZYQrwc7NdVmMxQJOCCzFeYudlZSzUAHRFeOujQefa92E74TQDVskNHCzOXoigEuoyzHDhaEaK5w==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.24.7.tgz",
      "integrity": "sha512-hlQ96MBZSAXUq7ltkjtu3FJCCSMx/j629ns3hA3pXnBXjanNP0LHi+JpPeA81zaWgVK1VGH95Xuy7u0RyQ8kMg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.24.7",
        "@babel/helper-plugin-utils": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-sets-regex": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.25.4.tgz",
      "integrity": "sha512-qesBxiWkgN1Q+31xUE9RcMk79eOXXDCv6tfyGMRSs4RGlioSg2WVyQAm07k726cSE56pa+Kb0y9epX2qaXzTvA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.25.2",
        "@babel/helper-plugin-utils": "^7.24.8"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.25.4.tgz",
      "integrity": "sha512-W9Gyo+KmcxjGahtt3t9fb14vFRWvPpu5pT6GBlovAK6BTBcxgjfVMSQCfJl4oi35ODrxP6xx2Wr8LNST57Mraw==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.25.4",
        "@babel/helper-compilation-targets": "^7.25.2",
        "@babel/helper-plugin-utils": "^7.24.8",
        "@babel/helper-validator-option": "^7.24.8",
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key": "^7.25.3",
        "@babel/plugin-bugfix-safari-class-field-initializer-scope": "^7.25.0",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.25.0",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.24.7",
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": "^7.25.0",
        "@babel/plugin-proposal-private-property-in-object": "7.21.0-placeholder-for-preset-env.2",
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-dynamic-import": "^7.8.3",
        "@babel/plugin-syntax-export-namespace-from": "^7.8.3",
        "@babel/plugin-syntax-import-assertions": "^7.24.7",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5",
        "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
        "@babel/plugin-transform-arrow-functions": "^7.24.7",
        "@babel/plugin-transform-async-generator-functions": "^7.25.4",
        "@babel/plugin-transform-async-to-generator": "^7.24.7",
        "@babel/plugin-transform-block-scoped-functions": "^7.24.7",
        "@babel/plugin-transform-block-scoping": "^7.25.0",
        "@babel/plugin-transform-class-properties": "^7.25.4",
        "@babel/plugin-transform-class-static-block": "^7.24.7",
        "@babel/plugin-transform-classes": "^7.25.4",
        "@babel/plugin-transform-computed-properties": "^7.24.7",
        "@babel/plugin-transform-destructuring": "^7.24.8",
        "@babel/plugin-transform-dotall-regex": "^7.24.7",
        "@babel/plugin-transform-duplicate-keys": "^7.24.7",
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex": "^7.25.0",
        "@babel/plugin-transform-dynamic-import": "^7.24.7",
        "@babel/plugin-transform-exponentiation-operator": "^7.24.7",
        "@babel/plugin-transform-export-namespace-from": "^7.24.7",
        "@babel/plugin-transform-for-of": "^7.24.7",
        "@babel/plugin-transform-function-name": "^7.25.1",
        "@babel/plugin-transform-json-strings": "^7.24.7",
        "@babel/plugin-transform-literals": "^7.25.2",
        "@babel/plugin-transform-logical-assignment-operators": "^7.24.7",
        "@babel/plugin-transform-member-expression-literals": "^7.24.7",
        "@babel/plugin-transform-modules-amd": "^7.24.7",
        "@babel/plugin-transform-modules-commonjs": "^7.24.8",
        "@babel/plugin-transform-modules-systemjs": "^7.25.0",
        "@babel/plugin-transform-modules-umd": "^7.24.7",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.24.7",
        "@babel/plugin-transform-new-target": "^7.24.7",
        "@babel/plugin-transform-nullish-coalescing-operator": "^7.24.7",
        "@babel/plugin-transform-numeric-separator": "^7.24.7",
        "@babel/plugin-transform-object-rest-spread": "^7.24.7",
        "@babel/plugin-transform-object-super": "^7.24.7",
        "@babel/plugin-transform-optional-catch-binding": "^7.24.7",
        "@babel/plugin-transform-optional-chaining": "^7.24.8",
        "@babel/plugin-transform-parameters": "^7.24.7",
        "@babel/plugin-transform-private-methods": "^7.25.4",
        "@babel/plugin-transform-private-property-in-object": "^7.24.7",
        "@babel/plugin-transform-property-literals": "^7.24.7",
        "@babel/plugin-transform-regenerator": "^7.24.7",
        "@babel/plugin-transform-reserved-words": "^7.24.7",
        "@babel/plugin-transform-shorthand-properties": "^7.24.7",
        "@babel/plugin-transform-spread": "^7.24.7",
        "@babel/plugin-transform-sticky-regex": "^7.24.7",
        "@babel/plugin-transform-template-literals": "^7.24.7",
        "@babel/plugin-transform-typeof-symbol": "^7.24.8",
        "@babel/plugin-transform-unicode-escapes": "^7.24.7",
        "@babel/plugin-transform-unicode-property-regex": "^7.24.7",
        "@babel/plugin-transform-unicode-regex": "^7.24.7",
        "@babel/plugin-transform-unicode-sets-regex": "^7.25.4",
        "@babel/preset-modules": "0.1.6-no-external-plugins",
        "babel-plugin-polyfill-corejs2": "^0.4.10",
        "babel-plugin-polyfill-corejs3": "^0.10.6",
        "babel-plugin-polyfill-regenerator": "^0.6.1",
        "core-js-compat": "^3.37.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-env/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.6-no-external-plugins",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
      "integrity": "sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/preset-react": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/preset-react/-/preset-react-7.24.7.tgz",
      "integrity": "sha512-AAH4lEkpmzFWrGVlHaxJB7RLH21uPQ9+He+eFLWHmF9IuFQVugz8eAsamaW0DXRrTfco5zj1wWtpdcXJUOfsag==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-validator-option": "^7.24.7",
        "@babel/plugin-transform-react-display-name": "^7.24.7",
        "@babel/plugin-transform-react-jsx": "^7.24.7",
        "@babel/plugin-transform-react-jsx-development": "^7.24.7",
        "@babel/plugin-transform-react-pure-annotations": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-typescript": {
      "version": "7.24.7",
      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.24.7.tgz",
      "integrity": "sha512-SyXRe3OdWwIwalxDg5UtJnJQO+YPcTfwiIY2B0Xlddh9o7jpWLvv8X1RthIeDOxQ+O1ML5BLPCONToObyVQVuQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.24.7",
        "@babel/helper-validator-option": "^7.24.7",
        "@babel/plugin-syntax-jsx": "^7.24.7",
        "@babel/plugin-transform-modules-commonjs": "^7.24.7",
        "@babel/plugin-transform-typescript": "^7.24.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/regjsgen": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@babel/regjsgen/-/regjsgen-0.8.0.tgz",
      "integrity": "sha512-x/rqGMdzj+fWZvCOYForTghzbtqPDZ5gPwaoNGHdgDfF2QA/XZbCBp4Moo5scrkAMPhB7z26XM/AaHuIJdgauA==",
      "license": "MIT"
    },
    "node_modules/@babel/runtime": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.25.4.tgz",
      "integrity": "sha512-DSgLeL/FNcpXuzav5wfYvHCGvynXkJbn3Zvc3823AEe9nPwW9IK4UoCSS5yGymmQzN0pCPvivtgS6/8U2kkm1w==",
      "license": "MIT",
      "dependencies": {
        "regenerator-runtime": "^0.14.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.25.0",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.0.tgz",
      "integrity": "sha512-aOOgh1/5XzKvg1jvVz7AVrx2piJ2XBi227DHmbY6y+bM9H2FlN+IfecYu4Xl0cNiiVejlsCri89LUsbj8vJD9Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.24.7",
        "@babel/parser": "^7.25.0",
        "@babel/types": "^7.25.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.25.4.tgz",
      "integrity": "sha512-VJ4XsrD+nOvlXyLzmLzUs/0qjFS4sK30te5yEFlvbbUNEgKaVb2BHZUpAL+ttLPQAHNrsI3zZisbfha5Cvr8vg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.24.7",
        "@babel/generator": "^7.25.4",
        "@babel/parser": "^7.25.4",
        "@babel/template": "^7.25.0",
        "@babel/types": "^7.25.4",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.25.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.25.4.tgz",
      "integrity": "sha512-zQ1ijeeCXVEh+aNL0RlmkPkG8HUiDcU2pzQQFjtbntgAczRASFzj4H+6+bV+dy1ntKR14I/DypeuRG1uma98iQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.24.8",
        "@babel/helper-validator-identifier": "^7.24.7",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "license": "MIT"
    },
    "node_modules/@csstools/normalize.css": {
      "version": "12.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/normalize.css/-/normalize.css-12.1.1.tgz",
      "integrity": "sha512-YAYeJ+Xqh7fUou1d1j9XHl44BmsuThiTr4iNrgCQ3J27IbhXsxXDGZ1cXv8Qvs99d4rBbLiSKy3+WZiet32PcQ==",
      "license": "CC0-1.0"
    },
    "node_modules/@csstools/postcss-cascade-layers": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-cascade-layers/-/postcss-cascade-layers-1.1.1.tgz",
      "integrity": "sha512-+KdYrpKC5TgomQr2DlZF4lDEpHcoxnj5IGddYYfBWJAKfj1JtuHUIqMa+E1pJJ+z3kvDViWMqyqPlG4Ja7amQA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.2",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-color-function": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-color-function/-/postcss-color-function-1.1.1.tgz",
      "integrity": "sha512-Bc0f62WmHdtRDjf5f3e2STwRAl89N2CLb+9iAwzrv4L2hncrbDwnQD9PCq0gtAt7pOI2leIV08HIBUd4jxD8cw==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-font-format-keywords": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-font-format-keywords/-/postcss-font-format-keywords-1.0.1.tgz",
      "integrity": "sha512-ZgrlzuUAjXIOc2JueK0X5sZDjCtgimVp/O5CEqTcs5ShWBa6smhWYbS0x5cVc/+rycTDbjjzoP0KTDnUneZGOg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-hwb-function": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-hwb-function/-/postcss-hwb-function-1.0.2.tgz",
      "integrity": "sha512-YHdEru4o3Rsbjmu6vHy4UKOXZD+Rn2zmkAmLRfPet6+Jz4Ojw8cbWxe1n42VaXQhD3CQUXXTooIy8OkVbUcL+w==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-ic-unit": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-ic-unit/-/postcss-ic-unit-1.0.1.tgz",
      "integrity": "sha512-Ot1rcwRAaRHNKC9tAqoqNZhjdYBzKk1POgWfhN4uCOE47ebGcLRqXjKkApVDpjifL6u2/55ekkpnFcp+s/OZUw==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-is-pseudo-class": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-is-pseudo-class/-/postcss-is-pseudo-class-2.0.7.tgz",
      "integrity": "sha512-7JPeVVZHd+jxYdULl87lvjgvWldYu+Bc62s9vD/ED6/QTGjy0jy0US/f6BG53sVMTBJ1lzKZFpYmofBN9eaRiA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.0",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-nested-calc": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-nested-calc/-/postcss-nested-calc-1.0.0.tgz",
      "integrity": "sha512-JCsQsw1wjYwv1bJmgjKSoZNvf7R6+wuHDAbi5f/7MbFhl2d/+v+TvBTU4BJH3G1X1H87dHl0mh6TfYogbT/dJQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-normalize-display-values": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-normalize-display-values/-/postcss-normalize-display-values-1.0.1.tgz",
      "integrity": "sha512-jcOanIbv55OFKQ3sYeFD/T0Ti7AMXc9nM1hZWu8m/2722gOTxFg7xYu4RDLJLeZmPUVQlGzo4jhzvTUq3x4ZUw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-oklab-function": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-oklab-function/-/postcss-oklab-function-1.1.1.tgz",
      "integrity": "sha512-nJpJgsdA3dA9y5pgyb/UfEzE7W5Ka7u0CX0/HIMVBNWzWemdcTH3XwANECU6anWv/ao4vVNLTMxhiPNZsTK6iA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-progressive-custom-properties": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-progressive-custom-properties/-/postcss-progressive-custom-properties-1.3.0.tgz",
      "integrity": "sha512-ASA9W1aIy5ygskZYuWams4BzafD12ULvSypmaLJT2jvQ8G0M3I8PRQhC0h7mG0Z3LI05+agZjqSR9+K9yaQQjA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/@csstools/postcss-stepped-value-functions": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-stepped-value-functions/-/postcss-stepped-value-functions-1.0.1.tgz",
      "integrity": "sha512-dz0LNoo3ijpTOQqEJLY8nyaapl6umbmDcgj4AD0lgVQ572b2eqA1iGZYTTWhrcrHztWDDRAX2DGYyw2VBjvCvQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-text-decoration-shorthand": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-text-decoration-shorthand/-/postcss-text-decoration-shorthand-1.0.0.tgz",
      "integrity": "sha512-c1XwKJ2eMIWrzQenN0XbcfzckOLLJiczqy+YvfGmzoVXd7pT9FfObiSEfzs84bpE/VqfpEuAZ9tCRbZkZxxbdw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-trigonometric-functions": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-trigonometric-functions/-/postcss-trigonometric-functions-1.0.2.tgz",
      "integrity": "sha512-woKaLO///4bb+zZC2s80l+7cm07M7268MsyG3M0ActXXEFi6SuhvriQYcb58iiKGbjwwIU7n45iRLEHypB47Og==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-unset-value": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-unset-value/-/postcss-unset-value-1.0.2.tgz",
      "integrity": "sha512-c8J4roPBILnelAsdLr4XOAR/GsTm0GJi4XpcfvoWk3U6KiTCqiFYc63KhRMQQX35jYMp4Ao8Ij9+IZRgMfJp1g==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/selector-specificity": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@csstools/selector-specificity/-/selector-specificity-2.2.0.tgz",
      "integrity": "sha512-+OJ9konv95ClSTOJCmMZqpd5+YGsB2S+x6w3E1oaM8UuR5j8nTNHYSz8c9BEPGDOCMQYIEEGlVPj/VY64iTbGw==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^14 || ^16 || >=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss-selector-parser": "^6.0.10"
      }
    },
    "node_modules/@ctrl/tinycolor": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/@ctrl/tinycolor/-/tinycolor-3.6.1.tgz",
      "integrity": "sha512-SITSV6aIXsuVNV3f3O0f2n/cgyEDWoSqtZMYiAmcsYHydcKrOz3gUxB/iXd/Qf08+IZX4KpgNbvUdMBmWz+kcA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@emotion/babel-plugin": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.12.0.tgz",
      "integrity": "sha512-y2WQb+oP8Jqvvclh8Q55gLUyb7UFvgv7eJfsj7td5TToBrIUtPay2kMrZi4xjq9qw2vD0ZR5fSho0yqoFgX7Rw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/runtime": "^7.18.3",
        "@emotion/hash": "^0.9.2",
        "@emotion/memoize": "^0.9.0",
        "@emotion/serialize": "^1.2.0",
        "babel-plugin-macros": "^3.1.0",
        "convert-source-map": "^1.5.0",
        "escape-string-regexp": "^4.0.0",
        "find-root": "^1.1.0",
        "source-map": "^0.5.7",
        "stylis": "4.2.0"
      }
    },
    "node_modules/@emotion/cache": {
      "version": "11.13.1",
      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.13.1.tgz",
      "integrity": "sha512-iqouYkuEblRcXmylXIwwOodiEK5Ifl7JcX7o6V4jI3iW4mLXX3dmt5xwBtIkJiQEXFAI+pC8X0i67yiPkH9Ucw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.9.0",
        "@emotion/sheet": "^1.4.0",
        "@emotion/utils": "^1.4.0",
        "@emotion/weak-memoize": "^0.4.0",
        "stylis": "4.2.0"
      }
    },
    "node_modules/@emotion/hash": {
      "version": "0.9.2",
      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.2.tgz",
      "integrity": "sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==",
      "license": "MIT"
    },
    "node_modules/@emotion/is-prop-valid": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.3.0.tgz",
      "integrity": "sha512-SHetuSLvJDzuNbOdtPVbq6yMMMlLoW5Q94uDqJZqy50gcmAjxFkVqmzqSGEFq9gT2iMuIeKV1PXVWmvUhuZLlQ==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.9.0"
      }
    },
    "node_modules/@emotion/memoize": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.9.0.tgz",
      "integrity": "sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==",
      "license": "MIT"
    },
    "node_modules/@emotion/react": {
      "version": "11.13.3",
      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.13.3.tgz",
      "integrity": "sha512-lIsdU6JNrmYfJ5EbUCf4xW1ovy5wKQ2CkPRM4xogziOxH1nXxBSjpC9YqbFAP7circxMfYp+6x676BqWcEiixg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.12.0",
        "@emotion/cache": "^11.13.0",
        "@emotion/serialize": "^1.3.1",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.1.0",
        "@emotion/utils": "^1.4.0",
        "@emotion/weak-memoize": "^0.4.0",
        "hoist-non-react-statics": "^3.3.1"
      },
      "peerDependencies": {
        "react": ">=16.8.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@emotion/serialize": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.3.1.tgz",
      "integrity": "sha512-dEPNKzBPU+vFPGa+z3axPRn8XVDetYORmDC0wAiej+TNcOZE70ZMJa0X7JdeoM6q/nWTMZeLpN/fTnD9o8MQBA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/hash": "^0.9.2",
        "@emotion/memoize": "^0.9.0",
        "@emotion/unitless": "^0.10.0",
        "@emotion/utils": "^1.4.0",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@emotion/sheet": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.4.0.tgz",
      "integrity": "sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==",
      "license": "MIT"
    },
    "node_modules/@emotion/styled": {
      "version": "11.13.0",
      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.13.0.tgz",
      "integrity": "sha512-tkzkY7nQhW/zC4hztlwucpT8QEZ6eUzpXDRhww/Eej4tFfO0FxQYWRyg/c5CCXa4d/f174kqeXYjuQRnhzf6dA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.12.0",
        "@emotion/is-prop-valid": "^1.3.0",
        "@emotion/serialize": "^1.3.0",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.1.0",
        "@emotion/utils": "^1.4.0"
      },
      "peerDependencies": {
        "@emotion/react": "^11.0.0-rc.0",
        "react": ">=16.8.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@emotion/unitless": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.10.0.tgz",
      "integrity": "sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==",
      "license": "MIT"
    },
    "node_modules/@emotion/use-insertion-effect-with-fallbacks": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@emotion/use-insertion-effect-with-fallbacks/-/use-insertion-effect-with-fallbacks-1.1.0.tgz",
      "integrity": "sha512-+wBOcIV5snwGgI2ya3u99D7/FJquOIniQT1IKyDsBmEgwvpxMNeS65Oib7OnE2d2aY+3BU4OiH+0Wchf8yk3Hw==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/@emotion/utils": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.4.0.tgz",
      "integrity": "sha512-spEnrA1b6hDR/C68lC2M7m6ALPUHZC0lIY7jAS/B/9DuuO1ZP04eov8SMv/6fwRd8pzmsn2AuJEznRREWlQrlQ==",
      "license": "MIT"
    },
    "node_modules/@emotion/weak-memoize": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.4.0.tgz",
      "integrity": "sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==",
      "license": "MIT"
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.11.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.11.0.tgz",
      "integrity": "sha512-G/M/tIiMrTAxEWRfLfQJMmGNX28IxBg4PBz8XqQhqUHLFI6TL2htpIB1iQCj144V5ee/JaKyT9/WZ0MGZWfA7A==",
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
      "integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@fast-csv/format": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/@fast-csv/format/-/format-4.3.5.tgz",
      "integrity": "sha512-8iRn6QF3I8Ak78lNAa+Gdl5MJJBM5vRHivFtMRUWINdevNo00K7OXxS2PshawLKTejVwieIlPmK5YlLu6w4u8A==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.isboolean": "^3.0.3",
        "lodash.isequal": "^4.5.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0"
      }
    },
    "node_modules/@fast-csv/format/node_modules/@types/node": {
      "version": "14.18.63",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.18.63.tgz",
      "integrity": "sha512-fAtCfv4jJg+ExtXhvCkCqUKZ+4ok/JQk01qDKhL5BDDoS3AxKXhV5/MAVUZyQnSEd2GT92fkgZl0pz0Q0AzcIQ==",
      "license": "MIT"
    },
    "node_modules/@fast-csv/parse": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/@fast-csv/parse/-/parse-4.3.6.tgz",
      "integrity": "sha512-uRsLYksqpbDmWaSmzvJcuApSEe38+6NQZBUsuAyMZKqHxH0g1wcJgsKUvN3WC8tewaqFjBMMGrkHmC+T7k8LvA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.groupby": "^4.6.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0",
        "lodash.isundefined": "^3.0.1",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/@fast-csv/parse/node_modules/@types/node": {
      "version": "14.18.63",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.18.63.tgz",
      "integrity": "sha512-fAtCfv4jJg+ExtXhvCkCqUKZ+4ok/JQk01qDKhL5BDDoS3AxKXhV5/MAVUZyQnSEd2GT92fkgZl0pz0Q0AzcIQ==",
      "license": "MIT"
    },
    "node_modules/@floating-ui/core": {
      "version": "1.6.7",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-1.6.7.tgz",
      "integrity": "sha512-yDzVT/Lm101nQ5TCVeK65LtdN7Tj4Qpr9RTXJ2vPFLqtLxwOrpoxAHAJI8J3yYWUc40J0BDBheaitK5SJmno2g==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/utils": "^0.2.7"
      }
    },
    "node_modules/@floating-ui/dom": {
      "version": "1.6.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-1.6.10.tgz",
      "integrity": "sha512-fskgCFv8J8OamCmyun8MfjB1Olfn+uZKjOKZ0vhYF3gRmEUXcGOjxWL8bBr7i4kIuPZ2KD2S3EUIOxnjC8kl2A==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/core": "^1.6.0",
        "@floating-ui/utils": "^0.2.7"
      }
    },
    "node_modules/@floating-ui/react": {
      "version": "0.26.23",
      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.26.23.tgz",
      "integrity": "sha512-9u3i62fV0CFF3nIegiWiRDwOs7OW/KhSUJDNx2MkQM3LbE5zQOY01sL3nelcVBXvX7Ovvo3A49I8ql+20Wg/Hw==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react-dom": "^2.1.1",
        "@floating-ui/utils": "^0.2.7",
        "tabbable": "^6.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/@floating-ui/react-dom": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/@floating-ui/react-dom/-/react-dom-2.1.1.tgz",
      "integrity": "sha512-4h84MJt3CHrtG18mGsXuLCHMrug49d7DFkU0RMIyshRveBeyV2hmV/pDaF2Uxtu8kgq5r46llp5E5FQiR0K2Yg==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/dom": "^1.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/@floating-ui/utils": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.7.tgz",
      "integrity": "sha512-X8R8Oj771YRl/w+c1HqAC1szL8zWQRwFvgDwT129k9ACdBoud/+/rX9V0qiMl6LWUdP9voC2nDVZYPMQQsb6eA==",
      "license": "MIT"
    },
    "node_modules/@formatjs/ecma402-abstract": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@formatjs/ecma402-abstract/-/ecma402-abstract-2.0.0.tgz",
      "integrity": "sha512-rRqXOqdFmk7RYvj4khklyqzcfQl9vEL/usogncBHRZfZBDOwMGuSRNFl02fu5KGHXdbinju+YXyuR+Nk8xlr/g==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/intl-localematcher": "0.5.4",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@formatjs/fast-memoize": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@formatjs/fast-memoize/-/fast-memoize-2.2.0.tgz",
      "integrity": "sha512-hnk/nY8FyrL5YxwP9e4r9dqeM6cAbo8PeU9UjyXojZMNvVad2Z06FAVHyR3Ecw6fza+0GH7vdJgiKIVXTMbSBA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@formatjs/icu-messageformat-parser": {
      "version": "2.7.8",
      "resolved": "https://registry.npmjs.org/@formatjs/icu-messageformat-parser/-/icu-messageformat-parser-2.7.8.tgz",
      "integrity": "sha512-nBZJYmhpcSX0WeJ5SDYUkZ42AgR3xiyhNCsQweFx3cz/ULJjym8bHAzWKvG5e2+1XO98dBYC0fWeeAECAVSwLA==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "@formatjs/icu-skeleton-parser": "1.8.2",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@formatjs/icu-skeleton-parser": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/@formatjs/icu-skeleton-parser/-/icu-skeleton-parser-1.8.2.tgz",
      "integrity": "sha512-k4ERKgw7aKGWJZgTarIcNEmvyTVD9FYh0mTrrBMHZ1b8hUu6iOJ4SzsZlo3UNAvHYa+PnvntIwRPt1/vy4nA9Q==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@formatjs/intl": {
      "version": "2.10.4",
      "resolved": "https://registry.npmjs.org/@formatjs/intl/-/intl-2.10.4.tgz",
      "integrity": "sha512-56483O+HVcL0c7VucAS2tyH020mt9XTozZO67cwtGg0a7KWDukS/FzW3OnvaHmTHDuYsoPIzO+ZHVfU6fT/bJw==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "@formatjs/fast-memoize": "2.2.0",
        "@formatjs/icu-messageformat-parser": "2.7.8",
        "@formatjs/intl-displaynames": "6.6.8",
        "@formatjs/intl-listformat": "7.5.7",
        "intl-messageformat": "10.5.14",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "typescript": "^4.7 || 5"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@formatjs/intl-displaynames": {
      "version": "6.6.8",
      "resolved": "https://registry.npmjs.org/@formatjs/intl-displaynames/-/intl-displaynames-6.6.8.tgz",
      "integrity": "sha512-Lgx6n5KxN16B3Pb05z3NLEBQkGoXnGjkTBNCZI+Cn17YjHJ3fhCeEJJUqRlIZmJdmaXQhjcQVDp6WIiNeRYT5g==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "@formatjs/intl-localematcher": "0.5.4",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@formatjs/intl-listformat": {
      "version": "7.5.7",
      "resolved": "https://registry.npmjs.org/@formatjs/intl-listformat/-/intl-listformat-7.5.7.tgz",
      "integrity": "sha512-MG2TSChQJQT9f7Rlv+eXwUFiG24mKSzmF144PLb8m8OixyXqn4+YWU+5wZracZGCgVTVmx8viCf7IH3QXoiB2g==",
      "license": "MIT",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "@formatjs/intl-localematcher": "0.5.4",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@formatjs/intl-localematcher": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/@formatjs/intl-localematcher/-/intl-localematcher-0.5.4.tgz",
      "integrity": "sha512-zTwEpWOzZ2CiKcB93BLngUX59hQkuZjT2+SAQEscSm52peDW/getsawMcWF1rGRpMCX6D7nSJA3CzJ8gn13N/g==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@googlemaps/google-maps-services-js": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/@googlemaps/google-maps-services-js/-/google-maps-services-js-3.4.0.tgz",
      "integrity": "sha512-M1G+Jl4ri9YIODxC+RwvW4UkonTQ+ZFE5gjdIrKP/4/vYG2q2dDN1IgTp03I2MI0eGQs2FmQlxGJ0lBaZ5Ysyw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@googlemaps/url-signature": "^1.0.4",
        "agentkeepalive": "^4.1.0",
        "axios": "^1.5.1",
        "query-string": "<8.x",
        "retry-axios": "<3.x"
      }
    },
    "node_modules/@googlemaps/js-api-loader": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/@googlemaps/js-api-loader/-/js-api-loader-1.16.2.tgz",
      "integrity": "sha512-psGw5u0QM6humao48Hn4lrChOM2/rA43ZCm3tKK9qQsEj1/VzqkCqnvGfEOshDbBQflydfaRovbKwZMF4AyqbA==",
      "license": "Apache-2.0",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      }
    },
    "node_modules/@googlemaps/markerclusterer": {
      "version": "2.5.3",
      "resolved": "https://registry.npmjs.org/@googlemaps/markerclusterer/-/markerclusterer-2.5.3.tgz",
      "integrity": "sha512-x7lX0R5yYOoiNectr10wLgCBasNcXFHiADIBdmn7jQllF2B5ENQw5XtZK+hIw4xnV0Df0xhN4LN98XqA5jaiOw==",
      "license": "Apache-2.0",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "supercluster": "^8.0.1"
      }
    },
    "node_modules/@googlemaps/url-signature": {
      "version": "1.0.36",
      "resolved": "https://registry.npmjs.org/@googlemaps/url-signature/-/url-signature-1.0.36.tgz",
      "integrity": "sha512-BTYFuGr+DRziXiHUR0xok4t2C8apTL2plSi/ouB7yVAPxv5qiHJ05v0gO98kXfhj4r63J1ZDNku65nH/GH9T0A==",
      "license": "Apache-2.0",
      "dependencies": {
        "crypto-js": "^4.2.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.11.14",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
      "integrity": "sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==",
      "deprecated": "Use @eslint/config-array instead",
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.2",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "license": "BSD-3-Clause"
    },
    "node_modules/@icons/material": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@icons/material/-/material-0.2.4.tgz",
      "integrity": "sha512-QPcGmICAPbGLGb6F/yNf/KzKqvFx8z5qx3D1yFqVAjoFmXK35EgyW+cJ57Te3CNsmzblwtzakLGFqHPqrfb4Tw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-27.5.1.tgz",
      "integrity": "sha512-kZ/tNpS3NXn0mlXXXPNuDZnb4c0oZ20r4K5eemM2k30ZC3G0T02nXUvyhf5YdbXWHPEJLc9qGLxEZ216MdL+Zg==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/console/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/console/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/console/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/console/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@jest/console/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/core": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-27.5.1.tgz",
      "integrity": "sha512-AK6/UTrvQD0Cd24NSqmIA6rKsu0tKIxfiCducZvqxYdmMisOYAsdItspT+fQDQYARPf8XgjAFZi0ogW2agH5nQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/reporters": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^27.5.1",
        "jest-config": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-resolve-dependencies": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "jest-watcher": "^27.5.1",
        "micromatch": "^4.0.4",
        "rimraf": "^3.0.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/core/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/core/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/core/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/core/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@jest/core/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/core/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/environment": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-27.5.1.tgz",
      "integrity": "sha512-/WQjhPJe3/ghaol/4Bq480JKXV/Rfw8nQdN7f41fM8VDHLcxKXou6QyXAh3EFr9/bVG3x74z1NWDkP87EiY8gA==",
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-27.5.1.tgz",
      "integrity": "sha512-/aPowoolwa07k7/oM3aASneNeBGCmGQsc3ugN4u6s4C/+s5M64MFo/+djTdiwcbQlRfFElGuDXWzaWj6QgKObQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@sinonjs/fake-timers": "^8.0.1",
        "@types/node": "*",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-27.5.1.tgz",
      "integrity": "sha512-ZEJNB41OBQQgGzgyInAv0UUfDDj3upmHydjieSxFvTRuZElrx7tXg/uVQ5hYVEwiXs3+aMsAeEc9X7xiSKCm4Q==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/types": "^27.5.1",
        "expect": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-27.5.1.tgz",
      "integrity": "sha512-cPXh9hWIlVJMQkVk84aIvXuBB4uQQmFqZiacloFuGiP3ah1sbCxCosidXFDfqG8+6fO1oR2dTJTlsOy4VFmUfw==",
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.2",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-haste-map": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "slash": "^3.0.0",
        "source-map": "^0.6.0",
        "string-length": "^4.0.1",
        "terminal-link": "^2.0.0",
        "v8-to-istanbul": "^8.1.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/reporters/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/reporters/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/reporters/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/reporters/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@jest/reporters/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/reporters/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/reporters/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/schemas": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-28.1.3.tgz",
      "integrity": "sha512-/l/VWsdt/aBXgjshLWOFyFt3IVdYypu5y2Wn2rOO1un6nkqIn8SLXzgIMYXFyYsRWDyF5EthmKJMIdJvk08grg==",
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.24.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-27.5.1.tgz",
      "integrity": "sha512-y9NIHUYF3PJRlHk98NdC/N1gl88BL08aQQgu4k4ZopQkCw9t9cV8mtl3TV8b/YCB8XaVTFrmUTAJvjsntDireg==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9",
        "source-map": "^0.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/source-map/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-27.5.1.tgz",
      "integrity": "sha512-EW35l2RYFUcUQxFJz5Cv5MTOxlJIQs4I7gxzi2zVU7PJhOwfYq1MdC5nhSmYjX1gmMmLPvB3sIaC+BkcHRBfag==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-27.5.1.tgz",
      "integrity": "sha512-LCheJF7WB2+9JuCS7VB/EmGIdQuhtqjRNI9A43idHv3E4KltCTsPsLxvdaubFHSYwY/fNjMWjl6vNRhDiN7vpQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-runtime": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-27.5.1.tgz",
      "integrity": "sha512-ipON6WtYgl/1329g5AIJVbUuEh0wZVbdpGwC99Jw4LwuoBNS95MVphU6zOeD9pDkon+LLbFL7lOQRapbB8SCHw==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.1.0",
        "@jest/types": "^27.5.1",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^1.4.0",
        "fast-json-stable-stringify": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "source-map": "^0.6.1",
        "write-file-atomic": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/transform/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/transform/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/transform/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@jest/transform/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/transform/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/transform/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/types": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-27.5.1.tgz",
      "integrity": "sha512-Cx46iJ9QpwQTjIdq5VJu2QTMMs3QlEjI0x1QbBP5W1+nMzyc2XmimiRR/CbX9TO0cPTeUlxWMOu8mslYsJ8DEw==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^16.0.0",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/types/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@jest/types/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@jest/types/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@jest/types/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@jest/types/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/types/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.6.tgz",
      "integrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@kurkle/color": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.2.tgz",
      "integrity": "sha512-fuscdXJ9G1qb7W8VdHi+IwRqij3lBkosAm4ydQtEmbY58OzHXqQhvlxqEkoz0yssNVn38bcpRWgA9PP+OGoisw==",
      "license": "MIT"
    },
    "node_modules/@leichtgewicht/ip-codec": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@leichtgewicht/ip-codec/-/ip-codec-2.0.5.tgz",
      "integrity": "sha512-Vo+PSpZG2/fmgmiNzYK9qWRh8h/CHrwD0mo1h1DzL4yzHNSfWYujGTYsWGreD000gcgmZ7K4Ys6Tx9TxtsKdDw==",
      "license": "MIT"
    },
    "node_modules/@mui/core-downloads-tracker": {
      "version": "5.16.7",
      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-5.16.7.tgz",
      "integrity": "sha512-RtsCt4Geed2/v74sbihWzzRs+HsIQCfclHeORh5Ynu2fS4icIKozcSubwuG7vtzq2uW3fOR1zITSP84TNt2GoQ==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      }
    },
    "node_modules/@mui/icons-material": {
      "version": "5.16.7",
      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-5.16.7.tgz",
      "integrity": "sha512-UrGwDJCXEszbDI7yV047BYU5A28eGJ79keTCP4cc74WyncuVrnurlmIRxaHL8YK+LI1Kzq+/JM52IAkNnv4u+Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@mui/material": "^5.0.0",
        "@types/react": "^17.0.0 || ^18.0.0",
        "react": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/material": {
      "version": "5.16.7",
      "resolved": "https://registry.npmjs.org/@mui/material/-/material-5.16.7.tgz",
      "integrity": "sha512-cwwVQxBhK60OIOqZOVLFt55t01zmarKJiJUWbk0+8s/Ix5IaUzAShqlJchxsIQ4mSrWqgcKCCXKtIlG5H+/Jmg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9",
        "@mui/core-downloads-tracker": "^5.16.7",
        "@mui/system": "^5.16.7",
        "@mui/types": "^7.2.15",
        "@mui/utils": "^5.16.6",
        "@popperjs/core": "^2.11.8",
        "@types/react-transition-group": "^4.4.10",
        "clsx": "^2.1.0",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1",
        "react-is": "^18.3.1",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@types/react": "^17.0.0 || ^18.0.0",
        "react": "^17.0.0 || ^18.0.0",
        "react-dom": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/private-theming": {
      "version": "5.16.6",
      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-5.16.6.tgz",
      "integrity": "sha512-rAk+Rh8Clg7Cd7shZhyt2HGTTE5wYKNSJ5sspf28Fqm/PZ69Er9o6KX25g03/FG2dfpg5GCwZh/xOojiTfm3hw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9",
        "@mui/utils": "^5.16.6",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0",
        "react": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/styled-engine": {
      "version": "5.16.6",
      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-5.16.6.tgz",
      "integrity": "sha512-zaThmS67ZmtHSWToTiHslbI8jwrmITcN93LQaR2lKArbvS7Z3iLkwRoiikNWutx9MBs8Q6okKvbZq1RQYB3v7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9",
        "@emotion/cache": "^11.11.0",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.4.1",
        "@emotion/styled": "^11.3.0",
        "react": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/system": {
      "version": "5.16.7",
      "resolved": "https://registry.npmjs.org/@mui/system/-/system-5.16.7.tgz",
      "integrity": "sha512-Jncvs/r/d/itkxh7O7opOunTqbbSSzMTHzZkNLM+FjAOg+cYAZHrPDlYe1ZGKUYORwwb2XexlWnpZp0kZ4AHuA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9",
        "@mui/private-theming": "^5.16.6",
        "@mui/styled-engine": "^5.16.6",
        "@mui/types": "^7.2.15",
        "@mui/utils": "^5.16.6",
        "clsx": "^2.1.0",
        "csstype": "^3.1.3",
        "prop-types": "^15.8.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.5.0",
        "@emotion/styled": "^11.3.0",
        "@types/react": "^17.0.0 || ^18.0.0",
        "react": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/types": {
      "version": "7.2.16",
      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.2.16.tgz",
      "integrity": "sha512-qI8TV3M7ShITEEc8Ih15A2vLzZGLhD+/UPNwck/hcls2gwg7dyRjNGXcQYHKLB5Q7PuTRfrTkAoPa2VV1s67Ag==",
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/utils": {
      "version": "5.16.6",
      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-5.16.6.tgz",
      "integrity": "sha512-tWiQqlhxAt3KENNiSRL+DIn9H5xNVK6Jjf70x3PnfQPz1MPBdh7yyIcAyVBT9xiw7hP3SomRhPR7hzBMBCjqEA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9",
        "@mui/types": "^7.2.15",
        "@types/prop-types": "^15.7.12",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-is": "^18.3.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@types/react": "^17.0.0 || ^18.0.0",
        "react": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-date-pickers": {
      "version": "7.15.0",
      "resolved": "https://registry.npmjs.org/@mui/x-date-pickers/-/x-date-pickers-7.15.0.tgz",
      "integrity": "sha512-YQEQICNxUEFYp/I/yP58cqihA8yhXaXSNZ1/N0JANu2IlCwoJ4Jzi+S0s4RN7RghpiDyoSMFijROBC5HfpTjiw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.25.4",
        "@mui/utils": "^5.16.6",
        "@types/react-transition-group": "^4.4.11",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/mui-org"
      },
      "peerDependencies": {
        "@emotion/react": "^11.9.0",
        "@emotion/styled": "^11.8.1",
        "@mui/material": "^5.15.14 || ^6.0.0",
        "@mui/system": "^5.15.14 || ^6.0.0",
        "date-fns": "^2.25.0 || ^3.2.0",
        "date-fns-jalali": "^2.13.0-0 || ^3.2.0-0",
        "dayjs": "^1.10.7",
        "luxon": "^3.0.2",
        "moment": "^2.29.4",
        "moment-hijri": "^2.1.2",
        "moment-jalaali": "^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0",
        "react": "^17.0.0 || ^18.0.0",
        "react-dom": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "date-fns": {
          "optional": true
        },
        "date-fns-jalali": {
          "optional": true
        },
        "dayjs": {
          "optional": true
        },
        "luxon": {
          "optional": true
        },
        "moment": {
          "optional": true
        },
        "moment-hijri": {
          "optional": true
        },
        "moment-jalaali": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-date-pickers-pro": {
      "version": "7.15.0",
      "resolved": "https://registry.npmjs.org/@mui/x-date-pickers-pro/-/x-date-pickers-pro-7.15.0.tgz",
      "integrity": "sha512-3jPTgF1rx7z88Fb1JsbK4MtzKZGFH0zrGyj2x1h074eWu/NE46zBXgOKWrD5t8m6Ktl1/bsTXxI/xI8/ZrGzmA==",
      "license": "SEE LICENSE IN LICENSE",
      "dependencies": {
        "@babel/runtime": "^7.25.4",
        "@mui/utils": "^5.16.6",
        "@mui/x-date-pickers": "7.15.0",
        "@mui/x-license": "7.15.0",
        "clsx": "^2.1.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "@emotion/react": "^11.9.0",
        "@emotion/styled": "^11.8.1",
        "@mui/material": "^5.15.14 || ^6.0.0",
        "@mui/system": "^5.15.14 || ^6.0.0",
        "date-fns": "^2.25.0 || ^3.2.0",
        "date-fns-jalali": "^2.13.0-0 || ^3.2.0-0",
        "dayjs": "^1.10.7",
        "luxon": "^3.0.2",
        "moment": "^2.29.4",
        "moment-hijri": "^2.1.2",
        "moment-jalaali": "^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0",
        "react": "^17.0.0 || ^18.0.0",
        "react-dom": "^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/react": {
          "optional": true
        },
        "@emotion/styled": {
          "optional": true
        },
        "date-fns": {
          "optional": true
        },
        "date-fns-jalali": {
          "optional": true
        },
        "dayjs": {
          "optional": true
        },
        "luxon": {
          "optional": true
        },
        "moment": {
          "optional": true
        },
        "moment-hijri": {
          "optional": true
        },
        "moment-jalaali": {
          "optional": true
        }
      }
    },
    "node_modules/@mui/x-license": {
      "version": "7.15.0",
      "resolved": "https://registry.npmjs.org/@mui/x-license/-/x-license-7.15.0.tgz",
      "integrity": "sha512-dmtUz3E5L1j+Wg6gZLkroCdan14wl3OKawZ+QIIcDkZDR2HoFxlkSHkwcq0oh7NsT8TFp6fIApb12pbPjVXO8g==",
      "license": "SEE LICENSE IN LICENSE",
      "dependencies": {
        "@babel/runtime": "^7.25.4",
        "@mui/utils": "^5.16.6"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": "^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals": {
      "version": "5.1.1-v1",
      "resolved": "https://registry.npmjs.org/@nicolo-ribaudo/eslint-scope-5-internals/-/eslint-scope-5-internals-5.1.1-v1.tgz",
      "integrity": "sha512-54/JRvkLIzzDWshCWfuhadfrfZVPiElY8Fcgmg1HroEly/EDSszzhBAsarCux+D/kOslTRquNzuyGSmUSTTHGg==",
      "license": "MIT",
      "dependencies": {
        "eslint-scope": "5.1.1"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@pkgr/core": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/@pkgr/core/-/core-0.1.1.tgz",
      "integrity": "sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/unts"
      }
    },
    "node_modules/@pmmmwh/react-refresh-webpack-plugin": {
      "version": "0.5.15",
      "resolved": "https://registry.npmjs.org/@pmmmwh/react-refresh-webpack-plugin/-/react-refresh-webpack-plugin-0.5.15.tgz",
      "integrity": "sha512-LFWllMA55pzB9D34w/wXUCf8+c+IYKuJDgxiZ3qMhl64KRMBHYM1I3VdGaD2BV5FNPV2/S2596bppxHbv2ZydQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-html": "^0.0.9",
        "core-js-pure": "^3.23.3",
        "error-stack-parser": "^2.0.6",
        "html-entities": "^2.1.0",
        "loader-utils": "^2.0.4",
        "schema-utils": "^4.2.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">= 10.13"
      },
      "peerDependencies": {
        "@types/webpack": "4.x || 5.x",
        "react-refresh": ">=0.10.0 <1.0.0",
        "sockjs-client": "^1.4.0",
        "type-fest": ">=0.17.0 <5.0.0",
        "webpack": ">=4.43.0 <6.0.0",
        "webpack-dev-server": "3.x || 4.x || 5.x",
        "webpack-hot-middleware": "2.x",
        "webpack-plugin-serve": "0.x || 1.x"
      },
      "peerDependenciesMeta": {
        "@types/webpack": {
          "optional": true
        },
        "sockjs-client": {
          "optional": true
        },
        "type-fest": {
          "optional": true
        },
        "webpack-dev-server": {
          "optional": true
        },
        "webpack-hot-middleware": {
          "optional": true
        },
        "webpack-plugin-serve": {
          "optional": true
        }
      }
    },
    "node_modules/@pmmmwh/react-refresh-webpack-plugin/node_modules/source-map": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
      "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@rc-component/async-validator": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/@rc-component/async-validator/-/async-validator-5.0.4.tgz",
      "integrity": "sha512-qgGdcVIF604M9EqjNF0hbUTz42bz/RDtxWdWuU5EQe3hi7M8ob54B6B35rOsvX5eSvIHIzT9iH1R3n+hk3CGfg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.24.4"
      },
      "engines": {
        "node": ">=14.x"
      }
    },
    "node_modules/@rc-component/color-picker": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@rc-component/color-picker/-/color-picker-2.0.1.tgz",
      "integrity": "sha512-WcZYwAThV/b2GISQ8F+7650r5ZZJ043E57aVBFkQ+kSY4C6wdofXgB0hBx+GPGpIU0Z81eETNoDUJMr7oy/P8Q==",
      "license": "MIT",
      "dependencies": {
        "@ant-design/fast-color": "^2.0.6",
        "@babel/runtime": "^7.23.6",
        "classnames": "^2.2.6",
        "rc-util": "^5.38.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@rc-component/context": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@rc-component/context/-/context-1.4.0.tgz",
      "integrity": "sha512-kFcNxg9oLRMoL3qki0OMxK+7g5mypjgaaJp/pkOis/6rVxma9nJBF/8kCIuTYHUQNr0ii7MxqE33wirPZLJQ2w==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "rc-util": "^5.27.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@rc-component/mini-decimal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rc-component/mini-decimal/-/mini-decimal-1.1.0.tgz",
      "integrity": "sha512-jS4E7T9Li2GuYwI6PyiVXmxTiM6b07rlD9Ge8uGZSCz3WlzcG5ZK7g5bbuKNeZ9pgUuPK/5guV781ujdVpm4HQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.0"
      },
      "engines": {
        "node": ">=8.x"
      }
    },
    "node_modules/@rc-component/mutate-observer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rc-component/mutate-observer/-/mutate-observer-1.1.0.tgz",
      "integrity": "sha512-QjrOsDXQusNwGZPf4/qRQasg7UFEj06XiCJ8iuiq/Io7CrHrgVi6Uuetw60WAMG1799v+aM8kyc+1L/GBbHSlw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.0",
        "classnames": "^2.3.2",
        "rc-util": "^5.24.4"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@rc-component/portal": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@rc-component/portal/-/portal-1.1.2.tgz",
      "integrity": "sha512-6f813C0IsasTZms08kfA8kPAGxbbkYToa8ALaiDIGGECU4i9hj8Plgbx0sNJDrey3EtHO30hmdaxtT0138xZcg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.0",
        "classnames": "^2.3.2",
        "rc-util": "^5.24.4"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@rc-component/qrcode": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@rc-component/qrcode/-/qrcode-1.0.0.tgz",
      "integrity": "sha512-L+rZ4HXP2sJ1gHMGHjsg9jlYBX/SLN2D6OxP9Zn3qgtpMWtO2vUfxVFwiogHpAIqs54FnALxraUy/BCO1yRIgg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.24.7",
        "classnames": "^2.3.2",
        "rc-util": "^5.38.0"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@rc-component/tour": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/@rc-component/tour/-/tour-1.15.0.tgz",
      "integrity": "sha512-h6hyILDwL+In9GAgRobwRWihLqqsD7Uft3fZGrJ7L4EiyCoxbnNYwzPXDfz7vNDhWeVyvAWQJj9fJCzpI4+b4g==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.0",
        "@rc-component/portal": "^1.0.0-9",
        "@rc-component/trigger": "^2.0.0",
        "classnames": "^2.3.2",
        "rc-util": "^5.24.4"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@rc-component/trigger": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@rc-component/trigger/-/trigger-2.2.1.tgz",
      "integrity": "sha512-fuU11J8pOt6+U/tU6/CAv8wjCwGaNeRk9f5k8HQth7JBbJ6MMH62WhGycVW75VnXfBZgL/7kO+wbiO2Xc9U9sQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.2",
        "@rc-component/portal": "^1.1.0",
        "classnames": "^2.3.2",
        "rc-motion": "^2.0.0",
        "rc-resize-observer": "^1.3.1",
        "rc-util": "^5.38.0"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/@react-google-maps/api": {
      "version": "2.19.3",
      "resolved": "https://registry.npmjs.org/@react-google-maps/api/-/api-2.19.3.tgz",
      "integrity": "sha512-jiLqvuOt5lOowkLeq7d077AByTyJp+s6hZVlLhlq7SBacBD37aUNpXBz2OsazfeR6Aw4a+9RRhAEjEFvrR1f5A==",
      "license": "MIT",
      "dependencies": {
        "@googlemaps/js-api-loader": "1.16.2",
        "@googlemaps/markerclusterer": "2.5.3",
        "@react-google-maps/infobox": "2.19.2",
        "@react-google-maps/marker-clusterer": "2.19.2",
        "@types/google.maps": "3.55.2",
        "invariant": "2.2.4"
      },
      "peerDependencies": {
        "react": "^16.8 || ^17 || ^18",
        "react-dom": "^16.8 || ^17 || ^18"
      }
    },
    "node_modules/@react-google-maps/infobox": {
      "version": "2.19.2",
      "resolved": "https://registry.npmjs.org/@react-google-maps/infobox/-/infobox-2.19.2.tgz",
      "integrity": "sha512-6wvBqeJsQ/eFSvoxg+9VoncQvNoVCdmxzxRpLvmjPD+nNC6mHM0vJH1xSqaKijkMrfLJT0nfkTGpovrF896jwg==",
      "license": "MIT"
    },
    "node_modules/@react-google-maps/marker-clusterer": {
      "version": "2.19.2",
      "resolved": "https://registry.npmjs.org/@react-google-maps/marker-clusterer/-/marker-clusterer-2.19.2.tgz",
      "integrity": "sha512-x9ibmsP0ZVqzyCo1Pitbw+4b6iEXRw/r1TCy3vOUR3eKrzWLnHYZMR325BkZW2r8fnuWE/V3Fp4QZOP9qYORCw==",
      "license": "MIT"
    },
    "node_modules/@react-leaflet/core": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@react-leaflet/core/-/core-2.1.0.tgz",
      "integrity": "sha512-Qk7Pfu8BSarKGqILj4x7bCSZ1pjuAPZ+qmRwH5S7mDS91VSbVVsJSrW4qA+GPrro8t69gFYVMWb1Zc4yFmPiVg==",
      "license": "Hippocratic-2.1",
      "peerDependencies": {
        "leaflet": "^1.9.0",
        "react": "^18.0.0",
        "react-dom": "^18.0.0"
      }
    },
    "node_modules/@reduxjs/toolkit": {
      "version": "2.2.7",
      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.2.7.tgz",
      "integrity": "sha512-faI3cZbSdFb8yv9dhDTmGwclW0vk0z5o1cia+kf7gCbaCwHI5e+7tP57mJUv22pNcNbeA62GSrPpfrUfdXcQ6g==",
      "license": "MIT",
      "dependencies": {
        "immer": "^10.0.3",
        "redux": "^5.0.1",
        "redux-thunk": "^3.1.0",
        "reselect": "^5.1.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17.0.0 || ^18",
        "react-redux": "^7.2.1 || ^8.1.3 || ^9.0.0"
      },
      "peerDependenciesMeta": {
        "react": {
          "optional": true
        },
        "react-redux": {
          "optional": true
        }
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.19.1.tgz",
      "integrity": "sha512-S45oynt/WH19bHbIXjtli6QmwNYvaz+vtnubvNpNDvUOoA/OWh6j1OikIP3G+v5GHdxyC6EXoChG3HgYGEUfcg==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "@types/babel__core": "^7.1.9",
        "rollup": "^1.20.0||^2.0.0"
      },
      "peerDependenciesMeta": {
        "@types/babel__core": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/plugin-node-resolve": {
      "version": "11.2.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-11.2.1.tgz",
      "integrity": "sha512-yc2n43jcqVyGE2sqV5/YCmocy9ArjVAP/BeXyTtADTBBX6V0e5UMqwO8CdQ0kzjb6zu5P1qMzsScCMRvE9OlVg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "@types/resolve": "1.17.1",
        "builtin-modules": "^3.1.0",
        "deepmerge": "^4.2.2",
        "is-module": "^1.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/plugin-replace": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
      "integrity": "sha512-IGcu+cydlUMZ5En85jxHH4qj2hta/11BHq95iHEyb2sbgiN0eCdzvUcHw5gt9pBL5lTi4JDYJ1acCoMGpTvEZg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "magic-string": "^0.25.7"
      },
      "peerDependencies": {
        "rollup": "^1.20.0 || ^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils/node_modules/@types/estree": {
      "version": "0.0.39",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
      "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==",
      "license": "MIT"
    },
    "node_modules/@rushstack/eslint-patch": {
      "version": "1.10.4",
      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.10.4.tgz",
      "integrity": "sha512-WJgX9nzTqknM393q1QJDJmoW28kUfEnybeTfVNcNAPnIx210RXm2DiXiHzfNPJNIUUb1tJnz/l4QGtJ30PgWmA==",
      "license": "MIT"
    },
    "node_modules/@sentry-internal/browser-utils": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry-internal/browser-utils/-/browser-utils-8.27.0.tgz",
      "integrity": "sha512-YTIwQ1GM1NTRXgN4DvpFSQ2x4pjlqQ0FQAyHW5x2ZYv4z7VmqG4Xkid1P/srQUipECk6nxkebfD4WR19nLsvnQ==",
      "license": "MIT",
      "dependencies": {
        "@sentry/core": "8.27.0",
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry-internal/feedback": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry-internal/feedback/-/feedback-8.27.0.tgz",
      "integrity": "sha512-b71PQc9aK1X9b/SO1DiJlrnAEx4n0MzPZQ/tKd9oRWDyGit6pJWZfQns9r2rvc96kJPMOTxFAa/upXRCkA723A==",
      "license": "MIT",
      "dependencies": {
        "@sentry/core": "8.27.0",
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry-internal/replay": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry-internal/replay/-/replay-8.27.0.tgz",
      "integrity": "sha512-Ofucncaon98dvlxte2L//hwuG9yILSxNrTz/PmO0k+HzB9q+oBic4667QF+azWR2qv4oKSWpc+vEovP3hVqveA==",
      "license": "MIT",
      "dependencies": {
        "@sentry-internal/browser-utils": "8.27.0",
        "@sentry/core": "8.27.0",
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry-internal/replay-canvas": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry-internal/replay-canvas/-/replay-canvas-8.27.0.tgz",
      "integrity": "sha512-uuEfiWbjwugB9M4KxXxovHYiKRqg/R6U4EF8xM/Ub4laUuEcWsfRp7lQ3MxL3qYojbca8ncIFic2bIoKMPeejA==",
      "license": "MIT",
      "dependencies": {
        "@sentry-internal/replay": "8.27.0",
        "@sentry/core": "8.27.0",
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry/browser": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry/browser/-/browser-8.27.0.tgz",
      "integrity": "sha512-eL1eaHwoYUGkp4mpeYesH6WtCrm+0u9jYCW5Lm0MAeTmpx22BZKEmj0OljuUJXGnJwFbvPDlRjyz6QG11m8kZA==",
      "license": "MIT",
      "dependencies": {
        "@sentry-internal/browser-utils": "8.27.0",
        "@sentry-internal/feedback": "8.27.0",
        "@sentry-internal/replay": "8.27.0",
        "@sentry-internal/replay-canvas": "8.27.0",
        "@sentry/core": "8.27.0",
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry/core": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry/core/-/core-8.27.0.tgz",
      "integrity": "sha512-4frlXluHT3Du+Omw91K04jpvbfMtydvg4Bxj2+gt/DT19Swhm/fbEpzdUjgbAd3Jinj/n0qk/jFRXjr9JZKFjg==",
      "license": "MIT",
      "dependencies": {
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry/react": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry/react/-/react-8.27.0.tgz",
      "integrity": "sha512-8pD+J9UVnSGmPnm5dHJup5OVsHTN/pL4Ozi01yyrpivLkQiMZNac3OXsc0C7zXnztfLQx0kmTyCOzbRROfbpnA==",
      "license": "MIT",
      "dependencies": {
        "@sentry/browser": "8.27.0",
        "@sentry/core": "8.27.0",
        "@sentry/types": "8.27.0",
        "@sentry/utils": "8.27.0",
        "hoist-non-react-statics": "^3.3.2"
      },
      "engines": {
        "node": ">=14.18"
      },
      "peerDependencies": {
        "react": "^16.14.0 || 17.x || 18.x || 19.x"
      }
    },
    "node_modules/@sentry/types": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry/types/-/types-8.27.0.tgz",
      "integrity": "sha512-B6lrP46+m2x0lfqWc9F4VcUbN893mVGnPEd7KIMRk95mPzkFJ3sNxggTQF5/ZfNO7lDQYQb22uysB5sj/BqFiw==",
      "license": "MIT",
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sentry/utils": {
      "version": "8.27.0",
      "resolved": "https://registry.npmjs.org/@sentry/utils/-/utils-8.27.0.tgz",
      "integrity": "sha512-gyJM3SyLQe0A3mkQVVNdKYvk3ZoikkYgyA/D+5StFNLKdyUgEbJgXOGXrQSSYPF7BSX6Sc5b0KHCglPII0KuKw==",
      "license": "MIT",
      "dependencies": {
        "@sentry/types": "8.27.0"
      },
      "engines": {
        "node": ">=14.18"
      }
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.24.51",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.51.tgz",
      "integrity": "sha512-1P1OROm/rdubP5aFDSZQILU0vrLCJ4fvHt6EoqHEM+2D/G5MK3bIaymUKLit8Js9gbns5UyJnkP/TZROLw4tUA==",
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "1.8.6",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-1.8.6.tgz",
      "integrity": "sha512-Ky+XkAkqPZSm3NLBeUng77EBQl3cmeJhITaGHdYH8kjVB+aun3S4XBRti2zt17mtt0mIUDiNxYeoJm6drVvBJQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-8.1.0.tgz",
      "integrity": "sha512-OAPJUAtgeINhh/TAlUID4QTs53Njm7xzddaVlEs/SXwgtiD1tW22zAB/W1wdqfrpmikgaWQ9Fw6Ws+hsiRm5Vg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^1.7.0"
      }
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@surma/rollup-plugin-off-main-thread": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/@surma/rollup-plugin-off-main-thread/-/rollup-plugin-off-main-thread-2.2.3.tgz",
      "integrity": "sha512-lR8q/9W7hZpMWweNiAKU7NQerBnzQQLvi8qnTDU/fxItPhtZVMbPV3lbCwjhIlNBe9Bbr5V+KHshvWmVSG9cxQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "ejs": "^3.1.6",
        "json5": "^2.2.0",
        "magic-string": "^0.25.0",
        "string.prototype.matchall": "^4.0.6"
      }
    },
    "node_modules/@svgr/babel-plugin-add-jsx-attribute": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-add-jsx-attribute/-/babel-plugin-add-jsx-attribute-5.4.0.tgz",
      "integrity": "sha512-ZFf2gs/8/6B8PnSofI0inYXr2SDNTDScPXhN7k5EqD4aZ3gi6u+rbmZHVB8IM3wDyx8ntKACZbtXSm7oZGRqVg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-attribute": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-attribute/-/babel-plugin-remove-jsx-attribute-5.4.0.tgz",
      "integrity": "sha512-yaS4o2PgUtwLFGTKbsiAy6D0o3ugcUhWK0Z45umJ66EPWunAz9fuFw2gJuje6wqQvQWOTJvIahUwndOXb7QCPg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-empty-expression": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-empty-expression/-/babel-plugin-remove-jsx-empty-expression-5.0.1.tgz",
      "integrity": "sha512-LA72+88A11ND/yFIMzyuLRSMJ+tRKeYKeQ+mR3DcAZ5I4h5CPWN9AHyUzJbWSYp/u2u0xhmgOe0+E41+GjEueA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-replace-jsx-attribute-value": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-replace-jsx-attribute-value/-/babel-plugin-replace-jsx-attribute-value-5.0.1.tgz",
      "integrity": "sha512-PoiE6ZD2Eiy5mK+fjHqwGOS+IXX0wq/YDtNyIgOrc6ejFnxN4b13pRpiIPbtPwHEc+NT2KCjteAcq33/F1Y9KQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-dynamic-title": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-dynamic-title/-/babel-plugin-svg-dynamic-title-5.4.0.tgz",
      "integrity": "sha512-zSOZH8PdZOpuG1ZVx/cLVePB2ibo3WPpqo7gFIjLV9a0QsuQAzJiwwqmuEdTaW2pegyBE17Uu15mOgOcgabQZg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-em-dimensions": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-em-dimensions/-/babel-plugin-svg-em-dimensions-5.4.0.tgz",
      "integrity": "sha512-cPzDbDA5oT/sPXDCUYoVXEmm3VIoAWAPT6mSPTJNbQaBNUuEKVKyGH93oDY4e42PYHRW67N5alJx/eEol20abw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-react-native-svg": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-react-native-svg/-/babel-plugin-transform-react-native-svg-5.4.0.tgz",
      "integrity": "sha512-3eYP/SaopZ41GHwXma7Rmxcv9uRslRDTY1estspeB1w1ueZWd/tPlMfEOoccYpEMZU3jD4OU7YitnXcF5hLW2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-svg-component": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-svg-component/-/babel-plugin-transform-svg-component-5.5.0.tgz",
      "integrity": "sha512-q4jSH1UUvbrsOtlo/tKcgSeiCHRSBdXoIoqX1pgcKK/aU3JD27wmMKwGtpB8qRYUYoyXvfGxUVKchLuR5pB3rQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-preset": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-preset/-/babel-preset-5.5.0.tgz",
      "integrity": "sha512-4FiXBjvQ+z2j7yASeGPEi8VD/5rrGQk4Xrq3EdJmoZgz/tpqChpo5hgXDvmEauwtvOc52q8ghhZK4Oy7qph4ig==",
      "license": "MIT",
      "dependencies": {
        "@svgr/babel-plugin-add-jsx-attribute": "^5.4.0",
        "@svgr/babel-plugin-remove-jsx-attribute": "^5.4.0",
        "@svgr/babel-plugin-remove-jsx-empty-expression": "^5.0.1",
        "@svgr/babel-plugin-replace-jsx-attribute-value": "^5.0.1",
        "@svgr/babel-plugin-svg-dynamic-title": "^5.4.0",
        "@svgr/babel-plugin-svg-em-dimensions": "^5.4.0",
        "@svgr/babel-plugin-transform-react-native-svg": "^5.4.0",
        "@svgr/babel-plugin-transform-svg-component": "^5.5.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/core": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/core/-/core-5.5.0.tgz",
      "integrity": "sha512-q52VOcsJPvV3jO1wkPtzTuKlvX7Y3xIcWRpCMtBF3MrteZJtBfQw/+u0B1BHy5ColpQc1/YVTrPEtSYIMNZlrQ==",
      "license": "MIT",
      "dependencies": {
        "@svgr/plugin-jsx": "^5.5.0",
        "camelcase": "^6.2.0",
        "cosmiconfig": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/hast-util-to-babel-ast": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/hast-util-to-babel-ast/-/hast-util-to-babel-ast-5.5.0.tgz",
      "integrity": "sha512-cAaR/CAiZRB8GP32N+1jocovUtvlj0+e65TB50/6Lcime+EA49m/8l+P2ko+XPJ4dw3xaPS3jOL4F2X4KWxoeQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.12.6"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-jsx": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-jsx/-/plugin-jsx-5.5.0.tgz",
      "integrity": "sha512-V/wVh33j12hGh05IDg8GpIUXbjAPnTdPTKuP4VNLggnwaHMPNQNae2pRnyTAILWCQdz5GyMqtO488g7CKM8CBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@svgr/babel-preset": "^5.5.0",
        "@svgr/hast-util-to-babel-ast": "^5.5.0",
        "svg-parser": "^2.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-svgo": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-svgo/-/plugin-svgo-5.5.0.tgz",
      "integrity": "sha512-r5swKk46GuQl4RrVejVwpeeJaydoxkdwkM1mBKOgJLBUJPGaLci6ylg/IjhrRsREKDkr4kbMWdgOtbXEh0fyLQ==",
      "license": "MIT",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "deepmerge": "^4.2.2",
        "svgo": "^1.2.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/webpack": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/webpack/-/webpack-5.5.0.tgz",
      "integrity": "sha512-DOBOK255wfQxguUta2INKkzPj6AIS6iafZYiYmHn6W3pHlycSRRlvWKCfLDG10fXfLWqE3DJHgRUOyJYmARa7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/plugin-transform-react-constant-elements": "^7.12.1",
        "@babel/preset-env": "^7.12.1",
        "@babel/preset-react": "^7.12.5",
        "@svgr/core": "^5.5.0",
        "@svgr/plugin-jsx": "^5.5.0",
        "@svgr/plugin-svgo": "^5.5.0",
        "loader-utils": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@tanstack/query-core": {
      "version": "5.52.2",
      "resolved": "https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.52.2.tgz",
      "integrity": "sha512-9vvbFecK4A0nDnrc/ks41e3UHONF1DAnGz8Tgbxkl59QcvKWmc0ewhYuIKRh8NC4ja5LTHT9EH16KHbn2AIYWA==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/tannerlinsley"
      }
    },
    "node_modules/@tanstack/react-query": {
      "version": "5.52.2",
      "resolved": "https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.52.2.tgz",
      "integrity": "sha512-d4OwmobpP+6+SvuAxW1RzAY95Pv87Gu+0GjtErzFOUXo+n0FGcwxKvzhswCsXKxsgnAr3bU2eJ2u+GXQAutkCQ==",
      "license": "MIT",
      "dependencies": {
        "@tanstack/query-core": "5.52.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/tannerlinsley"
      },
      "peerDependencies": {
        "react": "^18 || ^19"
      }
    },
    "node_modules/@testing-library/dom": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-10.4.0.tgz",
      "integrity": "sha512-pemlzrSESWbdAloYml3bAJMEfNh1Z7EduzqPKprCH5S341frlpYnUEW0H72dLxa6IsYr+mPno20GiSm+h9dEdQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "@babel/runtime": "^7.12.5",
        "@types/aria-query": "^5.0.1",
        "aria-query": "5.3.0",
        "chalk": "^4.1.0",
        "dom-accessibility-api": "^0.5.9",
        "lz-string": "^1.5.0",
        "pretty-format": "^27.0.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@testing-library/dom/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@testing-library/dom/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@testing-library/dom/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@testing-library/dom/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@testing-library/dom/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/dom/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/jest-dom": {
      "version": "5.17.0",
      "resolved": "https://registry.npmjs.org/@testing-library/jest-dom/-/jest-dom-5.17.0.tgz",
      "integrity": "sha512-ynmNeT7asXyH3aSVv4vvX4Rb+0qjOhdNHnO/3vuZNqPmhDpV/+rCSGwQ7bLcmU2cJ4dvoheIO85LQj0IbJHEtg==",
      "license": "MIT",
      "dependencies": {
        "@adobe/css-tools": "^4.0.1",
        "@babel/runtime": "^7.9.2",
        "@types/testing-library__jest-dom": "^5.9.1",
        "aria-query": "^5.0.0",
        "chalk": "^3.0.0",
        "css.escape": "^1.5.1",
        "dom-accessibility-api": "^0.5.6",
        "lodash": "^4.17.15",
        "redent": "^3.0.0"
      },
      "engines": {
        "node": ">=8",
        "npm": ">=6",
        "yarn": ">=1"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/chalk": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
      "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@testing-library/jest-dom/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/react": {
      "version": "13.4.0",
      "resolved": "https://registry.npmjs.org/@testing-library/react/-/react-13.4.0.tgz",
      "integrity": "sha512-sXOGON+WNTh3MLE9rve97ftaZukN3oNf2KjDy7YTx6hcTO2uuLHuCGynMDhFwGw/jYf4OJ2Qk0i4i79qMNNkyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "@testing-library/dom": "^8.5.0",
        "@types/react-dom": "^18.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "peerDependencies": {
        "react": "^18.0.0",
        "react-dom": "^18.0.0"
      }
    },
    "node_modules/@testing-library/react/node_modules/@testing-library/dom": {
      "version": "8.20.1",
      "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-8.20.1.tgz",
      "integrity": "sha512-/DiOQ5xBxgdYRC8LNk7U+RWat0S3qRLeIw3ZIkMQ9kkVlRmwD/Eg8k8CqIpD6GW7u20JIUOfMKbxtiLutpjQ4g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "@babel/runtime": "^7.12.5",
        "@types/aria-query": "^5.0.1",
        "aria-query": "5.1.3",
        "chalk": "^4.1.0",
        "dom-accessibility-api": "^0.5.9",
        "lz-string": "^1.5.0",
        "pretty-format": "^27.0.2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@testing-library/react/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@testing-library/react/node_modules/aria-query": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.1.3.tgz",
      "integrity": "sha512-R5iJ5lkuHybztUfuOAznmboyjWq8O6sqNqtK7CLOqdydi54VNbORp49mb14KbWgG1QD3JFO9hJdZ+y4KutfdOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "deep-equal": "^2.0.5"
      }
    },
    "node_modules/@testing-library/react/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/@testing-library/react/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/@testing-library/react/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/@testing-library/react/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/react/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@testing-library/user-event": {
      "version": "13.5.0",
      "resolved": "https://registry.npmjs.org/@testing-library/user-event/-/user-event-13.5.0.tgz",
      "integrity": "sha512-5Kwtbo3Y/NowpkbRuSepbyMFkZmHgD+vPzYB/RJ4oxt5Gj/avFFBYjhw27cqSVPVw/3a67NK1PbiIr9k4Gwmdg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5"
      },
      "engines": {
        "node": ">=10",
        "npm": ">=6"
      },
      "peerDependencies": {
        "@testing-library/dom": ">=7.21.4"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-1.1.2.tgz",
      "integrity": "sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@trysound/sax": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@trysound/sax/-/sax-0.2.0.tgz",
      "integrity": "sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==",
      "license": "ISC",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/@types/aria-query": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/@types/aria-query/-/aria-query-5.0.4.tgz",
      "integrity": "sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==",
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.6.8",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.6",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.5",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/bonjour": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@types/bonjour/-/bonjour-3.5.13.tgz",
      "integrity": "sha512-z9fJ5Im06zvUL548KvYNecEVlA7cVDkGUi6kZusb04mpyEFKCIZJvloCcmpmLaIahDpOQGHaHmG6imtPMmPXGQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/chart.js": {
      "version": "2.9.41",
      "resolved": "https://registry.npmjs.org/@types/chart.js/-/chart.js-2.9.41.tgz",
      "integrity": "sha512-3dvkDvueckY83UyUXtJMalYoH6faOLkWQoaTlJgB4Djde3oORmNP0Jw85HtzTuXyliUHcdp704s0mZFQKio/KQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "moment": "^2.10.2"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect-history-api-fallback": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@types/connect-history-api-fallback/-/connect-history-api-fallback-1.5.4.tgz",
      "integrity": "sha512-n6Cr2xS1h4uAulPRdlw6Jl6s1oG8KrVilPN2yUITEs+K48EzMJJ3W1xy8K5eWuFvjp3R74AOIGSmp2UfBJ8HFw==",
      "license": "MIT",
      "dependencies": {
        "@types/express-serve-static-core": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q==",
      "license": "MIT"
    },
    "node_modules/@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/crypto-js": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@types/crypto-js/-/crypto-js-4.2.2.tgz",
      "integrity": "sha512-sDOLlVbHhXpAUAL0YHDUUwDZf3iN4Bwi4W6a0W0b+QcAezUbRtH4FVb+9J4h+XFPW7l/gQ9F8qC7P+Ec4k8QVQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/d3-array": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
      "license": "MIT"
    },
    "node_modules/@types/d3-color": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
      "license": "MIT"
    },
    "node_modules/@types/d3-ease": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
      "license": "MIT"
    },
    "node_modules/@types/d3-interpolate": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-color": "*"
      }
    },
    "node_modules/@types/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-P2dlU/q51fkOc/Gfl3Ul9kicV7l+ra934qBFXCFhrZMOL6du1TM0pm1ThYvENukyOn5h9v+yMJ9Fn5JK4QozrQ==",
      "license": "MIT"
    },
    "node_modules/@types/d3-scale": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.8.tgz",
      "integrity": "sha512-gkK1VVTr5iNiYJ7vWDI+yUFFlszhNMtVeneJ6lUTKPjprsvLLI9/tgEGiXJOnlINJA8FyA88gfnQsHbybVZrYQ==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-time": "*"
      }
    },
    "node_modules/@types/d3-shape": {
      "version": "3.1.6",
      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.6.tgz",
      "integrity": "sha512-5KKk5aKGu2I+O6SONMYSNflgiP0WfZIQvVUMan50wHsLG1G94JlxEVnCpQARfTtzytuY0p/9PXXZb3I7giofIA==",
      "license": "MIT",
      "dependencies": {
        "@types/d3-path": "*"
      }
    },
    "node_modules/@types/d3-time": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.3.tgz",
      "integrity": "sha512-2p6olUZ4w3s+07q3Tm2dbiMZy5pCDfYwtLXXHUnVzXgQlZ/OyPtUz6OL382BkOuGlLXqfT+wqv8Fw2v8/0geBw==",
      "license": "MIT"
    },
    "node_modules/@types/d3-timer": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
      "license": "MIT"
    },
    "node_modules/@types/eslint": {
      "version": "8.56.12",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-8.56.12.tgz",
      "integrity": "sha512-03ruubjWyOHlmljCVoxSuNDdmfZDzsrrz0P2LeJsOXr+ZwFQ+0yQIwNCwt/GYhV7Z31fgtXJTAEs+FYlEL851g==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.5.tgz",
      "integrity": "sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==",
      "license": "MIT"
    },
    "node_modules/@types/express": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
      "integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.19.5",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.5.tgz",
      "integrity": "sha512-y6W03tvrACO72aijJ5uF02FRq5cgDR9lUxddQ8vyF+GvmjJQqbzDcJngEjURc+ZsG31VI3hODNZJ2URj86pzmg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/geojson": {
      "version": "7946.0.14",
      "resolved": "https://registry.npmjs.org/@types/geojson/-/geojson-7946.0.14.tgz",
      "integrity": "sha512-WCfD5Ht3ZesJUsONdhvm84dmzWOiOzOAqOncN0++w0lBw1o8OuDNJF2McvvCef/yBqb/HYRahp1BYtODFQ8bRg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/google.maps": {
      "version": "3.55.2",
      "resolved": "https://registry.npmjs.org/@types/google.maps/-/google.maps-3.55.2.tgz",
      "integrity": "sha512-JcTwzkxskR8DN/nnX96Pie3gGN3WHiPpuxzuQ9z3516o1bB243d8w8DHUJ8BohuzoT1o3HUFta2ns/mkZC8KRw==",
      "license": "MIT"
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/hoist-non-react-statics": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/@types/hoist-non-react-statics/-/hoist-non-react-statics-3.3.5.tgz",
      "integrity": "sha512-SbcrWzkKBw2cdwRTwQAswfpB9g9LJWfjtUeW/jvNwbhC8cpmmNYVePa+ncbUe0rGTQ7G3Ff6mYUN2VMfLVr+Sg==",
      "license": "MIT",
      "dependencies": {
        "@types/react": "*",
        "hoist-non-react-statics": "^3.3.0"
      }
    },
    "node_modules/@types/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/@types/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-oh/6byDPnL1zeNXFrDXFLyZjkr1MsBG667IM792caf1L2UPOOMf65NFzjUH/ltyfwjAGfs1rsX1eftK0jC/KIg==",
      "license": "MIT"
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
      "license": "MIT"
    },
    "node_modules/@types/http-proxy": {
      "version": "1.17.15",
      "resolved": "https://registry.npmjs.org/@types/http-proxy/-/http-proxy-1.17.15.tgz",
      "integrity": "sha512-25g5atgiVNTIv0LBDTg1H74Hvayx0ajtJPLLcYE3whFv75J0pWNtOBzaXJQgDTmrX1bx5U9YC2w/n65BN1HwRQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "27.5.2",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-27.5.2.tgz",
      "integrity": "sha512-mpT8LJJ4CMeeahobofYWIjFo0xonRS/HfxnVEPMPFSQdGUt1uHCnoPT7Zhb+sjDU2wz0oKV0OLUR0WzrHNgfeA==",
      "license": "MIT",
      "dependencies": {
        "jest-matcher-utils": "^27.0.0",
        "pretty-format": "^27.0.0"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "license": "MIT"
    },
    "node_modules/@types/leaflet": {
      "version": "1.9.12",
      "resolved": "https://registry.npmjs.org/@types/leaflet/-/leaflet-1.9.12.tgz",
      "integrity": "sha512-BK7XS+NyRI291HIo0HCfE18Lp8oA30H1gpi1tf0mF3TgiCEzanQjOqNZ4x126SXzzi2oNSZhZ5axJp1k0iM6jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/geojson": "*"
      }
    },
    "node_modules/@types/leaflet.markercluster": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@types/leaflet.markercluster/-/leaflet.markercluster-1.5.4.tgz",
      "integrity": "sha512-tfMP8J62+wfsVLDLGh5Zh1JZxijCaBmVsMAX78MkLPwvPitmZZtSin5aWOVRhZrCS+pEOZwNzexbfWXlY+7yjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/leaflet": "*"
      }
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/moment": {
      "version": "2.13.0",
      "resolved": "https://registry.npmjs.org/@types/moment/-/moment-2.13.0.tgz",
      "integrity": "sha512-DyuyYGpV6r+4Z1bUznLi/Y7HpGn4iQ4IVcGn8zrr1P4KotKLdH0sbK1TFR6RGyX6B+G8u83wCzL+bpawKU/hdQ==",
      "deprecated": "This is a stub types definition for Moment (https://github.com/moment/moment). Moment provides its own type definitions, so you don't need @types/moment installed!",
      "license": "MIT",
      "dependencies": {
        "moment": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "16.18.106",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-16.18.106.tgz",
      "integrity": "sha512-YTgQUcpdXRc7iiEMutkkXl9WUx5lGUCVYvnfRg9CV+IA4l9epctEhCTbaw4KgzXaKYv8emvFJkEM65+MkNUhsQ==",
      "license": "MIT"
    },
    "node_modules/@types/node-forge": {
      "version": "1.3.11",
      "resolved": "https://registry.npmjs.org/@types/node-forge/-/node-forge-1.3.11.tgz",
      "integrity": "sha512-FQx220y22OKNTqaByeBGqHWYz4cl94tpcxeFdvBo3wjG6XPBuZ0BNgNZRV5J5TFmmcsJ4IzsLkmGRiQbnYsBEQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
      "integrity": "sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==",
      "license": "MIT"
    },
    "node_modules/@types/prettier": {
      "version": "2.7.3",
      "resolved": "https://registry.npmjs.org/@types/prettier/-/prettier-2.7.3.tgz",
      "integrity": "sha512-+68kP9yzs4LMp7VNh8gdzMSPZFL44MLGqiHWvttYJe+6qnuVr4Ek9wSBQoveqY/r+LwjCcU29kNVkidwim+kYA==",
      "license": "MIT"
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.12",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.12.tgz",
      "integrity": "sha512-5zvhXYtRNRluoE/jAp4GVsSduVUzNWKkOZrCDBWYtE7biZywwdC2AcEzg+cSMLFRfVgeAFqpfNabiPjxFddV1Q==",
      "license": "MIT"
    },
    "node_modules/@types/q": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@types/q/-/q-1.5.8.tgz",
      "integrity": "sha512-hroOstUScF6zhIi+5+x0dzqrHA1EJi+Irri6b1fxolMTqqHIV/Cg77EtnQcZqZCu8hR3mX2BzIxN4/GzI68Kfw==",
      "license": "MIT"
    },
    "node_modules/@types/qs": {
      "version": "6.9.15",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.15.tgz",
      "integrity": "sha512-uXHQKES6DQKKCLh441Xv/dwxOq1TVS3JPUMlEqoEglvlhR6Mxnlew/Xq/LRVHpLyk7iK3zODe1qYHIMltO7XGg==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.3.4",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.4.tgz",
      "integrity": "sha512-J7W30FTdfCxDDjmfRM+/JqLHBIyl7xUIp9kwK637FGmY7+mkSFSe6L4jpZzhj5QMfLssSDP4/i75AKkrdC7/Jw==",
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-beautiful-dnd": {
      "version": "13.1.8",
      "resolved": "https://registry.npmjs.org/@types/react-beautiful-dnd/-/react-beautiful-dnd-13.1.8.tgz",
      "integrity": "sha512-E3TyFsro9pQuK4r8S/OL6G99eq7p8v29sX0PM7oT8Z+PJfZvSQTx4zTQbUJ+QZXioAF0e7TGBEcA1XhYhCweyQ==",
      "license": "MIT",
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/react-color": {
      "version": "3.0.12",
      "resolved": "https://registry.npmjs.org/@types/react-color/-/react-color-3.0.12.tgz",
      "integrity": "sha512-pr3uKE3lSvf7GFo1Rn2K3QktiZQFFrSgSGJ/3iMvSOYWt2pPAJ97rVdVfhWxYJZ8prAEXzoP2XX//3qGSQgu7Q==",
      "license": "MIT",
      "dependencies": {
        "@types/react": "*",
        "@types/reactcss": "*"
      }
    },
    "node_modules/@types/react-datepicker": {
      "version": "4.19.6",
      "resolved": "https://registry.npmjs.org/@types/react-datepicker/-/react-datepicker-4.19.6.tgz",
      "integrity": "sha512-uH5fzxt9eXxnc+hDCy/iRSFqU2+9lR/q2lAmaG4WILMai1o3IOdpcV+VSypzBFJLTEC2jrfeDXcdol0CJVMq4g==",
      "license": "MIT",
      "dependencies": {
        "@popperjs/core": "^2.9.2",
        "@types/react": "*",
        "date-fns": "^2.0.1",
        "react-popper": "^2.2.5"
      }
    },
    "node_modules/@types/react-datepicker/node_modules/date-fns": {
      "version": "2.30.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.30.0.tgz",
      "integrity": "sha512-fnULvOpxnC5/Vg3NCiWelDsLiUc9bRwAPs/+LfTLNvetFCtCTN+yQz15C/fs4AwX1R9K5GLtLfn8QW+dWisaAw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.21.0"
      },
      "engines": {
        "node": ">=0.11"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/date-fns"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.3.0",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.0.tgz",
      "integrity": "sha512-EhwApuTmMBmXuFOikhQLIBUn6uFg81SwLMOAUgodJF14SOBOCMdU04gDoYi0WOJJHD144TL32z4yDqCW3dnkQg==",
      "license": "MIT",
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/react-leaflet": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/react-leaflet/-/react-leaflet-3.0.0.tgz",
      "integrity": "sha512-p8R9mVKbCDDqOdW+M6GyJJuFn6q+IgDFYavFiOIvaWHuOe5kIHZEtCy1pfM43JIA6JiB3D/aDoby7C51eO+XSg==",
      "deprecated": "This is a stub types definition. react-leaflet provides its own type definitions, so you do not need this installed.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "react-leaflet": "*"
      }
    },
    "node_modules/@types/react-leaflet-markercluster": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/react-leaflet-markercluster/-/react-leaflet-markercluster-3.0.4.tgz",
      "integrity": "sha512-YhN2Jts1CI31LXv+defPHvHrbIbp88ZcMwZwUUf4iRnZ/FJ1jDgb41yOuqXrnyAdwfGkm5BU4q6eBUFnh0J4Vw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/leaflet": "*",
        "@types/leaflet.markercluster": "*",
        "@types/react": "*",
        "@types/react-leaflet": "^2.8.3"
      }
    },
    "node_modules/@types/react-leaflet-markercluster/node_modules/@types/react-leaflet": {
      "version": "2.8.3",
      "resolved": "https://registry.npmjs.org/@types/react-leaflet/-/react-leaflet-2.8.3.tgz",
      "integrity": "sha512-MeBQnVQe6ikw8dkuZE4F96PvMdQeilZG6/ekk5XxhkSzU3lofedULn3UR/6G0uIHjbRazi4DA8LnLACX0bPhBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/leaflet": "*",
        "@types/react": "*"
      }
    },
    "node_modules/@types/react-redux": {
      "version": "7.1.33",
      "resolved": "https://registry.npmjs.org/@types/react-redux/-/react-redux-7.1.33.tgz",
      "integrity": "sha512-NF8m5AjWCkert+fosDsN3hAlHzpjSiXlVy9EgQEmLoBhaNXbmyeGs/aj5dQzKuF+/q+S7JQagorGDW8pJ28Hmg==",
      "license": "MIT",
      "dependencies": {
        "@types/hoist-non-react-statics": "^3.3.0",
        "@types/react": "*",
        "hoist-non-react-statics": "^3.3.0",
        "redux": "^4.0.0"
      }
    },
    "node_modules/@types/react-redux/node_modules/redux": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-4.2.1.tgz",
      "integrity": "sha512-LAUYz4lc+Do8/g7aeRa8JkyDErK6ekstQaqWQrNRW//MY1TvCEpMtpTWvlQ+FPbWCx+Xixu/6SHt5N0HR+SB4w==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.9.2"
      }
    },
    "node_modules/@types/react-transition-group": {
      "version": "4.4.11",
      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.11.tgz",
      "integrity": "sha512-RM05tAniPZ5DZPzzNFP+DmrcOdD0efDUxMy3145oljWSl3x9ZV5vhme98gTxFrj2lhXvmGNnUiuDyJgY9IKkNA==",
      "license": "MIT",
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/reactcss": {
      "version": "1.2.12",
      "resolved": "https://registry.npmjs.org/@types/reactcss/-/reactcss-1.2.12.tgz",
      "integrity": "sha512-BrXUQ86/wbbFiZv8h/Q1/Q1XOsaHneYmCb/tHe9+M8XBAAUc2EHfdY0DY22ZZjVSaXr5ix7j+zsqO2eGZub8lQ==",
      "license": "MIT",
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/redux-logger": {
      "version": "3.0.13",
      "resolved": "https://registry.npmjs.org/@types/redux-logger/-/redux-logger-3.0.13.tgz",
      "integrity": "sha512-jylqZXQfMxahkuPcO8J12AKSSCQngdEWQrw7UiLUJzMBcv1r4Qg77P6mjGLjM27e5gFQDPD8vwUMJ9AyVxFSsg==",
      "license": "MIT",
      "dependencies": {
        "redux": "^5.0.0"
      }
    },
    "node_modules/@types/resolve": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
      "integrity": "sha512-yy7HuzQhj0dhGpD8RLXSZWEkLsV9ibvxvi6EiJ3bkqLAO1RGo0WbkWQiwpRlSFymTJRz0d3k5LM3kkx8ArDbLw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@types/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==",
      "license": "MIT"
    },
    "node_modules/@types/semver": {
      "version": "7.5.8",
      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.5.8.tgz",
      "integrity": "sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==",
      "license": "MIT"
    },
    "node_modules/@types/send": {
      "version": "0.17.4",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-index": {
      "version": "1.9.4",
      "resolved": "https://registry.npmjs.org/@types/serve-index/-/serve-index-1.9.4.tgz",
      "integrity": "sha512-qLpGZ/c2fhSs5gnYsQxtDEq3Oy8SXPClIXkW5ghvAvsNuVSA8k+gCONcUCS/UjLEYvYps+e8uBtfgXgvhwfNug==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.7",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
      "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/socket.io-client": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/socket.io-client/-/socket.io-client-3.0.0.tgz",
      "integrity": "sha512-s+IPvFoEIjKA3RdJz/Z2dGR4gLgysKi8owcnrVwNjgvc01Lk68LJDDsG2GRqegFITcxmvCMYM7bhMpwEMlHmDg==",
      "deprecated": "This is a stub types definition. socket.io-client provides its own type definitions, so you do not need this installed.",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "socket.io-client": "*"
      }
    },
    "node_modules/@types/sockjs": {
      "version": "0.3.36",
      "resolved": "https://registry.npmjs.org/@types/sockjs/-/sockjs-0.3.36.tgz",
      "integrity": "sha512-MK9V6NzAS1+Ud7JV9lJLFqW85VbC9dq3LmwZCuBe4wBDgKC0Kj/jd8Xl+nSviU+Qc3+m7umHHyHg//2KSa0a0Q==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "license": "MIT"
    },
    "node_modules/@types/styled-components": {
      "version": "5.1.34",
      "resolved": "https://registry.npmjs.org/@types/styled-components/-/styled-components-5.1.34.tgz",
      "integrity": "sha512-mmiVvwpYklFIv9E8qfxuPyIt/OuyIrn6gMOAMOFUO3WJfSrSE+sGUoa4PiZj77Ut7bKZpaa6o1fBKS/4TOEvnA==",
      "license": "MIT",
      "dependencies": {
        "@types/hoist-non-react-statics": "*",
        "@types/react": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/stylis": {
      "version": "4.2.5",
      "resolved": "https://registry.npmjs.org/@types/stylis/-/stylis-4.2.5.tgz",
      "integrity": "sha512-1Xve+NMN7FWjY14vLoY5tL3BVEQ/n42YLwaqJIPYhotZ9uBHt87VceMwWQpzmdEt2TNXIorIFG+YeCUUW7RInw==",
      "license": "MIT"
    },
    "node_modules/@types/testing-library__jest-dom": {
      "version": "5.14.9",
      "resolved": "https://registry.npmjs.org/@types/testing-library__jest-dom/-/testing-library__jest-dom-5.14.9.tgz",
      "integrity": "sha512-FSYhIjFlfOpGSRyVoMBMuS3ws5ehFQODymf3vlI7U1K8c7PHwWwFY7VREfmsuzHSOnoKs/9/Y983ayOs7eRzqw==",
      "license": "MIT",
      "dependencies": {
        "@types/jest": "*"
      }
    },
    "node_modules/@types/trusted-types": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
      "license": "MIT"
    },
    "node_modules/@types/use-sync-external-store": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/@types/use-sync-external-store/-/use-sync-external-store-0.0.3.tgz",
      "integrity": "sha512-EwmlvuaxPNej9+T4v5AuBPJa2x2UOJVdjCtDHgcDqitUeOtjnJKJ+apYjVcAoBEMjKW1VVFGZLUb5+qqa09XFA==",
      "license": "MIT"
    },
    "node_modules/@types/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/@types/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-7gqG38EyHgyP1S+7+xomFtL+ZNHcKv6DwNaCZmJmo1vgMugyF3TCnXVg4t1uk89mLNwnLtnY3TpOpCOyp1/xHQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.5.12",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.12.tgz",
      "integrity": "sha512-3tPRkv1EtkDpzlgyKyI8pGsGZAGPEaXeu0DOj5DI25Ja91bdAYddYHbADRYVrZMRbfW+1l5YwXVDKohDJNQxkQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "16.0.9",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-16.0.9.tgz",
      "integrity": "sha512-tHhzvkFXZQeTECenFoRljLBYPZJ7jAVxqqtEI0qTLOmuultnFp4I9yKE17vTuhf7BkhCu7I4XuemPgikDVuYqA==",
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "license": "MIT"
    },
    "node_modules/@types/yup": {
      "version": "0.32.0",
      "resolved": "https://registry.npmjs.org/@types/yup/-/yup-0.32.0.tgz",
      "integrity": "sha512-Gr2lllWTDxGVYHgWfL8szjdedERpNgm44L9BDL2cmcHG7Bfd6taEpiW3ayMFLaYvlJr/6bFXDJdh6L406AGlFg==",
      "deprecated": "This is a stub types definition. yup provides its own type definitions, so you do not need this installed.",
      "license": "MIT",
      "dependencies": {
        "yup": "*"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.62.0.tgz",
      "integrity": "sha512-TiZzBSJja/LbhNPvk6yc0JrX9XqhQ0hdh6M2svYfsHGejaKFIAGd9MQ+ERIMzLGlN/kZoYIgdxFV0PuljTKXag==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.4.0",
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/type-utils": "5.62.0",
        "@typescript-eslint/utils": "5.62.0",
        "debug": "^4.3.4",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "natural-compare-lite": "^1.4.0",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/experimental-utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-5.62.0.tgz",
      "integrity": "sha512-RTXpeB3eMkpoclG3ZHft6vG/Z30azNHuqY6wKPBHlVMZFuEvrtlEDe8gMqDb+SO+9hjC/pLekeSCryf9vMZlCw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "5.62.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.62.0.tgz",
      "integrity": "sha512-VlJEV0fOQ7BExOsHYAGrgbEiZoi8D+Bl2+f6V2RrXerRSylnp+ZBHmPvaIa8cz0Ajx7WO7Z5RqfgYg7ED1nRhA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/typescript-estree": "5.62.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.62.0.tgz",
      "integrity": "sha512-VXuvVvZeQCQb5Zgf4HAxc04q5j+WrNAtNh9OwCsCgpKqESMTu3tF/jhZ3xG6T4NZwWl65Bg8KuS2uEvhSfLl0w==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/visitor-keys": "5.62.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.62.0.tgz",
      "integrity": "sha512-xsSQreu+VnfbqQpW5vnCJdq1Z3Q0U31qiWmRhr98ONQmcp/yhiPJFPq8MXiJVLiksmOKSjIldZzkebzHuCGzew==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/typescript-estree": "5.62.0",
        "@typescript-eslint/utils": "5.62.0",
        "debug": "^4.3.4",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.62.0.tgz",
      "integrity": "sha512-87NVngcbVXUahrRTqIK27gD2t5Cu1yuCXxbLcFtCzZGlfyVWWh8mLHkoxzjsB6DDNnvdL+fW8MiwPEJyGJQDgQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.62.0.tgz",
      "integrity": "sha512-CmcQ6uY7b9y694lKdRB8FEel7JbU/40iSAPomu++SjLMntB+2Leay2LO6i8VnJk58MtE9/nQSFIH6jpyRWyYzA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/visitor-keys": "5.62.0",
        "debug": "^4.3.4",
        "globby": "^11.1.0",
        "is-glob": "^4.0.3",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.62.0.tgz",
      "integrity": "sha512-n8oxjeb5aIbPFEtmQxQYOLI0i9n5ySBEY/ZEHHZqKQSFnxio1rv6dthascc9dLuwrL0RC5mPCxB7vnAVGAYWAQ==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@types/json-schema": "^7.0.9",
        "@types/semver": "^7.3.12",
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/typescript-estree": "5.62.0",
        "eslint-scope": "^5.1.1",
        "semver": "^7.3.7"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.62.0.tgz",
      "integrity": "sha512-07ny+LHRzQXepkGg6w0mFY41fVUNBrL2Roj/++7V1txKugfjm/Ci/qSND03r2RhlJhJYMcTn9AhhSSqQp0Ysyw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.2.0.tgz",
      "integrity": "sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==",
      "license": "ISC"
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.12.1.tgz",
      "integrity": "sha512-EKfMUOPRRUTy5UII4qJDGPpqfwjOmZ5jeGFwid9mnoqIFK+e0vqoi1qH56JpmZSzEL53jKnNzScdmftJyG5xWg==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.11.6",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.6"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.11.6.tgz",
      "integrity": "sha512-ejAj9hfRJ2XMsNHk/v6Fu2dGS+i4UaXBXGemOfQ/JfQ6mdQg/WXtwleQRLLS4OvfDhv8rYnVwH27YJLMyYsxhw==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.11.6.tgz",
      "integrity": "sha512-o0YkoP4pVu4rN8aTJgAyj9hC2Sv5UlkzCHhxqWj8butaLvnpdc2jOwh4ewE6CX0txSfLn/UYaV/pheS2Txg//Q==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.12.1.tgz",
      "integrity": "sha512-nzJwQw99DNDKr9BVCOZcLuJJUlqkJh+kVzVl6Fmq/tI5ZtEyWT1KZMyOXltXLZJmDtvLCDgwsyrkohEtopTXCw==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.11.6.tgz",
      "integrity": "sha512-vUIhZ8LZoIWHBohiEObxVm6hwP034jwmc9kuq5GdHZH0wiLVLIPcMCdpJzG4C11cHoQ25TFIQj9kaVADVX7N3g==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.11.6",
        "@webassemblyjs/helper-api-error": "1.11.6",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.11.6.tgz",
      "integrity": "sha512-sFFHKwcmBprO9e7Icf0+gddyWYDViL8bpPjJJl0WHxCdETktXdmtWLGVzoHbqUcY4Be1LkNfwTmXOJUFZYSJdA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.12.1.tgz",
      "integrity": "sha512-Jif4vfB6FJlUlSbgEMHUyk1j234GTNG9dBJ4XJdOySoj518Xj0oGsNi59cUQF4RRMS9ouBUxDDdyBVfPTypa5g==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.12.1",
        "@webassemblyjs/helper-buffer": "1.12.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.6",
        "@webassemblyjs/wasm-gen": "1.12.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.11.6.tgz",
      "integrity": "sha512-LM4p2csPNvbij6U1f19v6WR56QZ8JcHg3QIJTlSwzFcmx6WSORicYj6I63f9yU1kEUtrpG+kjkiIAkevHpDXrg==",
      "license": "MIT",
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.11.6.tgz",
      "integrity": "sha512-m7a0FhE67DQXgouf1tbN5XQcdWoNgaAuoULHIfGFIEVKA6tu/edls6XnIlkmS6FrXAquJRPni3ZZKjw6FSPjPQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.11.6",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.11.6.tgz",
      "integrity": "sha512-vtXf2wTQ3+up9Zsg8sa2yWiQpzSsMyXj0qViVP6xKGCUT8p8YJ6HqI7l5eCnWx1T/FYdsv07HQs2wTFbbof/RA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.12.1.tgz",
      "integrity": "sha512-1DuwbVvADvS5mGnXbE+c9NfA8QRcZ6iKquqjjmR10k6o+zzsRVesil54DKexiowcFCPdr/Q0qaMgB01+SQ1u6g==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.12.1",
        "@webassemblyjs/helper-buffer": "1.12.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.6",
        "@webassemblyjs/helper-wasm-section": "1.12.1",
        "@webassemblyjs/wasm-gen": "1.12.1",
        "@webassemblyjs/wasm-opt": "1.12.1",
        "@webassemblyjs/wasm-parser": "1.12.1",
        "@webassemblyjs/wast-printer": "1.12.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.12.1.tgz",
      "integrity": "sha512-TDq4Ojh9fcohAw6OIMXqiIcTq5KUXTGRkVxbSo1hQnSy6lAM5GSdfwWeSxpAo0YzgsgF182E/U0mDNhuA0tW7w==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.12.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.6",
        "@webassemblyjs/ieee754": "1.11.6",
        "@webassemblyjs/leb128": "1.11.6",
        "@webassemblyjs/utf8": "1.11.6"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.12.1.tgz",
      "integrity": "sha512-Jg99j/2gG2iaz3hijw857AVYekZe2SAskcqlWIZXjji5WStnOpVoat3gQfT/Q5tb2djnCjBtMocY/Su1GfxPBg==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.12.1",
        "@webassemblyjs/helper-buffer": "1.12.1",
        "@webassemblyjs/wasm-gen": "1.12.1",
        "@webassemblyjs/wasm-parser": "1.12.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.12.1.tgz",
      "integrity": "sha512-xikIi7c2FHXysxXe3COrVUPSheuBtpcfhbpFj4gmu7KRLYOzANztwUU0IbsqvMqzuNK2+glRGWCEqZo1WCLyAQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.12.1",
        "@webassemblyjs/helper-api-error": "1.11.6",
        "@webassemblyjs/helper-wasm-bytecode": "1.11.6",
        "@webassemblyjs/ieee754": "1.11.6",
        "@webassemblyjs/leb128": "1.11.6",
        "@webassemblyjs/utf8": "1.11.6"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.12.1.tgz",
      "integrity": "sha512-+X4WAlOisVWQMikjbcvY2e0rwPsKQ9F688lksZhBcPycBBuii3O7m8FACbDMWDojpAqvjIncrG8J0XHKyQfVeA==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.12.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@zeit/schemas": {
      "version": "2.36.0",
      "resolved": "https://registry.npmjs.org/@zeit/schemas/-/schemas-2.36.0.tgz",
      "integrity": "sha512-7kjMwcChYEzMKjeex9ZFXkt1AyNov9R5HZtjBKVsmVpw7pa7ZtlCGvCBC2vnnXctaYN+aRI61HjIqeetZW5ROg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/abab": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz",
      "integrity": "sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
      "deprecated": "Use your platform's native atob() and btoa() methods instead",
      "license": "BSD-3-Clause"
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.12.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.12.1.tgz",
      "integrity": "sha512-tcpGyI9zbizT9JbV6oYE477V6mTlXvvi0T0G3SNIYE2apm/G5huBa1+K89VGeovbg+jycCrfhl3ADxErOuO6Jg==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-globals": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/acorn-globals/-/acorn-globals-6.0.0.tgz",
      "integrity": "sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==",
      "license": "MIT",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1"
      }
    },
    "node_modules/acorn-globals/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-import-attributes": {
      "version": "1.9.5",
      "resolved": "https://registry.npmjs.org/acorn-import-attributes/-/acorn-import-attributes-1.9.5.tgz",
      "integrity": "sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==",
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^8"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz",
      "integrity": "sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/address": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/address/-/address-1.2.2.tgz",
      "integrity": "sha512-4B/qKCfeE/ODUaAUpSwfzazo5x29WD4r3vXiWsB7I2mSDAihwEqKO+g8GELZUQSSAo5e1XTYh3ZVfLyxBc12nA==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/adjust-sourcemap-loader": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz",
      "integrity": "sha512-OXwN5b9pCUXNQHJpwwD2qP40byEmSgzj8B4ydSN0uMNYWiFmJ6x6KwUllMmfk8Rwu/HJDFR7U8ubsWBoN0Xp0A==",
      "license": "MIT",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "regex-parser": "^2.2.11"
      },
      "engines": {
        "node": ">=8.9"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.5.0.tgz",
      "integrity": "sha512-5GG/5IbQQpC9FpkRGsSvZI5QYeSCzlJHdpBQntCsuTOxhKD8lqKhrleg2Yi7yvMIf82Ycmmqln9U8V9qwEiJew==",
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/ansi-align": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.1.tgz",
      "integrity": "sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.1.0"
      }
    },
    "node_modules/ansi-align/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ansi-align/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-html": {
      "version": "0.0.9",
      "resolved": "https://registry.npmjs.org/ansi-html/-/ansi-html-0.0.9.tgz",
      "integrity": "sha512-ozbS3LuenHVxNRh/wdnN16QapUHzauqSomAl1jwwJRRsGwFwtj644lIhxfWu0Fy0acCij2+AEgHvjscq3dlVXg==",
      "engines": [
        "node >= 0.8.0"
      ],
      "license": "Apache-2.0",
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-html-community": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ansi-html-community/-/ansi-html-community-0.0.8.tgz",
      "integrity": "sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==",
      "engines": [
        "node >= 0.8.0"
      ],
      "license": "Apache-2.0",
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/antd": {
      "version": "5.20.3",
      "resolved": "https://registry.npmjs.org/antd/-/antd-5.20.3.tgz",
      "integrity": "sha512-v2s5LJlhuccIKLT17ESXQDkiQJdPK4jXg4x2pmSSRlrKXAxfftn8Zhd/7pdF3qR3OkwheQpSRjynrNZKp9Tgkg==",
      "license": "MIT",
      "dependencies": {
        "@ant-design/colors": "^7.1.0",
        "@ant-design/cssinjs": "^1.21.0",
        "@ant-design/cssinjs-utils": "^1.0.3",
        "@ant-design/icons": "^5.4.0",
        "@ant-design/react-slick": "~1.1.2",
        "@babel/runtime": "^7.24.8",
        "@ctrl/tinycolor": "^3.6.1",
        "@rc-component/color-picker": "~2.0.1",
        "@rc-component/mutate-observer": "^1.1.0",
        "@rc-component/qrcode": "~1.0.0",
        "@rc-component/tour": "~1.15.0",
        "@rc-component/trigger": "^2.2.1",
        "classnames": "^2.5.1",
        "copy-to-clipboard": "^3.3.3",
        "dayjs": "^1.11.11",
        "rc-cascader": "~3.27.0",
        "rc-checkbox": "~3.3.0",
        "rc-collapse": "~3.7.3",
        "rc-dialog": "~9.5.2",
        "rc-drawer": "~7.2.0",
        "rc-dropdown": "~4.2.0",
        "rc-field-form": "~2.4.0",
        "rc-image": "~7.9.0",
        "rc-input": "~1.6.3",
        "rc-input-number": "~9.2.0",
        "rc-mentions": "~2.15.0",
        "rc-menu": "~9.14.1",
        "rc-motion": "^2.9.2",
        "rc-notification": "~5.6.0",
        "rc-pagination": "~4.2.0",
        "rc-picker": "~4.6.13",
        "rc-progress": "~4.0.0",
        "rc-rate": "~2.13.0",
        "rc-resize-observer": "^1.4.0",
        "rc-segmented": "~2.3.0",
        "rc-select": "~14.15.1",
        "rc-slider": "~11.1.5",
        "rc-steps": "~6.0.1",
        "rc-switch": "~4.1.0",
        "rc-table": "~7.45.7",
        "rc-tabs": "~15.1.1",
        "rc-textarea": "~1.8.1",
        "rc-tooltip": "~6.2.0",
        "rc-tree": "~5.8.8",
        "rc-tree-select": "~5.22.1",
        "rc-upload": "~4.7.0",
        "rc-util": "^5.43.0",
        "scroll-into-view-if-needed": "^3.1.0",
        "throttle-debounce": "^5.0.2"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/ant-design"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "license": "MIT"
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arch": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/arch/-/arch-2.2.0.tgz",
      "integrity": "sha512-Of/R0wqp83cgHozfIYLbBMnej79U/SVGOOyuB3VVFv1NRM/PSFMK12x9KVtiYzJqmnU5WR2qp0Z5rHb7sWGnFQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/archiver": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/archiver/-/archiver-5.3.2.tgz",
      "integrity": "sha512-+25nxyyznAXF7Nef3y0EbBeqmGZgeN/BxHX29Rs39djAfaFalmQ89SE6CWyDCHzGL0yt/ycBtNOmGTW0FyGWNw==",
      "license": "MIT",
      "dependencies": {
        "archiver-utils": "^2.1.0",
        "async": "^3.2.4",
        "buffer-crc32": "^0.2.1",
        "readable-stream": "^3.6.0",
        "readdir-glob": "^1.1.2",
        "tar-stream": "^2.2.0",
        "zip-stream": "^4.1.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/archiver-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-2.1.0.tgz",
      "integrity": "sha512-bEL/yUb/fNNiNTuUz979Z0Yg5L+LzLxGJz8x79lYmR54fmTIb6ob/hNQgkQnIUDWIFjZVQwl9Xs356I6BAMHfw==",
      "license": "MIT",
      "dependencies": {
        "glob": "^7.1.4",
        "graceful-fs": "^4.2.0",
        "lazystream": "^1.0.0",
        "lodash.defaults": "^4.2.0",
        "lodash.difference": "^4.5.0",
        "lodash.flatten": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.union": "^4.6.0",
        "normalize-path": "^3.0.0",
        "readable-stream": "^2.0.0"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/archiver-utils/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/archiver-utils/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/archiver-utils/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/archiver-utils/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/aria-query": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.0.tgz",
      "integrity": "sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==",
      "license": "Apache-2.0",
      "dependencies": {
        "dequal": "^2.0.3"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.1.tgz",
      "integrity": "sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.5",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.8",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.8.tgz",
      "integrity": "sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "is-string": "^1.0.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-tree-filter": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-tree-filter/-/array-tree-filter-2.1.0.tgz",
      "integrity": "sha512-4ROwICNlNw/Hqa9v+rk5h22KjmzB1JGTMVKP2AKJBOCgb0yL0ASf0+YvCcLNNwquOHNX48jkeZIJ3a+oOQqKcw==",
      "license": "MIT"
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.5.tgz",
      "integrity": "sha512-zfETvRFA8o7EiNn++N5f/kaCw221hrpGsDmcpndVupkPzEc1Wuf3VgC0qby1BbHs7f5DVYjgtEU2LLh5bqeGfQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.2.tgz",
      "integrity": "sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.2.0",
        "es-abstract": "^1.22.1",
        "es-shim-unscopables": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.2.tgz",
      "integrity": "sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.2.0",
        "es-abstract": "^1.22.1",
        "es-shim-unscopables": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.reduce": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/array.prototype.reduce/-/array.prototype.reduce-1.0.7.tgz",
      "integrity": "sha512-mzmiUCVwtiD4lgxYP8g7IYy8El8p2CSMePvIbTS7gchKir/L1fgJrk0yDKmAX6mnRQFKNADYIk8nNlTris5H1Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-array-method-boxes-properly": "^1.0.0",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "is-string": "^1.0.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.3.tgz",
      "integrity": "sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.5",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.22.3",
        "es-errors": "^1.2.1",
        "get-intrinsic": "^1.2.3",
        "is-array-buffer": "^3.0.4",
        "is-shared-array-buffer": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "license": "MIT"
    },
    "node_modules/ast-types-flow": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
      "license": "MIT"
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/autoprefixer": {
      "version": "10.4.20",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
      "integrity": "sha512-XY25y5xSv/wEoqzDyXXME4AFfkZI0P23z6Fs3YgymDnKJkCGOnkL0iTxCa85UTqaSgfcqyf3UA6+c7wUvx/16g==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.23.3",
        "caniuse-lite": "^1.0.30001646",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axe-core": {
      "version": "4.10.0",
      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.0.tgz",
      "integrity": "sha512-Mr2ZakwQ7XUAjp7pAwQWRhhK8mQQ6JAaNWSjmjxil0R8BPioMtQsTLOolGYkji1rcL++3dCqZA3zWqpT+9Ew6g==",
      "license": "MPL-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/axios": {
      "version": "1.7.6",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.6.tgz",
      "integrity": "sha512-Ekur6XDwhnJ5RgOCaxFnXyqlPALI3rVeukZMwOdfghW7/wGz784BYKiQq+QD8NPcr91KRo30KfHOchyijwWw7g==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axobject-query": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-3.1.1.tgz",
      "integrity": "sha512-goKlv8DZrK9hUh975fnHzhNIO4jUnFCfv/dszV5VwUGDFjI6vQ2VwoyjYjYNEbBE8AH87TduWP5uyDR1D+Iteg==",
      "license": "Apache-2.0",
      "dependencies": {
        "deep-equal": "^2.0.5"
      }
    },
    "node_modules/babel-jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-27.5.1.tgz",
      "integrity": "sha512-cdQ5dXjGRd0IBRATiQ4mZGlGlRE8kJpjPOixdNRdT+m3UcNqmYWN6rK6nvtXYfY3D76cb8s/O1Ss8ea24PIwcg==",
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-jest/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/babel-jest/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/babel-jest/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/babel-jest/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/babel-jest/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-jest/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-loader": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-8.3.0.tgz",
      "integrity": "sha512-H8SvsMF+m9t15HNLMipppzkC+Y2Yq+v3SonZyU70RBL/h1gxPkH08Ot8pEE9Z4Kd+czyWJClmFS8qzIP9OZ04Q==",
      "license": "MIT",
      "dependencies": {
        "find-cache-dir": "^3.3.1",
        "loader-utils": "^2.0.0",
        "make-dir": "^3.1.0",
        "schema-utils": "^2.6.5"
      },
      "engines": {
        "node": ">= 8.9"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "webpack": ">=2"
      }
    },
    "node_modules/babel-loader/node_modules/schema-utils": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
      "integrity": "sha512-SHiNtMOUGWBQJwzISiVYKu82GiV4QYGePp3odlY1tuKO7gPtphAT5R/py0fA6xtbgLL/RvtJZnU9b8s0F1q0Xg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.5",
        "ajv": "^6.12.4",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-27.5.1.tgz",
      "integrity": "sha512-50wCwD5EMNW4aRpOwtqzyZHIewTYNxLA4nhB+09d8BIssfNfzBRhkBIHiaPv1Si226TQSvp8gxAJm2iY2qs2hQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.0.0",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/babel-plugin-macros": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "cosmiconfig": "^7.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">=10",
        "npm": ">=6"
      }
    },
    "node_modules/babel-plugin-named-asset-import": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/babel-plugin-named-asset-import/-/babel-plugin-named-asset-import-0.3.8.tgz",
      "integrity": "sha512-WXiAc++qo7XcJ1ZnTYGtLxmBCVbddAml3CEXgWaBzNzLNoxtQ8AiGEFDMOhot9XjTCQbvP5E77Fj9Gk924f00Q==",
      "license": "MIT",
      "peerDependencies": {
        "@babel/core": "^7.1.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.4.11",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.11.tgz",
      "integrity": "sha512-sMEJ27L0gRHShOh5G54uAAPaiCOygY/5ratXuiyb2G46FmlSpc9eFCzYVyDiPxfNbwzA7mYahmjQc5q+CZQ09Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.22.6",
        "@babel/helper-define-polyfill-provider": "^0.6.2",
        "semver": "^6.3.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.10.6",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.10.6.tgz",
      "integrity": "sha512-b37+KR2i/khY5sKmWNVQAnitvquQbNdWy6lJdsr0kmquCKEEUgMKK4SboVM3HtfnZilfjr4MMQ7vY58FVWDtIA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.2",
        "core-js-compat": "^3.38.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.2.tgz",
      "integrity": "sha512-2R25rQZWP63nGwaAswvDazbPXfrM3HwVoBXK6HcqeKrSrL/JqcC/rDcf95l4r7LXLyxDXc8uQDa064GubtCABg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-transform-react-remove-prop-types": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-react-remove-prop-types/-/babel-plugin-transform-react-remove-prop-types-0.4.24.tgz",
      "integrity": "sha512-eqj0hVcJUR57/Ug2zE1Yswsw4LhuqqHhD+8v120T1cl3kjg76QwtyBrdIk4WVwK+lAhBJVYCd/v+4nc4y+8JsA==",
      "license": "MIT"
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-27.5.1.tgz",
      "integrity": "sha512-Nptf2FzlPCWYuJg41HBqXVT8ym6bXOevuCTbhxlUpjwtysGaIWFvDEjp4y+G7fl13FgOdjs7P/DmErqH7da0Ag==",
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^27.5.1",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-react-app": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/babel-preset-react-app/-/babel-preset-react-app-10.0.1.tgz",
      "integrity": "sha512-b0D9IZ1WhhCWkrTXyFuIIgqGzSkRIH5D5AmB0bXbzYAB1OBAwHcUeyWW2LorutLWF5btNo/N7r/cIdmvvKJlYg==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@babel/plugin-proposal-class-properties": "^7.16.0",
        "@babel/plugin-proposal-decorators": "^7.16.4",
        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.16.0",
        "@babel/plugin-proposal-numeric-separator": "^7.16.0",
        "@babel/plugin-proposal-optional-chaining": "^7.16.0",
        "@babel/plugin-proposal-private-methods": "^7.16.0",
        "@babel/plugin-transform-flow-strip-types": "^7.16.0",
        "@babel/plugin-transform-react-display-name": "^7.16.0",
        "@babel/plugin-transform-runtime": "^7.16.4",
        "@babel/preset-env": "^7.16.4",
        "@babel/preset-react": "^7.16.0",
        "@babel/preset-typescript": "^7.16.0",
        "@babel/runtime": "^7.16.3",
        "babel-plugin-macros": "^3.1.0",
        "babel-plugin-transform-react-remove-prop-types": "^0.4.24"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "license": "MIT",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/batch": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/batch/-/batch-0.6.1.tgz",
      "integrity": "sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw==",
      "license": "MIT"
    },
    "node_modules/bfj": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/bfj/-/bfj-7.1.0.tgz",
      "integrity": "sha512-I6MMLkn+anzNdCUp9hMRyui1HaNEUCco50lxbvNS4+EyXg8lN3nJ48PjPWtbH8UVS9CuMoaKE9U2V3l29DaRQw==",
      "license": "MIT",
      "dependencies": {
        "bluebird": "^3.7.2",
        "check-types": "^11.2.3",
        "hoopy": "^0.1.4",
        "jsonpath": "^1.1.1",
        "tryer": "^1.0.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/big-integer": {
      "version": "1.6.52",
      "resolved": "https://registry.npmjs.org/big-integer/-/big-integer-1.6.52.tgz",
      "integrity": "sha512-QxD8cf2eVqJOOz63z6JIN9BzvVs/dlySa5HGSBH5xtR8dPteIRQnBxxKqkNTiT6jbDTF6jAfrd4oMcND9RGbQg==",
      "license": "Unlicense",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/binary/-/binary-0.3.0.tgz",
      "integrity": "sha512-D4H1y5KYwpJgK8wk1Cue5LLPgmwHKYSChkbspQg5JtVuR5ulGckxfR62H3AE9UDkdMC8yyXlqYihuz3Aqg2XZg==",
      "license": "MIT",
      "dependencies": {
        "buffers": "~0.1.1",
        "chainsaw": "~0.1.0"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/bonjour-service": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/bonjour-service/-/bonjour-service-1.2.1.tgz",
      "integrity": "sha512-oSzCS2zV14bh2kji6vNe7vrpJYCHGvcZnlffFQ1MEoX/WOeQ/teD8SYWKR942OI3INjq8OMNJlbPK5LLLUxFDw==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "multicast-dns": "^7.2.5"
      }
    },
    "node_modules/boolbase": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
      "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
      "license": "ISC"
    },
    "node_modules/boxen": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-7.0.0.tgz",
      "integrity": "sha512-j//dBVuyacJbvW+tvZ9HuH03fZ46QcaKvvhZickZqtB271DxJ7SNRSNxrV/dZX0085m7hISRZWbzWlJvx/rHSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-align": "^3.0.1",
        "camelcase": "^7.0.0",
        "chalk": "^5.0.1",
        "cli-boxes": "^3.0.0",
        "string-width": "^5.1.2",
        "type-fest": "^2.13.0",
        "widest-line": "^4.0.1",
        "wrap-ansi": "^8.0.1"
      },
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/boxen/node_modules/camelcase": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-7.0.1.tgz",
      "integrity": "sha512-xlx1yCK2Oc1APsPXDL2LdlNP6+uu8OCDdhOBSVT279M/S+y75O30C2VuD8T2ogdePBBl7PfPF4504tnLgX3zfw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/boxen/node_modules/chalk": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
      "integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.17.0 || ^14.13 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/boxen/node_modules/type-fest": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-2.19.0.tgz",
      "integrity": "sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/broadcast-channel": {
      "version": "3.7.0",
      "resolved": "https://registry.npmjs.org/broadcast-channel/-/broadcast-channel-3.7.0.tgz",
      "integrity": "sha512-cIAKJXAxGJceNZGTZSBzMxzyOn72cVgPnKx4dc6LRjQgbaJUQqhy5rzL3zbMxkMWsGKkv2hSFkPRMEXfoMZ2Mg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.7.2",
        "detect-node": "^2.1.0",
        "js-sha3": "0.8.0",
        "microseconds": "0.2.0",
        "nano-time": "1.0.0",
        "oblivious-set": "1.0.0",
        "rimraf": "3.0.2",
        "unload": "2.2.0"
      }
    },
    "node_modules/browser-process-hrtime": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/browser-process-hrtime/-/browser-process-hrtime-1.0.0.tgz",
      "integrity": "sha512-9o5UecI3GhkpM6DrXr69PblIuWxPKk9Y0jHBRhdocZ2y7YECBFCsHm79Pr3OyR2AvjhDkabFJaDJMYRazHgsow==",
      "license": "BSD-2-Clause"
    },
    "node_modules/browserslist": {
      "version": "4.23.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.23.3.tgz",
      "integrity": "sha512-btwCFJVjI4YWDNfau8RhZ+B1Q/VLoUITrm3RlP6y1tYGWIOa+InuYiRGXUBXo8nA1qKmHMyLB/iVQg5TT4eFoA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001646",
        "electron-to-chromium": "^1.5.4",
        "node-releases": "^2.0.18",
        "update-browserslist-db": "^1.1.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/btoa": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/btoa/-/btoa-1.2.1.tgz",
      "integrity": "sha512-SB4/MIGlsiVkMcHmT+pSmIPoNDoHg+7cMzmt3Uxt628MTz2487DKSqK/fuhFBrkuqrYv5UCEnACpF4dTFNKc/g==",
      "dev": true,
      "license": "(MIT OR Apache-2.0)",
      "bin": {
        "btoa": "bin/btoa.js"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/buffer-indexof-polyfill": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/buffer-indexof-polyfill/-/buffer-indexof-polyfill-1.0.2.tgz",
      "integrity": "sha512-I7wzHwA3t1/lwXQh+A5PbNvJxgfo5r3xulgpYDB5zckTu/Z9oUK9biouBKQUjEqzaz3HnAT6TYoovmE+GqSf7A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/buffers": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/buffers/-/buffers-0.1.1.tgz",
      "integrity": "sha512-9q/rDEGSb/Qsvv2qvzIzdluL5k7AaJOTrw23z9reQthrbF7is4CtlT0DXyO1oei2DCp4uojjzQ7igaSHp1kAEQ==",
      "engines": {
        "node": ">=0.2.0"
      }
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bytes": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
      "integrity": "sha512-pMhOfFDPiv9t5jjIXkHosWmkSyQbvsgEVNkz0ERHbuLh2T/7j4Mqqpz523Fe8MVY89KC6Sh/QfS2sM+SjgFDcw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camel-case": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz",
      "integrity": "sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==",
      "license": "MIT",
      "dependencies": {
        "pascal-case": "^3.1.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/camelize": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/camelize/-/camelize-1.0.1.tgz",
      "integrity": "sha512-dU+Tx2fsypxTgtLoE36npi3UqcjSSMNYfkqgmoEhtZrraP5VWq0K7FkWVTYa8eMPtnU/G2txVsfdCJTn9uzpuQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-api": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/caniuse-api/-/caniuse-api-3.0.0.tgz",
      "integrity": "sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.0.0",
        "caniuse-lite": "^1.0.0",
        "lodash.memoize": "^4.1.2",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001653",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001653.tgz",
      "integrity": "sha512-XGWQVB8wFQ2+9NZwZ10GxTYC5hk0Fa+q8cSkr0tgvMhYhMHP/QC+WTgrePMDBWiWc/pV+1ik82Al20XOK25Gcw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/case-sensitive-paths-webpack-plugin": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/case-sensitive-paths-webpack-plugin/-/case-sensitive-paths-webpack-plugin-2.4.0.tgz",
      "integrity": "sha512-roIFONhcxog0JSSWbvVAh3OocukmSgpqOH6YpMkCvav/ySIV3JKg4Dc8vYtQjYi/UxpNE36r/9v+VqTQqgkYmw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chainsaw": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/chainsaw/-/chainsaw-0.1.0.tgz",
      "integrity": "sha512-75kWfWt6MEKNC8xYXIdRpDehRYY/tNSgwKaJq+dbbDcxORuVrrQ+SEHoWsniVn9XPYfP4gmdWIeDk/4YNp1rNQ==",
      "license": "MIT/X11",
      "dependencies": {
        "traverse": ">=0.3.0 <0.4"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chalk-template": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/chalk-template/-/chalk-template-0.4.0.tgz",
      "integrity": "sha512-/ghrgmhfY8RaSdeo43hNXxpoHAtxdbskUHjPpfqUWGttFgycUhYPGx3YZBCnUCvOa7Doivn1IZec3DEGFoMgLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.1.2"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk-template?sponsor=1"
      }
    },
    "node_modules/chalk-template/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/chalk-template/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chalk-template/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/chalk-template/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/chalk-template/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk-template/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chart.js": {
      "version": "4.4.4",
      "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.4.4.tgz",
      "integrity": "sha512-emICKGBABnxhMjUjlYRR12PmOXhJ2eJjEHL2/dZlWjxRAZT1D8xplLFq5M0tMQK8ja+wBS/tuVEJB5C6r7VxJA==",
      "license": "MIT",
      "dependencies": {
        "@kurkle/color": "^0.3.0"
      },
      "engines": {
        "pnpm": ">=8"
      }
    },
    "node_modules/check-types": {
      "version": "11.2.3",
      "resolved": "https://registry.npmjs.org/check-types/-/check-types-11.2.3.tgz",
      "integrity": "sha512-+67P1GkJRaxQD6PKK0Et9DhwQB+vGg3PM5+aavopCpZT1lj9jeqfvpgTLAWErNj8qApkkmXlu/Ug74kmhagkXg==",
      "license": "MIT"
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.0.tgz",
      "integrity": "sha512-N1NGmowPlGBLsOZLPvm48StN04V4YvQRL0i6b7ctrVY3epjP/ct7hFLOItz6pDIvRjwpfPxi52a2UWV2ziir8g==",
      "license": "MIT"
    },
    "node_modules/classnames": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/classnames/-/classnames-2.5.1.tgz",
      "integrity": "sha512-saHYOzhIQs6wy2sVxTM6bUDsQO4F50V9RQ22qBpEdCW+I+/Wmke2HOl6lS6dTpdxVhb88/I6+Hs+438c3lfUow==",
      "license": "MIT"
    },
    "node_modules/clean-css": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz",
      "integrity": "sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==",
      "license": "MIT",
      "dependencies": {
        "source-map": "~0.6.0"
      },
      "engines": {
        "node": ">= 10.0"
      }
    },
    "node_modules/clean-css/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cli-boxes": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-3.0.0.tgz",
      "integrity": "sha512-/lzGpEWL/8PfI0BmBOPRwp0c/wFNX1RdUML3jK/RcSBA9T8mZDdQpqYBKtCFTOfQbwPqWEOpjqW+Fnayc0969g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/clipboardy": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/clipboardy/-/clipboardy-3.0.0.tgz",
      "integrity": "sha512-Su+uU5sr1jkUy1sGRpLKjKrvEOVXgSgiSInwa/qeID6aJ07yh+5NWc3h2QfjHjBnfX4LhtFcuAWKUsJ3r+fjbg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "arch": "^2.2.0",
        "execa": "^5.1.1",
        "is-wsl": "^2.2.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/cliui/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/cliui/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/cliui/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/cliui/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/cliui/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cliui/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/coa": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/coa/-/coa-2.0.2.tgz",
      "integrity": "sha512-q5/jG+YQnSy4nRTV4F7lPepBJZ8qBNJJDBuJdoejDyLXgmL7IEo+Le2JDZudFTFt7mrCqIRaSjws4ygRCTCAXA==",
      "license": "MIT",
      "dependencies": {
        "@types/q": "^1.5.1",
        "chalk": "^2.4.1",
        "q": "^1.1.2"
      },
      "engines": {
        "node": ">= 4.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "license": "MIT"
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/colord": {
      "version": "2.9.3",
      "resolved": "https://registry.npmjs.org/colord/-/colord-2.9.3.tgz",
      "integrity": "sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==",
      "license": "MIT"
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
      "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/common-tags": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/common-tags/-/common-tags-1.8.2.tgz",
      "integrity": "sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
      "license": "MIT"
    },
    "node_modules/compress-commons": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/compress-commons/-/compress-commons-4.1.2.tgz",
      "integrity": "sha512-D3uMHtGc/fcO1Gt1/L7i1e33VOvD4A9hfQLP+6ewd+BvG/gQ84Yh4oftEhAdjSMgBgwGL+jsppT7JYNpo6MHHg==",
      "license": "MIT",
      "dependencies": {
        "buffer-crc32": "^0.2.13",
        "crc32-stream": "^4.0.2",
        "normalize-path": "^3.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "license": "MIT",
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/compression": {
      "version": "1.7.4",
      "resolved": "https://registry.npmjs.org/compression/-/compression-1.7.4.tgz",
      "integrity": "sha512-jaSIDzP9pZVS4ZfQ+TzvtiWhdpFhE2RDHz8QJkpX9SIpLq88VueF5jJw6t+6CUQcAoA6t+x89MLrWAqpfDE8iQ==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.5",
        "bytes": "3.0.0",
        "compressible": "~2.0.16",
        "debug": "2.6.9",
        "on-headers": "~1.0.2",
        "safe-buffer": "5.1.2",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/compression/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/compression/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/compression/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/compute-scroll-into-view": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/compute-scroll-into-view/-/compute-scroll-into-view-3.1.0.tgz",
      "integrity": "sha512-rj8l8pD4bJ1nx+dAkMhV1xB5RuZEyVysfxJqB1pRchh1KVvwOv9b7CGB8ZfjTImVv2oF+sYMUkMZq6Na5Ftmbg==",
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/confusing-browser-globals": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/confusing-browser-globals/-/confusing-browser-globals-1.0.11.tgz",
      "integrity": "sha512-JsPKdmh8ZkmnHxDk55FZ1TqVLvEQTvoByJZRN9jzI0UjxK/QgAmsphz7PGtqgPieQZ/CQcHWXCR7ATDNhGe+YA==",
      "license": "MIT"
    },
    "node_modules/connect-history-api-fallback": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-2.0.0.tgz",
      "integrity": "sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
      "integrity": "sha512-kRGRZw3bLlFISDBgwTSA1TMBFN6J6GWDeubmDE3AF+3+yXL8hTWv8r5rkLbqYXY4RjPk/EzHnClI3zQf1cFmHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/copy-to-clipboard": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/copy-to-clipboard/-/copy-to-clipboard-3.3.3.tgz",
      "integrity": "sha512-2KV8NhB5JqC3ky0r9PMCAZKbUHSwtEo4CwCs0KXgruG43gX5PMqDEBbVU4OUzw2MuAWUfsuFmWvEKG5QRfSnJA==",
      "license": "MIT",
      "dependencies": {
        "toggle-selection": "^1.0.6"
      }
    },
    "node_modules/core-js": {
      "version": "3.38.1",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.38.1.tgz",
      "integrity": "sha512-OP35aUorbU3Zvlx7pjsFdu1rGNnD4pgw/CWoYzRY3t2EzoVT7shKHY1dlAy3f41cGIO7ZDPQimhGFTlEYkG/Hw==",
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-compat": {
      "version": "3.38.1",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.38.1.tgz",
      "integrity": "sha512-JRH6gfXxGmrzF3tZ57lFx97YARxCXPaMzPo6jELZhv88pBH5VXpQ+y0znKGlFnzuaihqhLbefxSJxWJMPtfDzw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.23.3"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-pure": {
      "version": "3.38.1",
      "resolved": "https://registry.npmjs.org/core-js-pure/-/core-js-pure-3.38.1.tgz",
      "integrity": "sha512-BY8Etc1FZqdw1glX0XNOq2FDwfrg/VGqoZOZCdaL+UmdaqDwQwYXkMJT4t6In+zfEfOJDcM9T0KdbBeJg8KKCQ==",
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/crc-32": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
      "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
      "license": "Apache-2.0",
      "bin": {
        "crc32": "bin/crc32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/crc32-stream": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/crc32-stream/-/crc32-stream-4.0.3.tgz",
      "integrity": "sha512-NT7w2JVU7DFroFdYkeq8cywxrgjPHWkdX1wjpRQXPX5Asews3tA+Ght6lddQO5Mkumffp3X7GEqku3epj2toIw==",
      "license": "MIT",
      "dependencies": {
        "crc-32": "^1.2.0",
        "readable-stream": "^3.4.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==",
      "license": "MIT"
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/css-blank-pseudo": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/css-blank-pseudo/-/css-blank-pseudo-3.0.3.tgz",
      "integrity": "sha512-VS90XWtsHGqoM0t4KpH053c4ehxZ2E6HtGI7x68YFV0pTo/QmkV/YFA+NnlvK8guxZVNWGQhVNJGC39Q8XF4OQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "bin": {
        "css-blank-pseudo": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-box-model": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/css-box-model/-/css-box-model-1.2.1.tgz",
      "integrity": "sha512-a7Vr4Q/kd/aw96bnJG332W9V9LkJO69JRcaCYDUqjp6/z0w6VcZjgAcTbgFxEPfBgdnAwlh3iwu+hLopa+flJw==",
      "license": "MIT",
      "dependencies": {
        "tiny-invariant": "^1.0.6"
      }
    },
    "node_modules/css-color-keywords": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/css-color-keywords/-/css-color-keywords-1.0.0.tgz",
      "integrity": "sha512-FyyrDHZKEjXDpNJYvVsV960FiqQyXc/LlYmsxl2BcdMb2WPx0OGRVgTg55rPSyLSNMqP52R9r8geSp7apN3Ofg==",
      "license": "ISC",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/css-declaration-sorter": {
      "version": "6.4.1",
      "resolved": "https://registry.npmjs.org/css-declaration-sorter/-/css-declaration-sorter-6.4.1.tgz",
      "integrity": "sha512-rtdthzxKuyq6IzqX6jEcIzQF/YqccluefyCYheovBOLhFT/drQA9zj/UbRAa9J7C0o6EG6u3E6g+vKkay7/k3g==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.0.9"
      }
    },
    "node_modules/css-has-pseudo": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/css-has-pseudo/-/css-has-pseudo-3.0.4.tgz",
      "integrity": "sha512-Vse0xpR1K9MNlp2j5w1pgWIJtm1a8qS0JwS9goFYcImjlHEmywP9VUF05aGBXzGpDJF86QXk4L0ypBmwPhGArw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "bin": {
        "css-has-pseudo": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-loader": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/css-loader/-/css-loader-6.11.0.tgz",
      "integrity": "sha512-CTJ+AEQJjq5NzLga5pE39qdiSV56F8ywCIsqNIRF0r7BDgWsN25aazToqAFg7ZrtA/U016xudB3ffgweORxX7g==",
      "license": "MIT",
      "dependencies": {
        "icss-utils": "^5.1.0",
        "postcss": "^8.4.33",
        "postcss-modules-extract-imports": "^3.1.0",
        "postcss-modules-local-by-default": "^4.0.5",
        "postcss-modules-scope": "^3.2.0",
        "postcss-modules-values": "^4.0.0",
        "postcss-value-parser": "^4.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "@rspack/core": "0.x || 1.x",
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@rspack/core": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/css-minimizer-webpack-plugin": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-3.4.1.tgz",
      "integrity": "sha512-1u6D71zeIfgngN2XNRJefc/hY7Ybsxd74Jm4qngIXyUEk7fss3VUzuHxLAq/R8NAba4QU9OUSaMZlbpRc7bM4Q==",
      "license": "MIT",
      "dependencies": {
        "cssnano": "^5.0.6",
        "jest-worker": "^27.0.2",
        "postcss": "^8.3.5",
        "schema-utils": "^4.0.0",
        "serialize-javascript": "^6.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@parcel/css": {
          "optional": true
        },
        "clean-css": {
          "optional": true
        },
        "csso": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/css-prefers-color-scheme": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/css-prefers-color-scheme/-/css-prefers-color-scheme-6.0.3.tgz",
      "integrity": "sha512-4BqMbZksRkJQx2zAjrokiGMd07RqOa2IxIrrN10lyBe9xhn9DEvjUK79J6jkeiv9D9hQFXKb6g1jwU62jziJZA==",
      "license": "CC0-1.0",
      "bin": {
        "css-prefers-color-scheme": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-select": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-4.3.0.tgz",
      "integrity": "sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.0.1",
        "domhandler": "^4.3.1",
        "domutils": "^2.8.0",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/css-select-base-adapter": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/css-select-base-adapter/-/css-select-base-adapter-0.1.1.tgz",
      "integrity": "sha512-jQVeeRG70QI08vSTwf1jHxp74JoZsr2XSgETae8/xC8ovSnL2WF87GTLO86Sbwdt2lK4Umg4HnnwMO4YF3Ce7w==",
      "license": "MIT"
    },
    "node_modules/css-to-react-native": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/css-to-react-native/-/css-to-react-native-3.2.0.tgz",
      "integrity": "sha512-e8RKaLXMOFii+02mOlqwjbD00KSEKqblnpO9e++1aXS1fPQOpS1YoqdVHBqPjHNoxeF2mimzVqawm2KCbEdtHQ==",
      "license": "MIT",
      "dependencies": {
        "camelize": "^1.0.0",
        "css-color-keywords": "^1.0.0",
        "postcss-value-parser": "^4.0.2"
      }
    },
    "node_modules/css-tree": {
      "version": "1.0.0-alpha.37",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.0.0-alpha.37.tgz",
      "integrity": "sha512-DMxWJg0rnz7UgxKT0Q1HU/L9BeJI0M6ksor0OgqOnF+aRCDWg/N2641HmVyU9KVIu0OVVWOb2IpC9A+BJRnejg==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.4",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/css-tree/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/css-what": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz",
      "integrity": "sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/css.escape": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/css.escape/-/css.escape-1.5.1.tgz",
      "integrity": "sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==",
      "license": "MIT"
    },
    "node_modules/cssdb": {
      "version": "7.11.2",
      "resolved": "https://registry.npmjs.org/cssdb/-/cssdb-7.11.2.tgz",
      "integrity": "sha512-lhQ32TFkc1X4eTefGfYPvgovRSzIMofHkigfH8nWtyRL4XJLsRhJFreRvEgKzept7x1rjBuy3J/MurXLaFxW/A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        }
      ],
      "license": "CC0-1.0"
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "license": "MIT",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/cssnano": {
      "version": "5.1.15",
      "resolved": "https://registry.npmjs.org/cssnano/-/cssnano-5.1.15.tgz",
      "integrity": "sha512-j+BKgDcLDQA+eDifLx0EO4XSA56b7uut3BQFH+wbSaSTuGLuiyTa/wbRYthUXX8LC9mLg+WWKe8h+qJuwTAbHw==",
      "license": "MIT",
      "dependencies": {
        "cssnano-preset-default": "^5.2.14",
        "lilconfig": "^2.0.3",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/cssnano"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-preset-default": {
      "version": "5.2.14",
      "resolved": "https://registry.npmjs.org/cssnano-preset-default/-/cssnano-preset-default-5.2.14.tgz",
      "integrity": "sha512-t0SFesj/ZV2OTylqQVOrFgEh5uanxbO6ZAdeCrNsUQ6fVuXwYTxJPNAGvGTxHbD68ldIJNec7PyYZDBrfDQ+6A==",
      "license": "MIT",
      "dependencies": {
        "css-declaration-sorter": "^6.3.1",
        "cssnano-utils": "^3.1.0",
        "postcss-calc": "^8.2.3",
        "postcss-colormin": "^5.3.1",
        "postcss-convert-values": "^5.1.3",
        "postcss-discard-comments": "^5.1.2",
        "postcss-discard-duplicates": "^5.1.0",
        "postcss-discard-empty": "^5.1.1",
        "postcss-discard-overridden": "^5.1.0",
        "postcss-merge-longhand": "^5.1.7",
        "postcss-merge-rules": "^5.1.4",
        "postcss-minify-font-values": "^5.1.0",
        "postcss-minify-gradients": "^5.1.1",
        "postcss-minify-params": "^5.1.4",
        "postcss-minify-selectors": "^5.2.1",
        "postcss-normalize-charset": "^5.1.0",
        "postcss-normalize-display-values": "^5.1.0",
        "postcss-normalize-positions": "^5.1.1",
        "postcss-normalize-repeat-style": "^5.1.1",
        "postcss-normalize-string": "^5.1.0",
        "postcss-normalize-timing-functions": "^5.1.0",
        "postcss-normalize-unicode": "^5.1.1",
        "postcss-normalize-url": "^5.1.0",
        "postcss-normalize-whitespace": "^5.1.1",
        "postcss-ordered-values": "^5.1.3",
        "postcss-reduce-initial": "^5.1.2",
        "postcss-reduce-transforms": "^5.1.0",
        "postcss-svgo": "^5.1.0",
        "postcss-unique-selectors": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-utils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cssnano-utils/-/cssnano-utils-3.1.0.tgz",
      "integrity": "sha512-JQNR19/YZhz4psLX/rQ9M83e3z2Wf/HdJbryzte4a3NSuafyp9w/I4U+hx5C2S9g41qlstH7DEWnZaaj83OuEA==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/csso": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/csso/-/csso-4.2.0.tgz",
      "integrity": "sha512-wvlcdIbf6pwKEk7vHj8/Bkc0B4ylXZruLvOgs9doS5eOsOpuodOV2zJChSpkp+pRpYQLQMeF04nr3Z68Sta9jA==",
      "license": "MIT",
      "dependencies": {
        "css-tree": "^1.1.2"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csso/node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csso/node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
      "license": "CC0-1.0"
    },
    "node_modules/csso/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cssom": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/cssom/-/cssom-0.4.4.tgz",
      "integrity": "sha512-p3pvU7r1MyyqbTk+WbNJIgJjG2VmTIaB10rI93LzVPrmDJKkzKYMtxxyAvQXR/NS6otuzveI7+7BBq3SjBS2mw==",
      "license": "MIT"
    },
    "node_modules/cssstyle": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-2.3.0.tgz",
      "integrity": "sha512-AZL67abkUzIuvcHqk7c09cezpGNcxUxU4Ioi/05xHk4DQeTkWmGYftIE6ctU6AEt+Gn4n1lDStOtj7FKycP71A==",
      "license": "MIT",
      "dependencies": {
        "cssom": "~0.3.6"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cssstyle/node_modules/cssom": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/cssom/-/cssom-0.3.8.tgz",
      "integrity": "sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==",
      "license": "MIT"
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/damerau-levenshtein": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/data-urls": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-2.0.0.tgz",
      "integrity": "sha512-X5eWTSXO/BJmpdIKCRuKUgSCgAN0OwliVK3yPKbwIWU1Tdw5BRajxlzMidvh+gwko9AfQ9zIj52pzF91Q3YAvQ==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.3",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.1.tgz",
      "integrity": "sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.1.tgz",
      "integrity": "sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.0.tgz",
      "integrity": "sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/date-fns": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/kossnocorp"
      }
    },
    "node_modules/dayjs": {
      "version": "1.11.13",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.13.tgz",
      "integrity": "sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==",
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.6.tgz",
      "integrity": "sha512-O/09Bd4Z1fBrU4VzkhFqVgpPzaGbw6Sm9FEkBT1A/YBXQFGuuSxa1dN2nxgxS34JmKXqYx8CZAwEVoJFImUXIg==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.4.3.tgz",
      "integrity": "sha512-VBBaLc1MgL5XpzgIP7ny5Z6Nx3UrRkIViUkPUdtl9aya5amy3De1gsUUSB1g3+3sExYNjCAsAznmukyxCb1GRA==",
      "license": "MIT"
    },
    "node_modules/decimal.js-light": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
      "license": "MIT"
    },
    "node_modules/decode-uri-component": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.2.tgz",
      "integrity": "sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/dedent": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-0.7.0.tgz",
      "integrity": "sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==",
      "license": "MIT"
    },
    "node_modules/deep-diff": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/deep-diff/-/deep-diff-0.3.8.tgz",
      "integrity": "sha512-yVn6RZmHiGnxRKR9sJb3iVV2XTF1Ghh2DiWRZ3dMnGc43yUdWWF/kX6lQyk3+P84iprfWKU/8zFTrlkvtFm1ug==",
      "license": "MIT"
    },
    "node_modules/deep-equal": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/deep-equal/-/deep-equal-2.2.3.tgz",
      "integrity": "sha512-ZIwpnevOurS8bpT4192sqAowWM76JDKSHYzMLty3BZGSswgq6pBaH3DhCSW5xVAZICZyKdOBPjwww5wfgT/6PA==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.0",
        "call-bind": "^1.0.5",
        "es-get-iterator": "^1.1.3",
        "get-intrinsic": "^1.2.2",
        "is-arguments": "^1.1.1",
        "is-array-buffer": "^3.0.2",
        "is-date-object": "^1.0.5",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.2",
        "isarray": "^2.0.5",
        "object-is": "^1.1.5",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.4",
        "regexp.prototype.flags": "^1.5.1",
        "side-channel": "^1.0.4",
        "which-boxed-primitive": "^1.0.2",
        "which-collection": "^1.0.1",
        "which-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/default-gateway": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/default-gateway/-/default-gateway-6.0.3.tgz",
      "integrity": "sha512-fwSOJsbbNzZ/CUFpqFBqYfYNLj1NbMPm8MMCIzHjC83iSJRBEGmDUxU+WP661BaBQImeC2yHwXtz+P/O9o+XEg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "execa": "^5.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-lazy-prop": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz",
      "integrity": "sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/dequal": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-node": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
      "license": "MIT"
    },
    "node_modules/detect-port-alt": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/detect-port-alt/-/detect-port-alt-1.1.6.tgz",
      "integrity": "sha512-5tQykt+LqfJFBEYaDITx7S7cR7mJ/zQmLXZ2qt5w04ainYZw6tBf9dBunMjVeVOdYVRUzUOE4HkY5J7+uttb5Q==",
      "license": "MIT",
      "dependencies": {
        "address": "^1.0.1",
        "debug": "^2.6.0"
      },
      "bin": {
        "detect": "bin/detect-port",
        "detect-port": "bin/detect-port"
      },
      "engines": {
        "node": ">= 4.2.1"
      }
    },
    "node_modules/detect-port-alt/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/detect-port-alt/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "license": "Apache-2.0"
    },
    "node_modules/diff-sequences": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-27.5.1.tgz",
      "integrity": "sha512-k1gCAXAsNgLwEL+Y8Wvl+M6oEFj5bgazfZULpS5CneoPPXRaCCW7dm+q21Ky2VEE5X+VeRDBVg1Pcvvsr4TtNQ==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "license": "MIT"
    },
    "node_modules/dns-packet": {
      "version": "5.6.1",
      "resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-5.6.1.tgz",
      "integrity": "sha512-l4gcSouhcgIKRvyy99RNVOgxXiicE+2jZoNmaNmZ6JXiGajBOJAesk1OBlJuM5k2c+eudGdLxDqXuPCKIj6kpw==",
      "license": "MIT",
      "dependencies": {
        "@leichtgewicht/ip-codec": "^2.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dom-accessibility-api": {
      "version": "0.5.16",
      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.5.16.tgz",
      "integrity": "sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==",
      "license": "MIT"
    },
    "node_modules/dom-converter": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/dom-converter/-/dom-converter-0.2.0.tgz",
      "integrity": "sha512-gd3ypIPfOMr9h5jIKq8E3sHOTCjeirnl0WK5ZdS1AW0Odt0b1PaWaHdJ4Qk4klv+YB9aJBS7mESXjFoDQPu6DA==",
      "license": "MIT",
      "dependencies": {
        "utila": "~0.4"
      }
    },
    "node_modules/dom-helpers": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.7",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/dom-serializer": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
      "integrity": "sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.0",
        "entities": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/domelementtype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "BSD-2-Clause"
    },
    "node_modules/domexception": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/domexception/-/domexception-2.0.1.tgz",
      "integrity": "sha512-yxJ2mFy/sibVQlu5qHjOkf9J3K6zgmCxgJ94u2EdvDOV09H+32LtRswEcUsmUWN72pVLOEnTSRaIVVzVQgS0dg==",
      "deprecated": "Use your platform's native DOMException instead",
      "license": "MIT",
      "dependencies": {
        "webidl-conversions": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domexception/node_modules/webidl-conversions": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-5.0.0.tgz",
      "integrity": "sha512-VlZwKPCkYKxQgeSbH5EyngOmRp7Ww7I9rQLERETtf5ofd9pGeswWiOtogpEO850jziPRarreGxn5QIiTqpb2wA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domhandler": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-4.3.1.tgz",
      "integrity": "sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "domelementtype": "^2.2.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/domutils": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-2.8.0.tgz",
      "integrity": "sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "^1.0.1",
        "domelementtype": "^2.2.0",
        "domhandler": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/dotenv": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/dotenv-expand": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/dotenv-expand/-/dotenv-expand-5.1.0.tgz",
      "integrity": "sha512-YXQl1DSa4/PQyRfgrv6aoNjhasp/p4qs9FjJ4q4cQk+8m4r6k4ZSiEyytKG8f8W9gi8WsQtIObNmKd+tMzNTmA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/duplexer": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz",
      "integrity": "sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==",
      "license": "MIT"
    },
    "node_modules/duplexer2": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.4.tgz",
      "integrity": "sha512-asLFVfWWtJ90ZyOUHMqk7/S2w2guQKxUI2itj3d92ADHhxUSbCMGi1f1cBcJ7xM1To+pE/Khbwo1yuNbMEPKeA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "readable-stream": "^2.0.2"
      }
    },
    "node_modules/duplexer2/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/duplexer2/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/duplexer2/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/duplexer2/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "license": "MIT"
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/ejs": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
      "integrity": "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==",
      "license": "Apache-2.0",
      "dependencies": {
        "jake": "^10.8.5"
      },
      "bin": {
        "ejs": "bin/cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.13",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.13.tgz",
      "integrity": "sha512-lbBcvtIJ4J6sS4tb5TLp1b4LyfCdMkwStzXPyAgVgTRAsep4bvrAGaBOP7ZJtQMNJpSQ9SqG4brWOroNaQtm7Q==",
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
      "integrity": "sha512-uDfvUjVrfGJJhymx/kz6prltenw1u7WrCg1oa94zYY8xxVpLLUu045LAT0dhDZdXG58/EpPL/5kA180fQ/qudg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "license": "MIT"
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/engine.io": {
      "version": "6.5.5",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.5.tgz",
      "integrity": "sha512-C5Pn8Wk+1vKBoHghJODM63yk8MvrO9EWZUfkAt5HAqIgPE4/8FF0PEGHXtEd40l223+cE5ABWuPzm38PHFXfMA==",
      "license": "MIT",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-client": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/engine.io-client/-/engine.io-client-6.5.4.tgz",
      "integrity": "sha512-GeZeeRjpD2qf49cZQ0Wvh/8NJNfeXkXXcoGh+F77oEAgo9gUHwT1fCRxSNU+YEEaysOJTnsFHmM5oAcPy4ntvQ==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1",
        "xmlhttprequest-ssl": "~2.0.0"
      }
    },
    "node_modules/engine.io-client/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "5.17.1",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.17.1.tgz",
      "integrity": "sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "license": "BSD-2-Clause",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-stack-parser": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/error-stack-parser/-/error-stack-parser-2.1.4.tgz",
      "integrity": "sha512-Sk5V6wVazPhq5MhpO+AUxJn5x7XSXGl1R93Vn7i+zS15KDVxQijejNCrz8340/2bgLBjR9GtEG8ZVKONDjcqGQ==",
      "license": "MIT",
      "dependencies": {
        "stackframe": "^1.3.4"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.23.3",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.23.3.tgz",
      "integrity": "sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "arraybuffer.prototype.slice": "^1.0.3",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.7",
        "data-view-buffer": "^1.0.1",
        "data-view-byte-length": "^1.0.1",
        "data-view-byte-offset": "^1.0.0",
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-set-tostringtag": "^2.0.3",
        "es-to-primitive": "^1.2.1",
        "function.prototype.name": "^1.1.6",
        "get-intrinsic": "^1.2.4",
        "get-symbol-description": "^1.0.2",
        "globalthis": "^1.0.3",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.0.3",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.2",
        "internal-slot": "^1.0.7",
        "is-array-buffer": "^3.0.4",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.1",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.1.4",
        "is-shared-array-buffer": "^1.0.3",
        "is-string": "^1.0.7",
        "is-typed-array": "^1.1.13",
        "is-weakref": "^1.0.2",
        "object-inspect": "^1.13.1",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.5",
        "regexp.prototype.flags": "^1.5.2",
        "safe-array-concat": "^1.1.2",
        "safe-regex-test": "^1.0.3",
        "string.prototype.trim": "^1.2.9",
        "string.prototype.trimend": "^1.0.8",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.2",
        "typed-array-byte-length": "^1.0.1",
        "typed-array-byte-offset": "^1.0.2",
        "typed-array-length": "^1.0.6",
        "unbox-primitive": "^1.0.2",
        "which-typed-array": "^1.1.15"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-array-method-boxes-properly": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz",
      "integrity": "sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==",
      "license": "MIT"
    },
    "node_modules/es-define-property": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-get-iterator": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/es-get-iterator/-/es-get-iterator-1.1.3.tgz",
      "integrity": "sha512-sPZmqHBe6JIiTfN5q2pEi//TwxmAFHwj/XEuYjTuse78i8KxaqMTTzxPoFKuzRpDpTJ+0NAbpfenkmH2rePtuw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.1.3",
        "has-symbols": "^1.0.3",
        "is-arguments": "^1.1.1",
        "is-map": "^2.0.2",
        "is-set": "^2.0.2",
        "is-string": "^1.0.7",
        "isarray": "^2.0.5",
        "stop-iteration-iterator": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.0.19",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.0.19.tgz",
      "integrity": "sha512-zoMwbCcH5hwUkKJkT8kDIBZSz9I6mVG//+lDCinLCGov4+r7NIy0ld8o03M0cJxl2spVf6ESYVS6/gpIfq1FFw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "globalthis": "^1.0.3",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.0.3",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.7",
        "iterator.prototype": "^1.1.2",
        "safe-array-concat": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.5.4.tgz",
      "integrity": "sha512-MVNK56NiMrOwitFB7cqDwq0CQutbw+0BvLshJSse0MUNU+y1FC3bUS/AQg7oUng+/wKrrki7JfmwtVHkVfPLlw==",
      "license": "MIT"
    },
    "node_modules/es-object-atoms": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.0.0.tgz",
      "integrity": "sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.0.3.tgz",
      "integrity": "sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.4",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.0.2.tgz",
      "integrity": "sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.0"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
      "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.1.4",
        "is-date-object": "^1.0.1",
        "is-symbol": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.2.tgz",
      "integrity": "sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/escodegen": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
      "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^5.2.0",
        "esutils": "^2.0.2"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=6.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/escodegen/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.0.tgz",
      "integrity": "sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.0",
        "@humanwhocodes/config-array": "^0.11.14",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-prettier": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-9.1.0.tgz",
      "integrity": "sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "eslint-config-prettier": "bin/cli.js"
      },
      "peerDependencies": {
        "eslint": ">=7.0.0"
      }
    },
    "node_modules/eslint-config-react-app": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/eslint-config-react-app/-/eslint-config-react-app-7.0.1.tgz",
      "integrity": "sha512-K6rNzvkIeHaTd8m/QEh1Zko0KI7BACWkkneSs6s9cKZC/J27X3eZR6Upt1jkmZ/4FK+XUOPPxMEN7+lbUXfSlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@babel/eslint-parser": "^7.16.3",
        "@rushstack/eslint-patch": "^1.1.0",
        "@typescript-eslint/eslint-plugin": "^5.5.0",
        "@typescript-eslint/parser": "^5.5.0",
        "babel-preset-react-app": "^10.0.1",
        "confusing-browser-globals": "^1.0.11",
        "eslint-plugin-flowtype": "^8.0.3",
        "eslint-plugin-import": "^2.25.3",
        "eslint-plugin-jest": "^25.3.0",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-react": "^7.27.1",
        "eslint-plugin-react-hooks": "^4.3.0",
        "eslint-plugin-testing-library": "^5.0.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "eslint": "^8.0.0"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.8.2",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.8.2.tgz",
      "integrity": "sha512-3XnC5fDyc8M4J2E8pt8pmSVRX2M+5yWMCfI/kDZwauQeFgzQOuhcRBFKjTeJagqgk4sFKxe1mvNVnaWwImx/Tg==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-flowtype": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/eslint-plugin-flowtype/-/eslint-plugin-flowtype-8.0.3.tgz",
      "integrity": "sha512-dX8l6qUL6O+fYPtpNRideCFSpmWOUVx5QcaGLVqe/vlDiBSe4vYljDWDETwnyFzpl7By/WVIu6rcrniCgH9BqQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "lodash": "^4.17.21",
        "string-natural-compare": "^3.0.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@babel/plugin-syntax-flow": "^7.14.5",
        "@babel/plugin-transform-react-jsx": "^7.14.9",
        "eslint": "^8.1.0"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.29.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.29.1.tgz",
      "integrity": "sha512-BbPC0cuExzhiMo4Ff1BTVwHpjjv28C5R+btTOGaCRC7UEz801up0JadwkeSk5Ued6TG34uaczuVuH6qyy5YUxw==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.7",
        "array.prototype.findlastindex": "^1.2.3",
        "array.prototype.flat": "^1.3.2",
        "array.prototype.flatmap": "^1.3.2",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.8.0",
        "hasown": "^2.0.0",
        "is-core-module": "^2.13.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.7",
        "object.groupby": "^1.0.1",
        "object.values": "^1.1.7",
        "semver": "^6.3.1",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-jest": {
      "version": "25.7.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jest/-/eslint-plugin-jest-25.7.0.tgz",
      "integrity": "sha512-PWLUEXeeF7C9QGKqvdSbzLOiLTx+bno7/HC9eefePfEb257QFHg7ye3dh80AZVkaa/RQsBB1Q/ORQvg2X7F0NQ==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/experimental-utils": "^5.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      },
      "peerDependencies": {
        "@typescript-eslint/eslint-plugin": "^4.0.0 || ^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "@typescript-eslint/eslint-plugin": {
          "optional": true
        },
        "jest": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-jsx-a11y": {
      "version": "6.9.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.9.0.tgz",
      "integrity": "sha512-nOFOCaJG2pYqORjK19lqPqxMO/JpvdCZdPtNdxY3kvom3jTvkAbOvQvD8wuD0G8BYR0IGAGYDlzqWJOh/ybn2g==",
      "license": "MIT",
      "dependencies": {
        "aria-query": "~5.1.3",
        "array-includes": "^3.1.8",
        "array.prototype.flatmap": "^1.3.2",
        "ast-types-flow": "^0.0.8",
        "axe-core": "^4.9.1",
        "axobject-query": "~3.1.1",
        "damerau-levenshtein": "^1.0.8",
        "emoji-regex": "^9.2.2",
        "es-iterator-helpers": "^1.0.19",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^3.3.5",
        "language-tags": "^1.0.9",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "safe-regex-test": "^1.0.3",
        "string.prototype.includes": "^2.0.0"
      },
      "engines": {
        "node": ">=4.0"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8"
      }
    },
    "node_modules/eslint-plugin-jsx-a11y/node_modules/aria-query": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.1.3.tgz",
      "integrity": "sha512-R5iJ5lkuHybztUfuOAznmboyjWq8O6sqNqtK7CLOqdydi54VNbORp49mb14KbWgG1QD3JFO9hJdZ+y4KutfdOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "deep-equal": "^2.0.5"
      }
    },
    "node_modules/eslint-plugin-prettier": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-5.2.1.tgz",
      "integrity": "sha512-gH3iR3g4JfF+yYPaJYkN7jEl9QbweL/YfkoRlNnuIEHEz1vHVlCmWOS+eGGiRuzHQXdJFCOTxRgvju9b8VUmrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prettier-linter-helpers": "^1.0.0",
        "synckit": "^0.9.1"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint-plugin-prettier"
      },
      "peerDependencies": {
        "@types/eslint": ">=8.0.0",
        "eslint": ">=8.0.0",
        "eslint-config-prettier": "*",
        "prettier": ">=3.0.0"
      },
      "peerDependenciesMeta": {
        "@types/eslint": {
          "optional": true
        },
        "eslint-config-prettier": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.35.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.35.0.tgz",
      "integrity": "sha512-v501SSMOWv8gerHkk+IIQBkcGRGrO2nfybfj5pLxuJNFTPxxA3PSryhXTK+9pNbtkggheDdsC0E9Q8CuPk6JKA==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.2",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.0.19",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.8",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.0",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.11",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-testing-library": {
      "version": "5.11.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-testing-library/-/eslint-plugin-testing-library-5.11.1.tgz",
      "integrity": "sha512-5eX9e1Kc2PqVRed3taaLnAAqPZGEX75C+M/rXzUAI3wIg/ZxzUm1OVAwfe/O+vE+6YXOLetSe9g5GKD2ecXipw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "^5.58.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0",
        "npm": ">=6"
      },
      "peerDependencies": {
        "eslint": "^7.5.0 || ^8.0.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/eslint-scope/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-webpack-plugin": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/eslint-webpack-plugin/-/eslint-webpack-plugin-3.2.0.tgz",
      "integrity": "sha512-avrKcGncpPbPSUHX6B3stNGzkKFto3eL+DKM4+VyMrVnhPc3vRczVlCq3uhuFOdRvDHTVXuzwk1ZKUrqDQHQ9w==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint": "^7.29.0 || ^8.4.1",
        "jest-worker": "^28.0.2",
        "micromatch": "^4.0.5",
        "normalize-path": "^3.0.0",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "eslint": "^7.0.0 || ^8.0.0",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/jest-worker": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-28.1.3.tgz",
      "integrity": "sha512-CqRA220YV/6jCo8VWvAt1KKx6eek1VIHMPeLEbpcfSfkEeWyBNppynM/o6q+Wmw+sOhos2ml34wZbSX3G13//g==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/eslint/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/eslint/node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eslint/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
      "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/exceljs": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/exceljs/-/exceljs-4.4.0.tgz",
      "integrity": "sha512-XctvKaEMaj1Ii9oDOqbW/6e1gXknSY4g/aLCDicOXqBE4M0nRWkUu0PTp++UPNzoFY12BNHMfs/VadKIS6llvg==",
      "license": "MIT",
      "dependencies": {
        "archiver": "^5.0.0",
        "dayjs": "^1.8.34",
        "fast-csv": "^4.3.1",
        "jszip": "^3.10.1",
        "readable-stream": "^3.6.0",
        "saxes": "^5.0.1",
        "tmp": "^0.2.0",
        "unzipper": "^0.10.11",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=8.3.0"
      }
    },
    "node_modules/exceljs/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/expect/-/expect-27.5.1.tgz",
      "integrity": "sha512-E1q5hSUG2AmYQwQJ041nvgpkODHQvB+RKlB4IYdru6uJsyFTRyZAP463M+1lINorwbqAmUggi6+WwkD8lCS/Dw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.19.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.2",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.6.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/express/node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/express/node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==",
      "license": "MIT"
    },
    "node_modules/express/node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fast-csv": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/fast-csv/-/fast-csv-4.3.6.tgz",
      "integrity": "sha512-2RNSpuwwsJGP0frGsOmTb9oUF+VkFSM4SyLTDgwf2ciHWTarN0lQTC+F2f/t5J9QjW+c65VFIAAu85GsvMIusw==",
      "license": "MIT",
      "dependencies": {
        "@fast-csv/format": "4.3.5",
        "@fast-csv/parse": "4.3.6"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-diff": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.3.0.tgz",
      "integrity": "sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/fast-equals": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.0.1.tgz",
      "integrity": "sha512-WF1Wi8PwwSY7/6Kx0vKXtw8RwuSGoM1bvDaJbu7MxDlR1vovZjIAKrnzyrThgAjm6JDTu0fVgWXDlMGspodfoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/fast-glob": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "license": "MIT"
    },
    "node_modules/fast-uri": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.1.tgz",
      "integrity": "sha512-MWipKbbYiYI0UC7cl8m/i/IWTqfC8YXsqjzybjddLsFjStroQzsHXkc73JutMvBiXmOvapk+axIl79ig5t55Bw==",
      "license": "MIT"
    },
    "node_modules/fast-url-parser": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/fast-url-parser/-/fast-url-parser-1.1.3.tgz",
      "integrity": "sha512-5jOCVXADYNuRkKFzNJ0dCCewsZiYo0dz8QNYljkOpFC6r2U4OBmKtvm/Tsuh4w1YYdDqDb31a8TVhBJ2OJKdqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "punycode": "^1.3.2"
      }
    },
    "node_modules/fastq": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/file-loader": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/file-loader/-/file-loader-6.2.0.tgz",
      "integrity": "sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==",
      "license": "MIT",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "schema-utils": "^3.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/file-loader/node_modules/schema-utils": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz",
      "integrity": "sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/filelist": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz",
      "integrity": "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.0.1"
      }
    },
    "node_modules/filelist/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/filelist/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/filesize": {
      "version": "8.0.7",
      "resolved": "https://registry.npmjs.org/filesize/-/filesize-8.0.7.tgz",
      "integrity": "sha512-pjmC+bkIF8XI7fWaH8KxHcZL3DPybs1roSKP4rKDvy20tAWwIObE4+JIseG2byfGKhud5ZnM4YSGKBz7Sh0ndQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/filter-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/filter-obj/-/filter-obj-1.1.0.tgz",
      "integrity": "sha512-8rXg1ZnX7xzy2NGDVkBVaAy+lSlPNwad13BtgSlLuxfIslyt5Vg64U7tFcCt4WS1R0hvtnQybT/IyCkGZ3DpXQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-cache-dir": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
      "license": "MIT",
      "dependencies": {
        "commondir": "^1.0.1",
        "make-dir": "^3.0.2",
        "pkg-dir": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
      }
    },
    "node_modules/find-root": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
      "license": "MIT"
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
      "license": "ISC"
    },
    "node_modules/focus-trap": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/focus-trap/-/focus-trap-7.5.4.tgz",
      "integrity": "sha512-N7kHdlgsO/v+iD/dMoJKtsSqs5Dz/dXZVebRgJw23LDk+jMi/974zyiOYDziY2JPp8xivq9BmUGwIJMiuSBi7w==",
      "license": "MIT",
      "dependencies": {
        "tabbable": "^6.2.0"
      }
    },
    "node_modules/focus-trap-react": {
      "version": "10.2.3",
      "resolved": "https://registry.npmjs.org/focus-trap-react/-/focus-trap-react-10.2.3.tgz",
      "integrity": "sha512-YXBpFu/hIeSu6NnmV2xlXzOYxuWkoOtar9jzgp3lOmjWLWY59C/b8DtDHEAV4SPU07Nd/t+nS/SBNGkhUBFmEw==",
      "license": "MIT",
      "dependencies": {
        "focus-trap": "^7.5.4",
        "tabbable": "^6.2.0"
      },
      "peerDependencies": {
        "prop-types": "^15.8.1",
        "react": ">=16.3.0",
        "react-dom": ">=16.3.0"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.6",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz",
      "integrity": "sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.3.tgz",
      "integrity": "sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.1.3"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.0",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/foreground-child/node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.3.tgz",
      "integrity": "sha512-SbH/l9ikmMWycd5puHJKTkZJKddF4iRLyW3DeZ08HTI7NGyLS38MXd/KGgeWumQO7YNQbW2u/NtPT2YowbPaGQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.8.3",
        "@types/json-schema": "^7.0.5",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "cosmiconfig": "^6.0.0",
        "deepmerge": "^4.2.2",
        "fs-extra": "^9.0.0",
        "glob": "^7.1.6",
        "memfs": "^3.1.2",
        "minimatch": "^3.0.4",
        "schema-utils": "2.7.0",
        "semver": "^7.3.2",
        "tapable": "^1.0.0"
      },
      "engines": {
        "node": ">=10",
        "yarn": ">=1.0.0"
      },
      "peerDependencies": {
        "eslint": ">= 6",
        "typescript": ">= 2.7",
        "vue-template-compiler": "*",
        "webpack": ">= 4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        },
        "vue-template-compiler": {
          "optional": true
        }
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/cosmiconfig": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.1.0",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.7.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/schema-utils": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.0.tgz",
      "integrity": "sha512-0ilKFI6QQF5nxDZLFn2dMjvc4hjg/Wkg7rHd3jK6/A4a1Hl9VFdQWvgB1UMGoU94pad1P/8N7fMcEnLnSiju8A==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.4",
        "ajv": "^6.12.2",
        "ajv-keywords": "^3.4.1"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/tapable": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-1.1.3.tgz",
      "integrity": "sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/formik": {
      "version": "2.4.6",
      "resolved": "https://registry.npmjs.org/formik/-/formik-2.4.6.tgz",
      "integrity": "sha512-A+2EI7U7aG296q2TLGvNapDNTZp1khVt5Vk0Q/fyfSROss0V/V6+txt2aJnwEos44IxTCW/LYAi/zgWzlevj+g==",
      "funding": [
        {
          "type": "individual",
          "url": "https://opencollective.com/formik"
        }
      ],
      "license": "Apache-2.0",
      "dependencies": {
        "@types/hoist-non-react-statics": "^3.3.1",
        "deepmerge": "^2.1.1",
        "hoist-non-react-statics": "^3.3.0",
        "lodash": "^4.17.21",
        "lodash-es": "^4.17.21",
        "react-fast-compare": "^2.0.1",
        "tiny-warning": "^1.0.2",
        "tslib": "^2.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8.0"
      }
    },
    "node_modules/formik/node_modules/deepmerge": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-2.2.1.tgz",
      "integrity": "sha512-R9hc1Xa/NOBi9WRVUWg19rl1UB7Tt4kuPd+thNJgFZoxXsTz7ncaPaeIm+40oSGuP33DfMb4sZt1QIGiJzC4EA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/formik/node_modules/react-fast-compare": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/react-fast-compare/-/react-fast-compare-2.0.4.tgz",
      "integrity": "sha512-suNP+J1VU1MWFKcyt7RtjiSWUjvidmQSlqu+eHslq+342xCbGTYmC0mEhPCOHxlW0CywylOC1u2DFAT+bv4dBw==",
      "license": "MIT"
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/framer-motion": {
      "version": "11.3.30",
      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-11.3.30.tgz",
      "integrity": "sha512-9VmqGe9OIjfMoCcs+ZsKXlv6JaG5QagKX2F1uSbkG3Z33wgjnz60Kw+CngC1M49rDYau+Y9aL+8jGagAwrbVyw==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "@emotion/is-prop-valid": "*",
        "react": "^18.0.0",
        "react-dom": "^18.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/is-prop-valid": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==",
      "license": "MIT"
    },
    "node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs-monkey": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/fs-monkey/-/fs-monkey-1.0.6.tgz",
      "integrity": "sha512-b1FMfwetIKymC0eioW7mTywihSQE4oLzQn1dB6rZB5fx/3NpNEdAWeCSMB+60/AeT0TCXsxzAlcYVEFCTAksWg==",
      "license": "Unlicense"
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/fstream": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/fstream/-/fstream-1.0.12.tgz",
      "integrity": "sha512-WvJ193OHa0GHPEL+AycEJgxvBEwyfRkN1vhjca23OaPVMCaLCXTd5qAu82AjTcgP1UJmytkOKb63Ypde7raDIg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "inherits": "~2.0.0",
        "mkdirp": ">=0.5 0",
        "rimraf": "2"
      },
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/fstream/node_modules/rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.6.tgz",
      "integrity": "sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "define-properties": "^1.2.0",
        "es-abstract": "^1.22.1",
        "functions-have-names": "^1.2.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-own-enumerable-property-symbols": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/get-own-enumerable-property-symbols/-/get-own-enumerable-property-symbols-3.0.2.tgz",
      "integrity": "sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g==",
      "license": "ISC"
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.0.2.tgz",
      "integrity": "sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause"
    },
    "node_modules/global-modules": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/global-modules/-/global-modules-2.0.0.tgz",
      "integrity": "sha512-NGbfmJBp9x8IxyJSd1P+otYK8vonoJactOogrVfFRIAEY1ukil8RSKDz2Yo7wh1oihl51l/r6W4epkeKJHqL8A==",
      "license": "MIT",
      "dependencies": {
        "global-prefix": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-prefix/-/global-prefix-3.0.0.tgz",
      "integrity": "sha512-awConJSVCHVGND6x3tmMaKcQvwXLhjdkmomy2W+Goaui8YPgYgXJZewhg3fWC+DlfqqQuWg8AwqjGTD2nAPVWg==",
      "license": "MIT",
      "dependencies": {
        "ini": "^1.3.5",
        "kind-of": "^6.0.2",
        "which": "^1.3.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "license": "MIT",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.1.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "license": "MIT"
    },
    "node_modules/gzip-size": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/gzip-size/-/gzip-size-6.0.0.tgz",
      "integrity": "sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==",
      "license": "MIT",
      "dependencies": {
        "duplexer": "^0.1.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/handle-thing": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/handle-thing/-/handle-thing-2.0.1.tgz",
      "integrity": "sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg==",
      "license": "MIT"
    },
    "node_modules/harmony-reflect": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/harmony-reflect/-/harmony-reflect-1.6.2.tgz",
      "integrity": "sha512-HIp/n38R9kQjDEziXyDTuW3vvoxxyxjxFzXLrBr18uB47GnSt+G9D29fqrpM5ZkspMcPICud3XsBJQ4Y2URg8g==",
      "license": "(Apache-2.0 OR MPL-1.1)"
    },
    "node_modules/has-bigints": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.0.2.tgz",
      "integrity": "sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/he": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
      "license": "MIT",
      "bin": {
        "he": "bin/he"
      }
    },
    "node_modules/hoist-non-react-statics": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "react-is": "^16.7.0"
      }
    },
    "node_modules/hoist-non-react-statics/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/hoopy": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/hoopy/-/hoopy-0.1.4.tgz",
      "integrity": "sha512-HRcs+2mr52W0K+x8RzcLzuPPmVIKMSv97RGHy0Ea9y/mpcaK+xTrjICA04KAHi4GRzxliNqNJEFYWHghy3rSfQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/hpack.js": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/hpack.js/-/hpack.js-2.1.6.tgz",
      "integrity": "sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.1",
        "obuf": "^1.0.0",
        "readable-stream": "^2.0.1",
        "wbuf": "^1.1.0"
      }
    },
    "node_modules/hpack.js/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/hpack.js/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/hpack.js/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/hpack.js/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/html-encoding-sniffer": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-2.0.1.tgz",
      "integrity": "sha512-D5JbOMBIR/TVZkubHT+OyT2705QvogUW4IBn6nHd756OwieSF9aDYFj4dv6HHEVGYbHaLETa3WggZYWWMyy3ZQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-encoding": "^1.0.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/html-entities": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.5.2.tgz",
      "integrity": "sha512-K//PSRMQk4FZ78Kyau+mZurHn3FH0Vwr+H36eE0rPbeYkRRi9YxceYPhuN60UwWorxyKHhqoAJl2OFKa4BVtaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT"
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "license": "MIT"
    },
    "node_modules/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-YXxSlJBZTP7RS3tWnQw74ooKa6L9b9i9QYXY21eUEvhZ3u9XLfv6OnFsQq6RxkhHygsaUMvYsZRV5rU/OVNZxw==",
      "license": "MIT",
      "dependencies": {
        "camel-case": "^4.1.2",
        "clean-css": "^5.2.2",
        "commander": "^8.3.0",
        "he": "^1.2.0",
        "param-case": "^3.0.4",
        "relateurl": "^0.2.7",
        "terser": "^5.10.0"
      },
      "bin": {
        "html-minifier-terser": "cli.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/html-webpack-plugin": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/html-webpack-plugin/-/html-webpack-plugin-5.6.0.tgz",
      "integrity": "sha512-iwaY4wzbe48AfKLZ/Cc8k0L+FKG6oSNRaZ8x5A/T/IVDGyXcbHncM9TdDa93wn0FsSm82FhTKW7f3vS61thXAw==",
      "license": "MIT",
      "dependencies": {
        "@types/html-minifier-terser": "^6.0.0",
        "html-minifier-terser": "^6.0.2",
        "lodash": "^4.17.21",
        "pretty-error": "^4.0.0",
        "tapable": "^2.0.0"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/html-webpack-plugin"
      },
      "peerDependencies": {
        "@rspack/core": "0.x || 1.x",
        "webpack": "^5.20.0"
      },
      "peerDependenciesMeta": {
        "@rspack/core": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/htmlparser2": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-6.1.0.tgz",
      "integrity": "sha512-gyyPk6rgonLFEDGoeRgQNaEUvdJ4ktTmmUh/h2t7s+M8oPpIPxgNACWa+6ESR57kXstwqPiCut0V8NRpcwgU7A==",
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.0.0",
        "domutils": "^2.5.2",
        "entities": "^2.0.0"
      }
    },
    "node_modules/http-deceiver": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/http-deceiver/-/http-deceiver-1.2.7.tgz",
      "integrity": "sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw==",
      "license": "MIT"
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.8",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.8.tgz",
      "integrity": "sha512-SGeBX54F94Wgu5RH3X5jsDtf4eHyRogWX1XGT3b4HuW3tQPM4AaBzoUji/4AAJNXCEOWZ5O0DgZmJw1947gD5Q==",
      "license": "MIT"
    },
    "node_modules/http-proxy": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
      "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
      "license": "MIT",
      "dependencies": {
        "eventemitter3": "^4.0.0",
        "follow-redirects": "^1.0.0",
        "requires-port": "^1.0.0"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz",
      "integrity": "sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==",
      "license": "MIT",
      "dependencies": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-middleware": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/http-proxy-middleware/-/http-proxy-middleware-2.0.6.tgz",
      "integrity": "sha512-ya/UeJ6HVBYxrgYotAZo1KvPWlgB48kUJLDePFeneHsVujFaW5WNj2NgWCAE//B1Dl02BIfYlpNgBy8Kf8Rjmw==",
      "license": "MIT",
      "dependencies": {
        "@types/http-proxy": "^1.17.8",
        "http-proxy": "^1.18.1",
        "is-glob": "^4.0.1",
        "is-plain-obj": "^3.0.0",
        "micromatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@types/express": "^4.17.13"
      },
      "peerDependenciesMeta": {
        "@types/express": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/icss-utils": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/icss-utils/-/icss-utils-5.1.0.tgz",
      "integrity": "sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "license": "ISC"
    },
    "node_modules/identity-obj-proxy": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/identity-obj-proxy/-/identity-obj-proxy-3.0.0.tgz",
      "integrity": "sha512-00n6YnVHKrinT9t0d9+5yZC6UBNJANpYEQvL2LlX6Ab9lnmxzIRcEmTPuyGScvl1+jKuCICX1Z0Ab1pPKKdikA==",
      "license": "MIT",
      "dependencies": {
        "harmony-reflect": "^1.4.6"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==",
      "license": "MIT"
    },
    "node_modules/immer": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/immer/-/immer-10.1.1.tgz",
      "integrity": "sha512-s2MPrmjovJcoMaHtx6K11Ra7oD05NT97w1IC5zpMkT6Atjr7H8LjaDd81iIxUYpMKSRRNMJE703M1Fhr/TctHw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.7.tgz",
      "integrity": "sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.0",
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/intl-messageformat": {
      "version": "10.5.14",
      "resolved": "https://registry.npmjs.org/intl-messageformat/-/intl-messageformat-10.5.14.tgz",
      "integrity": "sha512-IjC6sI0X7YRjjyVH9aUgdftcmZK7WXdHeil4KwbjDnRWjnVitKpAx3rr6t6di1joFp5188VqKcobOPA6mCLG/w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "@formatjs/fast-memoize": "2.2.0",
        "@formatjs/icu-messageformat-parser": "2.7.8",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/invariant": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.4.tgz",
      "integrity": "sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.0.0"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-2.2.0.tgz",
      "integrity": "sha512-Ag3wB2o37wslZS19hZqorUnrnzSkpOVy+IiiDEiTqNubEYpYuHWIf6K4psgN2ZWKExS4xhVCrRVfb/wfW8fWJA==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/is-arguments": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.1.1.tgz",
      "integrity": "sha512-8Q7EARjzEnKpt/PCD7e1cgUS0a6X8u5tdSiMqXhojOdoV9TsMsiO+9VLC5vAmO8N7/GmXn7yjR8qnA6bVAEzfA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.4.tgz",
      "integrity": "sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "get-intrinsic": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-async-function": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.0.0.tgz",
      "integrity": "sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.0.4.tgz",
      "integrity": "sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.1.2.tgz",
      "integrity": "sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.15.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz",
      "integrity": "sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.1.tgz",
      "integrity": "sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==",
      "license": "MIT",
      "dependencies": {
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.5.tgz",
      "integrity": "sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-docker": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-2.2.1.tgz",
      "integrity": "sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
      "license": "MIT",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.0.2.tgz",
      "integrity": "sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.0.10.tgz",
      "integrity": "sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
      "license": "MIT"
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.0.7.tgz",
      "integrity": "sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-obj": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
      "integrity": "sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-3.0.0.tgz",
      "integrity": "sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-port-reachable": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-port-reachable/-/is-port-reachable-4.0.0.tgz",
      "integrity": "sha512-9UoipoxYmSk6Xy7QFgRv2HDyaysmgSG75TFQs6S+3pDM7ZhKTF/bskZV+0UlABHzKjNVhPjYCLfeZUEg1wXxig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-potential-custom-element-name": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
      "integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.1.4.tgz",
      "integrity": "sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regexp": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-regexp/-/is-regexp-1.0.0.tgz",
      "integrity": "sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-root": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-root/-/is-root-2.1.0.tgz",
      "integrity": "sha512-AGOriNp96vNBd3HtU+RzFEc75FfR5ymiYv8E553I71SCeXBiMsVDUtdio1OEFvrPyLIQ9tVR5RxXIFe5PUFjMg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.0.7.tgz",
      "integrity": "sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==",
      "license": "MIT",
      "dependencies": {
        "has-tostringtag": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.4.tgz",
      "integrity": "sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.13",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.13.tgz",
      "integrity": "sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
      "license": "MIT"
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.0.2.tgz",
      "integrity": "sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.3.tgz",
      "integrity": "sha512-LvIm3/KWzS9oRFHugab7d+M/GcBXuXX5xZkzPmN+NxihdQlZUQ4dWuSV1xR/sq6upL1TJEDrfBgRepHFdBtSNQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-wsl": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
      "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
      "license": "MIT",
      "dependencies": {
        "is-docker": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.2.tgz",
      "integrity": "sha512-DR33HMMr8EzwuRL8Y9D3u2BMj8+RqSE850jfGu59kS7tbmPLzGkZmVSfyCFSDxuZiEY6Rzt3T2NA/qU+NwVj1w==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "get-intrinsic": "^1.2.1",
        "has-symbols": "^1.0.3",
        "reflect.getprototypeof": "^1.0.4",
        "set-function-name": "^2.0.1"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jake": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.2.tgz",
      "integrity": "sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==",
      "license": "Apache-2.0",
      "dependencies": {
        "async": "^3.2.3",
        "chalk": "^4.0.2",
        "filelist": "^1.0.4",
        "minimatch": "^3.1.2"
      },
      "bin": {
        "jake": "bin/cli.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jake/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jake/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jake/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jake/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jake/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jake/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest/-/jest-27.5.1.tgz",
      "integrity": "sha512-Yn0mADZB89zTtjkPJEXwrac3LHudkQMR+Paqa8uxJHCBr9agxztUifWCyiYrjhMPBoUVBjyny0I7XH6ozDr7QQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "import-local": "^3.0.2",
        "jest-cli": "^27.5.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-27.5.1.tgz",
      "integrity": "sha512-buBLMiByfWGCoMsLLzGUUSpAmIAGnbR2KJoMN10ziLhOLvP4e0SlypHnAel8iqQXTrcbmfEY9sSqae5sgUsTvw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "execa": "^5.0.0",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-27.5.1.tgz",
      "integrity": "sha512-D95R7x5UtlMA5iBYsOHFFbMD/GVA4R/Kdq15f7xYWUfWHBto9NYRsOvnSauTgdF+ogCpJ4tyKOXhUifxS65gdw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^0.7.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-circus/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-circus/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-circus/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-circus/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-circus/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-cli": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-27.5.1.tgz",
      "integrity": "sha512-Hc6HOOwYq4/74/c62dEE3r5elx8wjYqxY0r0G/nFrLDPMFRu6RA/u8qINOIkvhxG7mMQ5EJsOGfRpI8L6eFUVw==",
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "prompts": "^2.0.1",
        "yargs": "^16.2.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-cli/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-cli/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-cli/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-cli/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-cli/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-cli/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-config": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-27.5.1.tgz",
      "integrity": "sha512-5sAsjm6tGdsVbW9ahcChPAFCk4IlkQUknH5AvKjuLTSlcO/wCZKyFdn7Rg0EkC+OGgWODEy2hDpWB1PgzH0JNA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.8.0",
        "@jest/test-sequencer": "^27.5.1",
        "@jest/types": "^27.5.1",
        "babel-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.1",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-jasmine2": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-config/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-config/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-config/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-config/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-config/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-diff": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-27.5.1.tgz",
      "integrity": "sha512-m0NvkX55LDt9T4mctTEgnZk3fmEg3NRYutvMPWM/0iPnkFj2wIeF45O1718cMSOFO1vINkqmxqD8vE37uTEbqw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-diff/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-diff/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-diff/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-diff/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-diff/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-diff/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-docblock": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-27.5.1.tgz",
      "integrity": "sha512-rl7hlABeTsRYxKiUfpHrQrG4e2obOiTQWfMEH3PxPjOtdsfLQO4ReWSZaQ7DETm4xu07rl4q/h4zcKXyU0/OzQ==",
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-27.5.1.tgz",
      "integrity": "sha512-1Ff6p+FbhT/bXQnEouYy00bkNSY7OUpfIcmdl8vZ31A1UUaurOLPA8a8BbJOF2RDUElwJhmeaV7LnagI+5UwNQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-each/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-each/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-each/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-each/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-each/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-each/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-environment-jsdom": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-environment-jsdom/-/jest-environment-jsdom-27.5.1.tgz",
      "integrity": "sha512-TFBvkTC1Hnnnrka/fUb56atfDtJ9VMZ94JkjTbggl1PEpwrYtUBKMezB3inLmWqQsXYLcMwNoDQwoBTAvFfsfw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1",
        "jsdom": "^16.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-27.5.1.tgz",
      "integrity": "sha512-Jt4ZUnxdOsTGwSRAfKEnE6BcwsSPNOijjwifq5sDFSA2kesnXTvNqKHYgM0hDq3549Uf/KzdXNYn4wMZJPlFLw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-27.5.1.tgz",
      "integrity": "sha512-2KY95ksYSaK7DMBWQn6dQz3kqAf3BB64y2udeG+hv4KfSOb9qwcYQstTJc1KCbsix+wLZWZYN8t7nwX3GOBLRw==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-27.5.1.tgz",
      "integrity": "sha512-7GgkZ4Fw4NFbMSDSpZwXeBiIbx+t/46nJ2QitkOjvwPYyZmqttu2TDSimMHP1EkPOi4xUZAN1doE5Vd25H4Jng==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/graceful-fs": "^4.1.2",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^27.5.1",
        "jest-serializer": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "micromatch": "^4.0.4",
        "walker": "^1.0.7"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-jasmine2": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-jasmine2/-/jest-jasmine2-27.5.1.tgz",
      "integrity": "sha512-jtq7VVyG8SqAorDpApwiJJImd0V2wv1xzdheGHRGyuT7gZm6gG47QEskOlzsN1PG/6WNaCo5pmwMHDf3AkG2pQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-jasmine2/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-jasmine2/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-jasmine2/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-jasmine2/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-jasmine2/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-jasmine2/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-27.5.1.tgz",
      "integrity": "sha512-POXfWAMvfU6WMUXftV4HolnJfnPOGEu10fscNCA76KBpRRhcMN2c8d3iT2pxQS3HLbA+5X4sOUPzYO2NUyIlHQ==",
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-27.5.1.tgz",
      "integrity": "sha512-z2uTx/T6LBaCoNWNFWwChLBKYxTMcGBRjAt+2SbP929/Fflb9aa5LGma654Rz8z9HLxsrUaYzxE9T/EFIL/PAw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-matcher-utils/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-matcher-utils/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-message-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-27.5.1.tgz",
      "integrity": "sha512-rMyFe1+jnyAAf+NHwTclDz0eAaLkVDdKVHHBFWsBWHnnh5YeJMNWWsv7AbFYXfK3oTqvL7VTWkhNLu1jX24D+g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^27.5.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-message-util/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-message-util/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-message-util/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-message-util/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-message-util/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-message-util/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-mock": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-27.5.1.tgz",
      "integrity": "sha512-K4jKbY1d4ENhbrG2zuPWaQBvDly+iZ2yAW+T1fATN78hc0sInwn7wZB8XtlNnvHug5RMwV897Xm4LqmPM4e2Og==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-27.5.1.tgz",
      "integrity": "sha512-4bfKq2zie+x16okqDXjXn9ql2B0dScQu+vcwe4TvFVhkVyuWLqpZrZtXxLLWoXYgn0E87I6r6GRYHF7wFZBUvg==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-27.5.1.tgz",
      "integrity": "sha512-FFDy8/9E6CV83IMbDpcjOhumAQPDyETnU2KZ1O98DwTnz8AOBsW/Xv3GySr1mOZdItLR+zDZ7I/UdTFbgSOVCw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "resolve": "^1.20.0",
        "resolve.exports": "^1.1.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-27.5.1.tgz",
      "integrity": "sha512-QQOOdY4PE39iawDn5rzbIePNigfe5B9Z91GDD1ae/xNDlu9kaat8QQ5EKnNmVWPV54hUdxCVwwj6YMgR2O7IOg==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-snapshot": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-resolve/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-resolve/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-resolve/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-resolve/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-resolve/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runner": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-27.5.1.tgz",
      "integrity": "sha512-g4NPsM4mFCOwFKXO4p/H/kWGdJp9V8kURY2lX8Me2drgXqG7rrZAx5kv+5H7wtt/cdFIjhqYx1HrlqWHaOvDaQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-leak-detector": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "source-map-support": "^0.5.6",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runner/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-runner/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-runner/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-runner/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-runner/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runner/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runtime": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-27.5.1.tgz",
      "integrity": "sha512-o7gxw3Gf+H2IGt8fv0RiyE1+r83FJBRruoA+FXrlHw6xEyBsU8ugA6IPfTdVyA0w8HClpbK+DGJxH59UrNMx8A==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/globals": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "execa": "^5.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runtime/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-runtime/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-runtime/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-runtime/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-runtime/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-runtime/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-serializer": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-27.5.1.tgz",
      "integrity": "sha512-jZCyo6iIxO1aqUxpuBlwTDMkzOAJS4a3eYz3YzgxxVQFwLeSA7Jfq5cbqCY+JLvTDrWirgusI/0KwxKMgrdf7w==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-27.5.1.tgz",
      "integrity": "sha512-yYykXI5a0I31xX67mgeLw1DZ0bJB+gpq5IpSuCAoyDi0+BhgU/RIrL+RTzDmkNTchvDFWKP8lp+w/42Z3us5sA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.7.2",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/traverse": "^7.7.2",
        "@babel/types": "^7.0.0",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__traverse": "^7.0.4",
        "@types/prettier": "^2.1.5",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "natural-compare": "^1.4.0",
        "pretty-format": "^27.5.1",
        "semver": "^7.3.2"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-snapshot/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-snapshot/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-snapshot/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-snapshot/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-snapshot/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-27.5.1.tgz",
      "integrity": "sha512-Kv2o/8jNvX1MQ0KGtw480E/w4fBCDOnH6+6DmeKi6LZUIlKA5kwY0YNdlzaWTiVgxqAqik11QyxDOKk543aKXw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-util/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-util/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-util/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-util/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-util/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-util/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-validate": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-27.5.1.tgz",
      "integrity": "sha512-thkNli0LYTmOI1tDB3FI1S1RTp/Bqyd9pTarJwL87OIBFuqEb5Apv5EaApEudYg4g86e3CT6kM0RowkhtEnCBQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "leven": "^3.1.0",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-validate/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-validate/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-validate/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-validate/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-validate/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/jest-watch-typeahead/-/jest-watch-typeahead-1.1.0.tgz",
      "integrity": "sha512-Va5nLSJTN7YFtC2jd+7wsoe1pNe5K4ShLux/E5iHEwlB9AxaxmggY7to9KUqKojhaJw3aXqt5WAb4jGPOolpEw==",
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.3.1",
        "chalk": "^4.0.0",
        "jest-regex-util": "^28.0.0",
        "jest-watcher": "^28.0.0",
        "slash": "^4.0.0",
        "string-length": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "jest": "^27.0.0 || ^28.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/console": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-28.1.3.tgz",
      "integrity": "sha512-QPAkP5EwKdK/bxIr6C1I4Vs0rm2nHiANzj/Z5X2JQkrZo6IqvC4ldZ9K95tF0HdidhA8Bo6egxSzUFPYKcEXLw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^28.1.3",
        "jest-util": "^28.1.3",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/console/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/test-result": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-28.1.3.tgz",
      "integrity": "sha512-kZAkxnSE+FqE8YjW8gNuoVkkC9I7S1qmenl8sGcDOLropASP+BkcGKwhXoyqQuGOGeYY0y/ixjrd/iERpEXHNg==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^28.1.3",
        "@jest/types": "^28.1.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/types": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-28.1.3.tgz",
      "integrity": "sha512-RyjiyMUZrKz/c+zlMFO1pm70DcIlST8AeWTkoUdZevew44wcNZQHsEVOiCVtgVnlFFD82FPaXycys58cf2muVQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^28.1.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-watch-typeahead/node_modules/emittery": {
      "version": "0.10.2",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.10.2.tgz",
      "integrity": "sha512-aITqOwnLanpHLNXZJENbOgjUBeHocD+xsSJmNrjovKBW5HbSpW3d1pEls7GFQPUWXiwG9+0P4GtHfEqC/4M0Iw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-message-util": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-28.1.3.tgz",
      "integrity": "sha512-PFdn9Iewbt575zKPf1286Ht9EPoJmYT7P0kY+RibeYZ2XtOr53pDLEFoTWXbd1h4JiGiWpTBC84fc8xMXQMb7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^28.1.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^28.1.3",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-message-util/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-regex-util": {
      "version": "28.0.2",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-28.0.2.tgz",
      "integrity": "sha512-4s0IgyNIy0y9FK+cjoVYoxamT7Zeo7MhzqRGx7YDYmaQn1wucY9rotiGkBzzcMXTtjrCAP/f7f+E0F7+fxPNdw==",
      "license": "MIT",
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-util": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-28.1.3.tgz",
      "integrity": "sha512-XdqfpHwpcSRko/C35uLYFM2emRAltIIKZiJ9eAmhjsj0CqZMa0p1ib0R5fWIqGhn1a103DebTbpqIaP1qCQ6tQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-28.1.3.tgz",
      "integrity": "sha512-t4qcqj9hze+jviFPUN3YAtAEeFnr/azITXQEMARf5cMwKY2SMBRnCQTXLixTl20OR6mLh9KLMrgVJgJISym+1g==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^28.1.3",
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.10.2",
        "jest-util": "^28.1.3",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher/node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/pretty-format": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-28.1.3.tgz",
      "integrity": "sha512-8gFb/To0OmxHR9+ZTb14Df2vNxdGCX8g1xWGUTqUw5TiZvcQf5sHKObd5UcPyLLyowNwDAMTF3XWOG1B6mxl1Q==",
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^28.1.3",
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/slash": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/string-length": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-5.0.1.tgz",
      "integrity": "sha512-9Ep08KAMUn0OadnVaBuRdE2l615CQ508kr0XMadjClfYpdCyvrbFp6Taebo8yyxokQ4viUd/xPPUA4FGgUa0ow==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^2.0.0",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/string-length/node_modules/char-regex": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-2.0.1.tgz",
      "integrity": "sha512-oSvEeo6ZUD7NepqAat3RqoucZ5SeqLJgOvVIwkafu6IP3V0pO38s/ypdVUmDDK6qIIHNlYHJAKX9E7R7HoKElw==",
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/strip-ansi/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watcher": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-27.5.1.tgz",
      "integrity": "sha512-z676SuD6Z8o8qbmEGhoEUFOM1+jfEiL3DXHK/xgEiG2EyNYfFG60jluWcupY6dATjfEsKQuibReS1djInQnoVw==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "jest-util": "^27.5.1",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-watcher/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-watcher/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/jest-watcher/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/jest-watcher/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/jest-watcher/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watcher/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/jest-worker/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.6",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.6.tgz",
      "integrity": "sha512-2yTgeWTWzMWkHu6Jp9NKgePDaYHbntiwvYuuJLbbN9vl7DC9DvXKOB2BC3ZZ92D3cvV/aflH0osDfwpHepQ53w==",
      "license": "MIT",
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-sha3": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.8.0.tgz",
      "integrity": "sha512-gF1cRrHhIzNfToc802P800N8PpXS+evLLXfsVpowqmAFR9uwbi89WvXg2QspOmXL8QL86J4T1EpFu+yUkwJY3Q==",
      "license": "MIT"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsdom": {
      "version": "16.7.0",
      "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-16.7.0.tgz",
      "integrity": "sha512-u9Smc2G1USStM+s/x1ru5Sxrl6mPYCbByG1U/hUmqaVsm4tbNyS7CicOSRyuGQYZhTu0h84qkZZQ/I+dzizSVw==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "acorn": "^8.2.4",
        "acorn-globals": "^6.0.0",
        "cssom": "^0.4.4",
        "cssstyle": "^2.3.0",
        "data-urls": "^2.0.0",
        "decimal.js": "^10.2.1",
        "domexception": "^2.0.1",
        "escodegen": "^2.0.0",
        "form-data": "^3.0.0",
        "html-encoding-sniffer": "^2.0.1",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-potential-custom-element-name": "^1.0.1",
        "nwsapi": "^2.2.0",
        "parse5": "6.0.1",
        "saxes": "^5.0.1",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^4.0.0",
        "w3c-hr-time": "^1.0.2",
        "w3c-xmlserializer": "^2.0.0",
        "webidl-conversions": "^6.1.0",
        "whatwg-encoding": "^1.0.5",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.5.0",
        "ws": "^7.4.6",
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "canvas": "^2.5.0"
      },
      "peerDependenciesMeta": {
        "canvas": {
          "optional": true
        }
      }
    },
    "node_modules/jsdom/node_modules/form-data": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.1.tgz",
      "integrity": "sha512-RHkBKtLWUVwd7SqRIvCZMEvAMoGUp0XU+seQiZejj0COz3RI3hWP4sCv3gZWWLjJTd7rGwcsF5eKZGii0r/hbg==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "license": "MIT"
    },
    "node_modules/json2mq": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/json2mq/-/json2mq-0.2.0.tgz",
      "integrity": "sha512-SzoRg7ux5DWTII9J2qkrZrqV1gt+rTaoufMxEzXbS26Uid0NwaJd123HcoB80TgubEppxxIGdNxCx50fEoEWQA==",
      "license": "MIT",
      "dependencies": {
        "string-convert": "^0.2.0"
      }
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonpath": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/jsonpath/-/jsonpath-1.1.1.tgz",
      "integrity": "sha512-l6Cg7jRpixfbgoWgkrl77dgEj8RPvND0wMH6TwQmi9Qs4TFfS9u5cUFnbeKTwj5ga5Y3BTGGNI28k117LJ009w==",
      "license": "MIT",
      "dependencies": {
        "esprima": "1.2.2",
        "static-eval": "2.0.2",
        "underscore": "1.12.1"
      }
    },
    "node_modules/jsonpath/node_modules/esprima": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-1.2.2.tgz",
      "integrity": "sha512-+JpPZam9w5DuJ3Q67SqsMGtiHKENSMRVoxvArfJZK01/BfLEObtZ6orJa/MtoGNR/rfMgp5837T41PAmTwAv/A==",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/jsonpointer": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
      "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "license": "(MIT OR GPL-3.0-or-later)",
      "dependencies": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "node_modules/jszip/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/jszip/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/jszip/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/jszip/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/kdbush": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/kdbush/-/kdbush-4.0.2.tgz",
      "integrity": "sha512-WbCVYJ27Sz8zi9Q7Q0xHC+05iwkm3Znipc2XTlrnJbsHMYktW4hPhXUE8Ys1engBrvffoSCqbil1JQAa7clRpA==",
      "license": "ISC"
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/klona": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/klona/-/klona-2.0.6.tgz",
      "integrity": "sha512-dhG34DXATL5hSxJbIexCft8FChFXtmskoZYnoPWjXQuebWYCNkVeV3KkGegCK9CP1oswI/vQibS2GY7Em/sJJA==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/language-subtag-registry": {
      "version": "0.3.23",
      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
      "license": "CC0-1.0"
    },
    "node_modules/language-tags": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
      "license": "MIT",
      "dependencies": {
        "language-subtag-registry": "^0.3.20"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/launch-editor": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/launch-editor/-/launch-editor-2.8.1.tgz",
      "integrity": "sha512-elBx2l/tp9z99X5H/qev8uyDywVh0VXAwEbjk8kJhnc5grOFkGh7aW6q55me9xnYbss261XtnUrysZ+XvGbhQA==",
      "license": "MIT",
      "dependencies": {
        "picocolors": "^1.0.0",
        "shell-quote": "^1.8.1"
      }
    },
    "node_modules/lazystream": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lazystream/-/lazystream-1.0.1.tgz",
      "integrity": "sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==",
      "license": "MIT",
      "dependencies": {
        "readable-stream": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.6.3"
      }
    },
    "node_modules/lazystream/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/lazystream/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/lazystream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/lazystream/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/leaflet": {
      "version": "1.9.4",
      "resolved": "https://registry.npmjs.org/leaflet/-/leaflet-1.9.4.tgz",
      "integrity": "sha512-nxS1ynzJOmOlHp+iL3FyWqK89GtNL8U8rvlMOsQdTTssxZwCXh8N2NB3GDQOL+YR3XnWyZAxwQixURb+FA74PA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/leaflet.markercluster": {
      "version": "1.5.3",
      "resolved": "https://registry.npmjs.org/leaflet.markercluster/-/leaflet.markercluster-1.5.3.tgz",
      "integrity": "sha512-vPTw/Bndq7eQHjLBVlWpnGeLa3t+3zGiuM7fJwCkiMFq+nmRuG3RI3f7f4N4TDX7T4NpbAXpR2+NTRSEGfCSeA==",
      "license": "MIT",
      "peerDependencies": {
        "leaflet": "^1.3.1"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "license": "MIT",
      "dependencies": {
        "immediate": "~3.0.5"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
      "integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/listenercount": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/listenercount/-/listenercount-1.0.1.tgz",
      "integrity": "sha512-3mk/Zag0+IJxeDrxSgaDPy4zZ3w05PRZeJNnlWhzFz5OkX49J4krc+A8X2d2M69vGMBEX0uyl8M+W+8gH+kBqQ==",
      "license": "ISC"
    },
    "node_modules/loader-runner": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz",
      "integrity": "sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.11.5"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "license": "MIT",
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash-es": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash-es/-/lodash-es-4.17.21.tgz",
      "integrity": "sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==",
      "license": "MIT"
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
      "license": "MIT"
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==",
      "license": "MIT"
    },
    "node_modules/lodash.difference": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.difference/-/lodash.difference-4.5.0.tgz",
      "integrity": "sha512-dS2j+W26TQ7taQBGN8Lbbq04ssV3emRw4NY58WErlTO29pIqS0HmoT5aJ9+TUQ1N3G+JOZSji4eugsWwGp9yPA==",
      "license": "MIT"
    },
    "node_modules/lodash.escaperegexp": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.escaperegexp/-/lodash.escaperegexp-4.1.2.tgz",
      "integrity": "sha512-TM9YBvyC84ZxE3rgfefxUWiQKLilstD6k7PTGt6wfbtXF8ixIJLOL3VYyV/z+ZiPLsVxAsKAFVwWlWeb2Y8Yyw==",
      "license": "MIT"
    },
    "node_modules/lodash.flatten": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz",
      "integrity": "sha512-C5N2Z3DgnnKr0LOpv/hKCgKdb7ZZwafIrsesve6lmzvZIRZRGaZ/l6Q8+2W7NaT+ZwO3fFlSCzCzrDCFdJfZ4g==",
      "license": "MIT"
    },
    "node_modules/lodash.groupby": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.groupby/-/lodash.groupby-4.6.0.tgz",
      "integrity": "sha512-5dcWxm23+VAoz+awKmBaiBvzox8+RqMgFhi7UvX9DHZr2HdxHXM/Wrf8cfKpsW37RNrvtPn6hSwNqurSILbmJw==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isequal": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
      "integrity": "sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==",
      "license": "MIT"
    },
    "node_modules/lodash.isfunction": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/lodash.isfunction/-/lodash.isfunction-3.0.9.tgz",
      "integrity": "sha512-AirXNj15uRIMMPihnkInB4i3NHeb4iBtNg9WRWuK2o31S+ePwwNmDPaTL3o7dTJ+VXNZim7rFs4rxN4YU1oUJw==",
      "license": "MIT"
    },
    "node_modules/lodash.isnil": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/lodash.isnil/-/lodash.isnil-4.0.0.tgz",
      "integrity": "sha512-up2Mzq3545mwVnMhTDMdfoG1OurpA/s5t88JmQX809eH3C8491iu2sfKhTfhQtKY78oPNhiaHJUpT/dUDAAtng==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isundefined": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isundefined/-/lodash.isundefined-3.0.1.tgz",
      "integrity": "sha512-MXB1is3s899/cD8jheYYE2V9qTHwKvt+npCwpD+1Sxm3Q3cECXCiYHjeHWXNwr6Q0SOBPrYUDxendrO6goVTEA==",
      "license": "MIT"
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "license": "MIT"
    },
    "node_modules/lodash.sortby": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/lodash.sortby/-/lodash.sortby-4.7.0.tgz",
      "integrity": "sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==",
      "license": "MIT"
    },
    "node_modules/lodash.union": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.union/-/lodash.union-4.6.0.tgz",
      "integrity": "sha512-c4pB2CdGrGdjMKYLA+XiRDO7Y0PRQbm/Gzg8qMj+QH+pFVAoTp5sBpO0odL3FjoPCGjK96p6qsP+yQoiLoOBcw==",
      "license": "MIT"
    },
    "node_modules/lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==",
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lz-string": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/lz-string/-/lz-string-1.5.0.tgz",
      "integrity": "sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==",
      "license": "MIT",
      "bin": {
        "lz-string": "bin/bin.js"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "license": "MIT",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/match-sorter": {
      "version": "6.3.4",
      "resolved": "https://registry.npmjs.org/match-sorter/-/match-sorter-6.3.4.tgz",
      "integrity": "sha512-jfZW7cWS5y/1xswZo8VBOdudUiSd9nifYRWphc9M5D/ee4w4AoXLgBEdRbgVaxbMuagBPeUC5y2Hi8DO6o9aDg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.8",
        "remove-accents": "0.5.0"
      }
    },
    "node_modules/material-colors": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/material-colors/-/material-colors-1.2.6.tgz",
      "integrity": "sha512-6qE4B9deFBIa9YSpOc9O0Sgc43zTeVYbgDT5veRKSlB2+ZuHNoVVxA1L/ckMUayV9Ay9y7Z/SZCLcGteW9i7bg==",
      "license": "ISC"
    },
    "node_modules/mdn-data": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.4.tgz",
      "integrity": "sha512-iV3XNKw06j5Q7mi6h+9vbx23Tv7JkjEVgKHW4pimwyDGWm0OIQntJJ+u1C6mg6mK1EaTv42XQ7w76yuzH7M2cA==",
      "license": "CC0-1.0"
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memfs": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/memfs/-/memfs-3.5.3.tgz",
      "integrity": "sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==",
      "license": "Unlicense",
      "dependencies": {
        "fs-monkey": "^1.0.4"
      },
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/memoize-one": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/memoize-one/-/memoize-one-5.2.1.tgz",
      "integrity": "sha512-zYiwtZUcYyXKo/np96AGZAckk+FWWsUdJ3cHGGmld7+AhvcWmQyGCYUh1hc4Q/pkOhb65dQR/pqCyK0cOaHz4Q==",
      "license": "MIT"
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==",
      "license": "MIT"
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/microseconds": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/microseconds/-/microseconds-0.2.0.tgz",
      "integrity": "sha512-n7DHHMjR1avBbSpsTBj6fmMGh2AGrifVV4e+WYc3Q9lO+xnSZ3NyhcBND3vzzatt05LFhoKFRxrIyklmLlUtyA==",
      "license": "MIT"
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/min-indent": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
      "integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mini-css-extract-plugin": {
      "version": "2.9.1",
      "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.9.1.tgz",
      "integrity": "sha512-+Vyi+GCCOHnrJ2VPS+6aPoXN2k2jgUzDRhTFLjjTBn23qyXJXkjUWQgTL+mXpF5/A8ixLdCc6kWsoeOjKGejKQ==",
      "license": "MIT",
      "dependencies": {
        "schema-utils": "^4.0.0",
        "tapable": "^2.2.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
      "license": "ISC"
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/moment": {
      "version": "2.30.1",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.30.1.tgz",
      "integrity": "sha512-uEmtNhbDOrWPFS+hdjFCBfy9f2YoyzRpwcl+DqpC6taX21FzsTLQVbMV/W7PzNSX6x/bhC1zA3c2UQ5NzH6how==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/moment-timezone": {
      "version": "0.5.45",
      "resolved": "https://registry.npmjs.org/moment-timezone/-/moment-timezone-0.5.45.tgz",
      "integrity": "sha512-HIWmqA86KcmCAhnMAN0wuDOARV/525R2+lOLotuGFzn4HO+FH+/645z2wx0Dt3iDv6/p61SIvKnDstISainhLQ==",
      "license": "MIT",
      "dependencies": {
        "moment": "^2.29.4"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/multicast-dns": {
      "version": "7.2.5",
      "resolved": "https://registry.npmjs.org/multicast-dns/-/multicast-dns-7.2.5.tgz",
      "integrity": "sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==",
      "license": "MIT",
      "dependencies": {
        "dns-packet": "^5.2.2",
        "thunky": "^1.0.2"
      },
      "bin": {
        "multicast-dns": "cli.js"
      }
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nano-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/nano-time/-/nano-time-1.0.0.tgz",
      "integrity": "sha512-flnngywOoQ0lLQOTRNexn2gGSNuM9bKj9RZAWSzhQ+UJYaAFG9bac4DW9VHjUAzrOaIcajHybCTHe/bkvozQqA==",
      "license": "ISC",
      "dependencies": {
        "big-integer": "^1.6.16"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.7",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
      "integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "license": "MIT"
    },
    "node_modules/natural-compare-lite": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare-lite/-/natural-compare-lite-1.4.0.tgz",
      "integrity": "sha512-Tj+HTDSJJKaZnfiuw+iaF9skdPpTo2GtEly5JHnWV/hfv2Qj/9RKsGISQtLh2ox3l5EAGw487hnBee0sIJ6v2g==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
      "license": "MIT"
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz",
      "integrity": "sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==",
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/nth-check": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
      "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/fb55/nth-check?sponsor=1"
      }
    },
    "node_modules/nwsapi": {
      "version": "2.2.12",
      "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.12.tgz",
      "integrity": "sha512-qXDmcVlZV4XRtKFzddidpfVP4oMSGhga+xdMc25mv8kaLUHtgzCDhUxkrN8exkGdTlLNaXj7CV3GtON7zuGZ+w==",
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.2.tgz",
      "integrity": "sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-is": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/object-is/-/object-is-1.1.6.tgz",
      "integrity": "sha512-F8cZ+KfGlSGi09lJT7/Nd6KJZ9ygtvYC0/UYYLI9nmQKLMnydpB9yvbv9K1uSkEu7FU9vYPmVwLg328tX+ot3Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.5.tgz",
      "integrity": "sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.5",
        "define-properties": "^1.2.1",
        "has-symbols": "^1.0.3",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.8.tgz",
      "integrity": "sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.getownpropertydescriptors": {
      "version": "2.1.8",
      "resolved": "https://registry.npmjs.org/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.1.8.tgz",
      "integrity": "sha512-qkHIGe4q0lSYMv0XI4SsBTJz3WaURhLvd0lKSgtVuOsJ2krg4SgMw3PIRQFMp07yi++UR3se2mkcLqsBNpBb/A==",
      "license": "MIT",
      "dependencies": {
        "array.prototype.reduce": "^1.0.6",
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0",
        "gopd": "^1.0.1",
        "safe-array-concat": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.0.tgz",
      "integrity": "sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/oblivious-set": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/oblivious-set/-/oblivious-set-1.0.0.tgz",
      "integrity": "sha512-z+pI07qxo4c2CulUHCDf9lcqDlMSo72N/4rLUpRXf6fu+q8vjt8y0xS+Tlf8NTJDdTXHbdeO1n3MlbctwEoXZw==",
      "license": "MIT"
    },
    "node_modules/obuf": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
      "license": "MIT"
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/open": {
      "version": "8.4.2",
      "resolved": "https://registry.npmjs.org/open/-/open-8.4.2.tgz",
      "integrity": "sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==",
      "license": "MIT",
      "dependencies": {
        "define-lazy-prop": "^2.0.0",
        "is-docker": "^2.1.1",
        "is-wsl": "^2.2.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-retry": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
      "integrity": "sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==",
      "license": "MIT",
      "dependencies": {
        "@types/retry": "0.12.0",
        "retry": "^0.13.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.0.tgz",
      "integrity": "sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==",
      "license": "BlueOak-1.0.0"
    },
    "node_modules/pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
      "license": "(MIT AND Zlib)"
    },
    "node_modules/param-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz",
      "integrity": "sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==",
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parse5": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz",
      "integrity": "sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==",
      "license": "MIT"
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/pascal-case": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz",
      "integrity": "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-is-inside": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.2.tgz",
      "integrity": "sha512-DUWJr3+ULp4zXmol/SZkFf3JGsS9/SIv+Y3Rt93/UjPpDpklB5f1er4O3POIbUuUJ3FXgqte2Q7SrU6zAqwk8w==",
      "dev": true,
      "license": "(WTFPL OR MIT)"
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "license": "ISC"
    },
    "node_modules/path-to-regexp": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-2.2.1.tgz",
      "integrity": "sha512-gu9bD6Ta5bwGrrU8muHzVOBFFREpp2iRkVfhBJahwJ6p6Xw20SjT0MxLnwkjOibQmGSYhiUnf2FLe7k+jcFmGQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.1.tgz",
      "integrity": "sha512-anP1Z8qwhkbmu7MFP5iTt+wQKXgwzf7zTyGlcdzabySa9vd0Xt392U0rVmz9poOaBj0uHJKyyo9/upk0HrEQew==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-dir/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-dir/node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pkg-up/-/pkg-up-3.1.0.tgz",
      "integrity": "sha512-nDywThFk1i4BQK4twPQ6TA4RT8bDY96yeuCVBWL3ePARCiEKDRSrNGbFIgUJpLp+XeIR65v8ra7WuJOFUBtkMA==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up/node_modules/find-up": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/locate-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^3.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-up/node_modules/p-locate": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.0.0.tgz",
      "integrity": "sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.41",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.41.tgz",
      "integrity": "sha512-TesUflQ0WKZqAvg52PWL6kHgLKP6xB6heTOdoYM0Wt2UHyxNa4K25EZZMgKns3BH1RLVbZCREPpLY0rhnNoHVQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.0.1",
        "source-map-js": "^1.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-attribute-case-insensitive": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/postcss-attribute-case-insensitive/-/postcss-attribute-case-insensitive-5.0.2.tgz",
      "integrity": "sha512-XIidXV8fDr0kKt28vqki84fRK8VW8eTuIa4PChv2MqKuT6C9UjmSKzen6KaWhWEoYvwxFCa7n/tC1SZ3tyq4SQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-browser-comments": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-browser-comments/-/postcss-browser-comments-4.0.0.tgz",
      "integrity": "sha512-X9X9/WN3KIvY9+hNERUqX9gncsgBA25XaeR+jshHz2j8+sYyHktHw1JdKuMjeLpGktXidqDhA7b/qm1mrBDmgg==",
      "license": "CC0-1.0",
      "engines": {
        "node": ">=8"
      },
      "peerDependencies": {
        "browserslist": ">=4",
        "postcss": ">=8"
      }
    },
    "node_modules/postcss-calc": {
      "version": "8.2.4",
      "resolved": "https://registry.npmjs.org/postcss-calc/-/postcss-calc-8.2.4.tgz",
      "integrity": "sha512-SmWMSJmB8MRnnULldx0lQIyhSNvuDl9HfrZkaqqE/WHAhToYsAvDq+yAsA/kIyINDszOp3Rh0GFoNuH5Ypsm3Q==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9",
        "postcss-value-parser": "^4.2.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.2"
      }
    },
    "node_modules/postcss-clamp": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/postcss-clamp/-/postcss-clamp-4.1.0.tgz",
      "integrity": "sha512-ry4b1Llo/9zz+PKC+030KUnPITTJAHeOwjfAyyB60eT0AorGLdzp52s31OsPRHRf8NchkgFoG2y6fCfn1IV1Ow==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": ">=7.6.0"
      },
      "peerDependencies": {
        "postcss": "^8.4.6"
      }
    },
    "node_modules/postcss-color-functional-notation": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/postcss-color-functional-notation/-/postcss-color-functional-notation-4.2.4.tgz",
      "integrity": "sha512-2yrTAUZUab9s6CpxkxC4rVgFEVaR6/2Pipvi6qcgvnYiVqZcbDHEoBDhrXzyb7Efh2CCfHQNtcqWcIruDTIUeg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-color-hex-alpha": {
      "version": "8.0.4",
      "resolved": "https://registry.npmjs.org/postcss-color-hex-alpha/-/postcss-color-hex-alpha-8.0.4.tgz",
      "integrity": "sha512-nLo2DCRC9eE4w2JmuKgVA3fGL3d01kGq752pVALF68qpGLmx2Qrk91QTKkdUqqp45T1K1XV8IhQpcu1hoAQflQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-color-rebeccapurple": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/postcss-color-rebeccapurple/-/postcss-color-rebeccapurple-7.1.1.tgz",
      "integrity": "sha512-pGxkuVEInwLHgkNxUc4sdg4g3py7zUeCQ9sMfwyHAT+Ezk8a4OaaVZ8lIY5+oNqA/BXXgLyXv0+5wHP68R79hg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-colormin": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/postcss-colormin/-/postcss-colormin-5.3.1.tgz",
      "integrity": "sha512-UsWQG0AqTFQmpBegeLLc1+c3jIqBNB0zlDGRWR+dQ3pRKJL1oeMzyqmH3o2PIfn9MBdNrVPWhDbT769LxCTLJQ==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "colord": "^2.9.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-convert-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-convert-values/-/postcss-convert-values-5.1.3.tgz",
      "integrity": "sha512-82pC1xkJZtcJEfiLw6UXnXVXScgtBrjlO5CBmuDQc+dlb88ZYheFsjTn40+zBVi3DkfF7iezO0nJUPLcJK3pvA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-custom-media": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/postcss-custom-media/-/postcss-custom-media-8.0.2.tgz",
      "integrity": "sha512-7yi25vDAoHAkbhAzX9dHx2yc6ntS4jQvejrNcC+csQJAXjj15e7VcWfMgLqBNAbOvqi5uIa9huOVwdHbf+sKqg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/postcss-custom-properties": {
      "version": "12.1.11",
      "resolved": "https://registry.npmjs.org/postcss-custom-properties/-/postcss-custom-properties-12.1.11.tgz",
      "integrity": "sha512-0IDJYhgU8xDv1KY6+VgUwuQkVtmYzRwu+dMjnmdMafXYv86SWqfxkc7qdDvWS38vsjaEtv8e0vGOUQrAiMBLpQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-custom-selectors": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/postcss-custom-selectors/-/postcss-custom-selectors-6.0.3.tgz",
      "integrity": "sha512-fgVkmyiWDwmD3JbpCmB45SvvlCD6z9CG6Ie6Iere22W5aHea6oWa7EM2bpnv2Fj3I94L3VbtvX9KqwSi5aFzSg==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/postcss-dir-pseudo-class": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/postcss-dir-pseudo-class/-/postcss-dir-pseudo-class-6.0.5.tgz",
      "integrity": "sha512-eqn4m70P031PF7ZQIvSgy9RSJ5uI2171O/OO/zcRNYpJbvaeKFUlar1aJ7rmgiQtbm0FSPsRewjpdS0Oew7MPA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-discard-comments": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-5.1.2.tgz",
      "integrity": "sha512-+L8208OVbHVF2UQf1iDmRcbdjJkuBF6IS29yBDSiWUIzpYaAhtNl6JYnYm12FnkeCwQqF5LeklOu6rAqgfBZqQ==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-duplicates": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-5.1.0.tgz",
      "integrity": "sha512-zmX3IoSI2aoenxHV6C7plngHWWhUOV3sP1T8y2ifzxzbtnuhk1EdPwm0S1bIUNaJ2eNbWeGLEwzw8huPD67aQw==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-empty": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-5.1.1.tgz",
      "integrity": "sha512-zPz4WljiSuLWsI0ir4Mcnr4qQQ5e1Ukc3i7UfE2XcrwKK2LIPIqE5jxMRxO6GbI3cv//ztXDsXwEWT3BHOGh3A==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-overridden": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-overridden/-/postcss-discard-overridden-5.1.0.tgz",
      "integrity": "sha512-21nOL7RqWR1kasIVdKs8HNqQJhFxLsyRfAnUDm4Fe4t4mCWL9OJiHvlHPjcd8zc5Myu89b/7wZDnOSjFgeWRtw==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-double-position-gradients": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/postcss-double-position-gradients/-/postcss-double-position-gradients-3.1.2.tgz",
      "integrity": "sha512-GX+FuE/uBR6eskOK+4vkXgT6pDkexLokPaz/AbJna9s5Kzp/yl488pKPjhy0obB475ovfT1Wv8ho7U/cHNaRgQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-env-function": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/postcss-env-function/-/postcss-env-function-4.0.6.tgz",
      "integrity": "sha512-kpA6FsLra+NqcFnL81TnsU+Z7orGtDTxcOhl6pwXeEq1yFPpRMkCDpHhrz8CFQDr/Wfm0jLiNQ1OsGGPjlqPwA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-flexbugs-fixes": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/postcss-flexbugs-fixes/-/postcss-flexbugs-fixes-5.0.2.tgz",
      "integrity": "sha512-18f9voByak7bTktR2QgDveglpn9DTbBWPUzSOe9g0N4WR/2eSt6Vrcbf0hmspvMI6YWGywz6B9f7jzpFNJJgnQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.1.4"
      }
    },
    "node_modules/postcss-focus-visible": {
      "version": "6.0.4",
      "resolved": "https://registry.npmjs.org/postcss-focus-visible/-/postcss-focus-visible-6.0.4.tgz",
      "integrity": "sha512-QcKuUU/dgNsstIK6HELFRT5Y3lbrMLEOwG+A4s5cA+fx3A3y/JTq3X9LaOj3OC3ALH0XqyrgQIgey/MIZ8Wczw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-focus-within": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/postcss-focus-within/-/postcss-focus-within-5.0.4.tgz",
      "integrity": "sha512-vvjDN++C0mu8jz4af5d52CB184ogg/sSxAFS+oUJQq2SuCe7T5U2iIsVJtsCp2d6R4j0jr5+q3rPkBVZkXD9fQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-font-variant": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/postcss-font-variant/-/postcss-font-variant-5.0.0.tgz",
      "integrity": "sha512-1fmkBaCALD72CK2a9i468mA/+tr9/1cBxRRMXOUaZqO43oWPR5imcyPjXwuv7PXbCid4ndlP5zWhidQVVa3hmA==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-gap-properties": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/postcss-gap-properties/-/postcss-gap-properties-3.0.5.tgz",
      "integrity": "sha512-IuE6gKSdoUNcvkGIqdtjtcMtZIFyXZhmFd5RUlg97iVEvp1BZKV5ngsAjCjrVy+14uhGBQl9tzmi1Qwq4kqVOg==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-image-set-function": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/postcss-image-set-function/-/postcss-image-set-function-4.0.7.tgz",
      "integrity": "sha512-9T2r9rsvYzm5ndsBE8WgtrMlIT7VbtTfE7b3BQnudUqnBcBo7L758oc+o+pdj/dUV0l5wjwSdjeOH2DZtfv8qw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-initial": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-initial/-/postcss-initial-4.0.1.tgz",
      "integrity": "sha512-0ueD7rPqX8Pn1xJIjay0AZeIuDoF+V+VvMt/uOnn+4ezUKhZM/NokDeP6DwMNyIoYByuN/94IQnt5FEkaN59xQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
      "license": "MIT",
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/postcss-lab-function": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/postcss-lab-function/-/postcss-lab-function-4.2.1.tgz",
      "integrity": "sha512-xuXll4isR03CrQsmxyz92LJB2xX9n+pZJ5jE9JgcnmsCammLyKdlzrBin+25dy6wIjfhJpKBAN80gsTlCgRk2w==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "lilconfig": "^3.0.0",
        "yaml": "^2.3.4"
      },
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-load-config/node_modules/lilconfig": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.2.tgz",
      "integrity": "sha512-eop+wDAvpItUys0FWkHIKeC9ybYrTGbU41U5K7+bttZZeohvnY7M9dZ5kB21GNWiFT2q1OoPTvncPCgSOVO5ow==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/postcss-load-config/node_modules/yaml": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.5.0.tgz",
      "integrity": "sha512-2wWLbGbYDiSqqIKoPjar3MPgB94ErzCtrNE1FdqGuaO0pi2JGjmE8aW8TDZwzU7vuxcGRdL/4gPQwQ7hD5AMSw==",
      "license": "ISC",
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/postcss-loader": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-6.2.1.tgz",
      "integrity": "sha512-WbbYpmAaKcux/P66bZ40bpWsBucjx/TTgVVzRZ9yUO8yQfVBlameJ0ZGVaPfH64hNSBh63a+ICP5nqOpBA0w+Q==",
      "license": "MIT",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "klona": "^2.0.5",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "postcss": "^7.0.0 || ^8.0.1",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/postcss-logical": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/postcss-logical/-/postcss-logical-5.0.4.tgz",
      "integrity": "sha512-RHXxplCeLh9VjinvMrZONq7im4wjWGlRJAqmAVLXyZaXwfDWP73/oq4NdIp+OZwhQUMj0zjqDfM5Fj7qby+B4g==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-media-minmax": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/postcss-media-minmax/-/postcss-media-minmax-5.0.0.tgz",
      "integrity": "sha512-yDUvFf9QdFZTuCUg0g0uNSHVlJ5X1lSzDZjPSFaiCWvjgsvu8vEVxtahPrLMinIDEEGnx6cBe6iqdx5YWz08wQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-merge-longhand": {
      "version": "5.1.7",
      "resolved": "https://registry.npmjs.org/postcss-merge-longhand/-/postcss-merge-longhand-5.1.7.tgz",
      "integrity": "sha512-YCI9gZB+PLNskrK0BB3/2OzPnGhPkBEwmwhfYk1ilBHYVAZB7/tkTHFBAnCrvBBOmeYyMYw3DMjT55SyxMBzjQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "stylehacks": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-merge-rules": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-merge-rules/-/postcss-merge-rules-5.1.4.tgz",
      "integrity": "sha512-0R2IuYpgU93y9lhVbO/OylTtKMVcHb67zjWIfCiKR9rWL3GUk1677LAqD/BcHizukdZEjT8Ru3oHRoAYoJy44g==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "cssnano-utils": "^3.1.0",
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-font-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-minify-font-values/-/postcss-minify-font-values-5.1.0.tgz",
      "integrity": "sha512-el3mYTgx13ZAPPirSVsHqFzl+BBBDrXvbySvPGFnQcTI4iNslrPaFq4muTkLZmKlGk4gyFAYUBMH30+HurREyA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-gradients": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-gradients/-/postcss-minify-gradients-5.1.1.tgz",
      "integrity": "sha512-VGvXMTpCEo4qHTNSa9A0a3D+dxGFZCYwR6Jokk+/3oB6flu2/PnPXAh2x7x52EkY5xlIHLm+Le8tJxe/7TNhzw==",
      "license": "MIT",
      "dependencies": {
        "colord": "^2.9.1",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-params": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-minify-params/-/postcss-minify-params-5.1.4.tgz",
      "integrity": "sha512-+mePA3MgdmVmv6g+30rn57USjOGSAyuxUmkfiWpzalZ8aiBkdPYjXWtHuwJGm1v5Ojy0Z0LaSYhHaLJQB0P8Jw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-selectors": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-5.2.1.tgz",
      "integrity": "sha512-nPJu7OjZJTsVUmPdm2TcaiohIwxP+v8ha9NehQ2ye9szv4orirRU3SDdtUmKH+10nzn0bAyOXZ0UEr7OpvLehg==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-modules-extract-imports": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-extract-imports/-/postcss-modules-extract-imports-3.1.0.tgz",
      "integrity": "sha512-k3kNe0aNFQDAZGbin48pL2VNidTF0w4/eASDsxlyspobzU3wZQLOGj7L9gfRe0Jo9/4uud09DsjFNH7winGv8Q==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-local-by-default": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.0.5.tgz",
      "integrity": "sha512-6MieY7sIfTK0hYfafw1OMEG+2bg8Q1ocHCpoWLqOKj3JXlKu4G7btkmM/B7lFubYkYWmRSPLZi5chid63ZaZYw==",
      "license": "MIT",
      "dependencies": {
        "icss-utils": "^5.0.0",
        "postcss-selector-parser": "^6.0.2",
        "postcss-value-parser": "^4.1.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-scope": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-3.2.0.tgz",
      "integrity": "sha512-oq+g1ssrsZOsx9M96c5w8laRmvEu9C3adDSjI8oTcbfkrTE8hx/zfyobUoWIxaKPO8bt6S62kxpw5GqypEw1QQ==",
      "license": "ISC",
      "dependencies": {
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-values": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-values/-/postcss-modules-values-4.0.0.tgz",
      "integrity": "sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==",
      "license": "ISC",
      "dependencies": {
        "icss-utils": "^5.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-nesting": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nesting/-/postcss-nesting-10.2.0.tgz",
      "integrity": "sha512-EwMkYchxiDiKUhlJGzWsD9b2zvq/r2SSubcRrgP+jujMXFzqvANLt16lJANC+5uZ6hjI7lpRmI6O8JIl+8l1KA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.0",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-normalize": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize/-/postcss-normalize-10.0.1.tgz",
      "integrity": "sha512-+5w18/rDev5mqERcG3W5GZNMJa1eoYYNGo8gB7tEwaos0ajk3ZXAI4mHGcNT47NE+ZnZD1pEpUOFLvltIwmeJA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/normalize.css": "*",
        "postcss-browser-comments": "^4",
        "sanitize.css": "*"
      },
      "engines": {
        "node": ">= 12"
      },
      "peerDependencies": {
        "browserslist": ">= 4",
        "postcss": ">= 8"
      }
    },
    "node_modules/postcss-normalize-charset": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-charset/-/postcss-normalize-charset-5.1.0.tgz",
      "integrity": "sha512-mSgUJ+pd/ldRGVx26p2wz9dNZ7ji6Pn8VWBajMXFf8jk7vUoSrZ2lt/wZR7DtlZYKesmZI680qjr2CeFF2fbUg==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-display-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-display-values/-/postcss-normalize-display-values-5.1.0.tgz",
      "integrity": "sha512-WP4KIM4o2dazQXWmFaqMmcvsKmhdINFblgSeRgn8BJ6vxaMyaJkwAzpPpuvSIoG/rmX3M+IrRZEz2H0glrQNEA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-positions": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-positions/-/postcss-normalize-positions-5.1.1.tgz",
      "integrity": "sha512-6UpCb0G4eofTCQLFVuI3EVNZzBNPiIKcA1AKVka+31fTVySphr3VUgAIULBhxZkKgwLImhzMR2Bw1ORK+37INg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-repeat-style": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-repeat-style/-/postcss-normalize-repeat-style-5.1.1.tgz",
      "integrity": "sha512-mFpLspGWkQtBcWIRFLmewo8aC3ImN2i/J3v8YCFUwDnPu3Xz4rLohDO26lGjwNsQxB3YF0KKRwspGzE2JEuS0g==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-string": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-string/-/postcss-normalize-string-5.1.0.tgz",
      "integrity": "sha512-oYiIJOf4T9T1N4i+abeIc7Vgm/xPCGih4bZz5Nm0/ARVJ7K6xrDlLwvwqOydvyL3RHNf8qZk6vo3aatiw/go3w==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-timing-functions": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-timing-functions/-/postcss-normalize-timing-functions-5.1.0.tgz",
      "integrity": "sha512-DOEkzJ4SAXv5xkHl0Wa9cZLF3WCBhF3o1SKVxKQAa+0pYKlueTpCgvkFAHfk+Y64ezX9+nITGrDZeVGgITJXjg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-unicode": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-unicode/-/postcss-normalize-unicode-5.1.1.tgz",
      "integrity": "sha512-qnCL5jzkNUmKVhZoENp1mJiGNPcsJCs1aaRmURmeJGES23Z/ajaln+EPTD+rBeNkSryI+2WTdW+lwcVdOikrpA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-5.1.0.tgz",
      "integrity": "sha512-5upGeDO+PVthOxSmds43ZeMeZfKH+/DKgGRD7TElkkyS46JXAUhMzIKiCa7BabPeIy3AQcTkXwVVN7DbqsiCew==",
      "license": "MIT",
      "dependencies": {
        "normalize-url": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-whitespace": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-whitespace/-/postcss-normalize-whitespace-5.1.1.tgz",
      "integrity": "sha512-83ZJ4t3NUDETIHTa3uEg6asWjSBYL5EdkVB0sDncx9ERzOKBVJIUeDO9RyA9Zwtig8El1d79HBp0JEi8wvGQnA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-opacity-percentage": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/postcss-opacity-percentage/-/postcss-opacity-percentage-1.1.3.tgz",
      "integrity": "sha512-An6Ba4pHBiDtyVpSLymUUERMo2cU7s+Obz6BTrS+gxkbnSBNKSuD0AVUc+CpBMrpVPKKfoVz0WQCX+Tnst0i4A==",
      "funding": [
        {
          "type": "kofi",
          "url": "https://ko-fi.com/mrcgrtz"
        },
        {
          "type": "liberapay",
          "url": "https://liberapay.com/mrcgrtz"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-ordered-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-5.1.3.tgz",
      "integrity": "sha512-9UO79VUhPwEkzbb3RNpqqghc6lcYej1aveQteWY+4POIwlqkYE21HKWaLDF6lWNuqCobEAyTovVhtI32Rbv2RQ==",
      "license": "MIT",
      "dependencies": {
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-overflow-shorthand": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/postcss-overflow-shorthand/-/postcss-overflow-shorthand-3.0.4.tgz",
      "integrity": "sha512-otYl/ylHK8Y9bcBnPLo3foYFLL6a6Ak+3EQBPOTR7luMYCOsiVTUk1iLvNf6tVPNGXcoL9Hoz37kpfriRIFb4A==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-page-break": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/postcss-page-break/-/postcss-page-break-3.0.4.tgz",
      "integrity": "sha512-1JGu8oCjVXLa9q9rFTo4MbeeA5FMe00/9C7lN4va606Rdb+HkxXtXsmEDrIraQ11fGz/WvKWa8gMuCKkrXpTsQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8"
      }
    },
    "node_modules/postcss-place": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/postcss-place/-/postcss-place-7.0.5.tgz",
      "integrity": "sha512-wR8igaZROA6Z4pv0d+bvVrvGY4GVHihBCBQieXFY3kuSuMyOmEnnfFzHl/tQuqHZkfkIVBEbDvYcFfHmpSet9g==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-preset-env": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/postcss-preset-env/-/postcss-preset-env-7.8.3.tgz",
      "integrity": "sha512-T1LgRm5uEVFSEF83vHZJV2z19lHg4yJuZ6gXZZkqVsqv63nlr6zabMH3l4Pc01FQCyfWVrh2GaUeCVy9Po+Aag==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-cascade-layers": "^1.1.1",
        "@csstools/postcss-color-function": "^1.1.1",
        "@csstools/postcss-font-format-keywords": "^1.0.1",
        "@csstools/postcss-hwb-function": "^1.0.2",
        "@csstools/postcss-ic-unit": "^1.0.1",
        "@csstools/postcss-is-pseudo-class": "^2.0.7",
        "@csstools/postcss-nested-calc": "^1.0.0",
        "@csstools/postcss-normalize-display-values": "^1.0.1",
        "@csstools/postcss-oklab-function": "^1.1.1",
        "@csstools/postcss-progressive-custom-properties": "^1.3.0",
        "@csstools/postcss-stepped-value-functions": "^1.0.1",
        "@csstools/postcss-text-decoration-shorthand": "^1.0.0",
        "@csstools/postcss-trigonometric-functions": "^1.0.2",
        "@csstools/postcss-unset-value": "^1.0.2",
        "autoprefixer": "^10.4.13",
        "browserslist": "^4.21.4",
        "css-blank-pseudo": "^3.0.3",
        "css-has-pseudo": "^3.0.4",
        "css-prefers-color-scheme": "^6.0.3",
        "cssdb": "^7.1.0",
        "postcss-attribute-case-insensitive": "^5.0.2",
        "postcss-clamp": "^4.1.0",
        "postcss-color-functional-notation": "^4.2.4",
        "postcss-color-hex-alpha": "^8.0.4",
        "postcss-color-rebeccapurple": "^7.1.1",
        "postcss-custom-media": "^8.0.2",
        "postcss-custom-properties": "^12.1.10",
        "postcss-custom-selectors": "^6.0.3",
        "postcss-dir-pseudo-class": "^6.0.5",
        "postcss-double-position-gradients": "^3.1.2",
        "postcss-env-function": "^4.0.6",
        "postcss-focus-visible": "^6.0.4",
        "postcss-focus-within": "^5.0.4",
        "postcss-font-variant": "^5.0.0",
        "postcss-gap-properties": "^3.0.5",
        "postcss-image-set-function": "^4.0.7",
        "postcss-initial": "^4.0.1",
        "postcss-lab-function": "^4.2.1",
        "postcss-logical": "^5.0.4",
        "postcss-media-minmax": "^5.0.0",
        "postcss-nesting": "^10.2.0",
        "postcss-opacity-percentage": "^1.1.2",
        "postcss-overflow-shorthand": "^3.0.4",
        "postcss-page-break": "^3.0.4",
        "postcss-place": "^7.0.5",
        "postcss-pseudo-class-any-link": "^7.1.6",
        "postcss-replace-overflow-wrap": "^4.0.0",
        "postcss-selector-not": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-pseudo-class-any-link": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/postcss-pseudo-class-any-link/-/postcss-pseudo-class-any-link-7.1.6.tgz",
      "integrity": "sha512-9sCtZkO6f/5ML9WcTLcIyV1yz9D1rf0tWc+ulKcvV30s0iZKS/ONyETvoWsr6vnrmW+X+KmuK3gV/w5EWnT37w==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-reduce-initial": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-reduce-initial/-/postcss-reduce-initial-5.1.2.tgz",
      "integrity": "sha512-dE/y2XRaqAi6OvjzD22pjTUQ8eOfc6m/natGHgKFBK9DxFmIm69YmaRVQrGgFlEfc1HePIurY0TmDeROK05rIg==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-reduce-transforms": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-reduce-transforms/-/postcss-reduce-transforms-5.1.0.tgz",
      "integrity": "sha512-2fbdbmgir5AvpW9RLtdONx1QoYG2/EtqpNQbFASDlixBbAYuTcJ0dECwlqNqH7VbaUnEnh8SrxOe2sRIn24XyQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-replace-overflow-wrap": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-replace-overflow-wrap/-/postcss-replace-overflow-wrap-4.0.0.tgz",
      "integrity": "sha512-KmF7SBPphT4gPPcKZc7aDkweHiKEEO8cla/GjcBK+ckKxiZslIu3C4GCRW3DNfL0o7yW7kMQu9xlZ1kXRXLXtw==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.0.3"
      }
    },
    "node_modules/postcss-selector-not": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/postcss-selector-not/-/postcss-selector-not-6.0.1.tgz",
      "integrity": "sha512-1i9affjAe9xu/y9uqWH+tD4r6/hDaXJruk8xn2x1vzxC2U3J3LKO3zJW4CyxlNhA56pADJ/djpEwpH1RClI2rQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-svgo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-svgo/-/postcss-svgo-5.1.0.tgz",
      "integrity": "sha512-D75KsH1zm5ZrHyxPakAxJWtkyXew5qwS70v56exwvw542d9CRtTo78K0WeFxZB4G7JXKKMbEZtZayTGdIky/eA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "svgo": "^2.7.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-svgo/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/postcss-svgo/node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/postcss-svgo/node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
      "license": "CC0-1.0"
    },
    "node_modules/postcss-svgo/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postcss-svgo/node_modules/svgo": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-2.8.0.tgz",
      "integrity": "sha512-+N/Q9kV1+F+UeWYoSiULYo4xYSDQlTgb+ayMobAXPwMnLvop7oxKMo9OzIrX5x3eS4L4f2UHhc9axXwY8DpChg==",
      "license": "MIT",
      "dependencies": {
        "@trysound/sax": "0.2.0",
        "commander": "^7.2.0",
        "css-select": "^4.1.3",
        "css-tree": "^1.1.3",
        "csso": "^4.2.0",
        "picocolors": "^1.0.0",
        "stable": "^0.1.8"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/postcss-unique-selectors": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-5.1.1.tgz",
      "integrity": "sha512-5JiODlELrz8L2HwxfPnhOWZYWDxVHWL83ufOv84NrcgipI7TaeRsatAhK4Tr2/ZiYldpK/wBvw5BD3qfaK96GA==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prettier": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.3.3.tgz",
      "integrity": "sha512-i2tDNA0O5IrMO757lfrdQZCc2jPNDVntV0m/+4whiDfWaTKfMNgR7Qz0NAeGz/nRqF4m5/6CLzbP4/liHt12Ew==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/prettier-linter-helpers": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz",
      "integrity": "sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-diff": "^1.1.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/pretty-bytes": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz",
      "integrity": "sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pretty-error": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pretty-error/-/pretty-error-4.0.0.tgz",
      "integrity": "sha512-AoJ5YMAcXKYxKhuJGdcvse+Voc6v1RgnsR3nWcYU7q4t6z0Q6T86sv5Zq8VIRbOWWFpvdGE83LtdSMNd+6Y0xw==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.20",
        "renderkid": "^3.0.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/pretty-format/node_modules/react-is": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
      "license": "MIT"
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/promise": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/promise/-/promise-8.3.0.tgz",
      "integrity": "sha512-rZPNPKTOYVNEEKFaq1HqTgOwZD+4/YHS5ukLzQCypkj+OkYx7iv0mA91lJlpPPZ8vMau3IIGj5Qlwrx+8iiSmg==",
      "license": "MIT",
      "dependencies": {
        "asap": "~2.0.6"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/property-expr": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/property-expr/-/property-expr-2.0.6.tgz",
      "integrity": "sha512-SVtmxhRE/CGkn3eZY1T6pC8Nln6Fr/lu1mKSgRud0eC73whjGfoAogbn78LkD8aFL0zz3bAFerKSnOl7NlErBA==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-addr/node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/psl": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.9.0.tgz",
      "integrity": "sha512-E/ZsdU4HLs/68gYzgGTkMicWTLPdAftJLfJFlLUAAKZGkStNU72sZjT66SnMDVOfOWY/YAoiD7Jxa9iHvngcag==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
      "integrity": "sha512-jmYNElW7yvO7TV33CjSmvSiE2yco3bV2czu/OzDKdMNVZQWfxCblURLhf+47syQRBntjfLdd/H0egrzIG+oaFQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/q": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/q/-/q-1.5.1.tgz",
      "integrity": "sha512-kV/CThkXo6xyFEZUugw/+pIOywXcDbFYgSct5cT3gqlbkBE1SJdwy6UQoZvodiWF/ckQLZyDE/Bu1M6gVu5lVw==",
      "deprecated": "You or someone you depend on is using Q, the JavaScript Promise library that gave JavaScript developers strong feelings about promises. They can almost certainly migrate to the native JavaScript promise now. Thank you literally everyone for joining me in this bet against the odds. Be excellent to each other.\n\n(For a CapTP with native promises, see @endo/eventual-send and @endo/captp)",
      "license": "MIT",
      "engines": {
        "node": ">=0.6.0",
        "teleport": ">=0.2.0"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/query-string": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/query-string/-/query-string-7.1.3.tgz",
      "integrity": "sha512-hh2WYhq4fi8+b+/2Kg9CEge4fDPvHS534aOOvOZeQ3+Vf2mCFsaFBYj0i+iXcAq6I9Vzp5fjMFBlONvayDC1qg==",
      "license": "MIT",
      "dependencies": {
        "decode-uri-component": "^0.2.2",
        "filter-obj": "^1.1.0",
        "split-on-first": "^1.0.0",
        "strict-uri-encode": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==",
      "license": "MIT"
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/raf": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
      "license": "MIT",
      "dependencies": {
        "performance-now": "^2.1.0"
      }
    },
    "node_modules/raf-schd": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/raf-schd/-/raf-schd-4.0.3.tgz",
      "integrity": "sha512-tQkJl2GRWh83ui2DiPTJz9wEiMN20syf+5oKfB03yYP7ioZcJwsIK8FjrtLwH1m7C7e+Tt2yYBlrOpdT+dyeIQ==",
      "license": "MIT"
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz",
      "integrity": "sha512-kA5WQoNVo4t9lNx2kQNFCxKeBl5IbbSNBl1M/tLkw9WCn+hxNBAW5Qh8gdhs63CJnhjJ2zQWFoqPJP2sK1AV5A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dev": true,
      "license": "(BSD-2-Clause OR MIT OR Apache-2.0)",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/rc-cascader": {
      "version": "3.27.0",
      "resolved": "https://registry.npmjs.org/rc-cascader/-/rc-cascader-3.27.0.tgz",
      "integrity": "sha512-z5uq8VvQadFUBiuZJ7YF5UAUGNkZtdEtcEYiIA94N/Kc2MIKr6lEbN5HyVddvYSgwWlKqnL6pH5bFXFuIK3MNg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "array-tree-filter": "^2.1.0",
        "classnames": "^2.3.1",
        "rc-select": "~14.15.0",
        "rc-tree": "~5.8.1",
        "rc-util": "^5.37.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-checkbox": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/rc-checkbox/-/rc-checkbox-3.3.0.tgz",
      "integrity": "sha512-Ih3ZaAcoAiFKJjifzwsGiT/f/quIkxJoklW4yKGho14Olulwn8gN7hOBve0/WGDg5o/l/5mL0w7ff7/YGvefVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "^2.3.2",
        "rc-util": "^5.25.2"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-collapse": {
      "version": "3.7.3",
      "resolved": "https://registry.npmjs.org/rc-collapse/-/rc-collapse-3.7.3.tgz",
      "integrity": "sha512-60FJcdTRn0X5sELF18TANwtVi7FtModq649H11mYF1jh83DniMoM4MqY627sEKRCTm4+WXfGDcB7hY5oW6xhyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "2.x",
        "rc-motion": "^2.3.4",
        "rc-util": "^5.27.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-dialog": {
      "version": "9.5.2",
      "resolved": "https://registry.npmjs.org/rc-dialog/-/rc-dialog-9.5.2.tgz",
      "integrity": "sha512-qVUjc8JukG+j/pNaHVSRa2GO2/KbV2thm7yO4hepQ902eGdYK913sGkwg/fh9yhKYV1ql3BKIN2xnud3rEXAPw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "@rc-component/portal": "^1.0.0-8",
        "classnames": "^2.2.6",
        "rc-motion": "^2.3.0",
        "rc-util": "^5.21.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-drawer": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/rc-drawer/-/rc-drawer-7.2.0.tgz",
      "integrity": "sha512-9lOQ7kBekEJRdEpScHvtmEtXnAsy+NGDXiRWc2ZVC7QXAazNVbeT4EraQKYwCME8BJLa8Bxqxvs5swwyOepRwg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.23.9",
        "@rc-component/portal": "^1.1.1",
        "classnames": "^2.2.6",
        "rc-motion": "^2.6.1",
        "rc-util": "^5.38.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-dropdown": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/rc-dropdown/-/rc-dropdown-4.2.0.tgz",
      "integrity": "sha512-odM8Ove+gSh0zU27DUj5cG1gNKg7mLWBYzB5E4nNLrLwBmYEgYP43vHKDGOVZcJSVElQBI0+jTQgjnq0NfLjng==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "@rc-component/trigger": "^2.0.0",
        "classnames": "^2.2.6",
        "rc-util": "^5.17.0"
      },
      "peerDependencies": {
        "react": ">=16.11.0",
        "react-dom": ">=16.11.0"
      }
    },
    "node_modules/rc-field-form": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/rc-field-form/-/rc-field-form-2.4.0.tgz",
      "integrity": "sha512-XZ/lF9iqf9HXApIHQHqzJK5v2w4mkUMsVqAzOyWVzoiwwXEavY6Tpuw7HavgzIoD+huVff4JghSGcgEfX6eycg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.0",
        "@rc-component/async-validator": "^5.0.3",
        "rc-util": "^5.32.2"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-image": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/rc-image/-/rc-image-7.9.0.tgz",
      "integrity": "sha512-l4zqO5E0quuLMCtdKfBgj4Suv8tIS011F5k1zBBlK25iMjjiNHxA0VeTzGFtUZERSA45gvpXDg8/P6qNLjR25g==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.2",
        "@rc-component/portal": "^1.0.2",
        "classnames": "^2.2.6",
        "rc-dialog": "~9.5.2",
        "rc-motion": "^2.6.2",
        "rc-util": "^5.34.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-input": {
      "version": "1.6.3",
      "resolved": "https://registry.npmjs.org/rc-input/-/rc-input-1.6.3.tgz",
      "integrity": "sha512-wI4NzuqBS8vvKr8cljsvnTUqItMfG1QbJoxovCgL+DX4eVUcHIjVwharwevIxyy7H/jbLryh+K7ysnJr23aWIA==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.1",
        "classnames": "^2.2.1",
        "rc-util": "^5.18.1"
      },
      "peerDependencies": {
        "react": ">=16.0.0",
        "react-dom": ">=16.0.0"
      }
    },
    "node_modules/rc-input-number": {
      "version": "9.2.0",
      "resolved": "https://registry.npmjs.org/rc-input-number/-/rc-input-number-9.2.0.tgz",
      "integrity": "sha512-5XZFhBCV5f9UQ62AZ2hFbEY8iZT/dm23Q1kAg0H8EvOgD3UDbYYJAayoVIkM3lQaCqYAW5gV0yV3vjw1XtzWHg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "@rc-component/mini-decimal": "^1.0.1",
        "classnames": "^2.2.5",
        "rc-input": "~1.6.0",
        "rc-util": "^5.40.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-mentions": {
      "version": "2.15.0",
      "resolved": "https://registry.npmjs.org/rc-mentions/-/rc-mentions-2.15.0.tgz",
      "integrity": "sha512-f5v5i7VdqvBDXbphoqcQWmXDif2Msd2arritVoWybrVDuHE6nQ7XCYsybHbV//WylooK52BFDouFvyaRDtXZEw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.22.5",
        "@rc-component/trigger": "^2.0.0",
        "classnames": "^2.2.6",
        "rc-input": "~1.6.0",
        "rc-menu": "~9.14.0",
        "rc-textarea": "~1.8.0",
        "rc-util": "^5.34.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-menu": {
      "version": "9.14.1",
      "resolved": "https://registry.npmjs.org/rc-menu/-/rc-menu-9.14.1.tgz",
      "integrity": "sha512-5wlRb3M8S4yGlWhSoEYJ7ZVRElyScdcpUHxgiLxkeig1tEdyKrnED3B2fhpN0Rrpdp9jyhnmZR/Lwq2fH5VvDQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "@rc-component/trigger": "^2.0.0",
        "classnames": "2.x",
        "rc-motion": "^2.4.3",
        "rc-overflow": "^1.3.1",
        "rc-util": "^5.27.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-motion": {
      "version": "2.9.2",
      "resolved": "https://registry.npmjs.org/rc-motion/-/rc-motion-2.9.2.tgz",
      "integrity": "sha512-fUAhHKLDdkAXIDLH0GYwof3raS58dtNUmzLF2MeiR8o6n4thNpSDQhOqQzWE4WfFZDCi9VEN8n7tiB7czREcyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.1",
        "classnames": "^2.2.1",
        "rc-util": "^5.43.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-notification": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/rc-notification/-/rc-notification-5.6.0.tgz",
      "integrity": "sha512-TGQW5T7waOxLwgJG7fXcw8l7AQiFOjaZ7ISF5PrU526nunHRNcTMuzKihQHaF4E/h/KfOCDk3Mv8eqzbu2e28w==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "2.x",
        "rc-motion": "^2.9.0",
        "rc-util": "^5.20.1"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-overflow": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/rc-overflow/-/rc-overflow-1.3.2.tgz",
      "integrity": "sha512-nsUm78jkYAoPygDAcGZeC2VwIg/IBGSodtOY3pMof4W3M9qRJgqaDYm03ZayHlde3I6ipliAxbN0RUcGf5KOzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.1",
        "classnames": "^2.2.1",
        "rc-resize-observer": "^1.0.0",
        "rc-util": "^5.37.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-pagination": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/rc-pagination/-/rc-pagination-4.2.0.tgz",
      "integrity": "sha512-V6qeANJsT6tmOcZ4XiUmj8JXjRLbkusuufpuoBw2GiAn94fIixYjFLmbruD1Sbhn8fPLDnWawPp4CN37zQorvw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "^2.3.2",
        "rc-util": "^5.38.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-picker": {
      "version": "4.6.14",
      "resolved": "https://registry.npmjs.org/rc-picker/-/rc-picker-4.6.14.tgz",
      "integrity": "sha512-7DuTfUFdkxmsNpWQ0TWv6FPGna5e6KKC4nxtx3x9xhumLz7jb3fhlDdWQvqEL6tpt9DOb1+N5j+wB+lDOSS9kg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.24.7",
        "@rc-component/trigger": "^2.0.0",
        "classnames": "^2.2.1",
        "rc-overflow": "^1.3.2",
        "rc-resize-observer": "^1.4.0",
        "rc-util": "^5.43.0"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "date-fns": ">= 2.x",
        "dayjs": ">= 1.x",
        "luxon": ">= 3.x",
        "moment": ">= 2.x",
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      },
      "peerDependenciesMeta": {
        "date-fns": {
          "optional": true
        },
        "dayjs": {
          "optional": true
        },
        "luxon": {
          "optional": true
        },
        "moment": {
          "optional": true
        }
      }
    },
    "node_modules/rc-progress": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/rc-progress/-/rc-progress-4.0.0.tgz",
      "integrity": "sha512-oofVMMafOCokIUIBnZLNcOZFsABaUw8PPrf1/y0ZBvKZNpOiu5h4AO9vv11Sw0p4Hb3D0yGWuEattcQGtNJ/aw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "^2.2.6",
        "rc-util": "^5.16.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-rate": {
      "version": "2.13.0",
      "resolved": "https://registry.npmjs.org/rc-rate/-/rc-rate-2.13.0.tgz",
      "integrity": "sha512-oxvx1Q5k5wD30sjN5tqAyWTvJfLNNJn7Oq3IeS4HxWfAiC4BOXMITNAsw7u/fzdtO4MS8Ki8uRLOzcnEuoQiAw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "^2.2.5",
        "rc-util": "^5.0.1"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-resize-observer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/rc-resize-observer/-/rc-resize-observer-1.4.0.tgz",
      "integrity": "sha512-PnMVyRid9JLxFavTjeDXEXo65HCRqbmLBw9xX9gfC4BZiSzbLXKzW3jPz+J0P71pLbD5tBMTT+mkstV5gD0c9Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.20.7",
        "classnames": "^2.2.1",
        "rc-util": "^5.38.0",
        "resize-observer-polyfill": "^1.5.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-segmented": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/rc-segmented/-/rc-segmented-2.3.0.tgz",
      "integrity": "sha512-I3FtM5Smua/ESXutFfb8gJ8ZPcvFR+qUgeeGFQHBOvRiRKyAk4aBE5nfqrxXx+h8/vn60DQjOt6i4RNtrbOobg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.1",
        "classnames": "^2.2.1",
        "rc-motion": "^2.4.4",
        "rc-util": "^5.17.0"
      },
      "peerDependencies": {
        "react": ">=16.0.0",
        "react-dom": ">=16.0.0"
      }
    },
    "node_modules/rc-select": {
      "version": "14.15.1",
      "resolved": "https://registry.npmjs.org/rc-select/-/rc-select-14.15.1.tgz",
      "integrity": "sha512-mGvuwW1RMm1NCSI8ZUoRoLRK51R2Nb+QJnmiAvbDRcjh2//ulCkxeV6ZRFTECPpE1t2DPfyqZMPw90SVJzQ7wQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "@rc-component/trigger": "^2.1.1",
        "classnames": "2.x",
        "rc-motion": "^2.0.1",
        "rc-overflow": "^1.3.1",
        "rc-util": "^5.16.1",
        "rc-virtual-list": "^3.5.2"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": "*",
        "react-dom": "*"
      }
    },
    "node_modules/rc-slider": {
      "version": "11.1.5",
      "resolved": "https://registry.npmjs.org/rc-slider/-/rc-slider-11.1.5.tgz",
      "integrity": "sha512-b77H5PbjMKsvkYXAYIkn50QuFX6ICQmCTibDinI9q+BHx65/TV4TeU25+oadhSRzykxs0/vBWeKBwRyySOeWlg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "^2.2.5",
        "rc-util": "^5.36.0"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-steps": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/rc-steps/-/rc-steps-6.0.1.tgz",
      "integrity": "sha512-lKHL+Sny0SeHkQKKDJlAjV5oZ8DwCdS2hFhAkIjuQt1/pB81M0cA0ErVFdHq9+jmPmFw1vJB2F5NBzFXLJxV+g==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.16.7",
        "classnames": "^2.2.3",
        "rc-util": "^5.16.1"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-switch": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/rc-switch/-/rc-switch-4.1.0.tgz",
      "integrity": "sha512-TI8ufP2Az9oEbvyCeVE4+90PDSljGyuwix3fV58p7HV2o4wBnVToEyomJRVyTaZeqNPAp+vqeo4Wnj5u0ZZQBg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.21.0",
        "classnames": "^2.2.1",
        "rc-util": "^5.30.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-table": {
      "version": "7.45.7",
      "resolved": "https://registry.npmjs.org/rc-table/-/rc-table-7.45.7.tgz",
      "integrity": "sha512-wi9LetBL1t1csxyGkMB2p3mCiMt+NDexMlPbXHvQFmBBAsMxrgNSAPwUci2zDLUq9m8QdWc1Nh8suvrpy9mXrg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "@rc-component/context": "^1.4.0",
        "classnames": "^2.2.5",
        "rc-resize-observer": "^1.1.0",
        "rc-util": "^5.37.0",
        "rc-virtual-list": "^3.14.2"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-tabs": {
      "version": "15.1.1",
      "resolved": "https://registry.npmjs.org/rc-tabs/-/rc-tabs-15.1.1.tgz",
      "integrity": "sha512-Tc7bJvpEdkWIVCUL7yQrMNBJY3j44NcyWS48jF/UKMXuUlzaXK+Z/pEL5LjGcTadtPvVmNqA40yv7hmr+tCOAw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.2",
        "classnames": "2.x",
        "rc-dropdown": "~4.2.0",
        "rc-menu": "~9.14.0",
        "rc-motion": "^2.6.2",
        "rc-resize-observer": "^1.0.0",
        "rc-util": "^5.34.1"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-textarea": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/rc-textarea/-/rc-textarea-1.8.1.tgz",
      "integrity": "sha512-bm36N2ZqwZAP60ZQg2OY9mPdqWC+m6UTjHc+CqEZOxb3Ia29BGHazY/s5bI8M4113CkqTzhtFUDNA078ZiOx3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "^2.2.1",
        "rc-input": "~1.6.0",
        "rc-resize-observer": "^1.0.0",
        "rc-util": "^5.27.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-tooltip": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/rc-tooltip/-/rc-tooltip-6.2.0.tgz",
      "integrity": "sha512-iS/3iOAvtDh9GIx1ulY7EFUXUtktFccNLsARo3NPgLf0QW9oT0w3dA9cYWlhqAKmD+uriEwdWz1kH0Qs4zk2Aw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.11.2",
        "@rc-component/trigger": "^2.0.0",
        "classnames": "^2.3.1"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-tree": {
      "version": "5.8.8",
      "resolved": "https://registry.npmjs.org/rc-tree/-/rc-tree-5.8.8.tgz",
      "integrity": "sha512-S+mCMWo91m5AJqjz3PdzKilGgbFm7fFJRFiTDOcoRbD7UfMOPnerXwMworiga0O2XIo383UoWuEfeHs1WOltag==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "2.x",
        "rc-motion": "^2.0.1",
        "rc-util": "^5.16.1",
        "rc-virtual-list": "^3.5.1"
      },
      "engines": {
        "node": ">=10.x"
      },
      "peerDependencies": {
        "react": "*",
        "react-dom": "*"
      }
    },
    "node_modules/rc-tree-select": {
      "version": "5.22.2",
      "resolved": "https://registry.npmjs.org/rc-tree-select/-/rc-tree-select-5.22.2.tgz",
      "integrity": "sha512-WHmWCck4+8mf4/KFTjw70AlnoNPkX4C1TOIzzwxfZ7w8hcNO4bzggoeO2Q3fAedjZteN5I3t2dT0BCZAnHedlQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.10.1",
        "classnames": "2.x",
        "rc-select": "~14.15.0",
        "rc-tree": "~5.8.1",
        "rc-util": "^5.16.1"
      },
      "peerDependencies": {
        "react": "*",
        "react-dom": "*"
      }
    },
    "node_modules/rc-upload": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/rc-upload/-/rc-upload-4.7.0.tgz",
      "integrity": "sha512-eUwxYNHlsYe5vYhKFAUGrQG95JrnPzY+BmPi1Daq39fWNl/eOc7v4UODuWrVp2LFkQBuV3cMCG/I68iub6oBrg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "classnames": "^2.2.5",
        "rc-util": "^5.2.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-util": {
      "version": "5.43.0",
      "resolved": "https://registry.npmjs.org/rc-util/-/rc-util-5.43.0.tgz",
      "integrity": "sha512-AzC7KKOXFqAdIBqdGWepL9Xn7cm3vnAmjlHqUnoQaTMZYhM4VlXGLkkHHxj/BZ7Td0+SOPKB4RGPboBVKT9htw==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.18.3",
        "react-is": "^18.2.0"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc-virtual-list": {
      "version": "3.14.5",
      "resolved": "https://registry.npmjs.org/rc-virtual-list/-/rc-virtual-list-3.14.5.tgz",
      "integrity": "sha512-ZMOnkCLv2wUN8Jz7yI4XiSLa9THlYvf00LuMhb1JlsQCewuU7ydPuHw1rGVPhe9VZYl/5UqODtNd7QKJ2DMGfg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.20.0",
        "classnames": "^2.2.6",
        "rc-resize-observer": "^1.0.0",
        "rc-util": "^5.36.0"
      },
      "engines": {
        "node": ">=8.x"
      },
      "peerDependencies": {
        "react": ">=16.9.0",
        "react-dom": ">=16.9.0"
      }
    },
    "node_modules/rc/node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-app-polyfill": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/react-app-polyfill/-/react-app-polyfill-3.0.0.tgz",
      "integrity": "sha512-sZ41cxiU5llIB003yxxQBYrARBqe0repqPTTYBTmMqTz9szeBbE37BehCE891NZsmdZqqP+xWKdT3eo3vOzN8w==",
      "license": "MIT",
      "dependencies": {
        "core-js": "^3.19.2",
        "object-assign": "^4.1.1",
        "promise": "^8.1.0",
        "raf": "^3.4.1",
        "regenerator-runtime": "^0.13.9",
        "whatwg-fetch": "^3.6.2"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-app-polyfill/node_modules/regenerator-runtime": {
      "version": "0.13.11",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
      "license": "MIT"
    },
    "node_modules/react-beautiful-dnd": {
      "version": "13.1.1",
      "resolved": "https://registry.npmjs.org/react-beautiful-dnd/-/react-beautiful-dnd-13.1.1.tgz",
      "integrity": "sha512-0Lvs4tq2VcrEjEgDXHjT98r+63drkKEgqyxdA7qD3mvKwga6a5SscbdLPO2IExotU1jW8L0Ksdl0Cj2AF67nPQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@babel/runtime": "^7.9.2",
        "css-box-model": "^1.2.0",
        "memoize-one": "^5.1.1",
        "raf-schd": "^4.0.2",
        "react-redux": "^7.2.0",
        "redux": "^4.0.4",
        "use-memo-one": "^1.1.1"
      },
      "peerDependencies": {
        "react": "^16.8.5 || ^17.0.0 || ^18.0.0",
        "react-dom": "^16.8.5 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-beautiful-dnd/node_modules/react-is": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
      "license": "MIT"
    },
    "node_modules/react-beautiful-dnd/node_modules/react-redux": {
      "version": "7.2.9",
      "resolved": "https://registry.npmjs.org/react-redux/-/react-redux-7.2.9.tgz",
      "integrity": "sha512-Gx4L3uM182jEEayZfRbI/G11ZpYdNAnBs70lFVMNdHJI76XYtR+7m0MN+eAs7UHBPhWXcnFPaS+9owSCJQHNpQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.15.4",
        "@types/react-redux": "^7.1.20",
        "hoist-non-react-statics": "^3.3.2",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.7.2",
        "react-is": "^17.0.2"
      },
      "peerDependencies": {
        "react": "^16.8.3 || ^17 || ^18"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        },
        "react-native": {
          "optional": true
        }
      }
    },
    "node_modules/react-beautiful-dnd/node_modules/redux": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-4.2.1.tgz",
      "integrity": "sha512-LAUYz4lc+Do8/g7aeRa8JkyDErK6ekstQaqWQrNRW//MY1TvCEpMtpTWvlQ+FPbWCx+Xixu/6SHt5N0HR+SB4w==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.9.2"
      }
    },
    "node_modules/react-chartjs-2": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/react-chartjs-2/-/react-chartjs-2-5.2.0.tgz",
      "integrity": "sha512-98iN5aguJyVSxp5U3CblRLH67J8gkfyGNbiK3c+l1QI/G4irHMPQw44aEPmjVag+YKTyQ260NcF82GTQ3bdscA==",
      "license": "MIT",
      "peerDependencies": {
        "chart.js": "^4.1.1",
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-color": {
      "version": "2.19.3",
      "resolved": "https://registry.npmjs.org/react-color/-/react-color-2.19.3.tgz",
      "integrity": "sha512-LEeGE/ZzNLIsFWa1TMe8y5VYqr7bibneWmvJwm1pCn/eNmrabWDh659JSPn9BuaMpEfU83WTOJfnCcjDZwNQTA==",
      "license": "MIT",
      "dependencies": {
        "@icons/material": "^0.2.4",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.15",
        "material-colors": "^1.2.1",
        "prop-types": "^15.5.10",
        "reactcss": "^1.2.0",
        "tinycolor2": "^1.4.1"
      },
      "peerDependencies": {
        "react": "*"
      }
    },
    "node_modules/react-colorful": {
      "version": "5.6.1",
      "resolved": "https://registry.npmjs.org/react-colorful/-/react-colorful-5.6.1.tgz",
      "integrity": "sha512-1exovf0uGTGyq5mXQT0zgQ80uvj2PCwvF8zY1RN9/vbJVSjSo3fsB/4L3ObbF7u70NduSiK4xu4Y6q1MHoUGEw==",
      "license": "MIT",
      "peerDependencies": {
        "react": ">=16.8.0",
        "react-dom": ">=16.8.0"
      }
    },
    "node_modules/react-datepicker": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/react-datepicker/-/react-datepicker-7.3.0.tgz",
      "integrity": "sha512-EqRKLAtLZUTztiq6a+tjSjQX9ES0Xd229JPckAtyZZ4GoY3rtvNWAzkYZnQUf6zTWT50Ki0+t+W9VRQIkSJLfg==",
      "license": "MIT",
      "dependencies": {
        "@floating-ui/react": "^0.26.2",
        "clsx": "^2.1.0",
        "date-fns": "^3.3.1",
        "prop-types": "^15.7.2",
        "react-onclickoutside": "^6.13.0"
      },
      "peerDependencies": {
        "react": "^16.9.0 || ^17 || ^18",
        "react-dom": "^16.9.0 || ^17 || ^18"
      }
    },
    "node_modules/react-dev-utils": {
      "version": "12.0.1",
      "resolved": "https://registry.npmjs.org/react-dev-utils/-/react-dev-utils-12.0.1.tgz",
      "integrity": "sha512-84Ivxmr17KjUupyqzFode6xKhjwuEJDROWKJy/BthkL7Wn6NJ8h4WE6k/exAv6ImS+0oZLRRW5j/aINMHyeGeQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.0",
        "address": "^1.1.2",
        "browserslist": "^4.18.1",
        "chalk": "^4.1.2",
        "cross-spawn": "^7.0.3",
        "detect-port-alt": "^1.1.6",
        "escape-string-regexp": "^4.0.0",
        "filesize": "^8.0.6",
        "find-up": "^5.0.0",
        "fork-ts-checker-webpack-plugin": "^6.5.0",
        "global-modules": "^2.0.0",
        "globby": "^11.0.4",
        "gzip-size": "^6.0.0",
        "immer": "^9.0.7",
        "is-root": "^2.1.0",
        "loader-utils": "^3.2.0",
        "open": "^8.4.0",
        "pkg-up": "^3.1.0",
        "prompts": "^2.4.2",
        "react-error-overlay": "^6.0.11",
        "recursive-readdir": "^2.2.2",
        "shell-quote": "^1.7.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-dev-utils/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/react-dev-utils/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/react-dev-utils/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/react-dev-utils/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/react-dev-utils/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/react-dev-utils/node_modules/immer": {
      "version": "9.0.21",
      "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.21.tgz",
      "integrity": "sha512-bc4NBHqOqSfRW7POMkHd51LvClaeMXpm8dx0e8oE2GORbq5aRK7Bxl4FyzVLdGtLmvLKL7BTDBG5ACQm4HWjTA==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/react-dev-utils/node_modules/loader-utils": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-3.3.1.tgz",
      "integrity": "sha512-FMJTLMXfCLMLfJxcX9PFqX5qD88Z5MRGaZCVzfuqeZSPsyiBzs+pahDQjbIWz2QIzPZz0NX9Zy4FX3lmK6YHIg==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      }
    },
    "node_modules/react-dev-utils/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-error-overlay": {
      "version": "6.0.11",
      "resolved": "https://registry.npmjs.org/react-error-overlay/-/react-error-overlay-6.0.11.tgz",
      "integrity": "sha512-/6UZ2qgEyH2aqzYZgQPxEnz33NJ2gNsnHA2o5+o4wW9bLM/JYQitNP9xPhsXwC08hMMovfGe/8retsdDsczPRg==",
      "license": "MIT"
    },
    "node_modules/react-fast-compare": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/react-fast-compare/-/react-fast-compare-3.2.2.tgz",
      "integrity": "sha512-nsO+KSNgo1SbJqJEYRE9ERzo7YtYbou/OqjSQKxV7jcKox7+usiUVZOAC+XnDOABXggQTno0Y1CpVnuWEc1boQ==",
      "license": "MIT"
    },
    "node_modules/react-helmet-async": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/react-helmet-async/-/react-helmet-async-2.0.5.tgz",
      "integrity": "sha512-rYUYHeus+i27MvFE+Jaa4WsyBKGkL6qVgbJvSBoX8mbsWoABJXdEO0bZyi0F6i+4f0NuIb8AvqPMj3iXFHkMwg==",
      "license": "Apache-2.0",
      "dependencies": {
        "invariant": "^2.2.4",
        "react-fast-compare": "^3.2.2",
        "shallowequal": "^1.1.0"
      },
      "peerDependencies": {
        "react": "^16.6.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-hook-form": {
      "version": "7.53.0",
      "resolved": "https://registry.npmjs.org/react-hook-form/-/react-hook-form-7.53.0.tgz",
      "integrity": "sha512-M1n3HhqCww6S2hxLxciEXy2oISPnAzxY7gvwVPrtlczTM/1dDadXgUxDpHMrMTblDOcm/AXtXxHwZ3jpg1mqKQ==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/react-hook-form"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17 || ^18 || ^19"
      }
    },
    "node_modules/react-intl": {
      "version": "6.6.8",
      "resolved": "https://registry.npmjs.org/react-intl/-/react-intl-6.6.8.tgz",
      "integrity": "sha512-M0pkhzcgV31h++2901BiRXWl69hp2zPyLxRrSwRjd1ErXbNoubz/f4M6DrRTd4OiSUrT4ajRQzrmtS5plG4FtA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@formatjs/ecma402-abstract": "2.0.0",
        "@formatjs/icu-messageformat-parser": "2.7.8",
        "@formatjs/intl": "2.10.4",
        "@formatjs/intl-displaynames": "6.6.8",
        "@formatjs/intl-listformat": "7.5.7",
        "@types/hoist-non-react-statics": "^3.3.1",
        "@types/react": "16 || 17 || 18",
        "hoist-non-react-statics": "^3.3.2",
        "intl-messageformat": "10.5.14",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "react": "^16.6.0 || 17 || 18",
        "typescript": "^4.7 || 5"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/react-leaflet": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/react-leaflet/-/react-leaflet-4.2.1.tgz",
      "integrity": "sha512-p9chkvhcKrWn/H/1FFeVSqLdReGwn2qmiobOQGO3BifX+/vV/39qhY8dGqbdcPh1e6jxh/QHriLXr7a4eLFK4Q==",
      "license": "Hippocratic-2.1",
      "dependencies": {
        "@react-leaflet/core": "^2.1.0"
      },
      "peerDependencies": {
        "leaflet": "^1.9.0",
        "react": "^18.0.0",
        "react-dom": "^18.0.0"
      }
    },
    "node_modules/react-leaflet-markercluster": {
      "version": "3.0.0-rc1",
      "resolved": "https://registry.npmjs.org/react-leaflet-markercluster/-/react-leaflet-markercluster-3.0.0-rc1.tgz",
      "integrity": "sha512-wr8ERtx73sY0uVoQAM1v1vsA5Vsbdgyqc88h+Eo2kYRwNdkVTEOoUTnAh3CgGuOyP0Y9QLd2dKGupGkufpwryQ==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "license": "MIT",
      "dependencies": {
        "@react-leaflet/core": "^1.0.2",
        "leaflet": "^1.6.0",
        "leaflet.markercluster": "^1.4.1",
        "react-leaflet": "^3.0.0"
      },
      "peerDependencies": {
        "leaflet": "^1.6.0",
        "leaflet.markercluster": "^1.4.1",
        "react-leaflet": "^3.0.0"
      }
    },
    "node_modules/react-leaflet-markercluster/node_modules/@react-leaflet/core": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@react-leaflet/core/-/core-1.1.1.tgz",
      "integrity": "sha512-7PGLWa9MZ5x/cWy8EH2VzI4T8q5WpuHbixzCDXqixP/WyqwIrg5NDUPgYuFnB4IEIZF+6nA265mYzswFo/h1Pw==",
      "license": "Hippocratic-2.1",
      "peerDependencies": {
        "leaflet": "^1.7.1",
        "react": "^17.0.1",
        "react-dom": "^17.0.1"
      }
    },
    "node_modules/react-leaflet-markercluster/node_modules/react": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react/-/react-17.0.2.tgz",
      "integrity": "sha512-gnhPt75i/dq/z3/6q/0asP78D0u592D5L1pd7M8P+dck6Fu/jJeL6iVVK23fptSUZj8Vjf++7wXA8UNclGQcbA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-leaflet-markercluster/node_modules/react-dom": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-17.0.2.tgz",
      "integrity": "sha512-s4h96KtLDUQlsENhMn1ar8t2bEa+q/YAtj8pPPdIjPDGBDIVNsrD9aXNWqspUe6AzKCIG0C1HZZLqLV7qpOBGA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1",
        "scheduler": "^0.20.2"
      },
      "peerDependencies": {
        "react": "17.0.2"
      }
    },
    "node_modules/react-leaflet-markercluster/node_modules/react-leaflet": {
      "version": "3.2.5",
      "resolved": "https://registry.npmjs.org/react-leaflet/-/react-leaflet-3.2.5.tgz",
      "integrity": "sha512-Z3KZ+4SijsRbbrt2I1a3ZDY6+V6Pm91eYTdxTN18G6IOkFRsJo1BuSPLFnyFrlF3WDjQFPEcTPkEgD1VEeAoBg==",
      "license": "Hippocratic-2.1",
      "dependencies": {
        "@react-leaflet/core": "^1.1.1"
      },
      "peerDependencies": {
        "leaflet": "^1.7.1",
        "react": "^17.0.1",
        "react-dom": "^17.0.1"
      }
    },
    "node_modules/react-leaflet-markercluster/node_modules/scheduler": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.20.2.tgz",
      "integrity": "sha512-2eWfGgAqqWFGqtdMmcL5zCMK1U8KlXv8SQFGglL3CEtd0aDVDWgeF/YoCmvln55m5zSk3J/20hTaSBeSObsQDQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "loose-envify": "^1.1.0",
        "object-assign": "^4.1.1"
      }
    },
    "node_modules/react-onclickoutside": {
      "version": "6.13.1",
      "resolved": "https://registry.npmjs.org/react-onclickoutside/-/react-onclickoutside-6.13.1.tgz",
      "integrity": "sha512-LdrrxK/Yh9zbBQdFbMTXPp3dTSN9B+9YJQucdDu3JNKRrbdU+H+/TVONJoWtOwy4II8Sqf1y/DTI6w/vGPYW0w==",
      "license": "MIT",
      "funding": {
        "type": "individual",
        "url": "https://github.com/Pomax/react-onclickoutside/blob/master/FUNDING.md"
      },
      "peerDependencies": {
        "react": "^15.5.x || ^16.x || ^17.x || ^18.x",
        "react-dom": "^15.5.x || ^16.x || ^17.x || ^18.x"
      }
    },
    "node_modules/react-popper": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/react-popper/-/react-popper-2.3.0.tgz",
      "integrity": "sha512-e1hj8lL3uM+sgSR4Lxzn5h1GxBlpa4CQz0XLF8kx4MDrDRWY0Ena4c97PUeSX9i5W3UAfDP0z0FXCTQkoXUl3Q==",
      "license": "MIT",
      "dependencies": {
        "react-fast-compare": "^3.0.1",
        "warning": "^4.0.2"
      },
      "peerDependencies": {
        "@popperjs/core": "^2.0.0",
        "react": "^16.8.0 || ^17 || ^18",
        "react-dom": "^16.8.0 || ^17 || ^18"
      }
    },
    "node_modules/react-query": {
      "version": "3.39.3",
      "resolved": "https://registry.npmjs.org/react-query/-/react-query-3.39.3.tgz",
      "integrity": "sha512-nLfLz7GiohKTJDuT4us4X3h/8unOh+00MLb2yJoGTPjxKs2bc1iDhkNx2bd5MKklXnOD3NrVZ+J2UXujA5In4g==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "broadcast-channel": "^3.4.1",
        "match-sorter": "^6.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/tannerlinsley"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        },
        "react-native": {
          "optional": true
        }
      }
    },
    "node_modules/react-redux": {
      "version": "9.1.2",
      "resolved": "https://registry.npmjs.org/react-redux/-/react-redux-9.1.2.tgz",
      "integrity": "sha512-0OA4dhM1W48l3uzmv6B7TXPCGmokUU4p1M44DGN2/D9a1FjVPukVjER1PcPX97jIg6aUeLq1XJo1IpfbgULn0w==",
      "license": "MIT",
      "dependencies": {
        "@types/use-sync-external-store": "^0.0.3",
        "use-sync-external-store": "^1.0.0"
      },
      "peerDependencies": {
        "@types/react": "^18.2.25",
        "react": "^18.0",
        "redux": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "redux": {
          "optional": true
        }
      }
    },
    "node_modules/react-refresh": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.11.0.tgz",
      "integrity": "sha512-F27qZr8uUqwhWZboondsPx8tnC3Ct3SxZA3V5WyEvujRyyNv0VYPhoBg1gZ8/MV5tubQp76Trw8lTv9hzRBa+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.26.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.26.1.tgz",
      "integrity": "sha512-kIwJveZNwp7teQRI5QmwWo39A5bXRyqpH0COKKmPnyD2vBvDwgFXSqDUYtt1h+FEyfnE8eXr7oe0MxRzVwCcvQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.19.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.26.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.26.1.tgz",
      "integrity": "sha512-veut7m41S1fLql4pLhxeSW3jlqs+4MtjRLj0xvuCEXsxusJCbs6I8yn9BxzzDX2XDgafrccY6hwjmd/bL54tFw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.19.1",
        "react-router": "6.26.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-scripts": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/react-scripts/-/react-scripts-5.0.1.tgz",
      "integrity": "sha512-8VAmEm/ZAwQzJ+GOMLbBsTdDKOpuZh7RPs0UymvBR2vRk4iZWCskjbFnxqjrzoIvlNNRZ3QJFx6/qDSi6zSnaQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@pmmmwh/react-refresh-webpack-plugin": "^0.5.3",
        "@svgr/webpack": "^5.5.0",
        "babel-jest": "^27.4.2",
        "babel-loader": "^8.2.3",
        "babel-plugin-named-asset-import": "^0.3.8",
        "babel-preset-react-app": "^10.0.1",
        "bfj": "^7.0.2",
        "browserslist": "^4.18.1",
        "camelcase": "^6.2.1",
        "case-sensitive-paths-webpack-plugin": "^2.4.0",
        "css-loader": "^6.5.1",
        "css-minimizer-webpack-plugin": "^3.2.0",
        "dotenv": "^10.0.0",
        "dotenv-expand": "^5.1.0",
        "eslint": "^8.3.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-webpack-plugin": "^3.1.1",
        "file-loader": "^6.2.0",
        "fs-extra": "^10.0.0",
        "html-webpack-plugin": "^5.5.0",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^27.4.3",
        "jest-resolve": "^27.4.2",
        "jest-watch-typeahead": "^1.0.0",
        "mini-css-extract-plugin": "^2.4.5",
        "postcss": "^8.4.4",
        "postcss-flexbugs-fixes": "^5.0.2",
        "postcss-loader": "^6.2.1",
        "postcss-normalize": "^10.0.1",
        "postcss-preset-env": "^7.0.1",
        "prompts": "^2.4.2",
        "react-app-polyfill": "^3.0.0",
        "react-dev-utils": "^12.0.1",
        "react-refresh": "^0.11.0",
        "resolve": "^1.20.0",
        "resolve-url-loader": "^4.0.0",
        "sass-loader": "^12.3.0",
        "semver": "^7.3.5",
        "source-map-loader": "^3.0.0",
        "style-loader": "^3.3.1",
        "tailwindcss": "^3.0.2",
        "terser-webpack-plugin": "^5.2.5",
        "webpack": "^5.64.4",
        "webpack-dev-server": "^4.6.0",
        "webpack-manifest-plugin": "^4.0.2",
        "workbox-webpack-plugin": "^6.4.1"
      },
      "bin": {
        "react-scripts": "bin/react-scripts.js"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      },
      "peerDependencies": {
        "react": ">= 16",
        "typescript": "^3.2.1 || ^4"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/react-smooth": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.1.tgz",
      "integrity": "sha512-OE4hm7XqR0jNOq3Qmk9mFLyd6p2+j6bvbPJ7qlB7+oo0eNcL2l7WQzG6MBnT3EXY6xzkLMUBec3AfewJdA0J8w==",
      "license": "MIT",
      "dependencies": {
        "fast-equals": "^5.0.1",
        "prop-types": "^15.8.1",
        "react-transition-group": "^4.4.5"
      },
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0",
        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/react-toastify": {
      "version": "10.0.5",
      "resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-10.0.5.tgz",
      "integrity": "sha512-mNKt2jBXJg4O7pSdbNUfDdTsK9FIdikfsIE/yUCxbAEXl4HMyJaivrVFcn3Elvt5xvCQYhUZm+hqTIu1UXM3Pw==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.1.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/react-transition-group": {
      "version": "4.4.5",
      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/runtime": "^7.5.5",
        "dom-helpers": "^5.0.1",
        "loose-envify": "^1.4.0",
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": ">=16.6.0",
        "react-dom": ">=16.6.0"
      }
    },
    "node_modules/reactcss": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/reactcss/-/reactcss-1.2.3.tgz",
      "integrity": "sha512-KiwVUcFu1RErkI97ywr8nvx8dNOpT03rbnma0SSalTYjkrPYaEajR4a/MRt6DZ46K6arDRbWMNHF+xH7G7n/8A==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.0.1"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "license": "MIT",
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdir-glob": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/readdir-glob/-/readdir-glob-1.1.3.tgz",
      "integrity": "sha512-v05I2k7xN8zXvPD9N+z/uhXPaj0sUFCe2rcWZIpBsqxfP7xXFQ0tipAd/wjj1YxWyWtUS5IDJpOG82JKt2EAVA==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.1.0"
      }
    },
    "node_modules/readdir-glob/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/readdir-glob/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/recharts": {
      "version": "2.12.7",
      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.12.7.tgz",
      "integrity": "sha512-hlLJMhPQfv4/3NBSAyq3gzGg4h2v69RJh6KU7b3pXYNNAELs9kEoXOjbkxdXpALqKBoVmVptGfLpxdaVYqjmXQ==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.0.0",
        "eventemitter3": "^4.0.1",
        "lodash": "^4.17.21",
        "react-is": "^16.10.2",
        "react-smooth": "^4.0.0",
        "recharts-scale": "^0.4.4",
        "tiny-invariant": "^1.3.1",
        "victory-vendor": "^36.6.8"
      },
      "engines": {
        "node": ">=14"
      },
      "peerDependencies": {
        "react": "^16.0.0 || ^17.0.0 || ^18.0.0",
        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/recharts-scale": {
      "version": "0.4.5",
      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
      "license": "MIT",
      "dependencies": {
        "decimal.js-light": "^2.4.1"
      }
    },
    "node_modules/recharts/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/recursive-readdir": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/recursive-readdir/-/recursive-readdir-2.2.3.tgz",
      "integrity": "sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA==",
      "license": "MIT",
      "dependencies": {
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/redent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
      "license": "MIT",
      "dependencies": {
        "indent-string": "^4.0.0",
        "strip-indent": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/redux": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/redux/-/redux-5.0.1.tgz",
      "integrity": "sha512-M9/ELqF6fy8FwmkpnF0S3YKOqMyoWJ4+CS5Efg2ct3oY9daQvd/Pc71FpGZsVsbl3Cpb+IIcjBDUnnyBdQbq4w==",
      "license": "MIT"
    },
    "node_modules/redux-logger": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/redux-logger/-/redux-logger-3.0.6.tgz",
      "integrity": "sha512-JoCIok7bg/XpqA1JqCqXFypuqBbQzGQySrhFzewB7ThcnysTO30l4VCst86AuB9T9tuT03MAA56Jw2PNhRSNCg==",
      "license": "MIT",
      "dependencies": {
        "deep-diff": "^0.3.5"
      }
    },
    "node_modules/redux-persist": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/redux-persist/-/redux-persist-6.0.0.tgz",
      "integrity": "sha512-71LLMbUq2r02ng2We9S215LtPu3fY0KgaGE0k8WRgl6RkqxtGfl7HUozz1Dftwsb0D/5mZ8dwAaPbtnzfvbEwQ==",
      "license": "MIT",
      "peerDependencies": {
        "redux": ">4.0.0"
      }
    },
    "node_modules/redux-thunk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/redux-thunk/-/redux-thunk-3.1.0.tgz",
      "integrity": "sha512-NW2r5T6ksUKXCabzhL9z+h206HQw/NJkcLm1GPImRQ8IzfXwRGqjVhKJGauHirT0DAuyy6hjdnMZaRoAcy0Klw==",
      "license": "MIT",
      "peerDependencies": {
        "redux": "^5.0.0"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.6.tgz",
      "integrity": "sha512-fmfw4XgoDke3kdI6h4xcUz1dG8uaiv5q9gcEwLS4Pnth2kxT+GZ7YehS1JTMGBQmtV7Y4GFGbs2re2NqhdozUg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.1",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "globalthis": "^1.0.3",
        "which-builtin-type": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==",
      "license": "MIT"
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.1.1.tgz",
      "integrity": "sha512-X007RyZLsCJVVrjgEFVpLUTZwyOZk3oiL75ZcuYjlIWd6rNJtOjkBwQc5AsRrpbKVkxN6sklw/k/9m2jJYOf8Q==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.14.1",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
      "license": "MIT"
    },
    "node_modules/regenerator-transform": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.15.2.tgz",
      "integrity": "sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.8.4"
      }
    },
    "node_modules/regex-parser": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/regex-parser/-/regex-parser-2.3.0.tgz",
      "integrity": "sha512-TVILVSz2jY5D47F4mA4MppkBrafEaiUWJO/TcZHEIuI13AqoZMkK1WMA4Om1YkYbTx+9Ki1/tSUXbceyr9saRg==",
      "license": "MIT"
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.2",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.2.tgz",
      "integrity": "sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "set-function-name": "^2.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpu-core": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-5.3.2.tgz",
      "integrity": "sha512-RAM5FlZz+Lhmo7db9L298p2vHP5ZywrVXmVXpmAD9GuL5MPH6t9ROw1iA/wfHkQ76Qe7AaPF0nGuim96/IrQMQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/regjsgen": "^0.8.0",
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.1.0",
        "regjsparser": "^0.9.1",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/registry-auth-token": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-3.3.2.tgz",
      "integrity": "sha512-JL39c60XlzCVgNrO+qq68FoNb56w/m7JYvGR2jT5iR1xBrUA3Mfx5Twk5rqTThPmQKMWydGmq8oFtDlxfrmxnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "rc": "^1.1.6",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/registry-url": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-3.1.0.tgz",
      "integrity": "sha512-ZbgR5aZEdf4UKZVBPYIgaglBmSF2Hi94s2PcIHhRGFjKYu+chjJdYfHn4rt3hB6eCKLJ8giVIIfgMa1ehDfZKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "rc": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/regjsparser": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.9.1.tgz",
      "integrity": "sha512-dQUtn90WanSNl+7mQKcXAgZxvUe7Z0SqXlgzv0za4LwiUhyzBC58yQO3liFoUgu8GiJVInAhJjkj1N0EtQ5nkQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "jsesc": "~0.5.0"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/regjsparser/node_modules/jsesc": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-0.5.0.tgz",
      "integrity": "sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==",
      "bin": {
        "jsesc": "bin/jsesc"
      }
    },
    "node_modules/relateurl": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz",
      "integrity": "sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/remove-accents": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/remove-accents/-/remove-accents-0.5.0.tgz",
      "integrity": "sha512-8g3/Otx1eJaVD12e31UbJj1YzdtVvzH85HV7t+9MJYk/u3XmkOUJ5Ys9wQrf9PCPK8+xn4ymzqYCiZl6QWKn+A==",
      "license": "MIT"
    },
    "node_modules/renderkid": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/renderkid/-/renderkid-3.0.0.tgz",
      "integrity": "sha512-q/7VIQA8lmM1hF+jn+sFSPWGlMkSAeNYcPLmDQx2zzuiDfaLrOmumR8iaUKlenFgh0XRPIUeSPlH3A+AW3Z5pg==",
      "license": "MIT",
      "dependencies": {
        "css-select": "^4.1.3",
        "dom-converter": "^0.2.0",
        "htmlparser2": "^6.1.0",
        "lodash": "^4.17.21",
        "strip-ansi": "^6.0.1"
      }
    },
    "node_modules/requestidlecallback": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/requestidlecallback/-/requestidlecallback-0.3.0.tgz",
      "integrity": "sha512-TWHFkT7S9p7IxLC5A1hYmAYQx2Eb9w1skrXmQ+dS1URyvR8tenMLl4lHbqEOUnpEYxNKpkVMXUgknVpBZWXXfQ==",
      "license": "MIT"
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT"
    },
    "node_modules/reselect": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/reselect/-/reselect-5.1.1.tgz",
      "integrity": "sha512-K/BG6eIky/SBpzfHZv/dd+9JBFiS4SWV7FIujVyJRux6e45+73RaUHXLmIR1f7WOMaQ0U1km6qwklRQxpJJY0w==",
      "license": "MIT"
    },
    "node_modules/resize-observer-polyfill": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/resize-observer-polyfill/-/resize-observer-polyfill-1.5.1.tgz",
      "integrity": "sha512-LwZrotdHOo12nQuZlHEmtuXdqGoOD0OhaxopaNFxWzInpEgaLWoVuAMbTzixuosCx2nEG58ngzW3vxdWoxIgdg==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.8",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
      "integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-cwd/node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-url-loader": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-url-loader/-/resolve-url-loader-4.0.0.tgz",
      "integrity": "sha512-05VEMczVREcbtT7Bz+C+96eUO5HDNvdthIiMB34t7FcF8ehcu4wC0sSgPUubs3XW2Q3CNLJk/BJrCU9wVRymiA==",
      "license": "MIT",
      "dependencies": {
        "adjust-sourcemap-loader": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "loader-utils": "^2.0.0",
        "postcss": "^7.0.35",
        "source-map": "0.6.1"
      },
      "engines": {
        "node": ">=8.9"
      },
      "peerDependencies": {
        "rework": "1.0.1",
        "rework-visit": "1.0.0"
      },
      "peerDependenciesMeta": {
        "rework": {
          "optional": true
        },
        "rework-visit": {
          "optional": true
        }
      }
    },
    "node_modules/resolve-url-loader/node_modules/picocolors": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-0.2.1.tgz",
      "integrity": "sha512-cMlDqaLEqfSaW8Z7N5Jw+lyIW869EzT73/F5lhtY9cLGoVxSXznfgfXMO0Z5K0o0Q2TkTXq+0KFsdnSe3jDViA==",
      "license": "ISC"
    },
    "node_modules/resolve-url-loader/node_modules/postcss": {
      "version": "7.0.39",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-7.0.39.tgz",
      "integrity": "sha512-yioayjNbHn6z1/Bywyb2Y4s3yvDAeXGOyxqD+LnVOinq6Mdmd++SW2wUNVzavyyHxd6+DxzWGIuosg6P1Rj8uA==",
      "license": "MIT",
      "dependencies": {
        "picocolors": "^0.2.1",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/resolve-url-loader/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve.exports": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-1.1.1.tgz",
      "integrity": "sha512-/NtpHNDN7jWhAaQ9BvBUYZ6YTXsRBgfqWFWP7BZBaoMJO/I3G5OFzvTuWNlZC3aPjins1F+TNrLKsGbH4rfsRQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-axios": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/retry-axios/-/retry-axios-2.6.0.tgz",
      "integrity": "sha512-pOLi+Gdll3JekwuFjXO3fTq+L9lzMQGcSq7M5gIjExcl3Gu1hd4XXuf5o3+LuSBsaULQH7DiNbsqPd1chVpQGQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.7.0"
      },
      "peerDependencies": {
        "axios": "*"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "2.79.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.79.1.tgz",
      "integrity": "sha512-uKxbd0IhMZOhjAiD5oAFp7BqvkA4Dv47qpOCtaNvng4HBwdbWtdOh8f5nZNuk2rp51PMGk3bzfWu5oayNEuYnw==",
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rollup-plugin-terser": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/rollup-plugin-terser/-/rollup-plugin-terser-7.0.2.tgz",
      "integrity": "sha512-w3iIaU4OxcF52UUXiZNsNeuXIMDvFrr+ZXK6bFZ0Q60qyVfq4uLptoS4bbq3paG3x216eQllFZX7zt6TIImguQ==",
      "deprecated": "This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "jest-worker": "^26.2.1",
        "serialize-javascript": "^4.0.0",
        "terser": "^5.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.0.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/jest-worker": {
      "version": "26.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-26.6.2.tgz",
      "integrity": "sha512-KWYVV1c4i+jbMpaBC+U++4Va0cp8OisU185o73T1vo99hqi7w8tSJfUXYswwqqrjzwxa6KpRK54WhPvwf5w6PQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/serialize-javascript": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-4.0.0.tgz",
      "integrity": "sha512-GaNA54380uFefWghODBWEGisLZFj00nS5ACs6yHa9nLqlLpVLO8ChDGeKRjZnV4Nh4n0Qi7nhYZD/9fCPzEqkw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.2.tgz",
      "integrity": "sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "get-intrinsic": "^1.2.4",
        "has-symbols": "^1.0.3",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-regex-test": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.0.3.tgz",
      "integrity": "sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.6",
        "es-errors": "^1.3.0",
        "is-regex": "^1.1.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/sanitize.css": {
      "version": "13.0.0",
      "resolved": "https://registry.npmjs.org/sanitize.css/-/sanitize.css-13.0.0.tgz",
      "integrity": "sha512-ZRwKbh/eQ6w9vmTjkuG0Ioi3HBwPFce0O+v//ve+aOq1oeCy7jMV2qzzAlpsNuqpqCBjjriM1lbtZbF/Q8jVyA==",
      "license": "CC0-1.0"
    },
    "node_modules/sass-loader": {
      "version": "12.6.0",
      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-12.6.0.tgz",
      "integrity": "sha512-oLTaH0YCtX4cfnJZxKSLAyglED0naiYfNG1iXfU5w1LNZ+ukoA5DtyDIN5zmKVZwYNJP4KRc5Y3hkWga+7tYfA==",
      "license": "MIT",
      "dependencies": {
        "klona": "^2.0.4",
        "neo-async": "^2.6.2"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "fibers": ">= 3.1.0",
        "node-sass": "^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0",
        "sass": "^1.3.0",
        "sass-embedded": "*",
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "fibers": {
          "optional": true
        },
        "node-sass": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        }
      }
    },
    "node_modules/sax": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
      "license": "ISC"
    },
    "node_modules/saxes": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz",
      "integrity": "sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/schema-utils": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.2.0.tgz",
      "integrity": "sha512-L0jRsrPpjdckP3oPug3/VxNKt2trR8TcabrM6FOAAlvC/9Phcmm+cuAgTlxBqdBR1WJx7Naj9WHw+aOmheSVbw==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/schema-utils/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/schema-utils/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/schema-utils/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/scroll-into-view-if-needed": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/scroll-into-view-if-needed/-/scroll-into-view-if-needed-3.1.0.tgz",
      "integrity": "sha512-49oNpRjWRvnU8NyGVmUaYG4jtTkNonFZI86MmGRDqBphEK2EXT9gdEUoQPZhuBM8yWHxCWbobltqYO5M4XrUvQ==",
      "license": "MIT",
      "dependencies": {
        "compute-scroll-into-view": "^3.0.2"
      }
    },
    "node_modules/select-hose": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/select-hose/-/select-hose-2.0.0.tgz",
      "integrity": "sha512-mEugaLK+YfkijB4fx0e6kImuJdCIt2LxCRcbEYPqRGCs4F2ogyfZU5IAZRdjCP8JPq2AtdNoC/Dux63d9Kiryg==",
      "license": "MIT"
    },
    "node_modules/selfsigned": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/selfsigned/-/selfsigned-2.4.1.tgz",
      "integrity": "sha512-th5B4L2U+eGLq1TVh7zNRGBapioSORUeymIydxgFpwww9d2qyKvtuPU2jJuHvYAwwqi2Y596QBL3eEqcPEYL8Q==",
      "license": "MIT",
      "dependencies": {
        "@types/node-forge": "^1.3.0",
        "node-forge": "^1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver": {
      "version": "7.6.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/serve": {
      "version": "14.2.3",
      "resolved": "https://registry.npmjs.org/serve/-/serve-14.2.3.tgz",
      "integrity": "sha512-VqUFMC7K3LDGeGnJM9h56D3XGKb6KGgOw0cVNtA26yYXHCcpxf3xwCTUaQoWlVS7i8Jdh3GjQkOB23qsXyjoyQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@zeit/schemas": "2.36.0",
        "ajv": "8.12.0",
        "arg": "5.0.2",
        "boxen": "7.0.0",
        "chalk": "5.0.1",
        "chalk-template": "0.4.0",
        "clipboardy": "3.0.0",
        "compression": "1.7.4",
        "is-port-reachable": "4.0.0",
        "serve-handler": "6.1.5",
        "update-check": "1.5.4"
      },
      "bin": {
        "serve": "build/main.js"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/serve-handler": {
      "version": "6.1.5",
      "resolved": "https://registry.npmjs.org/serve-handler/-/serve-handler-6.1.5.tgz",
      "integrity": "sha512-ijPFle6Hwe8zfmBxJdE+5fta53fdIY0lHISJvuikXB3VYFafRjMRpOffSPvCYsbKyBA7pvy9oYr/BT1O3EArlg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bytes": "3.0.0",
        "content-disposition": "0.5.2",
        "fast-url-parser": "1.1.3",
        "mime-types": "2.1.18",
        "minimatch": "3.1.2",
        "path-is-inside": "1.0.2",
        "path-to-regexp": "2.2.1",
        "range-parser": "1.2.0"
      }
    },
    "node_modules/serve-handler/node_modules/mime-db": {
      "version": "1.33.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.33.0.tgz",
      "integrity": "sha512-BHJ/EKruNIqJf/QahvxwQZXKygOQ256myeN/Ew+THcAa5q+PjyTTMMeNQC4DZw5AwfvelsUrA6B67NKMqXDbzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-handler/node_modules/mime-types": {
      "version": "2.1.18",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.18.tgz",
      "integrity": "sha512-lc/aahn+t4/SWV/qcmumYjymLsWfN3ELhpmVuUFjgsORruuZPVSwAQryq+HHGvO/SI2KVX26bx+En+zhM8g8hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mime-db": "~1.33.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz",
      "integrity": "sha512-pXHfKNP4qujrtteMrSBb0rc8HJ9Ms/GrXwcUtUtD5s4ewDJI8bT3Cz2zTVRMKtri49pLx2e0Ya8ziP5Ya2pZZw==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "batch": "0.6.1",
        "debug": "2.6.9",
        "escape-html": "~1.0.3",
        "http-errors": "~1.6.2",
        "mime-types": "~2.1.17",
        "parseurl": "~1.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/serve-index/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/serve-index/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/http-errors": {
      "version": "1.6.3",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
      "integrity": "sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==",
      "license": "MIT",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.3",
        "setprototypeof": "1.1.0",
        "statuses": ">= 1.4.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==",
      "license": "ISC"
    },
    "node_modules/serve-index/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/serve-index/node_modules/setprototypeof": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
      "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==",
      "license": "ISC"
    },
    "node_modules/serve-index/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/serve/node_modules/ajv": {
      "version": "8.12.0",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.12.0.tgz",
      "integrity": "sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/serve/node_modules/chalk": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.0.1.tgz",
      "integrity": "sha512-Fo07WOYGqMfCWHOzSXOt2CxDbC6skS/jO9ynEcmpANMoPrD+W1r1K6Vx7iNm+AQmETU1Xr2t+n8nzkV9t6xh3w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.17.0 || ^14.13 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/serve/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
      "license": "MIT"
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shallowequal": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/shallowequal/-/shallowequal-1.1.0.tgz",
      "integrity": "sha512-y0m1JoUZSlPAjXVtPPW70aZWfIL/dSP7AFkRnniLCrK/8MDKog3TySTBmckD+RObVxH0v4Tox67+F14PdED2oQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shell-quote": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.1.tgz",
      "integrity": "sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "object-inspect": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
      "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
      "license": "MIT",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.17.1"
      }
    },
    "node_modules/socket.io-adapter/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-client": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-4.7.5.tgz",
      "integrity": "sha512-sJ/tqHOCe7Z50JCBCXrsY3I2k03iOiUe+tj1OmKeD2lXPiGH/RUCdTZFoqVyN7l1MnpIzPrGtLcijffmeouNlQ==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.2",
        "engine.io-client": "~6.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/sockjs": {
      "version": "0.3.24",
      "resolved": "https://registry.npmjs.org/sockjs/-/sockjs-0.3.24.tgz",
      "integrity": "sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==",
      "license": "MIT",
      "dependencies": {
        "faye-websocket": "^0.11.3",
        "uuid": "^8.3.2",
        "websocket-driver": "^0.7.4"
      }
    },
    "node_modules/sockjs/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/source-list-map": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/source-list-map/-/source-list-map-2.0.1.tgz",
      "integrity": "sha512-qnQ7gVMxGNxsiL4lEuJwe/To8UnK7fAnmbGEEH8RpLouuKbeEm0lhbQVFIrNSuB+G7tVrAlVsZgETT5nljf+Iw==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-explorer": {
      "version": "2.5.3",
      "resolved": "https://registry.npmjs.org/source-map-explorer/-/source-map-explorer-2.5.3.tgz",
      "integrity": "sha512-qfUGs7UHsOBE5p/lGfQdaAj/5U/GWYBw2imEpD6UQNkqElYonkow8t+HBL1qqIl3CuGZx7n8/CQo4x1HwSHhsg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "btoa": "^1.2.1",
        "chalk": "^4.1.0",
        "convert-source-map": "^1.7.0",
        "ejs": "^3.1.5",
        "escape-html": "^1.0.3",
        "glob": "^7.1.6",
        "gzip-size": "^6.0.0",
        "lodash": "^4.17.20",
        "open": "^7.3.1",
        "source-map": "^0.7.4",
        "temp": "^0.9.4",
        "yargs": "^16.2.0"
      },
      "bin": {
        "sme": "bin/cli.js",
        "source-map-explorer": "bin/cli.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/source-map-explorer/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/source-map-explorer/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/source-map-explorer/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/source-map-explorer/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/source-map-explorer/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-explorer/node_modules/open": {
      "version": "7.4.2",
      "resolved": "https://registry.npmjs.org/open/-/open-7.4.2.tgz",
      "integrity": "sha512-MVHddDVweXZF3awtlAS+6pgKLlm/JgxZ90+/NBurBoQctVOOB/zDdVjcyPzQ+0laDGbsWgrRkflI65sQeOgT9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-docker": "^2.0.0",
        "is-wsl": "^2.1.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/source-map-explorer/node_modules/source-map": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
      "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/source-map-explorer/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.0.tgz",
      "integrity": "sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-loader": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/source-map-loader/-/source-map-loader-3.0.2.tgz",
      "integrity": "sha512-BokxPoLjyl3iOrgkWaakaxqnelAJSS+0V+De0kKIq6lyWrXuiPgYTGp6z3iHmqljKAaLXwZa+ctD8GccRJeVvg==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "iconv-lite": "^0.6.3",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/source-map-support/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA==",
      "deprecated": "Please use @jridgewell/sourcemap-codec instead",
      "license": "MIT"
    },
    "node_modules/spdy": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/spdy/-/spdy-4.0.2.tgz",
      "integrity": "sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.0",
        "handle-thing": "^2.0.0",
        "http-deceiver": "^1.2.7",
        "select-hose": "^2.0.0",
        "spdy-transport": "^3.0.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/spdy-transport": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/spdy-transport/-/spdy-transport-3.0.0.tgz",
      "integrity": "sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.0",
        "detect-node": "^2.0.4",
        "hpack.js": "^2.1.6",
        "obuf": "^1.1.2",
        "readable-stream": "^3.0.6",
        "wbuf": "^1.7.3"
      }
    },
    "node_modules/split-on-first": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/split-on-first/-/split-on-first-1.1.0.tgz",
      "integrity": "sha512-43ZssAJaMusuKWL8sKUBQXHWOpq8d6CfN/u1p4gUzfJkM05C8rxTmYrkIPTXapZpORA6LkkzcUulJ8FqA7Uudw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/stable": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.8.tgz",
      "integrity": "sha512-ji9qxRnOVfcuLDySj9qzhGSEFVobyt1kIOSkj1qZzYLzq7Tos/oUUWvotUPQLlrsidqsK6tBH89Bc9kL5zHA6w==",
      "deprecated": "Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility",
      "license": "MIT"
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stackframe": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/stackframe/-/stackframe-1.3.4.tgz",
      "integrity": "sha512-oeVtt7eWQS+Na6F//S4kJ2K2VbRlS9D43mAlMyVpVWovy9o+jfgH8O9agzANzaiLjclA0oYzUXEM4PurhSUChw==",
      "license": "MIT"
    },
    "node_modules/static-eval": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/static-eval/-/static-eval-2.0.2.tgz",
      "integrity": "sha512-N/D219Hcr2bPjLxPiV+TQE++Tsmrady7TqAJugLy7Xk1EumfDWS/f5dtBbkRCGE7wKKXuYockQoj8Rm2/pVKyg==",
      "license": "MIT",
      "dependencies": {
        "escodegen": "^1.8.1"
      }
    },
    "node_modules/static-eval/node_modules/escodegen": {
      "version": "1.14.3",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.14.3.tgz",
      "integrity": "sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^4.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=4.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/static-eval/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/static-eval/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/static-eval/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.0.0.tgz",
      "integrity": "sha512-iCGQj+0l0HOdZ2AEeBADlsRC+vsnDsZsbdSiH1yNSjcfKM7fdpCMfqAL/dwF5BLiw/XhRft/Wax6zQbhq2BcjQ==",
      "license": "MIT",
      "dependencies": {
        "internal-slot": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/strict-uri-encode": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strict-uri-encode/-/strict-uri-encode-2.0.0.tgz",
      "integrity": "sha512-QwiXZgpRcKkhTj2Scnn++4PKtWsH0kpzZ62L2R6c/LUVYv7hVnZqcg2+sMuT6R7Jusu1vviK/MFsu6kNJfWlEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-convert": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/string-convert/-/string-convert-0.2.1.tgz",
      "integrity": "sha512-u/1tdPl4yQnPBjnVrmdLo9gtuLvELKsAoRapekWggdiQNvvvum+jYF329d84NAa660KQw7pB2n36KrIKVoXa3A==",
      "license": "MIT"
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-natural-compare": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/string-natural-compare/-/string-natural-compare-3.0.1.tgz",
      "integrity": "sha512-n3sPwynL1nwKi3WJ6AIsClwBMa0zTi54fn2oLU6ndfTSIO05xaznjSf15PcBZU6FNWbmN5Q6cxT4V5hGvB4taw==",
      "license": "MIT"
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/string-width/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/string-width/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/string.prototype.includes": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.0.tgz",
      "integrity": "sha512-E34CkBgyeqNDcrbU76cDjL5JLcVrtSdYq0MEh/B10r17pRP4ciHLwTgnuLV8Ay6cgEMLkcBkFCKyFZ43YldYzg==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.11",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.11.tgz",
      "integrity": "sha512-NUdh0aDavY2og7IbBPenWqR9exH+E26Sv8e0/eTe1tltDGZL+GtBkDAnnyBtmekfK6/Dq3MkcGtzXFEd1LQrtg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-symbols": "^1.0.3",
        "internal-slot": "^1.0.7",
        "regexp.prototype.flags": "^1.5.2",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.9.tgz",
      "integrity": "sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.8.tgz",
      "integrity": "sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/stringify-object": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.3.0.tgz",
      "integrity": "sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "get-own-enumerable-property-symbols": "^3.0.0",
        "is-obj": "^1.0.1",
        "is-regexp": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-comments/-/strip-comments-2.0.1.tgz",
      "integrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-indent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
      "integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
      "license": "MIT",
      "dependencies": {
        "min-indent": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/style-loader": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/style-loader/-/style-loader-3.3.4.tgz",
      "integrity": "sha512-0WqXzrsMTyb8yjZJHDqwmnwRJvhALK9LfRtRc6B4UTWe8AijYLZYZ9thuJTZc2VfQWINADW/j+LiJnfy2RoC1w==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/styled-components": {
      "version": "6.1.12",
      "resolved": "https://registry.npmjs.org/styled-components/-/styled-components-6.1.12.tgz",
      "integrity": "sha512-n/O4PzRPhbYI0k1vKKayfti3C/IGcPf+DqcrOB7O/ab9x4u/zjqraneT5N45+sIe87cxrCApXM8Bna7NYxwoTA==",
      "license": "MIT",
      "dependencies": {
        "@emotion/is-prop-valid": "1.2.2",
        "@emotion/unitless": "0.8.1",
        "@types/stylis": "4.2.5",
        "css-to-react-native": "3.2.0",
        "csstype": "3.1.3",
        "postcss": "8.4.38",
        "shallowequal": "1.1.0",
        "stylis": "4.3.2",
        "tslib": "2.6.2"
      },
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/styled-components"
      },
      "peerDependencies": {
        "react": ">= 16.8.0",
        "react-dom": ">= 16.8.0"
      }
    },
    "node_modules/styled-components/node_modules/@emotion/is-prop-valid": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.2.2.tgz",
      "integrity": "sha512-uNsoYd37AFmaCdXlg6EYD1KaPOaRWRByMCYzbKUX4+hhMfrxdVSelShywL4JVaAeM/eHUOSprYBQls+/neX3pw==",
      "license": "MIT",
      "dependencies": {
        "@emotion/memoize": "^0.8.1"
      }
    },
    "node_modules/styled-components/node_modules/@emotion/memoize": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.8.1.tgz",
      "integrity": "sha512-W2P2c/VRW1/1tLox0mVUalvnWXxavmv/Oum2aPsRcoDJuob75FC3Y8FbpfLwUegRcxINtGUMPq0tFCvYNTBXNA==",
      "license": "MIT"
    },
    "node_modules/styled-components/node_modules/@emotion/unitless": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.8.1.tgz",
      "integrity": "sha512-KOEGMu6dmJZtpadb476IsZBclKvILjopjUii3V+7MnXIQCYh8W3NgNcgwo21n9LXZX6EDIKvqfjYxXebDwxKmQ==",
      "license": "MIT"
    },
    "node_modules/styled-components/node_modules/postcss": {
      "version": "8.4.38",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.38.tgz",
      "integrity": "sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.7",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/styled-components/node_modules/stylis": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.3.2.tgz",
      "integrity": "sha512-bhtUjWd/z6ltJiQwg0dUfxEJ+W+jdqQd8TbWLWyeIJHlnsqmGLRFFd8e5mA0AZi/zx90smXRlN66YMTcaSFifg==",
      "license": "MIT"
    },
    "node_modules/styled-components/node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/stylehacks": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/stylehacks/-/stylehacks-5.1.1.tgz",
      "integrity": "sha512-sBpcd5Hx7G6seo7b1LkpttvTz7ikD0LlH5RmdcBNb6fFR0Fl7LQwHDFr300q4cwUqi+IYrFGmsIHieMBfnN/Bw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/stylis": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.2.0.tgz",
      "integrity": "sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==",
      "license": "MIT"
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/sucrase/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/sucrase/node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/sucrase/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/sucrase/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/supercluster": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/supercluster/-/supercluster-8.0.1.tgz",
      "integrity": "sha512-IiOea5kJ9iqzD2t7QJq/cREyLHTtSmUT6gQsweojg9WH2sYJqZK9SswTu6jrscO6D1G5v5vYZ9ru/eq85lXeZQ==",
      "license": "ISC",
      "dependencies": {
        "kdbush": "^4.0.2"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-hyperlinks": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/supports-hyperlinks/-/supports-hyperlinks-2.3.0.tgz",
      "integrity": "sha512-RpsAZlpWcDwOPQA22aCH4J0t7L8JmAvsCxfOSEwm7cQs3LshN36QaTkwd70DnBOXDWGssw2eUoc8CaRWT0XunA==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-hyperlinks/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-hyperlinks/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/svg-parser": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/svg-parser/-/svg-parser-2.0.4.tgz",
      "integrity": "sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==",
      "license": "MIT"
    },
    "node_modules/svgo": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-1.3.2.tgz",
      "integrity": "sha512-yhy/sQYxR5BkC98CY7o31VGsg014AKLEPxdfhora76l36hD9Rdy5NZA/Ocn6yayNPgSamYdtX2rFJdcv07AYVw==",
      "deprecated": "This SVGO version is no longer supported. Upgrade to v2.x.x.",
      "license": "MIT",
      "dependencies": {
        "chalk": "^2.4.1",
        "coa": "^2.0.2",
        "css-select": "^2.0.0",
        "css-select-base-adapter": "^0.1.1",
        "css-tree": "1.0.0-alpha.37",
        "csso": "^4.0.2",
        "js-yaml": "^3.13.1",
        "mkdirp": "~0.5.1",
        "object.values": "^1.1.0",
        "sax": "~1.2.4",
        "stable": "^0.1.8",
        "unquote": "~1.1.1",
        "util.promisify": "~1.0.0"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/svgo/node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/svgo/node_modules/css-select": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-2.1.0.tgz",
      "integrity": "sha512-Dqk7LQKpwLoH3VovzZnkzegqNSuAziQyNZUcrdDM401iY+R5NkGBXGmtO05/yaXQziALuPogeG0b7UAgjnTJTQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^3.2.1",
        "domutils": "^1.7.0",
        "nth-check": "^1.0.2"
      }
    },
    "node_modules/svgo/node_modules/css-what": {
      "version": "3.4.2",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-3.4.2.tgz",
      "integrity": "sha512-ACUm3L0/jiZTqfzRM3Hi9Q8eZqd6IK37mMWPLz9PJxkLWllYeRf+EHUSHYEtFop2Eqytaq1FizFVh7XfBnXCDQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/svgo/node_modules/dom-serializer": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.2.2.tgz",
      "integrity": "sha512-2/xPb3ORsQ42nHYiSunXkDjPLBaEj/xTwUO4B7XCZQTRk7EBtTOPaygh10YAAh2OI1Qrp6NWfpAhzswj0ydt9g==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "entities": "^2.0.0"
      }
    },
    "node_modules/svgo/node_modules/domutils": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-1.7.0.tgz",
      "integrity": "sha512-Lgd2XcJ/NjEw+7tFvfKxOzCYKZsdct5lczQ2ZaQY8Djz7pfAD3Gbp8ySJWtreII/vDlMVmxwa6pHmdxIYgttDg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "0",
        "domelementtype": "1"
      }
    },
    "node_modules/svgo/node_modules/domutils/node_modules/domelementtype": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.1.tgz",
      "integrity": "sha512-BSKB+TSpMpFI/HOxCNr1O8aMOTZ8hT3pM3GQ0w/mWRmkhEDSFJkkyzz4XQsBV44BChwGkrDfMyjVD0eA2aFV3w==",
      "license": "BSD-2-Clause"
    },
    "node_modules/svgo/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/svgo/node_modules/nth-check": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-1.0.2.tgz",
      "integrity": "sha512-WeBOdju8SnzPN5vTUJYxYUxLeXpCaVP5i5e0LF8fg7WORF2Wd7wFX/pk0tYZk7s8T+J7VLy0Da6J1+wCT0AtHg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "~1.0.0"
      }
    },
    "node_modules/symbol-tree": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
      "integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
      "license": "MIT"
    },
    "node_modules/synckit": {
      "version": "0.9.1",
      "resolved": "https://registry.npmjs.org/synckit/-/synckit-0.9.1.tgz",
      "integrity": "sha512-7gr8p9TQP6RAHusBOSLs46F4564ZrjV8xFmw5zCmgmhGUcw2hxsShhJ6CEiHQMgPDwAQ1fWHPM0ypc4RMAig4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@pkgr/core": "^0.1.0",
        "tslib": "^2.6.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/unts"
      }
    },
    "node_modules/tabbable": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/tabbable/-/tabbable-6.2.0.tgz",
      "integrity": "sha512-Cat63mxsVJlzYvN51JmVXIgNoUokrIaT2zLclCXjRd8boZ0004U4KCs/sToJ75C6sdlByWxpYnb5Boif1VSFew==",
      "license": "MIT"
    },
    "node_modules/tailwindcss": {
      "version": "3.4.10",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.10.tgz",
      "integrity": "sha512-KWZkVPm7yJRhdu4SRSl9d4AK2wM3a50UsvgHZO7xY77NQr2V+fIrEuoDGQcbvswWvFGbS2f6e+jC/6WJm1Dl0w==",
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.5.3",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.0",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.21.0",
        "lilconfig": "^2.1.0",
        "micromatch": "^4.0.5",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.0.0",
        "postcss": "^8.4.23",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.1",
        "postcss-nested": "^6.0.1",
        "postcss-selector-parser": "^6.0.11",
        "resolve": "^1.22.2",
        "sucrase": "^3.32.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tapable": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz",
      "integrity": "sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "license": "MIT",
      "dependencies": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/temp": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/temp/-/temp-0.9.4.tgz",
      "integrity": "sha512-yYrrsWnrXMcdsnu/7YMYAofM1ktpL5By7vZhf15CrXijWWrEYZks5AXBudalfSWJLlnen/QUJUB5aoB0kqZUGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mkdirp": "^0.5.1",
        "rimraf": "~2.6.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/temp/node_modules/rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/tempy": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tempy/-/tempy-0.6.0.tgz",
      "integrity": "sha512-G13vtMYPT/J8A4X2SjdtBTphZlrp1gKv6hZiOjw14RCWg6GbHuQBGtjlx75xLbYV/wEc0D7G5K4rxKP/cXk8Bw==",
      "license": "MIT",
      "dependencies": {
        "is-stream": "^2.0.0",
        "temp-dir": "^2.0.0",
        "type-fest": "^0.16.0",
        "unique-string": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/tempy/node_modules/type-fest": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.16.0.tgz",
      "integrity": "sha512-eaBzG6MxNzEn9kiwvtre90cXaNLkmadMWa1zQMs3XORCXNbsH/OewwbxC5ia9dCxIxnTAsSxXJaa/p5y8DlvJg==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terminal-link": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/terminal-link/-/terminal-link-2.1.1.tgz",
      "integrity": "sha512-un0FmiRUQNr5PJqy9kP7c40F5BOfpGlYTrxonDChEZB7pzZxRNp/bt+ymiy9/npwXya9KH99nJ/GXFIiUkYGFQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.2.1",
        "supports-hyperlinks": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terser": {
      "version": "5.31.6",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.31.6.tgz",
      "integrity": "sha512-PQ4DAriWzKj+qgehQ7LK5bQqCFNMmlhjR2PFFLuqGCpuCAauxemVBWwWOxo3UIwWQx8+Pr61Df++r76wDmkQBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.8.2",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.10",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.10.tgz",
      "integrity": "sha512-BKFPWlPDndPs+NGGCr1U59t0XScL5317Y0UReNrHaw9/FwhPENlq6bfgs+4yPfyP51vqC1bQ4rp1EfXW5ZSH9w==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.20",
        "jest-worker": "^27.4.5",
        "schema-utils": "^3.1.1",
        "serialize-javascript": "^6.0.1",
        "terser": "^5.26.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/terser-webpack-plugin/node_modules/schema-utils": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz",
      "integrity": "sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/terser/node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT"
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "license": "MIT"
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "license": "MIT",
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ==",
      "license": "MIT"
    },
    "node_modules/throttle-debounce": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/throttle-debounce/-/throttle-debounce-5.0.2.tgz",
      "integrity": "sha512-B71/4oyj61iNH0KeCamLuE2rmKuTO5byTOSVwECM5FA7TiAiAW+UqTKZ9ERueC4qvgSttUhdmq1mXC3kJqGX7A==",
      "license": "MIT",
      "engines": {
        "node": ">=12.22"
      }
    },
    "node_modules/thunky": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/thunky/-/thunky-1.1.0.tgz",
      "integrity": "sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA==",
      "license": "MIT"
    },
    "node_modules/tiny-case": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tiny-case/-/tiny-case-1.0.3.tgz",
      "integrity": "sha512-Eet/eeMhkO6TX8mnUteS9zgPbUMQa4I6Kkp5ORiBD5476/m+PIRiumP5tmh5ioJpH7k51Kehawy2UDfsnxxY8Q==",
      "license": "MIT"
    },
    "node_modules/tiny-invariant": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
      "license": "MIT"
    },
    "node_modules/tiny-warning": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tiny-warning/-/tiny-warning-1.0.3.tgz",
      "integrity": "sha512-lBN9zLN/oAf68o3zNXYrdCt1kP8WsiGW8Oo2ka41b2IM5JL/S1CTyX1rW0mb/zSuJun0ZUrDxx4sqvYS2FWzPA==",
      "license": "MIT"
    },
    "node_modules/tinycolor2": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/tinycolor2/-/tinycolor2-1.6.0.tgz",
      "integrity": "sha512-XPaBkWQJdsf3pLKJV9p4qN/S+fm2Oj8AIPo1BTUhg5oxkvm9+SVEGFdhyOz7tTdUTfvxMiAs4sp6/eZO2Ew+pw==",
      "license": "MIT"
    },
    "node_modules/tmp": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.3.tgz",
      "integrity": "sha512-nZD7m9iCPC5g0pYmcaxogYKggSfLsdxl8of3Q/oIbqCqLLIO9IAF0GWjX1z9NZRHPiXv8Wex4yDCaZsgEw0Y8w==",
      "license": "MIT",
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toggle-selection": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/toggle-selection/-/toggle-selection-1.0.6.tgz",
      "integrity": "sha512-BiZS+C1OS8g/q2RRbJmy59xpyghNBqrr6k5L/uKBGRsTfxmu3ffiRnd8mlGPUVayg8pvfi5urfnu8TU7DVOkLQ==",
      "license": "MIT"
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/toposort": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/toposort/-/toposort-2.0.2.tgz",
      "integrity": "sha512-0a5EOkAUp8D4moMi2W8ZF8jcga7BgZd91O/yabJCFY8az+XSzeGyTKs0Aoo897iV1Nj6guFq8orWDS96z91oGg==",
      "license": "MIT"
    },
    "node_modules/tough-cookie": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
      "integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.2.0",
        "url-parse": "^1.5.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tough-cookie/node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tough-cookie/node_modules/universalify": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
      "integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/tr46": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-2.1.0.tgz",
      "integrity": "sha512-15Ih7phfcdP5YxqiB+iDtLoaTz4Nd35+IiAv0kQ5FNKHzXgdWqPoTIqEDDJmXceQt4JZk6lVPT8lnDlPpGDppw==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tr46/node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/traverse": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz",
      "integrity": "sha512-iawgk0hLP3SxGKDfnDJf8wTz4p2qImnyihM5Hh/sGvQ3K37dPi/w8sRhdNIxYA1TwFwc5mDhIJq+O0RsvXBKdQ==",
      "license": "MIT/X11",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tryer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tryer/-/tryer-1.0.1.tgz",
      "integrity": "sha512-c3zayb8/kWWpycWYg87P71E1S1ZL6b6IJxfb5fvsUgsf0S2MVGaDhDXXjDMpdCpfWXqptc+4mXwmiy1ypXqRAA==",
      "license": "MIT"
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "license": "Apache-2.0"
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tsconfig-paths/node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tslib": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.7.0.tgz",
      "integrity": "sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==",
      "license": "0BSD"
    },
    "node_modules/tsutils": {
      "version": "3.21.0",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^1.8.1"
      },
      "engines": {
        "node": ">= 6"
      },
      "peerDependencies": {
        "typescript": ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta"
      }
    },
    "node_modules/tsutils/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.2.tgz",
      "integrity": "sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.1.tgz",
      "integrity": "sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-proto": "^1.0.3",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.2.tgz",
      "integrity": "sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-proto": "^1.0.3",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.6.tgz",
      "integrity": "sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-proto": "^1.0.3",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "license": "MIT",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "4.9.5",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.5.tgz",
      "integrity": "sha512-1FXk9E2Hm+QzZQ7z+McJiHL4NW1F2EzMu9Nq9i3zAaGqibafqYwCVU6WyWAuyQRRzOlxou8xZSyXLEN8oKj24g==",
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.0.2.tgz",
      "integrity": "sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.2",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.0.3",
        "which-boxed-primitive": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/underscore": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.12.1.tgz",
      "integrity": "sha512-hEQt0+ZLDVUMhebKxL4x1BTtDY7bavVofhZ9KZ4aI26X9SRaE+Y3m83XUL1UP2jn8ynjndwCCpEHdUG+9pP1Tw==",
      "license": "MIT"
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.0.tgz",
      "integrity": "sha512-yY5PpDlfVIU5+y/BSCxAJRBIS1Zc2dDG3Ujq+sR0U+JjUevW2JhocOF+soROYDSaAezOzOKuyyixhD6mBknSmQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "license": "MIT",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.1.0.tgz",
      "integrity": "sha512-qxkjQt6qjg/mYscYMC0XKRn3Rh0wFPlfxB0xkt9CfyTvpX1Ra0+rAmdX2QyAobptSEvuy4RtpPRui6XkV+8wjA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz",
      "integrity": "sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "license": "MIT",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unload": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/unload/-/unload-2.2.0.tgz",
      "integrity": "sha512-B60uB5TNBLtN6/LsgAf3udH9saB5p7gqJwcFfbOEZ8BcBHnGwCf6G/TGiEqkRAxX7zAFIUtzdrXQSdL3Q/wqNA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@babel/runtime": "^7.6.2",
        "detect-node": "^2.0.4"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unquote": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/unquote/-/unquote-1.1.1.tgz",
      "integrity": "sha512-vRCqFv6UhXpWxZPyGDh/F3ZpNv8/qo7w6iufLpQg9aKnQ71qM4B5KiI7Mia9COcjEhrO9LueHpMYjYzsWH3OIg==",
      "license": "MIT"
    },
    "node_modules/unzipper": {
      "version": "0.10.14",
      "resolved": "https://registry.npmjs.org/unzipper/-/unzipper-0.10.14.tgz",
      "integrity": "sha512-ti4wZj+0bQTiX2KmKWuwj7lhV+2n//uXEotUmGuQqrbVZSEGFMbI68+c6JCQ8aAmUWYvtHEz2A8K6wXvueR/6g==",
      "license": "MIT",
      "dependencies": {
        "big-integer": "^1.6.17",
        "binary": "~0.3.0",
        "bluebird": "~3.4.1",
        "buffer-indexof-polyfill": "~1.0.0",
        "duplexer2": "~0.1.4",
        "fstream": "^1.0.12",
        "graceful-fs": "^4.2.2",
        "listenercount": "~1.0.1",
        "readable-stream": "~2.3.6",
        "setimmediate": "~1.0.4"
      }
    },
    "node_modules/unzipper/node_modules/bluebird": {
      "version": "3.4.7",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.4.7.tgz",
      "integrity": "sha512-iD3898SR7sWVRHbiQv+sHUtHnMvC1o3nW5rAcqnq3uOn07DSAppZYUkIGslDz6gXC7HfunPe7YVBgoEJASPcHA==",
      "license": "MIT"
    },
    "node_modules/unzipper/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/unzipper/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/unzipper/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/unzipper/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/upath": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/upath/-/upath-1.2.0.tgz",
      "integrity": "sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==",
      "license": "MIT",
      "engines": {
        "node": ">=4",
        "yarn": "*"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.0.tgz",
      "integrity": "sha512-EdRAaAyk2cUE1wOf2DkEhzxqOQvFOoRJFNS6NeyJ01Gp2beMRpBAINjM2iDXE3KCuKhwnvHIQCJm6ThL2Z+HzQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.1.2",
        "picocolors": "^1.0.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/update-check": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/update-check/-/update-check-1.5.4.tgz",
      "integrity": "sha512-5YHsflzHP4t1G+8WGPlvKbJEbAJGCgw+Em+dGR1KmBUbr1J36SJBqlHLjR7oob7sco5hWHGQVcr9B2poIVDDTQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "registry-auth-token": "3.3.2",
        "registry-url": "3.1.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/uri-js/node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "license": "MIT",
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/use-memo-one": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/use-memo-one/-/use-memo-one-1.1.3.tgz",
      "integrity": "sha512-g66/K7ZQGYrI6dy8GLpVcMsBp4s17xNkYJVSMvTEevGy3nDxHOfE6z8BVE22+5G5x7t3+bhzrlTDB7ObrEE0cQ==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/use-sync-external-store": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/use-sync-external-store/-/use-sync-external-store-1.2.2.tgz",
      "integrity": "sha512-PElTlVMwpblvbNqQ82d2n6RjStvdSoNe9FG28kNfz3WiXilJm4DdNkEzRhCZuIDwY8U08WVihhGR5iRqAwfDiw==",
      "license": "MIT",
      "peerDependencies": {
        "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/util.promisify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/util.promisify/-/util.promisify-1.0.1.tgz",
      "integrity": "sha512-g9JpC/3He3bm38zsLupWryXHoEcS22YHthuPQSJdMy6KNrzIRzWqcsHzD/WUnqe45whVou4VIsPew37DoXWNrA==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.2",
        "has-symbols": "^1.0.1",
        "object.getownpropertydescriptors": "^2.1.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/utila": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/utila/-/utila-0.4.0.tgz",
      "integrity": "sha512-Z0DbgELS9/L/75wZbro8xAnT50pBVFQZ+hUEueGDU5FN51YSCYM+jdxsfCiHjwNP/4LCDD0i/graKpeBnOXKRA==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-8.1.1.tgz",
      "integrity": "sha512-FGtKtv3xIpR6BYhvgH8MI/y78oT7d8Au3ww4QIxymrCtZEh5b8gCw2siywE+puhEmuWKDtmfrvF5UlB298ut3w==",
      "license": "ISC",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/source-map": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
      "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/victory-vendor": {
      "version": "36.9.2",
      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
      "license": "MIT AND ISC",
      "dependencies": {
        "@types/d3-array": "^3.0.3",
        "@types/d3-ease": "^3.0.0",
        "@types/d3-interpolate": "^3.0.1",
        "@types/d3-scale": "^4.0.2",
        "@types/d3-shape": "^3.1.0",
        "@types/d3-time": "^3.0.0",
        "@types/d3-timer": "^3.0.0",
        "d3-array": "^3.1.6",
        "d3-ease": "^3.0.1",
        "d3-interpolate": "^3.0.1",
        "d3-scale": "^4.0.2",
        "d3-shape": "^3.1.0",
        "d3-time": "^3.0.0",
        "d3-timer": "^3.0.1"
      }
    },
    "node_modules/w3c-hr-time": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz",
      "integrity": "sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==",
      "deprecated": "Use your platform's native performance.now() and performance.timeOrigin.",
      "license": "MIT",
      "dependencies": {
        "browser-process-hrtime": "^1.0.0"
      }
    },
    "node_modules/w3c-xmlserializer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-2.0.0.tgz",
      "integrity": "sha512-4tzD0mF8iSiMiNs30BiLO3EpfGLZUT2MSX/G+o7ZywDzliWQ3OPtTZ0PTC3B3ca1UAf4cJMHB+2Bf56EriJuRA==",
      "license": "MIT",
      "dependencies": {
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/warning": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/warning/-/warning-4.0.3.tgz",
      "integrity": "sha512-rpJyN222KWIvHJ/F53XSZv0Zl/accqHR8et1kpaMTD/fLCRxtV8iX8czMzY7sVZupTI3zcUTg8eycS2kNF9l6w==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.0.0"
      }
    },
    "node_modules/watchpack": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.2.tgz",
      "integrity": "sha512-TnbFSbcOCcDgjZ4piURLCbJ3nJhznVh9kw6F6iokjiFPl8ONxe9A6nMDVXDiNbrSfLILs6vB07F7wLBrwPYzJw==",
      "license": "MIT",
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/wbuf": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/wbuf/-/wbuf-1.7.3.tgz",
      "integrity": "sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==",
      "license": "MIT",
      "dependencies": {
        "minimalistic-assert": "^1.0.0"
      }
    },
    "node_modules/web-vitals": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/web-vitals/-/web-vitals-2.1.4.tgz",
      "integrity": "sha512-sVWcwhU5mX6crfI5Vd2dC4qchyTqxV8URinzt25XqVh+bHEPGH4C3NPrNionCP7Obx59wrYEbNlw4Z8sjALzZg==",
      "license": "Apache-2.0"
    },
    "node_modules/webidl-conversions": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-6.1.0.tgz",
      "integrity": "sha512-qBIvFLGiBpLjfwmYAaHPXsn+ho5xZnGvyGvsarywGNc8VyQJUMHJ8OBKGGrPER0okBeMDaan4mNBlgBROxuI8w==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10.4"
      }
    },
    "node_modules/webpack": {
      "version": "5.94.0",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.94.0.tgz",
      "integrity": "sha512-KcsGn50VT+06JH/iunZJedYGUJS5FGjow8wb9c0v5n1Om8O1g4L6LjtfxwlXIATopoQu+vOXXa7gYisWxCoPyg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.5",
        "@webassemblyjs/ast": "^1.12.1",
        "@webassemblyjs/wasm-edit": "^1.12.1",
        "@webassemblyjs/wasm-parser": "^1.12.1",
        "acorn": "^8.7.1",
        "acorn-import-attributes": "^1.9.5",
        "browserslist": "^4.21.10",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.17.1",
        "es-module-lexer": "^1.2.1",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.11",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^3.2.0",
        "tapable": "^2.1.1",
        "terser-webpack-plugin": "^5.3.10",
        "watchpack": "^2.4.1",
        "webpack-sources": "^3.2.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-middleware": {
      "version": "5.3.4",
      "resolved": "https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-5.3.4.tgz",
      "integrity": "sha512-BVdTqhhs+0IfoeAf7EoH5WE+exCmqGerHfDM0IL096Px60Tq2Mn9MAbnaGUe6HiMa41KMCYF19gyzZmBcq/o4Q==",
      "license": "MIT",
      "dependencies": {
        "colorette": "^2.0.10",
        "memfs": "^3.4.3",
        "mime-types": "^2.1.31",
        "range-parser": "^1.2.1",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/webpack-dev-middleware/node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/webpack-dev-server": {
      "version": "4.15.2",
      "resolved": "https://registry.npmjs.org/webpack-dev-server/-/webpack-dev-server-4.15.2.tgz",
      "integrity": "sha512-0XavAZbNJ5sDrCbkpWL8mia0o5WPOd2YGtxrEiZkBK9FjLppIUK2TgxK6qGD2P3hUXTJNNPVibrerKcx5WkR1g==",
      "license": "MIT",
      "dependencies": {
        "@types/bonjour": "^3.5.9",
        "@types/connect-history-api-fallback": "^1.3.5",
        "@types/express": "^4.17.13",
        "@types/serve-index": "^1.9.1",
        "@types/serve-static": "^1.13.10",
        "@types/sockjs": "^0.3.33",
        "@types/ws": "^8.5.5",
        "ansi-html-community": "^0.0.8",
        "bonjour-service": "^1.0.11",
        "chokidar": "^3.5.3",
        "colorette": "^2.0.10",
        "compression": "^1.7.4",
        "connect-history-api-fallback": "^2.0.0",
        "default-gateway": "^6.0.3",
        "express": "^4.17.3",
        "graceful-fs": "^4.2.6",
        "html-entities": "^2.3.2",
        "http-proxy-middleware": "^2.0.3",
        "ipaddr.js": "^2.0.1",
        "launch-editor": "^2.6.0",
        "open": "^8.0.9",
        "p-retry": "^4.5.0",
        "rimraf": "^3.0.2",
        "schema-utils": "^4.0.0",
        "selfsigned": "^2.1.1",
        "serve-index": "^1.9.1",
        "sockjs": "^0.3.24",
        "spdy": "^4.0.2",
        "webpack-dev-middleware": "^5.3.4",
        "ws": "^8.13.0"
      },
      "bin": {
        "webpack-dev-server": "bin/webpack-dev-server.js"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.37.0 || ^5.0.0"
      },
      "peerDependenciesMeta": {
        "webpack": {
          "optional": true
        },
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-server/node_modules/ws": {
      "version": "8.18.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
      "integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-manifest-plugin": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/webpack-manifest-plugin/-/webpack-manifest-plugin-4.1.1.tgz",
      "integrity": "sha512-YXUAwxtfKIJIKkhg03MKuiFAD72PlrqCiwdwO4VEXdRO5V0ORCNwaOwAZawPZalCbmH9kBDmXnNeQOw+BIEiow==",
      "license": "MIT",
      "dependencies": {
        "tapable": "^2.0.0",
        "webpack-sources": "^2.2.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "peerDependencies": {
        "webpack": "^4.44.2 || ^5.47.0"
      }
    },
    "node_modules/webpack-manifest-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/webpack-manifest-plugin/node_modules/webpack-sources": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-2.3.1.tgz",
      "integrity": "sha512-y9EI9AO42JjEcrTJFOYmVywVZdKVUfOvDUPsJea5GIr1JOEGFVqwlY2K098fFoIjOkDzHn2AjRvM8dsBZu+gCA==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.1",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz",
      "integrity": "sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==",
      "license": "MIT",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/schema-utils": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz",
      "integrity": "sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-encoding": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz",
      "integrity": "sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==",
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.4.24"
      }
    },
    "node_modules/whatwg-encoding/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/whatwg-fetch": {
      "version": "3.6.20",
      "resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-3.6.20.tgz",
      "integrity": "sha512-EqhiFU6daOA8kpjOWTL0olhVOF3i7OrFzSYiGsEMB8GcXS+RrzauAERX65xMeNWVqxA6HXH2m69Z9LaKKdisfg==",
      "license": "MIT"
    },
    "node_modules/whatwg-mimetype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz",
      "integrity": "sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==",
      "license": "MIT"
    },
    "node_modules/whatwg-url": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-8.7.0.tgz",
      "integrity": "sha512-gAojqb/m9Q8a5IV96E3fHJM70AzCkgt4uXYX2O7EmuyOnLrViCQlsEBmF9UQIu3/aeAIp2U17rtbpZWNntQqdg==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.7.0",
        "tr46": "^2.1.0",
        "webidl-conversions": "^6.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz",
      "integrity": "sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.0.1",
        "is-boolean-object": "^1.1.0",
        "is-number-object": "^1.0.4",
        "is-string": "^1.0.5",
        "is-symbol": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.1.4.tgz",
      "integrity": "sha512-bppkmBSsHFmIMSl8BO9TbsyzsvGjVoppt8xUiGzwiu/bhDCGxnpOKCxgqj6GuyHE0mINMDecBFPlOm2hzY084w==",
      "license": "MIT",
      "dependencies": {
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.0.5",
        "is-finalizationregistry": "^1.0.2",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.1.4",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.0.2",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.15"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.15.tgz",
      "integrity": "sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/widest-line": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-4.0.1.tgz",
      "integrity": "sha512-o0cyEG0e8GPzT4iGHphIOh0cJOV8fivsXxddQasHPHfoZf1ZexrfeA21w2NaEN1RHE+fXlfISmOE8R9N3u3Qig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "string-width": "^5.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-background-sync": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-background-sync/-/workbox-background-sync-6.6.0.tgz",
      "integrity": "sha512-jkf4ZdgOJxC9u2vztxLuPT/UjlH7m/nWRQ/MgGL0v8BJHoZdVGJd18Kck+a0e55wGXdqyHO+4IQTk0685g4MUw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-broadcast-update": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-broadcast-update/-/workbox-broadcast-update-6.6.0.tgz",
      "integrity": "sha512-nm+v6QmrIFaB/yokJmQ/93qIJ7n72NICxIwQwe5xsZiV2aI93MGGyEyzOzDPVz5THEr5rC3FJSsO3346cId64Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-build": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-build/-/workbox-build-6.6.0.tgz",
      "integrity": "sha512-Tjf+gBwOTuGyZwMz2Nk/B13Fuyeo0Q84W++bebbVsfr9iLkDSo6j6PST8tET9HYA58mlRXwlMGpyWO8ETJiXdQ==",
      "license": "MIT",
      "dependencies": {
        "@apideck/better-ajv-errors": "^0.3.1",
        "@babel/core": "^7.11.1",
        "@babel/preset-env": "^7.11.0",
        "@babel/runtime": "^7.11.2",
        "@rollup/plugin-babel": "^5.2.0",
        "@rollup/plugin-node-resolve": "^11.2.1",
        "@rollup/plugin-replace": "^2.4.1",
        "@surma/rollup-plugin-off-main-thread": "^2.2.3",
        "ajv": "^8.6.0",
        "common-tags": "^1.8.0",
        "fast-json-stable-stringify": "^2.1.0",
        "fs-extra": "^9.0.1",
        "glob": "^7.1.6",
        "lodash": "^4.17.20",
        "pretty-bytes": "^5.3.0",
        "rollup": "^2.43.1",
        "rollup-plugin-terser": "^7.0.0",
        "source-map": "^0.8.0-beta.0",
        "stringify-object": "^3.3.0",
        "strip-comments": "^2.0.1",
        "tempy": "^0.6.0",
        "upath": "^1.2.0",
        "workbox-background-sync": "6.6.0",
        "workbox-broadcast-update": "6.6.0",
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-google-analytics": "6.6.0",
        "workbox-navigation-preload": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-range-requests": "6.6.0",
        "workbox-recipes": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0",
        "workbox-streams": "6.6.0",
        "workbox-sw": "6.6.0",
        "workbox-window": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@apideck/better-ajv-errors": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@apideck/better-ajv-errors/-/better-ajv-errors-0.3.6.tgz",
      "integrity": "sha512-P+ZygBLZtkp0qqOAJJVX4oX/sFo5JR3eBWwwuqHHhK0GIgQOKWrAfiAaWX0aArHkRWHMuggFEgAZNxVPwPZYaA==",
      "license": "MIT",
      "dependencies": {
        "json-schema": "^0.4.0",
        "jsonpointer": "^5.0.0",
        "leven": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "ajv": ">=8"
      }
    },
    "node_modules/workbox-build/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/workbox-build/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/workbox-build/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/workbox-build/node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/workbox-build/node_modules/source-map": {
      "version": "0.8.0-beta.0",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.8.0-beta.0.tgz",
      "integrity": "sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "whatwg-url": "^7.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/workbox-build/node_modules/tr46": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-1.0.1.tgz",
      "integrity": "sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/workbox-build/node_modules/webidl-conversions": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-4.0.2.tgz",
      "integrity": "sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==",
      "license": "BSD-2-Clause"
    },
    "node_modules/workbox-build/node_modules/whatwg-url": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-7.1.0.tgz",
      "integrity": "sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==",
      "license": "MIT",
      "dependencies": {
        "lodash.sortby": "^4.7.0",
        "tr46": "^1.0.1",
        "webidl-conversions": "^4.0.2"
      }
    },
    "node_modules/workbox-cacheable-response": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-cacheable-response/-/workbox-cacheable-response-6.6.0.tgz",
      "integrity": "sha512-JfhJUSQDwsF1Xv3EV1vWzSsCOZn4mQ38bWEBR3LdvOxSPgB65gAM6cS2CX8rkkKHRgiLrN7Wxoyu+TuH67kHrw==",
      "deprecated": "workbox-background-sync@6.6.0",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-core": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-core/-/workbox-core-6.6.0.tgz",
      "integrity": "sha512-GDtFRF7Yg3DD859PMbPAYPeJyg5gJYXuBQAC+wyrWuuXgpfoOrIQIvFRZnQ7+czTIQjIr1DhLEGFzZanAT/3bQ==",
      "license": "MIT"
    },
    "node_modules/workbox-expiration": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-expiration/-/workbox-expiration-6.6.0.tgz",
      "integrity": "sha512-baplYXcDHbe8vAo7GYvyAmlS4f6998Jff513L4XvlzAOxcl8F620O91guoJ5EOf5qeXG4cGdNZHkkVAPouFCpw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-google-analytics": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-google-analytics/-/workbox-google-analytics-6.6.0.tgz",
      "integrity": "sha512-p4DJa6OldXWd6M9zRl0H6vB9lkrmqYFkRQ2xEiNdBFp9U0LhsGO7hsBscVEyH9H2/3eZZt8c97NB2FD9U2NJ+Q==",
      "deprecated": "It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained",
      "license": "MIT",
      "dependencies": {
        "workbox-background-sync": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-navigation-preload": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-navigation-preload/-/workbox-navigation-preload-6.6.0.tgz",
      "integrity": "sha512-utNEWG+uOfXdaZmvhshrh7KzhDu/1iMHyQOV6Aqup8Mm78D286ugu5k9MFD9SzBT5TcwgwSORVvInaXWbvKz9Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-precaching": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-precaching/-/workbox-precaching-6.6.0.tgz",
      "integrity": "sha512-eYu/7MqtRZN1IDttl/UQcSZFkHP7dnvr/X3Vn6Iw6OsPMruQHiVjjomDFCNtd8k2RdjLs0xiz9nq+t3YVBcWPw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-range-requests": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-range-requests/-/workbox-range-requests-6.6.0.tgz",
      "integrity": "sha512-V3aICz5fLGq5DpSYEU8LxeXvsT//mRWzKrfBOIxzIdQnV/Wj7R+LyJVTczi4CQ4NwKhAaBVaSujI1cEjXW+hTw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-recipes": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-recipes/-/workbox-recipes-6.6.0.tgz",
      "integrity": "sha512-TFi3kTgYw73t5tg73yPVqQC8QQjxJSeqjXRO4ouE/CeypmP2O/xqmB/ZFBBQazLTPxILUQ0b8aeh0IuxVn9a6A==",
      "license": "MIT",
      "dependencies": {
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-routing": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-routing/-/workbox-routing-6.6.0.tgz",
      "integrity": "sha512-x8gdN7VDBiLC03izAZRfU+WKUXJnbqt6PG9Uh0XuPRzJPpZGLKce/FkOX95dWHRpOHWLEq8RXzjW0O+POSkKvw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-strategies": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-strategies/-/workbox-strategies-6.6.0.tgz",
      "integrity": "sha512-eC07XGuINAKUWDnZeIPdRdVja4JQtTuc35TZ8SwMb1ztjp7Ddq2CJ4yqLvWzFWGlYI7CG/YGqaETntTxBGdKgQ==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-streams": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-streams/-/workbox-streams-6.6.0.tgz",
      "integrity": "sha512-rfMJLVvwuED09CnH1RnIep7L9+mj4ufkTyDPVaXPKlhi9+0czCu+SJggWCIFbPpJaAZmp2iyVGLqS3RUmY3fxg==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0"
      }
    },
    "node_modules/workbox-sw": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-sw/-/workbox-sw-6.6.0.tgz",
      "integrity": "sha512-R2IkwDokbtHUE4Kus8pKO5+VkPHD2oqTgl+XJwh4zbF1HyjAbgNmK/FneZHVU7p03XUt9ICfuGDYISWG9qV/CQ==",
      "license": "MIT"
    },
    "node_modules/workbox-webpack-plugin": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-webpack-plugin/-/workbox-webpack-plugin-6.6.0.tgz",
      "integrity": "sha512-xNZIZHalboZU66Wa7x1YkjIqEy1gTR+zPM+kjrYJzqN7iurYZBctBLISyScjhkJKYuRrZUP0iqViZTh8rS0+3A==",
      "license": "MIT",
      "dependencies": {
        "fast-json-stable-stringify": "^2.1.0",
        "pretty-bytes": "^5.4.1",
        "upath": "^1.2.0",
        "webpack-sources": "^1.4.3",
        "workbox-build": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "webpack": "^4.4.0 || ^5.9.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/webpack-sources": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-1.4.3.tgz",
      "integrity": "sha512-lgTS3Xhv1lCOKo7SA5TjKXMjpSM4sBjNV5+q2bqesbSPs5FjGmU6jjtBSkX9b4qW87vDIsCIlUPOEhbZrMdjeQ==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.0",
        "source-map": "~0.6.1"
      }
    },
    "node_modules/workbox-window": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-window/-/workbox-window-6.6.0.tgz",
      "integrity": "sha512-L4N9+vka17d16geaJXXRjENLFldvkWy7JyGxElRD0JvBxvFEd8LOhr+uXCcar/NzAmIBRv9EZ+M+Qr4mOoBITw==",
      "license": "MIT",
      "dependencies": {
        "@types/trusted-types": "^2.0.2",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml-name-validator": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-3.0.0.tgz",
      "integrity": "sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==",
      "license": "Apache-2.0"
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
      "license": "MIT"
    },
    "node_modules/xmlhttprequest-ssl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/xmlhttprequest-ssl/-/xmlhttprequest-ssl-2.0.0.tgz",
      "integrity": "sha512-QKxVRxiRACQcVuQEYFsI1hhkrMlrXHPegbbd1yn9UHOmRxY+si12nQYzri3vbzt8VdTTRviqcKxcyllFas5z2A==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/yargs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/yup": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/yup/-/yup-1.4.0.tgz",
      "integrity": "sha512-wPbgkJRCqIf+OHyiTBQoJiP5PFuAXaWiJK6AmYkzQAh5/c2K9hzSApBZG5wV9KoKSePF7sAxmNSvh/13YHkFDg==",
      "license": "MIT",
      "dependencies": {
        "property-expr": "^2.0.5",
        "tiny-case": "^1.0.3",
        "toposort": "^2.0.2",
        "type-fest": "^2.19.0"
      }
    },
    "node_modules/yup/node_modules/type-fest": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-2.19.0.tgz",
      "integrity": "sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zip-stream": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/zip-stream/-/zip-stream-4.1.1.tgz",
      "integrity": "sha512-9qv4rlDiopXg4E69k+vMHjNN63YFMe9sZMrdlvKnCjlCRWeCBswPPMPUfx+ipsAWq1LXHe70RcbaHdJJpS6hyQ==",
      "license": "MIT",
      "dependencies": {
        "archiver-utils": "^3.0.4",
        "compress-commons": "^4.1.2",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/zip-stream/node_modules/archiver-utils": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-3.0.4.tgz",
      "integrity": "sha512-KVgf4XQVrTjhyWmx6cte4RxonPLR9onExufI1jhvw/MQ4BB6IsZD5gT8Lq+u/+pRkWna/6JoHpiQioaqFP5Rzw==",
      "license": "MIT",
      "dependencies": {
        "glob": "^7.2.3",
        "graceful-fs": "^4.2.0",
        "lazystream": "^1.0.0",
        "lodash.defaults": "^4.2.0",
        "lodash.difference": "^4.5.0",
        "lodash.flatten": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.union": "^4.6.0",
        "normalize-path": "^3.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    }
  }
}

================
File: frontend/package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@axe-core/react": "^4.9.1",
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@googlemaps/google-maps-services-js": "^3.4.0",
    "@mui/icons-material": "^5.16.7",
    "@mui/material": "^5.16.7",
    "@mui/x-date-pickers": "^7.15.0",
    "@mui/x-date-pickers-pro": "^7.15.0",
    "@react-google-maps/api": "^2.19.3",
    "@reduxjs/toolkit": "^2.2.7",
    "@sentry/react": "^8.27.0",
    "@tanstack/react-query": "^5.51.23",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/moment": "^2.13.0",
    "@types/node": "^16.18.89",
    "@types/react": "^18.2.64",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-color": "^3.0.12",
    "@types/react-datepicker": "^4.19.6",
    "@types/react-dom": "^18.2.21",
    "@types/react-redux": "^7.1.33",
    "@types/redux-logger": "^3.0.13",
    "@types/styled-components": "^5.1.34",
    "@types/yup": "^0.32.0",
    "antd": "^5.20.2",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.6",
    "chart.js": "^4.4.4",
    "date-fns": "^3.6.0",
    "dayjs": "^1.11.13",
    "exceljs": "^4.4.0",
    "focus-trap-react": "^10.2.3",
    "formik": "^2.4.6",
    "framer-motion": "^11.3.28",
    "leaflet": "^1.9.4",
    "moment": "^2.30.1",
    "moment-timezone": "^0.5.45",
    "react": "^18.3.1",
    "react-beautiful-dnd": "^13.1.1",
    "react-chartjs-2": "^5.2.0",
    "react-color": "^2.19.3",
    "react-colorful": "^5.6.1",
    "react-datepicker": "^7.3.0",
    "react-dom": "^18.3.1",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.53.0",
    "react-intl": "^6.6.8",
    "react-leaflet": "^4.2.1",
    "react-leaflet-markercluster": "^3.0.0-rc1",
    "react-query": "^3.39.3",
    "react-redux": "^9.1.2",
    "react-router-dom": "^6.26.1",
    "react-scripts": "5.0.1",
    "react-toastify": "^10.0.5",
    "recharts": "^2.12.7",
    "redux": "^5.0.1",
    "redux-logger": "^3.0.6",
    "redux-persist": "^6.0.0",
    "reselect": "^5.1.1",
    "socket.io": "^4.7.5",
    "socket.io-client": "^4.7.5",
    "styled-components": "^6.1.12",
    "tailwindcss": "^3.4.10",
    "typescript": "^4.9.5",
    "uuid": "^10.0.0",
    "web-vitals": "^2.1.4",
    "yup": "^1.4.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint --ext .js,.jsx,.ts,.tsx src/",
    "lint:fix": "eslint --fix --ext .js,.jsx,.ts,.tsx src/",
    "type-check": "tsc --noEmit",
    "format": "prettier --write 'src/**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc",
    "analyze": "source-map-explorer 'build/static/js/*.js'",
    "start:prod": "npm run build && serve -s build",
    "test:coverage": "npm test -- --coverage --watchAll=false"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/chart.js": "^2.9.41",
    "@types/crypto-js": "^4.2.2",
    "@types/express": "^4.17.21",
    "@types/leaflet": "^1.9.12",
    "@types/react-leaflet": "^3.0.0",
    "@types/react-leaflet-markercluster": "^3.0.4",
    "@types/socket.io-client": "^3.0.0",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^5.62.0",
    "@typescript-eslint/parser": "^5.62.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "prettier": "^3.3.3",
    "serve": "^14.2.1",
    "source-map-explorer": "^2.5.3"
  }
}

================
File: frontend/postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: frontend/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: frontend/scan-types.ts
================
import * as ts from 'typescript';
import * as fs from 'fs';
import * as path from 'path';

const projectRoot = './src';

function getTypeReferences(sourceFile: ts.SourceFile): Set<string> {
  const typeReferences = new Set<string>();

  function visit(node: ts.Node) {
    if (ts.isTypeReferenceNode(node)) {
      typeReferences.add(node.typeName.getText());
    }
    ts.forEachChild(node, visit);
  }

  visit(sourceFile);
  return typeReferences;
}

function scanDirectory(directory: string): void {
  const files = fs.readdirSync(directory);

  files.forEach(file => {
    const filePath = path.join(directory, file);
    const stats = fs.statSync(filePath);

    if (stats.isDirectory()) {
      scanDirectory(filePath);
    } else if (stats.isFile() && (file.endsWith('.ts') || file.endsWith('.tsx'))) {
      const sourceFile = ts.createSourceFile(
        filePath,
        fs.readFileSync(filePath, 'utf-8'),
        ts.ScriptTarget.Latest,
        true
      );

      const typeRefs = getTypeReferences(sourceFile);
      console.log(`File: ${filePath}`);
      console.log('Type references:', Array.from(typeRefs));
      console.log('---');
    }
  });
}

scanDirectory(projectRoot);

================
File: frontend/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  mode: 'jit',
  content: ['./src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: 'var(--color-primary)',
        secondary: 'var(--color-secondary)',
        accent: 'var(--color-accent)',
      },
      fontFamily: {
        primary: 'var(--font-primary)',
        secondary: 'var(--font-secondary)',
      },
    },
  },
  plugins: [],
};

================
File: frontend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "baseUrl": "./src",
    "paths": {
      "*": ["*"]
    },
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "exclude": ["node_modules", "build", "dist"]
}

================
File: frontend/type-references.txt
================
Need to install the following packages:
ts-node@10.9.2
Ok to proceed? (y)

================
File: tablet-app/src/components/TabletOrderManager.tsx
================
import { handleError } from '../utils/errorHandler';

// ... existing code ...

const handleCancelOrder = async (orderId: string) => {
  try {
    await dispatch(cancelOrder(orderId));
    Alert.alert('Success', 'Order cancelled successfully');
  } catch (error) {
    handleError(error);
  }
};

================
File: tablet-app/src/screens/LoginScreen.tsx
================
import React, { useState } from 'react';
import { View, TextInput, Button, StyleSheet } from 'react-native';
import { login } from '../services/authService';

const LoginScreen = ({ navigation }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    try {
      const user = await login(username, password);
      // Store user data in state management (e.g., Redux)
      navigation.navigate('TabletOrderManager');
    } catch (error) {
      console.error('Login failed:', error);
    }
  };

  return (
    <View style={styles.container}>
      <TextInput
        style={styles.input}
        placeholder="Username"
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title="Login" onPress={handleLogin} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
});

export default LoginScreen;

================
File: tablet-app/src/services/authService.ts
================
import axios from 'axios';

const API_URL = 'http://your-backend-url.com/api';

export const login = async (username: string, password: string) => {
  const response = await axios.post(`${API_URL}/auth/login`, { username, password });
  return response.data;
};

export const logout = async () => {
  // Implement logout logic
};

================
File: tablet-app/src/utils/errorHandler.ts
================
import { Alert } from 'react-native';

export const handleError = (error: any) => {
  let message = 'An unexpected error occurred';
  
  if (error.response) {
    message = error.response.data.message || message;
  } else if (error.message) {
    message = error.message;
  }

  Alert.alert('Error', message);
};

================
File: tablet-app/src/utils/socket.ts
================
import { io } from 'socket.io-client';

const SOCKET_URL = 'http://your-backend-url.com';

export const socket = io(SOCKET_URL);

export const connectSocket = () => {
  socket.connect();
};

export const disconnectSocket = () => {
  socket.disconnect();
};

================
File: tablet-app/App.tsx
================
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { Provider } from 'react-redux';
import { store } from './src/redux/store';
import LoginScreen from './src/screens/LoginScreen';
import { TabletOrderManager } from './src/components/TabletOrderManager';

const Stack = createStackNavigator();

export default function App() {
  return (
    <Provider store={store}>
      <NavigationContainer>
        <Stack.Navigator initialRouteName="Login">
          <Stack.Screen name="Login" component={LoginScreen} />
          <Stack.Screen name="TabletOrderManager" component={TabletOrderManager} />
        </Stack.Navigator>
      </NavigationContainer>
    </Provider>
  );
}

================
File: .dockerignore
================
.dockerignore
node_modules
npm-debug.log
yarn-debug.log
yarn-error.log
.git
.gitignore
.vscode
*.md
*.log
*.tmp
*.temp
.DS_Store
Thumbs.db

# Exclude test and documentation
test
tests
__tests__
docs
*.test.js
*.spec.js

# Exclude build artifacts
dist
build
*.bundle.js

# Exclude environment files
.env
.env.local
.env.*.local

# Exclude any database files
*.sqlite

# Exclude large media files (adjust as needed)
*.mp4
*.mov
*.avi
*.mkv

# Exclude backup files
*.bak
*.backup
*~

# Exclude any other large or unnecessary directories
cursor-project

# Node modules
**/node_modules

# Git directories
**/.git

# Frontend specific
frontend/.cache
frontend/build
frontend/dist

# Backend specific
backend/dist
backend/build
backend/.git

# Common large directories
**/typescript
**/@mui
**/@faker-js
**/antd
**/@ant-design
**/@formatjs
**/date-fns
**/exceljs
**/rxjs
**/twilio

# Cache and temporary files
**/.cache
**/tmp
**/temp

# Log files
**/*.log

# Environment files
**/.env*

# Editor directories
**/.vscode
**/.idea

# OS files
**/.DS_Store
**/Thumbs.db

# Docker files
Dockerfile
docker-compose.yml
docker-compose.yml.save*
.dockerignore

# Other project files (adjust as needed)
README.md
LICENSE
*.md

================
File: .gitignore
================
backend/logs/*.log

================
File: docker-compose.yml
================
version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - db
      - redis

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  db:
    image: postgres:14
    environment:
      - POSTGRES_DB=pos
      - POSTGRES_USER=bryce
      - POSTGRES_PASSWORD=1234
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql

  redis:
    image: redis:7

  nginx:
    image: nginx:stable
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend

volumes:
  db_data:

================
File: Dockerfile
================
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "run", "dev"]

================
File: nginx.conf
================
events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name 64.23.178.198;

        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            proxy_pass http://backend:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

================
File: package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "description": "Backend for POS system",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "jest",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "migrate": "sequelize-cli db:migrate",
    "seed": "sequelize-cli db:seed:all"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.27.1",
    "@faker-js/faker": "^8.4.1",
    "@googlemaps/google-maps-services-js": "^3.4.0",
    "@types/react-color": "^3.0.12",
    "axios": "^1.7.4",
    "axios-rate-limit": "^1.3.0",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^2.4.3",
    "connect-redis": "^7.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "exceljs": "^4.4.0",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.0",
    "express-session": "^1.18.0",
    "express-validator": "^7.2.0",
    "geo-tz": "^8.0.2",
    "helmet": "^7.1.0",
    "http-proxy-middleware": "^3.0.0",
    "ioredis": "^5.4.1",
    "joi": "^17.13.3",
    "jsonwebtoken": "^9.0.2",
    "moment-timezone": "^0.5.45",
    "mongoose": "^8.5.3",
    "multer": "^1.4.5-lts.1",
    "node-cache": "^5.1.2",
    "node-cron": "^3.0.3",
    "node-schedule": "^2.1.1",
    "p-retry": "^4.6.1",
    "pdfkit": "^0.15.0",
    "pg": "^8.12.0",
    "prom-client": "^15.1.3",
    "react-color": "^2.19.3",
    "sequelize": "^6.37.3",
    "socket.io": "^4.7.5",
    "speakeasy": "^2.0.0",
    "stripe": "^16.8.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "twilio": "^5.2.2",
    "umzug": "^3.8.1",
    "winston": "^3.14.2",
    "worldpay": "^0.0.4"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/eslint-parser": "^7.25.1",
    "@babel/preset-env": "^7.25.4",
    "@eslint/js": "^9.9.1",
    "cypress": "^13.13.3",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-security": "^3.0.1",
    "jest": "^29.7.0",
    "nodemon": "^3.0.1",
    "prettier": "^3.3.3",
    "sequelize-cli": "^6.6.2",
    "supertest": "^7.0.0"
  },
  "engines": {
    "node": ">=14.0.0"
  }
}

================
File: schema.sql
================
--
-- PostgreSQL database dump
--

-- Dumped from database version 14.13 (Debian 14.13-1.pgdg120+1)
-- Dumped by pg_dump version 14.13 (Debian 14.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: Analytics; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Analytics" (
    id integer NOT NULL,
    "locationId" integer NOT NULL,
    date timestamp with time zone NOT NULL,
    "totalSales" double precision NOT NULL,
    "customerCount" integer NOT NULL,
    "averageTicket" double precision NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL,
    "metricType" character varying(255) NOT NULL,
    "testGroup" character varying(255),
    "conversionRate" double precision
);


ALTER TABLE public."Analytics" OWNER TO bryce;

--
-- Name: Analytics_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Analytics_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Analytics_id_seq" OWNER TO bryce;

--
-- Name: Analytics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Analytics_id_seq" OWNED BY public."Analytics".id;


--
-- Name: AuditLogs; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."AuditLogs" (
    id integer NOT NULL,
    action character varying(255) NOT NULL,
    details jsonb,
    "timestamp" timestamp with time zone DEFAULT now(),
    "userId" integer,
    "createdAt" timestamp with time zone DEFAULT now(),
    "updatedAt" timestamp with time zone DEFAULT now()
);


ALTER TABLE public."AuditLogs" OWNER TO bryce;

--
-- Name: AuditLogs_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."AuditLogs_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."AuditLogs_id_seq" OWNER TO bryce;

--
-- Name: AuditLogs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."AuditLogs_id_seq" OWNED BY public."AuditLogs".id;


--
-- Name: Brandings; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Brandings" (
    id integer NOT NULL,
    "primaryColor" character varying(255),
    "secondaryColor" character varying(255),
    "tertiaryColor" character varying(255),
    "fontColor" character varying(255),
    "secondaryFontColor" character varying(255),
    "fontFamily" character varying(255) DEFAULT 'Arial'::character varying,
    "logoUrl" character varying(255),
    "backgroundUrl" character varying(255),
    "faviconUrl" character varying(255),
    "createdAt" timestamp with time zone DEFAULT now(),
    "updatedAt" timestamp with time zone DEFAULT now()
);


ALTER TABLE public."Brandings" OWNER TO bryce;

--
-- Name: Brandings_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Brandings_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Brandings_id_seq" OWNER TO bryce;

--
-- Name: Brandings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Brandings_id_seq" OWNED BY public."Brandings".id;


--
-- Name: CateringOrders; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."CateringOrders" (
    id integer NOT NULL,
    "guestId" integer NOT NULL,
    "houseAccountId" integer,
    "locationId" integer NOT NULL,
    "scheduledDate" timestamp with time zone NOT NULL,
    "totalPrice" double precision NOT NULL,
    "orderDetails" jsonb NOT NULL,
    status character varying(255) DEFAULT 'scheduled'::character varying NOT NULL,
    "deliveryMethod" character varying(255) NOT NULL,
    "driverTip" double precision,
    "kitchenTip" double precision,
    "cateringFees" jsonb,
    "commissaryKitchenId" integer,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL,
    "serviceFee" double precision,
    "packagingFee" double precision,
    "deliveryFee" double precision,
    "taxExempt" boolean DEFAULT false NOT NULL,
    "taxIdNumber" character varying(255)
);


ALTER TABLE public."CateringOrders" OWNER TO bryce;

--
-- Name: CateringOrders_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."CateringOrders_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."CateringOrders_id_seq" OWNER TO bryce;

--
-- Name: CateringOrders_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."CateringOrders_id_seq" OWNED BY public."CateringOrders".id;


--
-- Name: Clients; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Clients" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    "phoneNumber" character varying(255),
    address character varying(255),
    subdomain character varying(255) NOT NULL,
    "primaryColor" character varying(255) DEFAULT '#ff9800'::character varying NOT NULL,
    "secondaryColor" character varying(255) DEFAULT '#ff5722'::character varying NOT NULL,
    "accentColor" character varying(255) DEFAULT '#00bcd4'::character varying NOT NULL,
    branding jsonb,
    active boolean DEFAULT true NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "primaryFont" character varying(255) DEFAULT 'Roboto, sans-serif'::character varying NOT NULL,
    "secondaryFont" character varying(255) DEFAULT 'Open Sans, sans-serif'::character varying NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Clients" OWNER TO bryce;

--
-- Name: Clients_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Clients_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Clients_id_seq" OWNER TO bryce;

--
-- Name: Clients_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Clients_id_seq" OWNED BY public."Clients".id;


--
-- Name: Discounts; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Discounts" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    "vanityName" character varying(255),
    "vanityDescription" character varying(255),
    type character varying(255) NOT NULL,
    value double precision,
    conditions jsonb,
    "startDate" timestamp with time zone,
    "endDate" timestamp with time zone,
    status character varying(255) DEFAULT 'active'::character varying NOT NULL,
    "walletId" integer,
    "locationId" integer,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Discounts" OWNER TO bryce;

--
-- Name: Discounts_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Discounts_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Discounts_id_seq" OWNER TO bryce;

--
-- Name: Discounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Discounts_id_seq" OWNED BY public."Discounts".id;


--
-- Name: GlobalSettings; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."GlobalSettings" (
    id integer NOT NULL,
    key character varying(255) NOT NULL,
    value character varying(255) NOT NULL,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL
);


ALTER TABLE public."GlobalSettings" OWNER TO bryce;

--
-- Name: GlobalSettings_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."GlobalSettings_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."GlobalSettings_id_seq" OWNER TO bryce;

--
-- Name: GlobalSettings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."GlobalSettings_id_seq" OWNED BY public."GlobalSettings".id;


--
-- Name: Guests; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Guests" (
    id integer NOT NULL,
    "clientId" integer NOT NULL,
    email character varying(255) NOT NULL,
    "firstName" character varying(255) NOT NULL,
    "lastName" character varying(255) NOT NULL,
    "phoneNumber" character varying(255),
    "loyaltyPoints" integer DEFAULT 0,
    "createdAt" timestamp with time zone DEFAULT now(),
    "updatedAt" timestamp with time zone DEFAULT now(),
    "engagementScore" integer DEFAULT 0 NOT NULL,
    phone character varying(255)
);


ALTER TABLE public."Guests" OWNER TO bryce;

--
-- Name: Guests_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Guests_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Guests_id_seq" OWNER TO bryce;

--
-- Name: Guests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Guests_id_seq" OWNED BY public."Guests".id;


--
-- Name: HouseAccounts; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."HouseAccounts" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    "clientId" integer NOT NULL,
    balance double precision DEFAULT '0'::double precision NOT NULL,
    "creditLimit" double precision,
    status character varying(255) DEFAULT 'active'::character varying NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."HouseAccounts" OWNER TO bryce;

--
-- Name: HouseAccounts_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."HouseAccounts_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."HouseAccounts_id_seq" OWNER TO bryce;

--
-- Name: HouseAccounts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."HouseAccounts_id_seq" OWNED BY public."HouseAccounts".id;


--
-- Name: Locations; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Locations" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    address character varying(255),
    city character varying(255),
    state character varying(255),
    "zipCode" character varying(255),
    country character varying(255),
    "clientId" integer NOT NULL,
    "isOpen" boolean DEFAULT true,
    "diningOptions" character varying(255)[],
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Locations" OWNER TO bryce;

--
-- Name: Locations_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Locations_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Locations_id_seq" OWNER TO bryce;

--
-- Name: Locations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Locations_id_seq" OWNED BY public."Locations".id;


--
-- Name: LoyaltyRewards; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."LoyaltyRewards" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    "pointsRequired" integer NOT NULL,
    type character varying(255) NOT NULL,
    value double precision,
    "startDate" timestamp with time zone,
    "endDate" timestamp with time zone,
    status character varying(255) DEFAULT 'active'::character varying NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."LoyaltyRewards" OWNER TO bryce;

--
-- Name: LoyaltyRewards_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."LoyaltyRewards_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."LoyaltyRewards_id_seq" OWNER TO bryce;

--
-- Name: LoyaltyRewards_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."LoyaltyRewards_id_seq" OWNED BY public."LoyaltyRewards".id;


--
-- Name: MenuGroups; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."MenuGroups" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    "menuId" integer NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."MenuGroups" OWNER TO bryce;

--
-- Name: MenuGroups_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."MenuGroups_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."MenuGroups_id_seq" OWNER TO bryce;

--
-- Name: MenuGroups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."MenuGroups_id_seq" OWNED BY public."MenuGroups".id;


--
-- Name: MenuItemModifiers; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."MenuItemModifiers" (
    id integer NOT NULL,
    "menuItemId" integer,
    "modifierId" integer,
    "isDefault" boolean DEFAULT false NOT NULL,
    removable boolean DEFAULT true NOT NULL,
    "createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public."MenuItemModifiers" OWNER TO bryce;

--
-- Name: MenuItemModifiers_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."MenuItemModifiers_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."MenuItemModifiers_id_seq" OWNER TO bryce;

--
-- Name: MenuItemModifiers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."MenuItemModifiers_id_seq" OWNED BY public."MenuItemModifiers".id;


--
-- Name: MenuItems; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."MenuItems" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    price double precision NOT NULL,
    "menuGroupId" integer NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL,
    "posItemId" character varying(255),
    image character varying(255)
);


ALTER TABLE public."MenuItems" OWNER TO bryce;

--
-- Name: MenuItems_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."MenuItems_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."MenuItems_id_seq" OWNER TO bryce;

--
-- Name: MenuItems_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."MenuItems_id_seq" OWNED BY public."MenuItems".id;


--
-- Name: Menus; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Menus" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    "clientId" integer NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Menus" OWNER TO bryce;

--
-- Name: Menus_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Menus_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Menus_id_seq" OWNER TO bryce;

--
-- Name: Menus_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Menus_id_seq" OWNED BY public."Menus".id;


--
-- Name: Modifiers; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Modifiers" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    price double precision,
    "posModifierId" character varying(255),
    "createdAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public."Modifiers" OWNER TO bryce;

--
-- Name: Modifiers_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Modifiers_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Modifiers_id_seq" OWNER TO bryce;

--
-- Name: Modifiers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Modifiers_id_seq" OWNED BY public."Modifiers".id;


--
-- Name: Orders; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Orders" (
    id integer NOT NULL,
    "orderDate" timestamp with time zone NOT NULL,
    "totalAmount" double precision NOT NULL,
    "guestId" integer NOT NULL,
    "locationId" integer NOT NULL,
    "loyaltyPoints" integer DEFAULT 0 NOT NULL,
    discount double precision DEFAULT '0'::double precision,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Orders" OWNER TO bryce;

--
-- Name: Orders_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Orders_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Orders_id_seq" OWNER TO bryce;

--
-- Name: Orders_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Orders_id_seq" OWNED BY public."Orders".id;


--
-- Name: PosProfiles; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."PosProfiles" (
    id integer NOT NULL,
    "locationId" integer,
    provider character varying(255) NOT NULL,
    "apiBaseUrl" character varying(255),
    "clientSecret" character varying(255),
    "contentType" character varying(255) DEFAULT 'application/json'::character varying,
    "roundingOption" character varying(255),
    "testProfile" boolean DEFAULT false NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL,
    "syncFrequency" integer DEFAULT 24
);


ALTER TABLE public."PosProfiles" OWNER TO bryce;

--
-- Name: PosProfiles_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."PosProfiles_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."PosProfiles_id_seq" OWNER TO bryce;

--
-- Name: PosProfiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."PosProfiles_id_seq" OWNED BY public."PosProfiles".id;


--
-- Name: Reports; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Reports" (
    id integer NOT NULL,
    "reportName" character varying(255) NOT NULL,
    description text,
    "createdAt" timestamp with time zone DEFAULT now(),
    "updatedAt" timestamp with time zone DEFAULT now()
);


ALTER TABLE public."Reports" OWNER TO bryce;

--
-- Name: Reports_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Reports_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Reports_id_seq" OWNER TO bryce;

--
-- Name: Reports_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Reports_id_seq" OWNED BY public."Reports".id;


--
-- Name: Roles; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Roles" (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    level integer DEFAULT 1 NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Roles" OWNER TO bryce;

--
-- Name: Roles_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Roles_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Roles_id_seq" OWNER TO bryce;

--
-- Name: Roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Roles_id_seq" OWNED BY public."Roles".id;


--
-- Name: SequelizeMeta; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."SequelizeMeta" (
    name character varying(255) NOT NULL
);


ALTER TABLE public."SequelizeMeta" OWNER TO bryce;

--
-- Name: Users; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Users" (
    id integer NOT NULL,
    "firstName" character varying(255) NOT NULL,
    "lastName" character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    "roleId" integer NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Users" OWNER TO bryce;

--
-- Name: Users_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Users_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Users_id_seq" OWNER TO bryce;

--
-- Name: Users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Users_id_seq" OWNED BY public."Users".id;


--
-- Name: Wallets; Type: TABLE; Schema: public; Owner: bryce
--

CREATE TABLE public."Wallets" (
    id integer NOT NULL,
    balance double precision DEFAULT '0'::double precision NOT NULL,
    "guestId" integer NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public."Wallets" OWNER TO bryce;

--
-- Name: Wallets_id_seq; Type: SEQUENCE; Schema: public; Owner: bryce
--

CREATE SEQUENCE public."Wallets_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public."Wallets_id_seq" OWNER TO bryce;

--
-- Name: Wallets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: bryce
--

ALTER SEQUENCE public."Wallets_id_seq" OWNED BY public."Wallets".id;


--
-- Name: Analytics id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Analytics" ALTER COLUMN id SET DEFAULT nextval('public."Analytics_id_seq"'::regclass);


--
-- Name: AuditLogs id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."AuditLogs" ALTER COLUMN id SET DEFAULT nextval('public."AuditLogs_id_seq"'::regclass);


--
-- Name: Brandings id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Brandings" ALTER COLUMN id SET DEFAULT nextval('public."Brandings_id_seq"'::regclass);


--
-- Name: CateringOrders id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders" ALTER COLUMN id SET DEFAULT nextval('public."CateringOrders_id_seq"'::regclass);


--
-- Name: Clients id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Clients" ALTER COLUMN id SET DEFAULT nextval('public."Clients_id_seq"'::regclass);


--
-- Name: Discounts id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Discounts" ALTER COLUMN id SET DEFAULT nextval('public."Discounts_id_seq"'::regclass);


--
-- Name: GlobalSettings id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."GlobalSettings" ALTER COLUMN id SET DEFAULT nextval('public."GlobalSettings_id_seq"'::regclass);


--
-- Name: Guests id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Guests" ALTER COLUMN id SET DEFAULT nextval('public."Guests_id_seq"'::regclass);


--
-- Name: HouseAccounts id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."HouseAccounts" ALTER COLUMN id SET DEFAULT nextval('public."HouseAccounts_id_seq"'::regclass);


--
-- Name: Locations id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Locations" ALTER COLUMN id SET DEFAULT nextval('public."Locations_id_seq"'::regclass);


--
-- Name: LoyaltyRewards id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."LoyaltyRewards" ALTER COLUMN id SET DEFAULT nextval('public."LoyaltyRewards_id_seq"'::regclass);


--
-- Name: MenuGroups id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuGroups" ALTER COLUMN id SET DEFAULT nextval('public."MenuGroups_id_seq"'::regclass);


--
-- Name: MenuItemModifiers id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItemModifiers" ALTER COLUMN id SET DEFAULT nextval('public."MenuItemModifiers_id_seq"'::regclass);


--
-- Name: MenuItems id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItems" ALTER COLUMN id SET DEFAULT nextval('public."MenuItems_id_seq"'::regclass);


--
-- Name: Menus id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Menus" ALTER COLUMN id SET DEFAULT nextval('public."Menus_id_seq"'::regclass);


--
-- Name: Modifiers id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Modifiers" ALTER COLUMN id SET DEFAULT nextval('public."Modifiers_id_seq"'::regclass);


--
-- Name: Orders id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Orders" ALTER COLUMN id SET DEFAULT nextval('public."Orders_id_seq"'::regclass);


--
-- Name: PosProfiles id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."PosProfiles" ALTER COLUMN id SET DEFAULT nextval('public."PosProfiles_id_seq"'::regclass);


--
-- Name: Reports id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Reports" ALTER COLUMN id SET DEFAULT nextval('public."Reports_id_seq"'::regclass);


--
-- Name: Roles id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Roles" ALTER COLUMN id SET DEFAULT nextval('public."Roles_id_seq"'::regclass);


--
-- Name: Users id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Users" ALTER COLUMN id SET DEFAULT nextval('public."Users_id_seq"'::regclass);


--
-- Name: Wallets id; Type: DEFAULT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Wallets" ALTER COLUMN id SET DEFAULT nextval('public."Wallets_id_seq"'::regclass);


--
-- Name: Analytics Analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Analytics"
    ADD CONSTRAINT "Analytics_pkey" PRIMARY KEY (id);


--
-- Name: AuditLogs AuditLogs_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."AuditLogs"
    ADD CONSTRAINT "AuditLogs_pkey" PRIMARY KEY (id);


--
-- Name: Brandings Brandings_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Brandings"
    ADD CONSTRAINT "Brandings_pkey" PRIMARY KEY (id);


--
-- Name: CateringOrders CateringOrders_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT "CateringOrders_pkey" PRIMARY KEY (id);


--
-- Name: Clients Clients_email_key; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Clients"
    ADD CONSTRAINT "Clients_email_key" UNIQUE (email);


--
-- Name: Clients Clients_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Clients"
    ADD CONSTRAINT "Clients_pkey" PRIMARY KEY (id);


--
-- Name: Clients Clients_subdomain_key; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Clients"
    ADD CONSTRAINT "Clients_subdomain_key" UNIQUE (subdomain);


--
-- Name: Discounts Discounts_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Discounts"
    ADD CONSTRAINT "Discounts_pkey" PRIMARY KEY (id);


--
-- Name: GlobalSettings GlobalSettings_key_key; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."GlobalSettings"
    ADD CONSTRAINT "GlobalSettings_key_key" UNIQUE (key);


--
-- Name: GlobalSettings GlobalSettings_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."GlobalSettings"
    ADD CONSTRAINT "GlobalSettings_pkey" PRIMARY KEY (id);


--
-- Name: Guests Guests_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Guests"
    ADD CONSTRAINT "Guests_pkey" PRIMARY KEY (id);


--
-- Name: HouseAccounts HouseAccounts_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."HouseAccounts"
    ADD CONSTRAINT "HouseAccounts_pkey" PRIMARY KEY (id);


--
-- Name: Locations Locations_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Locations"
    ADD CONSTRAINT "Locations_pkey" PRIMARY KEY (id);


--
-- Name: LoyaltyRewards LoyaltyRewards_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."LoyaltyRewards"
    ADD CONSTRAINT "LoyaltyRewards_pkey" PRIMARY KEY (id);


--
-- Name: MenuGroups MenuGroups_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuGroups"
    ADD CONSTRAINT "MenuGroups_pkey" PRIMARY KEY (id);


--
-- Name: MenuItemModifiers MenuItemModifiers_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItemModifiers"
    ADD CONSTRAINT "MenuItemModifiers_pkey" PRIMARY KEY (id);


--
-- Name: MenuItems MenuItems_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItems"
    ADD CONSTRAINT "MenuItems_pkey" PRIMARY KEY (id);


--
-- Name: Menus Menus_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Menus"
    ADD CONSTRAINT "Menus_pkey" PRIMARY KEY (id);


--
-- Name: Modifiers Modifiers_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Modifiers"
    ADD CONSTRAINT "Modifiers_pkey" PRIMARY KEY (id);


--
-- Name: Orders Orders_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Orders"
    ADD CONSTRAINT "Orders_pkey" PRIMARY KEY (id);


--
-- Name: PosProfiles PosProfiles_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."PosProfiles"
    ADD CONSTRAINT "PosProfiles_pkey" PRIMARY KEY (id);


--
-- Name: Reports Reports_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Reports"
    ADD CONSTRAINT "Reports_pkey" PRIMARY KEY (id);


--
-- Name: Roles Roles_name_key; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Roles"
    ADD CONSTRAINT "Roles_name_key" UNIQUE (name);


--
-- Name: Roles Roles_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Roles"
    ADD CONSTRAINT "Roles_pkey" PRIMARY KEY (id);


--
-- Name: SequelizeMeta SequelizeMeta_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."SequelizeMeta"
    ADD CONSTRAINT "SequelizeMeta_pkey" PRIMARY KEY (name);


--
-- Name: Users Users_email_key; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Users"
    ADD CONSTRAINT "Users_email_key" UNIQUE (email);


--
-- Name: Users Users_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Users"
    ADD CONSTRAINT "Users_pkey" PRIMARY KEY (id);


--
-- Name: Wallets Wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Wallets"
    ADD CONSTRAINT "Wallets_pkey" PRIMARY KEY (id);


--
-- Name: Analytics Analytics_locationId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Analytics"
    ADD CONSTRAINT "Analytics_locationId_fkey" FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: AuditLogs AuditLogs_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."AuditLogs"
    ADD CONSTRAINT "AuditLogs_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."Users"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: CateringOrders CateringOrders_commissaryKitchenId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT "CateringOrders_commissaryKitchenId_fkey" FOREIGN KEY ("commissaryKitchenId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: CateringOrders CateringOrders_guestId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT "CateringOrders_guestId_fkey" FOREIGN KEY ("guestId") REFERENCES public."Guests"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: CateringOrders CateringOrders_houseAccountId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT "CateringOrders_houseAccountId_fkey" FOREIGN KEY ("houseAccountId") REFERENCES public."HouseAccounts"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: CateringOrders CateringOrders_locationId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT "CateringOrders_locationId_fkey" FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Discounts Discounts_locationId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Discounts"
    ADD CONSTRAINT "Discounts_locationId_fkey" FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: Discounts Discounts_walletId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Discounts"
    ADD CONSTRAINT "Discounts_walletId_fkey" FOREIGN KEY ("walletId") REFERENCES public."Wallets"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: Guests Guests_clientId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Guests"
    ADD CONSTRAINT "Guests_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES public."Clients"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: HouseAccounts HouseAccounts_clientId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."HouseAccounts"
    ADD CONSTRAINT "HouseAccounts_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES public."Clients"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Locations Locations_clientId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Locations"
    ADD CONSTRAINT "Locations_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES public."Clients"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MenuGroups MenuGroups_menuId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuGroups"
    ADD CONSTRAINT "MenuGroups_menuId_fkey" FOREIGN KEY ("menuId") REFERENCES public."Menus"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MenuItemModifiers MenuItemModifiers_menuItemId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItemModifiers"
    ADD CONSTRAINT "MenuItemModifiers_menuItemId_fkey" FOREIGN KEY ("menuItemId") REFERENCES public."MenuItems"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MenuItemModifiers MenuItemModifiers_modifierId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItemModifiers"
    ADD CONSTRAINT "MenuItemModifiers_modifierId_fkey" FOREIGN KEY ("modifierId") REFERENCES public."Modifiers"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MenuItems MenuItems_menuGroupId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItems"
    ADD CONSTRAINT "MenuItems_menuGroupId_fkey" FOREIGN KEY ("menuGroupId") REFERENCES public."MenuGroups"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Menus Menus_clientId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Menus"
    ADD CONSTRAINT "Menus_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES public."Clients"(id);


--
-- Name: Orders Orders_guestId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Orders"
    ADD CONSTRAINT "Orders_guestId_fkey" FOREIGN KEY ("guestId") REFERENCES public."Guests"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Orders Orders_locationId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Orders"
    ADD CONSTRAINT "Orders_locationId_fkey" FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: PosProfiles PosProfiles_locationId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."PosProfiles"
    ADD CONSTRAINT "PosProfiles_locationId_fkey" FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Users Users_roleId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Users"
    ADD CONSTRAINT "Users_roleId_fkey" FOREIGN KEY ("roleId") REFERENCES public."Roles"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Wallets Wallets_guestId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."Wallets"
    ADD CONSTRAINT "Wallets_guestId_fkey" FOREIGN KEY ("guestId") REFERENCES public."Guests"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: CateringOrders fk_catering_orders_guest; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT fk_catering_orders_guest FOREIGN KEY ("guestId") REFERENCES public."Guests"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: CateringOrders fk_catering_orders_house_account; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT fk_catering_orders_house_account FOREIGN KEY ("houseAccountId") REFERENCES public."HouseAccounts"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: CateringOrders fk_catering_orders_location; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."CateringOrders"
    ADD CONSTRAINT fk_catering_orders_location FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: MenuItemModifiers fk_menuItemModifier_menuItem; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItemModifiers"
    ADD CONSTRAINT "fk_menuItemModifier_menuItem" FOREIGN KEY ("menuItemId") REFERENCES public."MenuItems"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MenuItemModifiers fk_menuItemModifier_modifier; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."MenuItemModifiers"
    ADD CONSTRAINT "fk_menuItemModifier_modifier" FOREIGN KEY ("modifierId") REFERENCES public."Modifiers"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: PosProfiles fk_pos_profiles_location; Type: FK CONSTRAINT; Schema: public; Owner: bryce
--

ALTER TABLE ONLY public."PosProfiles"
    ADD CONSTRAINT fk_pos_profiles_location FOREIGN KEY ("locationId") REFERENCES public."Locations"(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- PostgreSQL database dump complete
--

================
File: seedData.js
================
const bcrypt = require('bcrypt');
const db = require('./src/models');

const seedData = async () => {
  try {
    // 1. Create a Super Admin User
    const adminPassword = await bcrypt.hash('Password123', 10);
    const superAdmin = await db.User.create({
      username: 'Bryce',
      email: 'bryce@vegas-pos.com',
      phone: '7021234567',
      password: adminPassword,
      roleId: 1, // Assuming roleId 1 is for Super Admin
      verified: true,
    });

    // 2. Create Client Profiles and Locations
    const vegasVibes = await db.ClientProfile.create({
      name: 'Vegas Vibes Restaurant Group',
      branding: {
        primaryColor: '#1a1a2e',
        secondaryColor: '#ff007f',
        accentColor: '#00f0ff',
        font: 'Montserrat',
        logoUrl: 'https://example.com/neon-logo.png',
      },
    });

    const locations = await db.Location.bulkCreate([
      {
        name: 'Las Vegas Strip',
        address: '1234 Vegas Blvd, Las Vegas, NV 89109',
        clientId: vegasVibes.id,
      },
      {
        name: 'Downtown Vegas',
        address: '567 Fremont St, Las Vegas, NV 89101',
        clientId: vegasVibes.id,
      },
      {
        name: 'Summerlin',
        address: '890 Red Rock Canyon Rd, Las Vegas, NV 89135',
        clientId: vegasVibes.id,
      },
    ]);

    // 3. Create Sample Menu and Items
    const sampleMenu = await db.Menu.create({
      name: 'Vegas Vibes Menu',
      description: 'Experience the best neon-lit dishes in Vegas!',
      clientId: vegasVibes.id,
    });

    const menuGroups = await db.MenuGroup.bulkCreate([
      {
        name: 'Appetizers',
        description: 'Start your night with a bang!',
        menuId: sampleMenu.id,
        posGroupId: 'veg-app-001',
        imageUrl: 'https://example.com/appetizers.png',
      },
      {
        name: 'Main Course',
        description: 'Indulge in our main attractions!',
        menuId: sampleMenu.id,
        posGroupId: 'veg-main-001',
        imageUrl: 'https://example.com/main-course.png',
      },
      {
        name: 'Drinks',
        description: 'Sip on the night with our signature cocktails!',
        menuId: sampleMenu.id,
        posGroupId: 'veg-drinks-001',
        imageUrl: 'https://example.com/drinks.png',
      },
    ]);

    await db.MenuItem.bulkCreate([
      {
        name: 'Neon Nachos',
        description: 'Bright and cheesy with a Vegas twist.',
        basePrice: 12.99,
        pointsPrice: 129,
        posItemId: 'veg-nachos-001',
        imageUrl: 'https://example.com/neon-nachos.png',
        menuGroupId: menuGroups[0].id,
      },
      {
        name: 'Vegas Strip Steak',
        description: 'Juicy, tender, and cooked to perfection.',
        basePrice: 29.99,
        pointsPrice: 299,
        posItemId: 'veg-steak-001',
        imageUrl: 'https://example.com/strip-steak.png',
        menuGroupId: menuGroups[1].id,
      },
      {
        name: 'Signature Glow Cocktail',
        description: 'Glows in the dark with a sweet, tangy taste.',
        basePrice: 15.99,
        pointsPrice: 159,
        posItemId: 'veg-cocktail-001',
        imageUrl: 'https://example.com/glow-cocktail.png',
        menuGroupId: menuGroups[2].id,
      },
    ]);

    console.log('Seed data created successfully!');
  } catch (error) {
    console.error('Error seeding data:', error);
  }
};

seedData();

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "esModuleInterop": true,
    "jsx": "react",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "moduleResolution": "node",
    "target": "es5",
    "allowJs": true,
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["src"]
}
